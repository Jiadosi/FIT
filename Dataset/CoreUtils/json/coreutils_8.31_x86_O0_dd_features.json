{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    rax ; __gmon_start__"], ["call~rax"]], [1, 0, 2, 1, 0, 4, 1, 1, 0, 1, 0.0, ["sub     rsp, 8; _init", "mov     rax, cs:__gmon_start___ptr", "test    rax, rax", "jz      short loc_1A3A"], ["sub~rsp,0", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0.0, ["add     rsp, 8", "retn"], ["add~rsp,0", "retn"]]], "func_feature": [1, 1, 2, 0, 3, 3, 1, 7, 0.0, 1, 2], "succs": [[2], [0, 2], []], "fname": "init_proc", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0.0, ["push    cs:qword_215D50", "jmp     cs:qword_215D58"], ["push~<TAG>", "jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 76, 2, 0.0, 2, 0], "succs": [[]], "fname": "sub_1A40", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getenv_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "getenv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sigprocmask_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "sigprocmask", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:raise_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "raise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:free_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 28, 1, 0.0, 1, 0], "succs": [[]], "fname": "free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:abort_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 31, 1, 0.0, 1, 0], "succs": [[]], "fname": "abort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__errno_location_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 77, 1, 0.0, 1, 0], "succs": [[]], "fname": "__errno_location", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fdatasync_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fdatasync", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:error_at_line_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "error_at_line", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strncmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "strncmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:_exit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "_exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__fpending_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__fpending", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:toupper_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "toupper", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sigaction_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "sigaction", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:localeconv_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "localeconv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fcntl_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 7, 1, 0.0, 1, 0], "succs": [[]], "fname": "fcntl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:clock_gettime_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "clock_gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:write_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "write", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:textdomain_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "textdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fclose_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fclose", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:bindtextdomain_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "bindtextdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__ctype_get_mb_cur_max_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__ctype_get_mb_cur_max", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strlen_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 16, 1, 0.0, 1, 0], "succs": [[]], "fname": "strlen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__stack_chk_fail_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 37, 1, 0.0, 1, 0], "succs": [[]], "fname": "__stack_chk_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getopt_long_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "getopt_long", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mbrtowc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "mbrtowc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:gettext_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 102, 1, 0.0, 1, 0], "succs": [[]], "fname": "gettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:dup2_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "dup2", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strchr_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "strchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:printf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 7, 1, 0.0, 1, 0], "succs": [[]], "fname": "printf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:snprintf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 53, 1, 0.0, 1, 0], "succs": [[]], "fname": "snprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strrchr_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strrchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ftruncate_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "ftruncate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:lseek_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 8, 1, 0.0, 1, 0], "succs": [[]], "fname": "lseek", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__assert_fail_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__assert_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memset_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 6, 1, 0.0, 1, 0], "succs": [[]], "fname": "memset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ioctl_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "ioctl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:close_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "close", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:posix_fadvise_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "posix_fadvise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:read_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "read", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memcmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "memcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fputs_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 25, 1, 0.0, 1, 0], "succs": [[]], "fname": "fputs_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ferror_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "ferror_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:calloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "calloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strcmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "strcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fputc_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "fputc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fprintf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 22, 1, 0.0, 1, 0], "succs": [[]], "fname": "fprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sigemptyset_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "sigemptyset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memcpy_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 20, 1, 0.0, 1, 0], "succs": [[]], "fname": "memcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fileno_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "fileno", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:tolower_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "tolower", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:putc_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "putc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:malloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 13, 1, 0.0, 1, 0], "succs": [[]], "fname": "malloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fflush_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fflush", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:nl_langinfo_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "nl_langinfo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__fxstat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__fxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__freading_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "__freading", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:realloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 11, 1, 0.0, 1, 0], "succs": [[]], "fname": "realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:setlocale_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "setlocale", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memmove_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "memmove", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:error_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 6, 1, 0.0, 1, 0], "succs": [[]], "fname": "error", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fsync_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fsync", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:open_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "open", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fseeko_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fseeko", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strtoumax_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strtoumax", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__cxa_atexit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__cxa_atexit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strcat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strcat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getpagesize_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getpagesize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sprintf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "sprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sigismember_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "sigismember", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:exit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fwrite_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fwrite", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ngettext_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "ngettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mbsinit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "mbsinit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:iswprint_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "iswprint", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:sigaddset_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "sigaddset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__ctype_b_loc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "__ctype_b_loc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__cxa_finalize_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__cxa_finalize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 0, 1, 12, 2, 1, 0, 0, 0.0, ["xor     ebp, ebp", "mov     r9, rdx; rtld_fini", "pop     rsi; argc", "mov     rdx, rsp; ubp_av", "and     rsp, 0FFFFFFFFFFFFFFF0h", "push    rax", "push    rsp; stack_end", "lea     r8, __libc_csu_fini; fini", "lea     rcx, __libc_csu_init; init", "lea     rdi, main; main", "call    cs:__libc_start_main_ptr", "hlt"], ["xor~ebp,ebp", "mov~r9,rdx", "pop~rsi", "mov~rdx,rsp", "and~rsp,0", "push~rax", "push~rsp", "lea~r8,<TAG>", "lea~rcx,<TAG>", "lea~rdi,<TAG>", "call~<TAG>", "hlt"]]], "func_feature": [1, 2, 1, 0, 1, 0, 0, 12, 0.0, 4, 0], "succs": [[]], "fname": "_start", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0.16666666666666666, ["mov     rax, cs:_ITM_deregisterTMCloneTable_ptr", "test    rax, rax", "jz      short loc_1F80"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 3, 0, 0, 6, 0, 1, 0, 1, 0.0, ["lea     rdi, __bss_start", "push    rbp", "lea     rax, __bss_start", "cmp     rax, rdi", "mov     rbp, rsp", "jz      short loc_1F80"], ["lea~rdi,<TAG>", "push~rbp", "lea~rax,<TAG>", "cmp~rax,rdi", "mov~rbp,rsp", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 1, 2, -1, 0.0, ["pop     rbp", "jmp     rax"], ["pop~rbp", "jmp~rax"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 1, 3, 0, 4, 4, 1, 13, 0.04167, 2, 0], "succs": [[2, 3], [0, 3], [], []], "fname": "deregister_tm_clones", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [3, 0, 3, 2, 0, 11, 0, 1, 0, 0, 0.0, ["lea     rdi, __bss_start", "lea     rsi, __bss_start", "push    rbp", "sub     rsi, rdi", "mov     rbp, rsp", "sar     rsi, 3", "mov     rax, rsi", "shr     rax, 3Fh", "add     rsi, rax", "sar     rsi, 1", "jz      short loc_1FD0"], ["lea~rdi,<TAG>", "lea~rsi,<TAG>", "push~rbp", "sub~rsi,rdi", "mov~rbp,rsp", "sar~rsi,0", "mov~rax,rsi", "shr~rax,0", "add~rsi,rax", "sar~rsi,0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 1, 0, 0.16666666666666666, ["mov     rax, cs:_ITM_registerTMCloneTable_ptr", "test    rax, rax", "jz      short loc_1FD0"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0.0, ["pop     rbp", "jmp     rax"], ["pop~rbp", "jmp~rax"]]], "func_feature": [0, 1, 3, 0, 4, 4, 1, 18, 0.04167, 2, 2], "succs": [[], [0, 2], [0, 3], []], "fname": "register_tm_clones", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0.0, ["call    deregister_tm_clones", "mov     cs:completed_7698, 1", "pop     rbp", "retn"], ["call~FOO", "mov~<TAG>,0", "pop~rbp", "retn"]], [1, 0, 2, 0, 0, 4, 0, 1, 1, -1, 0.16666666666666666, ["cmp     cs:__cxa_finalize_ptr, 0", "push    rbp", "mov     rbp, rsp", "jz      short loc_2003"], ["cmp~<TAG>,0", "push~rbp", "mov~rbp,rsp", "jz~FOO"]], [0, 0, 1, 0, 1, 2, 0, 1, 2, -1, 0.0, ["mov     rdi, cs:__dso_handle", "call    __cxa_finalize"], ["mov~rdi,<TAG>", "call~FOO"]], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0.0, ["rep retn"], ["retn"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 1, 0.0, ["cmp     cs:completed_7698, 0", "jnz     short locret_2018"], ["cmp~<TAG>,0", "jnz~FOO"]]], "func_feature": [2, 0, 4, 0, 5, 5, 0, 13, 0.03333, 3, 0], "succs": [[], [0, 2], [0], [], [1, 3]], "fname": "__do_global_dtors_aux", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []], [0, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "pop     rbp", "jmp     register_tm_clones"], ["push~rbp", "mov~rbp,rsp", "pop~rbp", "jmp~FOO"]]], "func_feature": [0, 0, 1, 0, 2, 1, 0, 4, 0.0, 0, 0], "succs": [[], [0]], "fname": "frame_dummy", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+ch_0], al", "movzx   eax, [rbp+ch_0]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "to_uchar", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+n], rdi", "mov     rax, [rbp+n]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 3, 6, 0.0, 0, 0], "succs": [[]], "fname": "select_plural", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 3, 0, 21, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+ptr], rdi", "mov     [rbp+alignment], rsi", "mov     rax, [rbp+ptr]", "mov     [rbp+p0], rax", "mov     rax, [rbp+alignment]", "lea     rdx, [rax-1]", "mov     rax, [rbp+p0]", "add     rax, rdx", "mov     [rbp+p1], rax", "mov     rax, [rbp+p1]", "mov     edx, 0", "div     [rbp+alignment]", "mov     rax, rdx", "neg     rax", "mov     rdx, rax", "mov     rax, [rbp+p1]", "add     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "neg~rax", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 21, 0.0, 0, 3], "succs": [[]], "fname": "ptr_align", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.022727272727272728, ["mov     eax, 1", "jmp     short loc_211F"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 12, 1, 0, 12, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+buf], rdi", "mov     [rbp+length], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+buf]", "mov     [rbp+p], rax", "cmp     [rbp+length], 0", "jnz     short loc_20C2"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 1, 0, 1, 5, 4, 0.045454545454545456, ["jmp     short loc_20C3"], ["jmp~FOO"]], [1, 0, 10, 0, 0, 4, 2, 1, 4, 3, 0.08333333333333334, ["mov     rax, [rbp+length]", "and     eax, 0Fh", "test    rax, rax", "jz      short loc_2102"], ["mov~rax,[rbp+0]", "and~eax,0", "test~rax,rax", "jz~FOO"]], [0, 0, 10, 0, 0, 1, 0, 0, 1, 4, 0.05303030303030303, ["nop"], ["nop"]], [3, 0, 10, 2, 0, 4, 0, 1, 3, 3, 0.12121212121212122, ["add     [rbp+p], 1", "sub     [rbp+length], 1", "cmp     [rbp+length], 0", "jnz     short loc_20F4"], ["add~[rbp+0],0", "sub~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 6, 1, 1, 2, 3, 0.20454545454545456, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "mov     [rbp+word], al", "movzx   eax, [rbp+word]", "test    al, al", "jz      short loc_20DC"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.15151515151515152, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_2133"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.06818181818181818, ["mov     eax, 0", "jmp     short loc_211F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.022727272727272728, ["mov     eax, 1", "jmp     short loc_211F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 1, 9, 1, 1, 5, 2, 0.022727272727272728, ["nop", "mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+p]", "mov     rax, [rbp+buf]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "setz    al"], ["nop", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setz~al"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [2, 6, 11, 1, 13, 16, 1, 49, 0.06119, 1, 3], "succs": [[7], [0, 4], [6], [2, 10], [6], [9, 3], [8, 5], [11, 12], [7], [7], [7], [], []], "fname": "is_nul", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0.0, ["add     rsp, 0B8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 2, 0, 2, 13, 1, 3, 6, 0, 0.13186813186813187, ["lea     rdi, aOrAvailableLoc; \"or available locally via: info '(coreut\"...", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+node]", "mov     rdx, rbx", "mov     rsi, rax", "mov     rdi, rcx; format", "mov     eax, 0", "call    _printf", "nop", "mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_2377"], ["lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rbx", "mov~rsi,rax", "mov~rdi,rcx", "mov~eax,0", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 9, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax+8]", "mov     [rbp+node], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [0, 0, 10, 0, 0, 4, 1, 1, 2, 0, 0.2197802197802198, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax+8]", "test    rax, rax", "jz      short loc_2268"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 14, 0, 1, 8, 1, 2, 2, 0, 0.01098901098901099, ["mov     rax, [rbp+map_prog]", "mov     rdx, [rax]", "mov     rax, [rbp+program]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_220F"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 14, 0, 0, 4, 1, 1, 1, 0, 0.13736263736263737, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_2246"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 6, 0, 2, 6, 0, 2, 5, 0, 0.0, ["mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aReportAnyTrans; \"Report any translation bugs to <https:/\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO"]], [1, 0, 7, 0, 1, 7, 1, 2, 4, 0, 0.038461538461538464, ["mov     rax, [rbp+lc_messages]", "mov     edx, 3; n", "lea     rsi, s2; \"en_\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jz      short loc_22EC"], ["mov~rax,[rbp+0]", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 5, 0, 2, 12, 0, 3, 4, 0, 0.24725274725274726, ["lea     rdi, aFullDocumentat; \"Full documentation <%s%s>\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+program]", "mov     rdx, rax", "lea     rsi, aHttpsWwwGnuOrg; \"https://www.gnu.org/software/coreutils/\"", "mov     rdi, rcx; format", "mov     eax, 0", "call    _printf", "mov     rax, [rbp+node]", "cmp     rax, [rbp+program]", "jnz     short loc_2332"], ["lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "lea~rsi,<TAG>", "mov~rdi,rcx", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [4, 0, 8, 0, 3, 13, 0, 4, 3, 0, 0.26373626373626374, ["lea     rdi, msgid; \"\\n%s online help: <%s>\\n\"", "call    _gettext", "lea     rdx, aHttpsWwwGnuOrg; \"https://www.gnu.org/software/coreutils/\"", "lea     rsi, aGnuCoreutils; \"GNU coreutils\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     esi, 0; locale", "mov     edi, 5; category", "call    _setlocale", "mov     [rbp+lc_messages], rax", "cmp     [rbp+lc_messages], 0", "jz      short loc_22EC"], ["lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 14, 1, 0, 39, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0B8h", "mov     [rbp+program], rdi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "lea     rax, unk_10C80", "mov     [rbp+infomap.program], rax", "lea     rax, aTestInvocation; \"test invocation\"", "mov     [rbp+infomap.node], rax", "lea     rax, package; \"coreutils\"", "mov     [rbp+infomap.program+10h], rax", "lea     rax, aMultiCallInvoc; \"Multi-call invocation\"", "mov     [rbp+infomap.node+10h], rax", "lea     rax, aSha224sum; \"sha224sum\"", "mov     [rbp+infomap.program+20h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+20h], rax", "lea     rax, aSha256sum; \"sha256sum\"", "mov     [rbp+infomap.program+30h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+30h], rax", "lea     rax, aSha384sum; \"sha384sum\"", "mov     [rbp+infomap.program+40h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+40h], rax", "lea     rax, aSha512sum; \"sha512sum\"", "mov     [rbp+infomap.program+50h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+50h], rax", "mov     [rbp+infomap.program+60h], 0", "mov     [rbp+infomap.node+60h], 0", "mov     rax, [rbp+program]", "mov     [rbp+node], rax", "lea     rax, [rbp+infomap]", "mov     [rbp+map_prog], rax", "jmp     short loc_2217"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 14, 1, 0, 1, 0, 0, 3, 0, 0.005494505494505495, ["add     [rbp+map_prog], 10h"], ["add~[rbp+0],0"]], [0, 0, 3, 0, 0, 2, 0, 1, 5, 0, 0.08241758241758243, ["lea     rbx, aInvocation; \" invocation\"", "jmp     short loc_2339"], ["lea~rbx,<TAG>", "jmp~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 5, 0, 0.08241758241758243, ["lea     rbx, locale"], ["lea~rbx,<TAG>"]], [0, 0, 0, 0, 1, 1, 0, 1, 7, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [12, 6, 21, 1, 15, 20, 1, 118, 0.08132, 20, 3], "succs": [[], [0, 14], [9], [9, 2], [3, 11], [3, 4], [8], [8, 6], [12, 13], [8, 7], [5], [5], [1], [1], []], "fname": "emit_ancillary_info", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 4, 0, 0, 8, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sb], rdi", "mov     rax, [rbp+sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 8000h", "jz      short loc_23AF"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.125, ["mov     eax, 1", "jmp     short loc_23BB"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 0, 5, 1, 1, 0, 2, 0.08333333333333333, ["mov     rax, [rbp+sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_23B6"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 3, 3, 0, 5, 6, 1, 19, 0.05, 0, 0], "succs": [[1, 2], [4], [1, 3], [4], []], "fname": "usable_st_size", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "pop     rbp", "retn"], ["nop", "pop~rbp", "retn"]], [0, 0, 1, 0, 1, 2, 0, 2, 1, 0, 0.041666666666666664, ["call    close_stdout", "jmp     short loc_23F3"], ["call~FOO", "jmp~FOO"]], [0, 0, 2, 0, 1, 5, 1, 2, 1, 0, 0.125, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      short loc_23F3"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 4, 0, 0, 5, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "movzx   eax, cs:close_stdout_required", "test    al, al", "jz      short loc_23D6"], ["push~rbp", "mov~rbp,rsp", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 2, 0, 0.0, ["mov     edi, 1; status", "call    __exit"], ["mov~edi,0", "call~FOO"]]], "func_feature": [3, 2, 6, 0, 5, 5, 0, 17, 0.03333, 2, 0], "succs": [[], [0], [0, 4], [1, 2], []], "fname": "maybe_close_stdout", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 2, 0, 1, 16, 1, 2, 0, 0, 0.26666666666666666, ["mov     [rbp+ap.gp_offset], 18h", "mov     [rbp+ap.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+ap.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+ap.reg_save_area], rax", "lea     rcx, [rbp+ap]; args", "mov     rdx, [rbp+fmt]; format", "mov     esi, [rbp+errnum]; errnum", "mov     eax, [rbp+status]", "mov     edi, eax; status", "call    verror", "nop", "mov     rax, [rbp+var_B8]", "xor     rax, fs:28h", "jz      short locret_24ED"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 4, 0, 0, 6, 2, 1, 1, 2, 0.26666666666666666, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     eax, cs:progress_len", "test    eax, eax", "jle     short loc_2487"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~eax,<TAG>", "test~eax,eax", "jle~FOO"]], [2, 0, 3, 0, 1, 5, 0, 1, 2, 2, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Ah; c", "call    _fputc_unlocked", "mov     cs:progress_len, 0"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~<TAG>,0"]], [1, 0, 6, 1, 0, 11, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0E0h", "mov     [rbp+status], edi", "mov     [rbp+errnum], esi", "mov     [rbp+fmt], rdx", "mov     [rbp+var_98], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_244D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 5, 0, 0, 8, 0, 0, 1, 3, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 4, 6, 13, 7, 8, 47, 49, 0.07619, 3, 1], "succs": [[5, 6], [0, 2], [0], [1, 4], [1], [], []], "fname": "nl_error", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 8, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 10h", "mov     [rbp+status], edi", "cmp     [rbp+status], 0", "jz      short loc_2538"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 1, 0, 47, 143, 0, 47, 0, 1, 0.08333333333333333, ["mov     r12, cs:program_name", "mov     rbx, cs:program_name", "lea     rdi, aUsageSOperandO; \"Usage: %s [OPERAND]...\\n  or:  %s OPTIO\"...", "call    _gettext", "mov     rdx, r12", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aCopyAFileConve; \"Copy a file, converting and formatting \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aIfFileReadFrom; \"  if=FILE         read from FILE instea\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNAndBytesMayBe; \"\\nN and BYTES may be followed by the fo\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aAsciiFromEbcdi; \"  ascii     from EBCDIC to ASCII\\n  ebc\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aExclFailIfTheO; \"  excl      fail if the output file alr\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aEachFlagSymbol; \"\\nEach FLAG symbol may be:\\n\\n  append \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aDirectUseDirec; \"  direct    use direct I/O for data\\n\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aDirectoryFailU; \"  directory  fail unless a directory\\n\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aDsyncUseSynchr; \"  dsync     use synchronized I/O for da\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aSyncLikewiseBu; \"  sync      likewise, but also for meta\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aFullblockAccum; \"  fullblock  accumulate full blocks of \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNonblockUseNon; \"  nonblock  use non-blocking I/O\\n\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNoatimeDoNotUp; \"  noatime   do not update access time\\n\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNocacheRequest; \"  nocache   Request to drop cache.  See\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNocttyDoNotAss; \"  noctty    do not assign controlling t\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNofollowDoNotF; \"  nofollow  do not follow symlinks\\n\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aCountBytesTrea; \"  count_bytes  treat 'count=N' as a byt\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aSkipBytesTreat; \"  skip_bytes  treat 'skip=N' as a byte \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aSeekBytesTreat; \"  seek_bytes  treat 'seek=N' as a byte \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "lea     rdi, aSendingASSigna; \"\\nSending a %s signal to a running 'dd'\"...", "call    _gettext", "lea     rsi, aUsr1; \"USR1\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aHelpDisplayThi; \"      --help     display this help and \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aVersionOutputV; \"      --version  output version informa\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "lea     rdi, command_name; program", "call    emit_ancillary_info"], ["mov~r12,<TAG>", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,r12", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 1, 0, 2, 11, 0, 3, 0, 1, 0.08333333333333333, ["mov     rbx, cs:program_name", "lea     rdi, aTrySHelpForMor; \"Try '%s --help' for more information.\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdx, rbx", "mov     rsi, rcx; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_2807"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,<TAG>", "mov~rdx,rbx", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0.0, ["mov     eax, [rbp+status]", "mov     edi, eax; status", "call    _exit"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]]], "func_feature": [50, 0, 52, 0, 4, 4, 7, 165, 0.04167, 29, 1], "succs": [[1, 2], [3], [3], []], "fname": "usage", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 1, 1, 8, 0, 2, 0, 0, 0.14285714285714285, ["add     [rbp+real_buf], 2", "mov     rdx, cs:page_size", "mov     rax, [rbp+real_buf]", "mov     rsi, rdx; alignment", "mov     rdi, rax; ptr", "call    ptr_align", "mov     cs:ibuf, rax", "jmp     short loc_2904"], ["add~[rbp+0],0", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "jmp~FOO"]], [3, 0, 5, 3, 1, 11, 0, 2, 1, 3, 0.047619047619047616, ["mov     rax, cs:page_size", "add     rax, 2", "lea     rdx, [rax+rax]", "mov     rax, cs:input_blocksize", "add     rax, rdx", "sub     rax, 1", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+real_buf], rax", "cmp     [rbp+real_buf], 0", "jnz     short loc_28D9"], ["mov~rax,<TAG>", "add~rax,0", "lea~rdx,<TAG>", "mov~rax,<TAG>", "add~rax,rdx", "sub~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [6, 0, 4, 0, 3, 20, 0, 3, 2, 3, 0.0, ["mov     rax, cs:input_blocksize", "mov     [rbp+ibs], rax", "mov     rax, cs:input_blocksize", "lea     rsi, [rbp+hbuf]; buf", "mov     r8d, 1; to_block_size", "mov     ecx, 1; from_block_size", "mov     edx, 1F1h; opts", "mov     rdi, rax; n", "call    human_readable", "mov     rbx, rax", "lea     rdi, aMemoryExhauste_0; \"memory exhausted by input buffer of siz\"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     rax, [rbp+ibs]", "mov     r8, rbx", "mov     rcx, rax", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rsi,[rbp+0]", "mov~r8d,0", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 1, 2, 0.07142857142857142, ["nop"], ["nop"]], [0, 1, 7, 1, 0, 10, 2, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 2B8h", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, cs:ibuf", "test    rax, rax", "jnz     loc_2903"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 1, 0, 1, 0, 4, 0, 0, 3, 0, 0.0, ["add     rsp, 2B8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.23809523809523808, ["mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_2918"], ["mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [6, 3, 10, 1, 8, 9, 3, 58, 0.0625, 5, 6], "succs": [[6], [0, 2], [0], [6], [1, 3], [], [5, 7], []], "fname": "alloc_ibuf", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 1, 0, 1, 0, 4, 0, 0, 0, 0, 0.0, ["add     rsp, 2B8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 0, 0.19444444444444442, ["mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_2A41"], ["mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 1, 9, 1, 0, 10, 2, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 2B8h", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, cs:obuf", "test    rax, rax", "jnz     loc_2A2C"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0.041666666666666664, ["nop"], ["nop"]], [0, 0, 3, 0, 1, 4, 0, 2, 2, 0, 0.041666666666666664, ["call    alloc_ibuf", "mov     rax, cs:ibuf", "mov     cs:obuf, rax", "jmp     short loc_2A2D"], ["call~FOO", "mov~rax,<TAG>", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 7, 0, 0, 4, 2, 1, 1, 0, 0.05555555555555555, ["mov     eax, cs:conversions_mask", "and     eax, 800h", "test    eax, eax", "jz      loc_2A17"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 5, 2, 1, 9, 0, 2, 2, 0, 0.05555555555555555, ["mov     rdx, cs:page_size", "mov     rax, cs:output_blocksize", "add     rax, rdx", "sub     rax, 1", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+real_obuf], rax", "cmp     [rbp+real_obuf], 0", "jnz     short loc_29F5"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "add~rax,rdx", "sub~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [6, 0, 4, 0, 3, 20, 0, 3, 3, 0, 0.0, ["mov     rax, cs:output_blocksize", "mov     [rbp+obs], rax", "mov     rax, cs:output_blocksize", "lea     rsi, [rbp+hbuf]; buf", "mov     r8d, 1; to_block_size", "mov     ecx, 1; from_block_size", "mov     edx, 1F1h; opts", "mov     rdi, rax; n", "call    human_readable", "mov     rbx, rax", "lea     rdi, aMemoryExhauste; \"memory exhausted by output buffer of si\"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     rax, [rbp+obs]", "mov     r8, rbx", "mov     rcx, rax", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rsi,[rbp+0]", "mov~r8d,0", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 3, 0, 1, 7, 0, 2, 3, 0, 0.08333333333333333, ["mov     rdx, cs:page_size", "mov     rax, [rbp+real_obuf]", "mov     rsi, rdx; alignment", "mov     rdi, rax; ptr", "call    ptr_align", "mov     cs:obuf, rax", "jmp     short loc_2A2D"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [7, 5, 13, 1, 10, 12, 2, 63, 0.04722, 7, 4], "succs": [[], [0, 9], [3, 5], [1], [1], [4, 6], [8, 7], [8], [1], []], "fname": "alloc_obuf", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 5, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+new_trans], rdi", "mov     [rbp+i], 0", "jmp     short loc_2A90"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 2, 0, 14, 0, 0, 0, 2, 0.0, ["mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "movzx   eax, byte ptr [rdx+rax]", "movzx   edx, al", "mov     rax, [rbp+new_trans]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     ecx, eax", "mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "mov     [rdx+rax], cl", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "movzx~eax,<TAG>", "movzx~edx,al", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~ecx,eax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "mov~<TAG>,cl", "add~[rbp+0],0"]], [1, 0, 3, 0, 0, 2, 0, 1, 0, 1, 0.5, ["cmp     [rbp+i], 0FFh", "jle     short loc_2A5C"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0.0, ["mov     cs:translation_needed, 1", "nop", "pop     rbp", "retn"], ["mov~<TAG>,0", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 3, 25, 0.125, 2, 2], "succs": [[2], [2], [1, 3], []], "fname": "translate_charset", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 0, 10, 2, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+i], edi", "mov     eax, [rbp+i]", "sub     eax, 1", "and     eax, [rbp+i]", "test    eax, eax", "setnz   al", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "and~eax,[rbp+0]", "test~eax,eax", "setnz~al", "pop~rbp", "retn"]]], "func_feature": [0, 2, 0, 0, 1, 0, 6, 10, 0.0, 0, 1], "succs": [[]], "fname": "multiple_bits_set", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 2, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+message], rdi", "mov     rax, [rbp+message]", "mov     rdi, rax; s", "call    _strlen", "lea     rdx, [rax-2]", "mov     rax, [rbp+message]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 20h ; ' '", "setz    al", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rdx,[rax-2]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,<STR>", "setz~al", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 15, 0.0, 0, 2], "succs": [[]], "fname": "abbreviation_lacks_prefix", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 19, 2, 2, 22, 0, 3, 0, 0, 0.0811965811965812, ["divsd   xmm0, [rbp+XTIME_PRECISIONe0]", "movsd   [rbp+delta_s], xmm0", "mov     rax, cs:w_bytes", "mov     rdx, [rbp+delta_xtime]", "mov     rsi, [rbp+bpsbuf]; buf", "mov     r8, rdx; to_block_size", "mov     ecx, 3B9ACA00h; from_block_size", "mov     edx, 1D1h; opts", "mov     rdi, rax; n", "call    human_readable", "mov     [rbp+bytes_per_second], rax", "mov     rdx, [rbp+bytes_per_second]", "mov     rax, [rbp+bpsbuf]", "sub     rdx, rax", "mov     rax, rdx", "mov     rdx, rax", "mov     rax, [rbp+bpsbuf]", "add     rax, rdx", "lea     rsi, slash_s_6270; src", "mov     rdi, rax; dest", "call    _strcat", "jmp     short loc_2CD2"], ["divsd~xmm0,[rbp+0]", "movsd~[rbp+0],xmm0", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~r8,rdx", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 20, 0, 0, 2, 0, 1, 4, 10, 0.017094017094017096, ["cvtsi2sd xmm0, rax", "jmp     short loc_2C0F"], ["cvtsi2sd~xmm0,rax", "jmp~FOO"]], [2, 0, 20, 0, 0, 6, 2, 0, 4, 10, 0.017094017094017096, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2sd xmm0, rdx", "addsd   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2sd~xmm0,rdx", "addsd~xmm0,xmm0"]], [0, 0, 14, 0, 0, 2, 0, 1, 6, 6, 0.11965811965811966, ["lea     rax, a0fS; \"%.0f s\"", "jmp     short loc_2D0A"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 16, 0, 0, 2, 0, 1, 5, 7, 0.25071225071225073, ["cmp     [rbp+progress_time], 0", "jz      short loc_2D03"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 0, 0, 1, 0, 0, 6, 6, 0.11965811965811966, ["lea     rax, aGS; \"%g s\""], ["lea~rax,<TAG>"]], [0, 0, 5, 0, 0, 3, 0, 1, 11, 3, 0.029914529914529916, ["mov     eax, cs:progress_len", "cmp     [rbp+stats_len], eax", "jge     short loc_2EB8"], ["mov~eax,<TAG>", "cmp~[rbp+0],eax", "jge~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 10, 3, 0.08547008547008547, ["cmp     [rbp+stats_len], 0", "js      short loc_2EB8"], ["cmp~[rbp+0],0", "js~FOO"]], [0, 0, 22, 1, 0, 9, 1, 1, 3, 11, 0.017094017094017096, ["movsd   xmm0, cs:qword_12840", "movsd   [rbp+XTIME_PRECISIONe0], xmm0", "mov     rax, [rbp+now]", "mov     [rbp+delta_xtime], rax", "mov     rax, cs:start_time", "sub     [rbp+delta_xtime], rax", "mov     rax, [rbp+delta_xtime]", "test    rax, rax", "js      short loc_2BFA"], ["movsd~xmm0,<TAG>", "movsd~[rbp+0],xmm0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [2, 0, 27, 1, 0, 10, 1, 1, 0, 12, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 838h", "mov     [rbp+progress_time], rdi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "cmp     [rbp+progress_time], 0", "jnz     short loc_2B1A"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 25, 0, 1, 2, 0, 2, 1, 11, 0.017806267806267807, ["call    gethrxtime", "jmp     short loc_2B21"], ["call~FOO", "jmp~FOO"]], [0, 0, 25, 0, 0, 1, 0, 0, 1, 11, 0.017806267806267807, ["mov     rax, [rbp+progress_time]"], ["mov~rax,[rbp+0]"]], [1, 0, 9, 0, 3, 19, 0, 4, 8, 4, 0.19230769230769232, ["mov     rbx, cs:w_bytes", "mov     rax, cs:w_bytes", "mov     rdi, rax; n", "call    select_plural", "mov     rdx, rax; n", "lea     rsi, msgid2; \"%lu bytes copied, %s, %s\"", "lea     rdi, msgid1; \"%lu byte copied, %s, %s\"", "call    _ngettext", "mov     rsi, rax; format", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rcx, [rbp+bytes_per_second]", "lea     rdx, [rbp+delta_s_buf]", "mov     r8, rcx", "mov     rcx, rdx", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_2E61"], ["mov~rbx,<TAG>", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,<TAG>", "mov~rcx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~r8,rcx", "mov~rcx,rdx", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 13, 0, 2, 14, 1, 3, 7, 5, 0.25925925925925924, ["mov     rdx, [rbp+delta_s]", "lea     rcx, [rbp+delta_s_buf]", "mov     [rbp+var_840], rdx", "movsd   xmm0, [rbp+var_840]", "mov     rdx, rax; format", "mov     esi, 18h; maxlen", "mov     rdi, rcx; s", "mov     eax, 1", "call    _snprintf", "mov     rax, [rbp+si_0]", "mov     rdi, rax; message", "call    abbreviation_lacks_prefix", "test    al, al", "jz      short loc_2DA8"], ["mov~rdx,[rbp+0]", "lea~rcx,[rbp+0]", "mov~[rbp+0],rdx", "movsd~xmm0,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~rdi,rcx", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 9, 0, 2, 17, 0, 3, 9, 4, 0.006410256410256411, ["mov     rbx, cs:w_bytes", "lea     rdi, aLuBytesSCopied; \"%lu bytes (%s) copied, %s, %s\"", "call    _gettext", "mov     rdi, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, [rbp+bytes_per_second]", "lea     rcx, [rbp+delta_s_buf]", "mov     rdx, [rbp+si_0]", "mov     r9, rsi", "mov     r8, rcx", "mov     rcx, rdx", "mov     rdx, rbx", "mov     rsi, rdi; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     short loc_2E61"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rdi,rax", "mov~rax,<TAG>", "mov~rsi,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~r9,rsi", "mov~r8,rcx", "mov~rcx,rdx", "mov~rdx,rbx", "mov~rsi,rdi", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 11, 0, 1, 5, 1, 2, 8, 5, 0.042735042735042736, ["mov     rax, [rbp+iec]", "mov     rdi, rax; message", "call    abbreviation_lacks_prefix", "test    al, al", "jz      short loc_2E08"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 4, 1, 1, 9, 0, 1, 12, 3, 0.0, ["mov     eax, cs:progress_len", "sub     eax, [rbp+stats_len]", "mov     edx, eax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rcx, locale", "lea     rsi, aS; \"%*s\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~eax,<TAG>", "sub~eax,[rbp+0]", "mov~edx,eax", "mov~rax,<TAG>", "lea~rcx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [8, 0, 24, 1, 2, 25, 0, 3, 2, 10, 0.10256410256410257, ["mov     [rbp+now], rax", "mov     rax, cs:w_bytes", "lea     rsi, [rbp+hbuf]; buf", "mov     r8d, 1; to_block_size", "mov     ecx, 1; from_block_size", "mov     edx, 1D1h; opts", "mov     rdi, rax; n", "call    human_readable", "mov     [rbp+si_0], rax", "mov     rax, cs:w_bytes", "lea     rdx, [rbp+hbuf]", "lea     rsi, [rdx+28Eh]; buf", "mov     r8d, 1; to_block_size", "mov     ecx, 1; from_block_size", "mov     edx, 1F1h; opts", "mov     rdi, rax; n", "call    human_readable", "mov     [rbp+iec], rax", "lea     rax, [rbp+hbuf]", "add     rax, 51Ch", "mov     [rbp+bpsbuf], rax", "mov     [rbp+bpsbufsize], 28Eh", "mov     rax, cs:start_time", "cmp     [rbp+now], rax", "jle     loc_2C82"], ["mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rsi,[rbp+0]", "mov~r8d,0", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "lea~rsi,[rdx+0]", "mov~r8d,0", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jle~FOO"]], [0, 0, 3, 0, 0, 3, 0, 1, 11, 2, 0.012820512820512822, ["mov     eax, [rbp+stats_len]", "mov     cs:progress_len, eax", "jmp     short loc_2EDA"], ["mov~eax,[rbp+0]", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 19, 0, 2, 15, 0, 2, 3, 9, 0.10826210826210826, ["pxor    xmm0, xmm0", "movsd   [rbp+delta_s], xmm0", "lea     rdi, aInfinity; \"Infinity\"", "call    _gettext", "mov     rdx, rax", "mov     eax, [rbp+bpsbufsize]", "movsxd  rsi, eax; maxlen", "mov     rax, [rbp+bpsbuf]", "mov     rcx, rdx", "lea     rdx, format; \"%s B/s\"", "mov     rdi, rax; s", "mov     eax, 0", "call    _snprintf", "mov     rax, [rbp+bpsbuf]", "mov     [rbp+bytes_per_second], rax"], ["pxor~xmm0,xmm0", "movsd~[rbp+0],xmm0", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "movsxd~rsi,eax", "mov~rax,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 18, 0, 0, 2, 0, 1, 4, 8, 0.23076923076923078, ["cmp     [rbp+progress_time], 0", "jz      short loc_2CF0"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 17, 0, 1, 4, 0, 1, 5, 8, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Dh; c", "call    _fputc_unlocked"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO"]], [1, 0, 3, 0, 1, 4, 0, 1, 10, 2, 0.08547008547008547, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Ah; c", "call    _fputc_unlocked"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO"]], [1, 0, 8, 0, 0, 3, 0, 1, 9, 3, 0.21652421652421652, ["mov     [rbp+stats_len], eax", "cmp     [rbp+progress_time], 0", "jz      short loc_2EC6"], ["mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 9, 2, 2, 19, 0, 2, 9, 4, 0.006410256410256411, ["mov     rbx, cs:w_bytes", "lea     rdi, aLuBytesSSCopie; \"%lu bytes (%s, %s) copied, %s, %s\"", "call    _gettext", "mov     rdi, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rsi, [rbp+delta_s_buf]", "mov     rcx, [rbp+iec]", "mov     rdx, [rbp+si_0]", "sub     rsp, 8", "push    [rbp+bytes_per_second]", "mov     r9, rsi", "mov     r8, rcx", "mov     rcx, rdx", "mov     rdx, rbx", "mov     rsi, rdi; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 10h"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rdi,rax", "mov~rax,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "mov~r9,rsi", "mov~r8,rcx", "mov~rcx,rdx", "mov~rdx,rbx", "mov~rsi,rdi", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0"]], [0, 0, 2, 0, 0, 4, 1, 1, 11, 1, 0.07122507122507123, ["nop", "mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_2EEF"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 12, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 12, 0, 0.0, ["mov     rbx, [rbp+var_8]", "leave", "retn"], ["mov~rbx,[rbp+0]", "leave", "retn"]]], "func_feature": [21, 7, 39, 3, 28, 37, 2, 209, 0.0753, 17, 8], "succs": [[20], [0], [0], [13], [3, 5], [13], [16, 18], [18, 6], [1, 2], [10, 11], [17], [17], [23], [12, 15], [23], [24, 14], [18], [8, 19], [25], [20], [4, 21], [4], [25], [22, 7], [23], [26, 27], [], []], "fname": "print_xfer_stats", "n_num": 28}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 3, 0, 1, 0, 0, 0.19444444444444442, ["mov     eax, cs:status_level", "cmp     eax, 2", "jz      short loc_2FF1"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 5, 0, 2, 18, 1, 3, 2, 3, 0.19444444444444442, ["mov     r14, cs:w_partial", "mov     r13, cs:w_full", "mov     r12, cs:r_partial", "mov     rbx, cs:r_full", "lea     rdi, aLuLuRecordsInL; \"%lu+%lu records in\\n%lu+%lu records out\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     r9, r14", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "mov     rax, cs:r_truncate", "test    rax, rax", "jz      short loc_2FD7"], ["mov~r14,<TAG>", "mov~r13,<TAG>", "mov~r12,<TAG>", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,<TAG>", "mov~r9,r14", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 4, 0, 3, 15, 0, 3, 3, 3, 0.0, ["mov     rbx, cs:r_truncate", "mov     rax, cs:r_truncate", "mov     rdi, rax; n", "call    select_plural", "mov     rdx, rax; n", "lea     rsi, aLuTruncatedRec; \"%lu truncated records\\n\"", "lea     rdi, aLuTruncatedRec_0; \"%lu truncated record\\n\"", "call    _ngettext", "mov     rcx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdx, rbx", "mov     rsi, rcx; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rbx,<TAG>", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,<TAG>", "mov~rdx,rbx", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [1, 0, 1, 0, 1, 3, 0, 2, 4, 1, 0.034722222222222224, ["mov     edi, 0; progress_time", "call    print_xfer_stats", "jmp     short loc_2FF2"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 9, 0, 0, 9, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r14", "push    r13", "push    r12", "push    rbx", "mov     eax, cs:status_level", "cmp     eax, 1", "jz      loc_2FEE"], ["push~rbp", "mov~rbp,rsp", "push~r14", "push~r13", "push~r12", "push~rbx", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 7, 0, 0, 3, 1, 1, 1, 4, 0.08333333333333333, ["mov     eax, cs:progress_len", "test    eax, eax", "jle     short loc_2F37"], ["mov~eax,<TAG>", "test~eax,eax", "jle~FOO"]], [2, 0, 6, 0, 1, 5, 0, 1, 2, 4, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Ah; c", "call    _fputc_unlocked", "mov     cs:progress_len, 0"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~<TAG>,0"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.013888888888888888, ["nop", "jmp     short loc_2FF2"], ["nop", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.034722222222222224, ["nop"], ["nop"]], [0, 0, 0, 0, 0, 6, 0, 0, 2, 0, 0.0, ["pop     rbx", "pop     r12", "pop     r13", "pop     r14", "pop     rbp", "retn"], ["pop~rbx", "pop~r12", "pop~r13", "pop~r14", "pop~rbp", "retn"]]], "func_feature": [7, 2, 13, 0, 10, 13, 4, 65, 0.05556, 11, 0], "succs": [[8, 3], [0, 2], [0], [9], [5, 7], [1, 6], [1], [9], [9], []], "fname": "print_stats", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sig], edi", "mov     eax, [rbp+sig]", "mov     cs:interrupt_signal, eax", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 8, 0.0, 1, 0], "succs": [[]], "fname": "interrupt_handler", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sig], edi", "mov     eax, cs:info_signal_count", "add     eax, 1", "mov     cs:info_signal_count, eax", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,<TAG>", "add~eax,0", "mov~<TAG>,eax", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 9, 0.0, 1, 1], "succs": [[]], "fname": "siginfo_handler", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 6, 0, 1, 37, 1, 2, 0, 0, 0.26666666666666666, ["mov     rax, cs:caught_signals.__val", "mov     rdx, cs:caught_signals.__val+8", "mov     [rbp+act.sa_mask.__val], rax", "mov     [rbp+act.sa_mask.__val+8], rdx", "mov     rax, cs:caught_signals.__val+10h", "mov     rdx, cs:caught_signals.__val+18h", "mov     [rbp+act.sa_mask.__val+10h], rax", "mov     [rbp+act.sa_mask.__val+18h], rdx", "mov     rax, cs:caught_signals.__val+20h", "mov     rdx, cs:caught_signals.__val+28h", "mov     [rbp+act.sa_mask.__val+20h], rax", "mov     [rbp+act.sa_mask.__val+28h], rdx", "mov     rax, cs:caught_signals.__val+30h", "mov     rdx, cs:caught_signals.__val+38h", "mov     [rbp+act.sa_mask.__val+30h], rax", "mov     [rbp+act.sa_mask.__val+38h], rdx", "mov     rax, cs:caught_signals.__val+40h", "mov     rdx, cs:caught_signals.__val+48h", "mov     [rbp+act.sa_mask.__val+40h], rax", "mov     [rbp+act.sa_mask.__val+48h], rdx", "mov     rax, cs:caught_signals.__val+50h", "mov     rdx, cs:caught_signals.__val+58h", "mov     [rbp+act.sa_mask.__val+50h], rax", "mov     [rbp+act.sa_mask.__val+58h], rdx", "mov     rax, cs:caught_signals.__val+60h", "mov     rdx, cs:caught_signals.__val+68h", "mov     [rbp+act.sa_mask.__val+60h], rax", "mov     [rbp+act.sa_mask.__val+68h], rdx", "mov     rax, cs:caught_signals.__val+70h", "mov     rdx, cs:caught_signals.__val+78h", "mov     [rbp+act.sa_mask.__val+70h], rax", "mov     [rbp+act.sa_mask.__val+78h], rdx", "mov     esi, 0Ah; signo", "lea     rdi, caught_signals; set", "call    _sigismember", "test    eax, eax", "jz      short loc_31B2"], ["mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 8, 0, 1, 8, 0, 2, 1, 4, 0.17777777777777778, ["lea     rax, [rbp+act]", "mov     rdx, rax; oact", "mov     esi, 0; act", "mov     edi, 2; sig", "call    _sigaction", "mov     rax, qword ptr [rbp+act.__sigaction_handler]", "cmp     rax, 1", "jz      short loc_30B6"], ["lea~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rax,[word ptr [rbp+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 7, 0, 1, 3, 0, 1, 2, 4, 0.0, ["mov     esi, 2; signo", "lea     rdi, caught_signals; set", "call    _sigaddset"], ["mov~esi,0", "lea~rdi,<TAG>", "call~FOO"]], [2, 0, 10, 1, 2, 15, 2, 3, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0B0h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rdi, name; \"POSIXLY_CORRECT\"", "call    _getenv", "test    rax, rax", "setz    al", "mov     [rbp+catch_siginfo], al", "lea     rdi, caught_signals; set", "call    _sigemptyset", "cmp     [rbp+catch_siginfo], 0", "jz      short loc_307F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdi,<TAG>", "call~FOO", "test~rax,rax", "setz~al", "mov~[rbp+0],al", "lea~rdi,<TAG>", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 9, 0, 1, 3, 0, 1, 1, 5, 0.0, ["mov     esi, 0Ah; signo", "lea     rdi, caught_signals; set", "call    _sigaddset"], ["mov~esi,0", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 4, 0, 1, 5, 1, 2, 3, 2, 0.26666666666666666, ["mov     esi, 2; signo", "lea     rdi, caught_signals; set", "call    _sigismember", "test    eax, eax", "jz      short loc_31F5"], ["mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 5, 0, 1, 8, 0, 1, 3, 3, 0.0, ["lea     rax, siginfo_handler", "mov     qword ptr [rbp+act.__sigaction_handler], rax", "mov     [rbp+act.sa_flags], 0", "lea     rax, [rbp+act]", "mov     edx, 0; oact", "mov     rsi, rax; act", "mov     edi, 0Ah; sig", "call    _sigaction"], ["lea~rax,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 4, 1, 0.17777777777777778, ["nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_320A"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [3, 0, 3, 0, 1, 8, 0, 1, 4, 2, 0.0, ["lea     rax, interrupt_handler", "mov     qword ptr [rbp+act.__sigaction_handler], rax", "mov     [rbp+act.sa_flags], 0C0000000h", "lea     rax, [rbp+act]", "mov     edx, 0; oact", "mov     rsi, rax; act", "mov     edi, 2; sig", "call    _sigaction"], ["lea~rax,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [10, 5, 15, 1, 11, 14, 1, 94, 0.08081, 20, 1], "succs": [[5, 6], [0, 2], [0], [1, 4], [1], [8, 9], [5], [], [10, 7], [8], []], "fname": "install_signal_handlers", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[3, 0, 3, 0, 4, 16, 0, 4, 0, 0, 0.0, ["mov     rax, cs:input_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aClosingInputFi; \"closing input file %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 4, 0, 1, 8, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "mov     edi, 0; fd", "call    _close", "test    eax, eax", "jns     short loc_3265"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "mov~edi,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 2, 0, 1, 4, 1, 1, 1, 1, 0.3333333333333333, ["mov     edi, 1; fd", "call    _close", "test    eax, eax", "jns     short loc_32B7"], ["mov~edi,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [3, 0, 1, 0, 4, 16, 0, 4, 2, 1, 0.0, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aClosingOutputF; \"closing output file %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0.0, ["nop", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["nop", "pop~rbx", "pop~r12", "pop~rbp", "retn"]]], "func_feature": [10, 2, 10, 0, 5, 6, 2, 49, 0.06667, 4, 0], "succs": [[2], [0, 2], [3, 4], [4], []], "fname": "cleanup", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 11, 1, 0, 3, 0, 0, 0, 0, 0.0, ["mov     eax, [rbp+infos]", "sub     eax, 1", "mov     cs:info_signal_count, eax"], ["mov~eax,[rbp+0]", "sub~eax,0", "mov~<TAG>,eax"]], [2, 0, 11, 0, 1, 11, 0, 2, 2, 6, 0.23636363636363636, ["lea     rax, [rbp+oldset]", "mov     rdx, rax; oset", "lea     rsi, caught_signals; set", "mov     edi, 0; how", "call    _sigprocmask", "mov     eax, cs:interrupt_signal", "mov     [rbp+interrupt], eax", "mov     eax, cs:info_signal_count", "mov     [rbp+infos], eax", "cmp     [rbp+infos], 0", "jz      short loc_3327"], ["lea~rax,[rbp+0]", "mov~rdx,rax", "lea~rsi,<TAG>", "mov~edi,0", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 11, 0, 1, 3, 0, 1, 5, 4, 0.0, ["mov     eax, [rbp+interrupt]", "mov     edi, eax; sig", "call    _raise"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]], [1, 0, 11, 0, 1, 3, 0, 2, 4, 4, 0.3090909090909091, ["call    print_stats", "cmp     [rbp+interrupt], 0", "jz      short loc_3369"], ["call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 11, 0, 1, 7, 0, 2, 3, 5, 0.2727272727272727, ["lea     rax, [rbp+oldset]", "mov     edx, 0; oset", "mov     rsi, rax; set", "mov     edi, 2; how", "call    _sigprocmask", "cmp     [rbp+interrupt], 0", "jz      short loc_334E"], ["lea~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 11, 0, 1, 1, 0, 1, 4, 5, 0.0, ["call    cleanup"], ["call~FOO"]], [0, 0, 11, 0, 0, 3, 1, 1, 1, 3, 0.44545454545454544, ["mov     eax, cs:interrupt_signal", "test    eax, eax", "jnz     loc_32DC"], ["mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [1, 0, 11, 1, 0, 7, 1, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0A0h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "jmp     loc_3369"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "jmp~FOO"]], [0, 0, 2, 0, 0, 4, 1, 1, 3, 1, 0.16363636363636364, ["nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_339A"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 11, 0, 0, 3, 1, 1, 2, 2, 0.21818181818181817, ["mov     eax, cs:info_signal_count", "test    eax, eax", "jnz     loc_32DC"], ["mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [6, 4, 13, 1, 12, 16, 6, 48, 0.13712, 4, 2], "succs": [[4], [0, 4], [6], [2, 6], [3, 5], [3], [1, 9], [6], [10, 11], [8, 1], [], []], "fname": "process_signals", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 3, 8, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "call    cleanup", "call    print_stats", "call    process_signals", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "call~FOO", "call~FOO", "call~FOO", "nop", "pop~rbp", "retn"]]], "func_feature": [3, 0, 3, 0, 1, 0, 2, 8, 0.0, 0, 0], "succs": [[]], "fname": "finish_up", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 2, 8, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+code], edi", "call    finish_up", "mov     eax, [rbp+code]", "mov     edi, eax; status", "call    _exit"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "call~FOO", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]]], "func_feature": [2, 0, 2, 0, 1, 0, 4, 8, 0.0, 0, 1], "succs": [[]], "fname": "quit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+len]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "pop~rbp", "retn"]], [0, 0, 1, 1, 0, 7, 0, 1, 4, 0, 0.008928571428571428, ["mov     rax, [rbp+pending]", "mov     rax, [rax]", "mov     rdx, rax", "mov     rax, [rbp+c_pending]", "sub     rax, rdx", "mov     [rbp+len], rax", "jmp     short loc_3456"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 0, 0.008928571428571428, ["mov     [rbp+len], 0", "jmp     short loc_3456"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 1, 0, 0, 3, 0, 0, 3, 0, 0.07142857142857142, ["mov     rax, [rbp+pending]", "mov     rax, [rax]", "mov     [rbp+len], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 6, 0, 0, 2, 0, 1, 1, 0, 0.05357142857142857, ["lea     rax, i_pending_6322", "jmp     short loc_33ED"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 8, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+fd], edi", "mov     [rbp+len], rsi", "cmp     [rbp+fd], 0", "jnz     short loc_33E6"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 6, 0, 0, 1, 0, 0, 1, 0, 0.05357142857142857, ["lea     rax, o_pending_6323"], ["lea~rax,<TAG>"]], [1, 0, 3, 1, 0, 14, 1, 0, 3, 0, 0.14285714285714285, ["mov     rax, [rbp+pending]", "mov     rdx, [rax]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     [rbp+c_pending], rax", "mov     rax, [rbp+c_pending]", "and     eax, 1FFFFh", "mov     rdx, rax", "mov     rax, [rbp+pending]", "mov     [rax], rdx", "mov     rax, [rbp+pending]", "mov     rax, [rax]", "cmp     [rbp+c_pending], rax", "jbe     short loc_3441"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "and~eax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 5, 0, 0, 3, 0, 1, 2, 0, 0.26785714285714285, ["mov     [rbp+pending], rax", "cmp     [rbp+len], 0", "jz      short loc_344B"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [0, 1, 5, 0, 9, 11, 2, 41, 0.06746, 2, 2], "succs": [[], [0], [0], [0], [8], [4, 6], [8], [1, 2], [3, 7]], "fname": "cache_round", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 20, 0, 1, 5, 0, 2, 0, 0, 0.08669354838709677, ["mov     eax, [rbp+fd]", "mov     esi, 0; len", "mov     edi, eax; fd", "call    cache_round", "jmp     short loc_3508"], ["mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [1, 0, 22, 0, 0, 2, 0, 1, 4, 7, 0.1693548387096774, ["cmp     [rbp+len], 0", "jz      short loc_3503"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 20, 0, 0, 1, 0, 0, 5, 6, 0.08669354838709677, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 3, 2, 0, 9, 0, 0, 12, 3, 0.0, ["mov     rcx, [rbp+offset]", "mov     rax, [rbp+offset]", "mov     rsi, cs:page_size", "mov     edx, 0", "div     rsi", "mov     rax, rdx", "sub     rcx, rax", "mov     rax, rcx", "mov     [rbp+offset], rax"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,<TAG>", "mov~edx,0", "div~,rsi", "mov~rax,rdx", "sub~rcx,rax", "mov~rax,rcx", "mov~[rbp+0],rax"]], [1, 0, 4, 2, 0, 6, 0, 1, 11, 3, 0.06048387096774194, ["mov     rax, [rbp+offset]", "sub     rax, [rbp+clen]", "sub     rax, [rbp+pending]", "mov     [rbp+offset], rax", "cmp     [rbp+clen], 0", "jnz     short loc_3609"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 30, 0, 0, 5, 1, 1, 1, 4, 0.015120967741935484, ["movzx   eax, cs:i_nocache_eof", "movzx   eax, al", "test    eax, eax", "setnz   al", "jmp     short loc_3498"], ["movzx~eax,<TAG>", "movzx~eax,al", "test~eax,eax", "setnz~al", "jmp~FOO"]], [3, 0, 32, 1, 0, 8, 0, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+len], rsi", "mov     [rbp+adv_ret], 0FFFFFFFFh", "cmp     [rbp+fd], 0", "jnz     short loc_3489"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 19, 0, 0, 3, 0, 1, 6, 5, 0.20262096774193547, ["mov     [rbp+pending], rax", "cmp     [rbp+fd], 0", "jnz     short loc_353F"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 11, 2, 0, 6, 0, 0, 10, 4, 0.0, ["mov     rdx, [rbp+clen]", "mov     rax, [rbp+pending]", "add     rdx, rax", "mov     rax, cs:output_offset_6335", "add     rax, rdx", "mov     cs:output_offset_6335, rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,<TAG>", "add~rax,rdx", "mov~<TAG>,rax"]], [1, 0, 12, 0, 0, 2, 0, 1, 9, 4, 0.01965725806451613, ["cmp     [rbp+len], 0", "jz      short loc_3598"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 30, 0, 0, 4, 1, 0, 1, 4, 0.015120967741935484, ["movzx   eax, cs:o_nocache_eof", "movzx   eax, al", "test    eax, eax", "setnz   al"], ["movzx~eax,<TAG>", "movzx~eax,al", "test~eax,eax", "setnz~al"]], [0, 0, 12, 0, 0, 3, 1, 1, 7, 4, 0.09946236559139786, ["movzx   eax, cs:input_seekable", "test    al, al", "jz      short loc_352A"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 10, 0, 0, 2, 0, 0, 8, 3, 0.08803763440860214, ["mov     rax, cs:output_offset_6335", "mov     [rbp+offset], rax"], ["mov~rax,<TAG>", "mov~[rbp+0],rax"]], [1, 0, 15, 0, 0, 3, 0, 1, 7, 4, 0.09811827956989248, ["mov     rax, cs:output_offset_6335", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_3598"], ["mov~rax,<TAG>", "cmp~rax,0", "jz~FOO"]], [2, 0, 11, 0, 1, 7, 0, 2, 9, 4, 0.005544354838709678, ["mov     eax, [rbp+fd]", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, eax; fd", "call    _lseek", "mov     cs:output_offset_6335, rax", "jmp     short loc_3598"], ["mov~eax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 2, 0, 1, 7, 0, 1, 12, 2, 0.012096774193548387, ["mov     rdx, [rbp+clen]; len", "mov     rsi, [rbp+offset]; offset", "mov     eax, [rbp+fd]", "mov     ecx, 4; advise", "mov     edi, eax; fd", "call    _posix_fadvise", "mov     [rbp+adv_ret], eax"], ["mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax"]], [1, 0, 1, 0, 0, 2, 0, 0, 10, 1, 0.021169354838709676, ["cmp     [rbp+adv_ret], 0FFFFFFFFh", "setnz   al"], ["cmp~[rbp+0],0", "setnz~al"]], [1, 0, 9, 0, 0, 2, 0, 1, 9, 2, 0.18245967741935484, ["cmp     [rbp+offset], 0", "js      short loc_3623"], ["cmp~[rbp+0],0", "js~FOO"]], [0, 0, 10, 0, 0, 3, 0, 1, 8, 3, 0.042674731182795696, ["mov     rax, cs:input_offset", "mov     [rbp+offset], rax", "jmp     short loc_35A3"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.005040322580645161, ["mov     eax, 1", "jmp     locret_362A"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.0030241935483870967, ["mov     eax, 1", "jmp     locret_362A"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 10, 4, 0.13306451612903225, ["cmp     [rbp+len], 0", "jnz     short loc_35CE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 29, 0, 1, 9, 0, 2, 2, 3, 0.0877016129032258, ["mov     [rbp+nocache_eof], al", "mov     rdx, [rbp+len]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; len", "mov     edi, eax; fd", "call    cache_round", "mov     [rbp+clen], rax", "cmp     [rbp+len], 0", "jz      short loc_34C8"], ["mov~[rbp+0],al", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 11, 4, 0.046370967741935484, ["cmp     [rbp+clen], 0", "jz      short loc_35CE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 3, 2, 0.008064516129032258, ["cmp     [rbp+clen], 0", "jnz     short loc_34C8"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 10, 0, 1, 4, 0, 2, 8, 3, 0.042674731182795696, ["mov     [rbp+offset], 0FFFFFFFFFFFFFFFFh", "call    ___errno_location", "mov     dword ptr [rax], 1Dh", "jmp     short loc_35A3"], ["mov~[rbp+0],0", "call~FOO", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 5, 0, 0, 3, 0, 0, 13, 4, 0.0, ["mov     rax, [rbp+clen]", "mov     [rbp+pending], rax", "mov     [rbp+clen], 0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0"]], [1, 0, 6, 0, 0, 2, 0, 1, 12, 4, 0.024193548387096774, ["cmp     [rbp+nocache_eof], 0", "jz      short loc_35CE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 26, 0, 0, 2, 0, 1, 3, 4, 0.12600806451612903, ["cmp     [rbp+len], 0", "jnz     short loc_34EB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 25, 0, 0, 2, 0, 1, 4, 3, 0.013104838709677418, ["cmp     [rbp+clen], 0", "jnz     short loc_34EB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 14, 0, 0, 3, 1, 0, 8, 5, 0.03931451612903226, ["mov     rax, cs:output_offset_6335", "test    rax, rax", "jns     short loc_3575"], ["mov~rax,<TAG>", "test~rax,rax", "jns~FOO"]], [1, 0, 24, 0, 0, 4, 2, 1, 5, 2, 0.00907258064516129, ["movzx   eax, [rbp+nocache_eof]", "xor     eax, 1", "test    al, al", "jz      short loc_34EB"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]]], "func_feature": [5, 6, 28, 0, 33, 49, 8, 121, 0.05282, 6, 7], "succs": [[7], [0, 2], [7], [15], [3, 15], [23], [10, 5], [11, 13], [12], [8, 12], [23], [18, 26], [17], [12, 31], [12], [16], [19], [16, 22], [17], [], [19], [19], [24, 4], [25, 29], [28, 4], [20, 29], [17], [4], [27, 4], [1, 30], [32, 1], [9, 14], [1, 21]], "fname": "invalidate_cache", "n_num": 33}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+nread]", "mov     cs:prev_nread_6342, rax", "mov     rax, [rbp+nread]", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "leave", "retn"]], [1, 0, 7, 0, 0, 2, 0, 1, 4, 0, 0.24561403508771928, ["cmp     [rbp+nread], 0", "jle     loc_3760"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 6, 0, 0, 3, 1, 1, 5, 0, 0.19005847953216373, ["movzx   eax, cs:warn_partial_read", "test    al, al", "jz      short loc_3760"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 5, 0, 0, 3, 1, 1, 6, 0, 0.16374269005847952, ["mov     rax, cs:prev_nread_6342", "test    rax, rax", "jle     short loc_3760"], ["mov~rax,<TAG>", "test~rax,rax", "jle~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 7, 0, 0.13157894736842105, ["mov     rax, cs:prev_nread_6342", "cmp     [rbp+size], rax", "jbe     short loc_3760"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 9, 0, 0.005847953216374269, ["mov     cs:warn_partial_read, 0"], ["mov~<TAG>,0"]], [1, 0, 19, 0, 2, 10, 0, 3, 1, 0, 0.11403508771929824, ["call    process_signals", "mov     rdx, [rbp+size]; nbytes", "mov     rcx, [rbp+buf]", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    _read", "mov     [rbp+nread], rax", "cmp     [rbp+nread], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_36AB"], ["call~FOO", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 19, 0, 1, 4, 0, 2, 3, 0, 0.06140350877192982, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_363F"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 19, 1, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+buf], rsi", "mov     [rbp+size], rdx"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx"]], [2, 0, 19, 0, 1, 3, 0, 1, 6, 0, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 0", "mov     [rbp+nread], 0"], ["call~FOO", "mov~<TAG>,0", "mov~[rbp+0],0"]], [0, 1, 19, 0, 0, 4, 2, 1, 5, 0, 0.02046783625730994, ["mov     eax, cs:input_flags", "and     eax, 4000h", "test    eax, eax", "jz      short loc_36AB"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 0, 5, 0, 1, 8, 0, 0.0935672514619883, ["mov     rax, cs:prev_nread_6342", "mov     [rbp+prev], rax", "mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_3759"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 2, 0, 3, 14, 0, 3, 9, 0, 0.0, ["mov     rax, [rbp+prev]", "mov     rdi, rax; n", "call    select_plural", "mov     rdx, rax; n", "lea     rsi, aWarningPartial; \"warning: partial read (%lu bytes); sugg\"...", "lea     rdi, aWarningPartial_0; \"warning: partial read (%lu byte); sugge\"...", "call    _ngettext", "mov     rdx, rax; fmt", "mov     rax, [rbp+prev]", "mov     rcx, rax", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rcx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 19, 0, 0, 3, 0, 0, 4, 0, 0.038011695906432746, ["mov     rax, cs:prev_nread_6342", "cmp     [rbp+size], rax", "jbe     short loc_36AB"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 19, 0, 0, 3, 1, 1, 3, 0, 0.05263157894736842, ["mov     rax, cs:prev_nread_6342", "test    rax, rax", "jle     short loc_36AB"], ["mov~rax,<TAG>", "test~rax,rax", "jle~FOO"]], [0, 0, 9, 0, 0, 3, 0, 0, 4, 0, 0.029239766081871343, ["mov     rax, [rbp+nread]", "cmp     [rbp+size], rax", "jbe     short loc_36D4"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 3, 0, 0.2631578947368421, ["cmp     [rbp+nread], 0", "jle     short loc_36D4"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 19, 0, 1, 4, 0, 2, 2, 0, 0.06432748538011696, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     short loc_36AB"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 8, 0, 1, 1, 0, 1, 5, 0, 0.0, ["call    process_signals"], ["call~FOO"]], [1, 0, 19, 0, 0, 2, 0, 0, 2, 0, 0.2894736842105263, ["cmp     [rbp+nread], 0", "jns     short loc_36BE"], ["cmp~[rbp+0],0", "jns~FOO"]]], "func_feature": [9, 5, 19, 0, 20, 33, 1, 81, 0.08816, 6, 1], "succs": [[], [0, 2], [0, 3], [0, 4], [0, 11], [0], [17, 19], [16, 6], [6], [19], [9, 19], [12, 5], [5], [10, 19], [19, 13], [1, 18], [1, 15], [19, 14], [1], [16, 7]], "fname": "iread", "n_num": 20}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 3, 0, 0.034722222222222224, ["mov     rax, [rbp+ncurr]", "jmp     short locret_37E1"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0.0625, ["mov     rax, [rbp+nread]"], ["mov~rax,[rbp+0]"]], [2, 0, 9, 1, 0, 8, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+buf], rsi", "mov     [rbp+size], rdx", "mov     [rbp+nread], 0", "jmp     short loc_37D3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 9, 0, 1, 9, 0, 1, 2, 0, 0.1875, ["mov     rdx, [rbp+size]; size", "mov     rcx, [rbp+buf]", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    iread", "mov     [rbp+ncurr], rax", "cmp     [rbp+ncurr], 0", "jns     short loc_37B4"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 1, 0, 0.2638888888888889, ["cmp     [rbp+size], 0", "jnz     short loc_378E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 9, 3, 0, 6, 0, 0, 4, 0, 0.08333333333333333, ["mov     rax, [rbp+ncurr]", "add     [rbp+nread], rax", "mov     rax, [rbp+ncurr]", "add     [rbp+buf], rax", "mov     rax, [rbp+ncurr]", "sub     [rbp+size], rax"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax"]], [1, 0, 9, 0, 0, 2, 0, 1, 3, 0, 0.1388888888888889, ["cmp     [rbp+ncurr], 0", "jz      short loc_37DC"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0.0625, ["jmp     short loc_37DD"], ["jmp~FOO"]], [0, 0, 2, 0, 0, 1, 0, 0, 4, 0, 0.041666666666666664, ["nop"], ["nop"]]], "func_feature": [1, 0, 6, 0, 10, 12, 0, 34, 0.0875, 0, 4], "succs": [[], [0], [0], [5], [1, 7], [8, 4], [5], [9, 6], [2], [2]], "fname": "iread_fullblock", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 18, 0, 0, 2, 0, 0, 0, 0, 0.26877470355731226, ["cmp     [rbp+nwritten], 0", "jns     short loc_3994"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 3, 5, 0.26877470355731226, ["cmp     [rbp+nwritten], 0", "jnz     short loc_397F"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 18, 2, 1, 11, 0, 1, 4, 5, 0.0, ["mov     rax, [rbp+size]", "sub     rax, [rbp+total_written]", "mov     rdx, rax; n", "mov     rcx, [rbp+buf]", "mov     rax, [rbp+total_written]", "add     rcx, rax", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    _write", "mov     [rbp+nwritten], rax"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "add~rcx,rax", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax"]], [2, 1, 23, 1, 0, 13, 2, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 40h", "mov     [rbp+fd], edi", "mov     [rbp+buf], rsi", "mov     [rbp+size], rdx", "mov     [rbp+total_written], 0", "mov     eax, cs:output_flags", "and     eax, 4000h", "test    eax, eax", "jz      loc_39B0"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 0, 1, 0, 6, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+total_written]", "add     rsp, 40h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 3, 0, 0, 3, 1, 1, 2, 1, 0.11857707509881422, ["movzx   eax, cs:o_nocache", "test    al, al", "jz      short loc_39E1"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 2, 0, 0, 2, 0, 1, 3, 1, 0.04150197628458498, ["cmp     [rbp+total_written], 0", "jz      short loc_39E1"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 1, 5, 0, 1, 4, 1, 0.0, ["mov     rdx, [rbp+total_written]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; len", "mov     edi, eax; fd", "call    invalidate_cache"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO"]], [1, 0, 18, 0, 1, 4, 0, 2, 5, 3, 0.14888010540184451, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_39B0"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 4, 0, 0, 1, 0, 1, 6, 2, 0.02503293807641634, ["jmp     short loc_39BE"], ["jmp~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 5, 3, 0.0862977602108037, ["cmp     [rbp+nwritten], 0", "jnz     short loc_39A8"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 22, 0, 0, 3, 0, 0, 1, 3, 0.007905138339920948, ["mov     rax, cs:output_blocksize", "cmp     [rbp+size], rax", "jnb     loc_39B0"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnb~FOO"]], [1, 0, 4, 0, 1, 3, 0, 2, 6, 2, 0.028985507246376815, ["call    ___errno_location", "mov     dword ptr [rax], 1Ch", "jmp     short loc_39BE"], ["call~FOO", "mov~<TAG>,0", "jmp~FOO"]], [4, 0, 19, 0, 4, 17, 0, 4, 4, 4, 0.0, ["mov     rax, cs:output_file", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aFailedToTurnOf; \"failed to turn off O_DIRECT: %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 20, 0, 0, 3, 0, 1, 3, 4, 0.005928853754940711, ["mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_38B0"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 18, 1, 0, 2, 0, 0, 6, 3, 0.021739130434782608, ["mov     rax, [rbp+nwritten]", "add     [rbp+total_written], rax"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax"]], [1, 0, 18, 0, 1, 8, 1, 1, 4, 7, 0.06324110671936758, ["mov     rcx, [rbp+size]", "mov     eax, [rbp+fd]", "mov     edx, 1; whence", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    _lseek", "test    rax, rax", "jns     short loc_3942"], ["mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~rax,rax", "jns~FOO"]], [0, 0, 18, 0, 1, 7, 1, 2, 3, 6, 0.0909090909090909, ["mov     rdx, [rbp+size]", "mov     rax, [rbp+buf]", "mov     rsi, rdx; length", "mov     rdi, rax; buf", "call    is_nul", "test    al, al", "jz      short loc_3951"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 18, 0, 0, 3, 0, 0, 1, 2, 0.35704874835309625, ["mov     rax, [rbp+total_written]", "cmp     rax, [rbp+size]", "jb      loc_38DA"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [3, 1, 18, 0, 1, 8, 1, 2, 3, 3, 0.1067193675889328, ["mov     cs:o_nocache_eof, 1", "mov     esi, 0; len", "mov     edi, 1; fd", "call    invalidate_cache", "mov     eax, cs:conversions_mask", "or      ah, 80h", "mov     cs:conversions_mask, eax", "jmp     loc_39B0"], ["mov~<TAG>,0", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~eax,<TAG>", "or~ah,<STR>", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 18, 0, 0, 4, 1, 1, 5, 6, 0.014822134387351778, ["mov     eax, cs:conversions_mask", "and     eax, 0FFFEFFFFh", "mov     cs:conversions_mask, eax", "jmp     short loc_3951"], ["mov~eax,<TAG>", "and~eax,0", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 18, 0, 0, 3, 0, 0, 5, 6, 0.014822134387351778, ["mov     cs:final_op_was_seek, 1", "mov     rax, [rbp+size]", "mov     [rbp+nwritten], rax"], ["mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [7, 0, 21, 0, 2, 14, 2, 3, 2, 4, 0.011857707509881422, ["mov     esi, 3; action", "mov     edi, 1; fd", "mov     eax, 0", "call    rpl_fcntl", "mov     [rbp+old_flags], eax", "mov     eax, [rbp+old_flags]", "and     ah, 0BFh", "mov     edx, eax", "mov     esi, 4; action", "mov     edi, 1; fd", "mov     eax, 0", "call    rpl_fcntl", "test    eax, eax", "jz      short loc_38B0"], ["mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "and~ah,0", "mov~edx,eax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 18, 0, 1, 7, 2, 2, 2, 6, 0.26877470355731226, ["mov     [rbp+nwritten], 0", "call    process_signals", "mov     cs:final_op_was_seek, 0", "mov     eax, cs:conversions_mask", "and     eax, 10000h", "test    eax, eax", "jz      short loc_3951"], ["mov~[rbp+0],0", "call~FOO", "mov~<TAG>,0", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]]], "func_feature": [14, 11, 28, 0, 24, 37, 4, 133, 0.08127, 9, 5], "succs": [[8, 10], [0, 2], [0], [18, 11], [], [4, 6], [4, 7], [4], [9, 18], [5], [12, 15], [18, 22], [5], [19], [19, 13], [18], [20, 21], [16, 1], [5, 23], [18], [1], [1], [19, 14], [1, 17]], "fname": "iwrite", "n_num": 24}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 4, 2, 1, 18, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 10h", "mov     rdx, cs:output_blocksize; size", "mov     rax, cs:obuf", "mov     rsi, rax; buf", "mov     edi, 1; fd", "call    iwrite", "mov     [rbp+nwritten], rax", "mov     rdx, cs:w_bytes", "mov     rax, [rbp+nwritten]", "add     rax, rdx", "mov     cs:w_bytes, rax", "mov     rax, cs:output_blocksize", "cmp     [rbp+nwritten], rax", "jz      short loc_3AA1"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~rdx,<TAG>", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,rax", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [1, 0, 1, 1, 0, 3, 0, 0, 0, -1, 0.0, ["mov     rax, cs:w_partial", "add     rax, 1", "mov     cs:w_partial, rax"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax"]], [4, 0, 2, 0, 4, 18, 0, 5, 0, -1, 0.16666666666666666, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aWritingToS; \"writing to %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "cmp     [rbp+nwritten], 0", "jz      short loc_3A97"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 0, -1, 0.0, ["mov     edi, 1; code", "call    quit"], ["mov~edi,0", "call~FOO"]], [3, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0.0, ["mov     rax, cs:w_full", "add     rax, 1", "mov     cs:w_full, rax", "mov     cs:oc, 0", "nop", "add     rsp, 10h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "mov~<TAG>,0", "nop", "add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]]], "func_feature": [6, 0, 8, 0, 5, 5, 9, 51, 0.03333, 8, 5], "succs": [[2, 4], [3], [1, 3], [], []], "fname": "write_output", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 1, 4, 0, 2, 0, 0, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_3ADD"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 3, 0, 2, 10, 0, 2, 1, 1, 0.3333333333333333, ["call    process_signals", "mov     ecx, [rbp+mode]; mode", "mov     edx, [rbp+flag]; flags", "mov     rsi, [rbp+file]; file", "mov     eax, [rbp+desired_fd]", "mov     edi, eax; desired_fd", "call    fd_reopen", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jns     short loc_3B0B"], ["call~FOO", "mov~ecx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 3, 1, 0, 7, 0, 0, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+desired_fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+flag], edx", "mov     [rbp+mode], ecx"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],ecx"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     eax, [rbp+ret]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [3, 0, 4, 0, 4, 5, 3, 24, 0.08333, 0, 1], "succs": [[1, 3], [0, 3], [1], []], "fname": "ifd_reopen", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 1, 4, 0, 2, 0, 0, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_3B1F"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 3, 0, 2, 9, 0, 2, 1, 1, 0.3333333333333333, ["call    process_signals", "mov     rdx, [rbp+length]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; length", "mov     edi, eax; fd", "call    _ftruncate", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jns     short loc_3B4A"], ["call~FOO", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 1, 3, 1, 0, 5, 0, 0, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+length], rsi"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     eax, [rbp+ret]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [3, 0, 4, 0, 4, 5, 2, 21, 0.08333, 0, 1], "succs": [[1, 3], [0, 3], [1], []], "fname": "iftruncate", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 9, 0, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+str], rdi", "mov     [rbp+pattern], rsi", "mov     eax, edx", "mov     [rbp+delim], al", "jmp     short loc_3B8B"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],al", "jmp~FOO"]], [0, 0, 9, 0, 0, 10, 0, 1, 0, 2, 0.05555555555555555, ["mov     rax, [rbp+str]", "lea     rdx, [rax+1]", "mov     [rbp+str], rdx", "movzx   ecx, byte ptr [rax]", "mov     rax, [rbp+pattern]", "lea     rdx, [rax+1]", "mov     [rbp+pattern], rdx", "movzx   eax, byte ptr [rax]", "cmp     cl, al", "jz      short loc_3B8B"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "movzx~ecx,<TAG>", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "movzx~eax,<TAG>", "cmp~cl,al", "jz~FOO"]], [0, 0, 9, 0, 0, 4, 1, 1, 0, 3, 0.18055555555555555, ["mov     rax, [rbp+pattern]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_3B62"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.041666666666666664, ["mov     eax, 0", "jmp     short loc_3BBC"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 4, 0, 0, 4, 0, 1, 0, 3, 0.05555555555555555, ["mov     rax, [rbp+str]", "movzx   eax, byte ptr [rax]", "cmp     [rbp+delim], al", "jnz     short loc_3BB4"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~[rbp+0],al", "jnz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 0, 3, 0.16666666666666666, ["mov     rax, [rbp+str]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_3BAD"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_3BB9"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0.05555555555555555, ["and     eax, 1"], ["and~eax,0"]], [1, 0, 2, 0, 0, 1, 0, 0, 0, 2, 0.013888888888888888, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 3, 7, 0, 10, 13, 2, 37, 0.06528, 0, 0], "succs": [[2], [2, 3], [1, 5], [9], [8, 6], [4, 6], [7], [9], [7], []], "fname": "operand_matches", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 1, 0, 5, 0, 1, 0, 0, 0.028571428571428574, ["mov     rdx, [rbp+strcomma]", "mov     rax, [rbp+str]", "sub     rdx, rax", "mov     rax, rdx", "jmp     short loc_3C2F"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, -1, 0.15714285714285717, ["cmp     [rbp+strcomma], 0", "jz      short loc_3C23"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 6, 1, 0.2571428571428572, ["cmp     [rbp+strcomma], 0", "jz      short loc_3CF5"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 15, 0, 0, 4, 0, 1, 5, 2, 0.08571428571428572, ["mov     rax, [rbp+entry]", "mov     eax, [rax+0Ch]", "mov     [rbp+value], eax", "jmp     short loc_3CDD"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 15, 0, 0, 3, 1, 0, 5, 2, 0.08571428571428572, ["mov     rax, [rbp+entry]", "mov     eax, [rax+0Ch]", "or      [rbp+value], eax"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~[rbp+0],eax"]], [6, 0, 0, 0, 4, 21, 0, 4, 6, -1, 0.0, ["mov     [rbp+slen], rax", "mov     rdx, [rbp+slen]", "mov     rax, [rbp+str]", "mov     rcx, rdx; argsize", "mov     rdx, rax; arg", "mov     esi, 8; s", "mov     edi, 0; n", "call    quotearg_n_style_mem", "mov     rbx, rax", "mov     rax, [rbp+error_msgid]", "mov     rdi, rax; msgid", "call    _gettext", "mov     r8, rbx", "mov     rcx, rax", "lea     rdx, fmt; \"%s: %s\"", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r8,rbx", "mov~rcx,rax", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [0, 0, 1, 0, 1, 3, 0, 1, 5, -1, 0.028571428571428574, ["mov     rax, [rbp+str]", "mov     rdi, rax; s", "call    _strlen"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 4, 3, 0.2, ["cmp     [rbp+exclusive], 0", "jz      short loc_3CD3"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 15, 0, 0, 4, 1, 1, 3, 7, 0.2380952380952381, ["mov     rax, [rbp+entry]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_3C8A"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [2, 0, 15, 0, 1, 9, 2, 2, 2, 5, 0.44761904761904764, ["mov     rcx, [rbp+entry]", "mov     rax, [rbp+str]", "mov     edx, 2Ch ; ','; delim", "mov     rsi, rcx; pattern", "mov     rdi, rax; str", "call    operand_matches", "xor     eax, 1", "test    al, al", "jnz     loc_3C01"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 15, 0, 0, 4, 1, 1, 3, 4, 0.2142857142857143, ["mov     rax, [rbp+entry]", "mov     eax, [rax+0Ch]", "test    eax, eax", "jz      loc_3C01"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "test~eax,eax", "jz~FOO"]], [1, 0, 15, 0, 1, 8, 0, 2, 1, 6, 0.31428571428571433, ["mov     rax, [rbp+str]", "mov     esi, 2Ch ; ','; c", "mov     rdi, rax; s", "call    _strchr", "mov     [rbp+strcomma], rax", "mov     rax, [rbp+table]", "mov     [rbp+entry], rax", "jmp     loc_3C8F"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 15, 1, 0, 1, 0, 0, 4, 6, 0.04761904761904762, ["add     [rbp+entry], 10h"], ["add~[rbp+0],0"]], [0, 1, 0, 1, 0, 6, 0, 0, 7, 0, 0.0, ["nop", "mov     eax, [rbp+value]", "add     rsp, 48h", "pop     rbx", "pop     rbp", "retn"], ["nop", "mov~eax,[rbp+0]", "add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 15, 1, 0, 4, 0, 1, 7, 7, 0.22380952380952382, ["mov     rax, [rbp+strcomma]", "add     rax, 1", "mov     [rbp+str], rax", "jmp     loc_3BDF"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 1, 15, 1, 0, 10, 0, 0, 0, 7, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 48h", "mov     [rbp+str], rdi", "mov     [rbp+table], rsi", "mov     eax, edx", "mov     [rbp+error_msgid], rcx", "mov     [rbp+exclusive], al", "mov     [rbp+value], 0"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~[rbp+0],al", "mov~[rbp+0],0"]]], "func_feature": [7, 5, 17, 0, 16, 20, 4, 88, 0.14554, 1, 5], "succs": [[5], [0, 6], [13, 14], [2], [2], [], [5], [3, 4], [1, 12], [8, 10], [8, 7], [9], [9], [], [11], [11]], "fname": "parse_symbols", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 10, 0, 1, 9, 0, 2, 0, 0, 0.06593406593406594, ["mov     rax, [rbp+suffix]", "lea     rdx, [rax+1]", "mov     rax, [rbp+invalid]", "mov     rsi, rax; invalid", "mov     rdi, rdx; str", "call    parse_integer", "mov     [rbp+multiplier], rax", "cmp     [rbp+multiplier], 0", "jz      short loc_3DB5"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 13, 0, 0, 4, 0, 1, 1, 4, 0.038461538461538464, ["mov     rax, [rbp+suffix]", "movzx   eax, byte ptr [rax]", "cmp     al, 78h ; 'x'", "jnz     loc_3E3A"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.13186813186813187, ["mov     rcx, [rbp+var_18]", "xor     rcx, fs:28h", "jz      short loc_3E68"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [5, 0, 5, 0, 4, 17, 0, 4, 5, 4, 0.0, ["lea     rsi, arg; \"00x\"", "mov     edi, 1; n", "call    quote_n", "mov     r12, rax", "lea     rsi, a0x; \"0x\"", "mov     edi, 0; n", "call    quote_n", "mov     rbx, rax", "lea     rdi, aWarningSIsAZer; \"warning: %s is a zero multiplier; use %\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["lea~rsi,<TAG>", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rsi,<TAG>", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 6, 0, 1, 7, 1, 2, 4, 4, 0.027472527472527476, ["mov     rax, [rbp+str]", "mov     edx, 2; n", "lea     rsi, a0x; \"0x\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     short loc_3E2B"], ["mov~rax,[rbp+0]", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 4, 2, 0.03296703296703297, ["mov     rax, [rbp+invalid]", "mov     dword ptr [rax], 1", "mov     eax, 0", "jmp     loc_3E54"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 0, 1, 2, 2, 0.024725274725274728, ["mov     rax, [rbp+invalid]", "mov     edx, [rbp+e]", "mov     [rax], edx", "mov     eax, 0", "jmp     short loc_3E54"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~<TAG>,edx", "mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.09065934065934067, ["mov     rax, [rbp+n]"], ["mov~rax,[rbp+0]"]], [0, 0, 4, 1, 0, 4, 0, 1, 4, 3, 0.07692307692307693, ["mov     rax, [rbp+n]", "imul    rax, [rbp+multiplier]", "mov     [rbp+n], rax", "jmp     short loc_3E50"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 1, 3, 0.05494505494505495, ["cmp     [rbp+e], 0", "jz      short loc_3E50"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 14, 1, 1, 21, 1, 2, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 40h", "mov     [rbp+str], rdi", "mov     [rbp+invalid], rsi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "lea     rdx, [rbp+n]", "lea     rsi, [rbp+suffix]; ptr", "mov     rax, [rbp+str]", "lea     r8, valid_suffixes; \"bcEGkKMPTwYZ0\"", "mov     rcx, rdx; val", "mov     edx, 0Ah; strtol_base", "mov     rdi, rax; s", "call    xstrtoumax", "mov     [rbp+e], eax", "cmp     [rbp+e], 2", "jnz     loc_3E3A"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rax,[rbp+0]", "lea~r8,<TAG>", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 9, 2, 0, 8, 0, 1, 3, 3, 0.03296703296703297, ["mov     rax, [rbp+n]", "imul    rax, [rbp+multiplier]", "mov     edx, 0", "div     [rbp+multiplier]", "mov     rdx, rax", "mov     rax, [rbp+n]", "cmp     rdx, rax", "jz      short loc_3DB5"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jz~FOO"]], [0, 0, 7, 0, 0, 3, 1, 1, 3, 4, 0.07692307692307693, ["mov     rax, [rbp+n]", "test    rax, rax", "jnz     short loc_3E2B"], ["mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 4, 0, 0.0, ["add     rsp, 40h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]]], "func_feature": [8, 4, 19, 1, 15, 21, 2, 94, 0.04359, 5, 5], "succs": [[12, 13], [0, 10], [], [2, 14], [9], [9, 4], [3], [3], [3], [8], [8, 7], [1, 10], [13, 6], [9, 5], []], "fname": "parse_integer", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+operand], rdi", "mov     [rbp+name], rsi", "mov     rcx, [rbp+name]", "mov     rax, [rbp+operand]", "mov     edx, 3Dh ; '='; delim", "mov     rsi, rcx; pattern", "mov     rdi, rax; str", "call    operand_matches", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 13, 13, 0.0, 0, 1], "succs": [[]], "fname": "operand_is", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 62, 0, 0, 4, 2, 1, 0, 0, 0.23938223938223938, ["mov     eax, cs:input_flags", "and     eax, 101000h", "test    eax, eax", "jz      short loc_4415"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 64, 0, 0, 3, 1, 1, 6, 24, 0.2368082368082368, ["mov     rax, cs:conversion_blocksize", "test    rax, rax", "jnz     short loc_43F5"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 63, 0, 0, 3, 1, 0, 7, 24, 0.0, ["mov     eax, cs:conversions_mask", "and     eax, 0FFFFFFE7h", "mov     cs:conversions_mask, eax"], ["mov~eax,<TAG>", "and~eax,0", "mov~<TAG>,eax"]], [3, 0, 15, 0, 2, 7, 0, 2, 26, 4, 0.05308880308880309, ["lea     rdi, aCannotCombineD; \"cannot combine direct and nocache\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 1, 17, 0, 1, 6, 2, 2, 25, 5, 0.11896718146718147, ["mov     eax, cs:input_flags", "and     eax, 4002h", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jnz     short loc_47EE"], ["mov~eax,<TAG>", "and~eax,<STR>", "mov~edi,eax", "call~FOO", "test~al,al", "jnz~FOO"]], [0, 1, 16, 0, 1, 6, 2, 2, 26, 4, 0.05308880308880309, ["mov     eax, cs:output_flags", "and     eax, 4002h", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jz      short loc_4811"], ["mov~eax,<TAG>", "and~eax,<STR>", "mov~edi,eax", "call~FOO", "test~al,al", "jz~FOO"]], [4, 0, 112, 2, 0, 13, 0, 1, 12, 34, 0.008124195624195625, ["mov     [rbp+n_min], 1", "mov     rax, cs:page_size", "add     rax, 2", "add     rax, rax", "neg     rax", "mov     rcx, 7FFFFFFFFFFFFFFFh", "mov     rdx, 7FFFFFFFFFFFFFFFh", "cmp     rax, rcx", "cmova   rax, rdx", "mov     [rbp+n_max], rax", "mov     rax, [rbp+n]", "mov     [rbp+blocksize], rax", "jmp     loc_42F0"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "add~rax,0", "add~rax,rax", "neg~rax", "mov~rcx,0", "mov~rdx,0", "cmp~rax,rcx", "cmova~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 11, 35, 0.028233590733590733, ["mov     rax, [rbp+name]", "lea     rsi, aBs; \"bs\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_4214"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 6, 32, 0.06491312741312741, ["mov     rax, [rbp+name]", "lea     rsi, aIflag; \"iflag\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_4047"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 5, 32, 0.06853281853281853, ["mov     rax, [rbp+name]", "lea     rsi, aConv; \"conv\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_3FFC"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 14, 0, 0, 4, 2, 1, 27, 3, 0.10135135135135134, ["mov     eax, cs:input_flags", "and     eax, 2", "test    eax, eax", "jz      short loc_4861"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 60, 0, 0, 4, 2, 1, 8, 22, 0.2413127413127413, ["mov     eax, cs:output_flags", "and     eax, 1", "test    eax, eax", "jz      short loc_4468"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 61, 0, 0, 3, 1, 0, 8, 23, 0.0, ["mov     eax, cs:input_flags", "or      eax, 101000h", "mov     cs:input_flags, eax"], ["mov~eax,<TAG>", "or~eax,0", "mov~<TAG>,eax"]], [2, 0, 9, 0, 0, 5, 2, 0, 30, 3, 0.0028957528957528956, ["and     eax, 1", "mov     cs:i_nocache_eof, al", "mov     eax, cs:input_flags", "and     eax, 0FFFFFFFDh", "mov     cs:input_flags, eax"], ["and~eax,0", "mov~<TAG>,al", "mov~eax,<TAG>", "and~eax,0", "mov~<TAG>,eax"]], [1, 0, 10, 0, 0, 2, 0, 1, 30, 4, 0.00040218790218790216, ["mov     eax, 1", "jmp     short loc_4849"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 10, 0, 0, 1, 0, 0, 29, 4, 0.008526383526383526, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 112, 0, 1, 6, 1, 2, 12, 35, 0.022924710424710424, ["mov     rax, [rbp+name]", "lea     rsi, aCbs; \"cbs\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_424B"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 13, 0, 0, 4, 1, 1, 28, 5, 0.02927927927927928, ["mov     cs:i_nocache, 1", "mov     rax, cs:max_records", "test    rax, rax", "jnz     short loc_4844"], ["mov~<TAG>,0", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 0, 37, 2, 0, 12, 0, 1, 17, 14, 0.001488095238095238, ["mov     rbx, cs:output_blocksize", "mov     rax, [rbp+seek]", "mov     edx, 0", "div     rbx", "mov     cs:seek_records, rax", "mov     rcx, cs:output_blocksize", "mov     rax, [rbp+seek]", "mov     edx, 0", "div     rcx", "mov     rax, rdx", "mov     cs:seek_bytes, rax", "jmp     short loc_4644"], ["mov~rbx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rbx", "mov~<TAG>,rax", "mov~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rcx", "mov~rax,rdx", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 40, 0, 0, 2, 0, 1, 16, 15, 0.005148005148005148, ["cmp     [rbp+seek], 0", "jz      short loc_4632"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 38, 0, 0, 2, 0, 1, 16, 14, 0.19719272844272845, ["cmp     [rbp+seek], 0", "jz      short loc_4644"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 41, 0, 0, 4, 2, 1, 15, 15, 0.20777027027027026, ["mov     eax, cs:output_flags", "and     eax, 10h", "test    eax, eax", "jz      short loc_4632"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 12, 0, 0, 3, 1, 1, 29, 5, 0.0074002574002574, ["mov     rax, cs:max_bytes", "test    rax, rax", "jnz     short loc_4844"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 37, 0, 0, 2, 0, 0, 17, 14, 0.0, ["mov     rax, [rbp+seek]", "mov     cs:seek_records, rax"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax"]], [1, 0, 112, 0, 1, 11, 1, 2, 7, 31, 0.006595881595881595, ["mov     rax, [rbp+val]", "lea     rcx, aInvalidInputFl; \"invalid input flag\"", "mov     edx, 0; exclusive", "lea     rsi, flags; table", "mov     rdi, rax; str", "call    parse_symbols", "mov     edx, eax", "mov     eax, cs:input_flags", "or      eax, edx", "mov     cs:input_flags, eax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~edx,eax", "mov~eax,<TAG>", "or~eax,edx", "mov~<TAG>,eax", "jmp~FOO"]], [2, 0, 112, 0, 0, 5, 0, 1, 13, 34, 0.008285070785070785, ["mov     [rbp+n_min], 1", "mov     [rbp+n_max], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+n]", "mov     cs:conversion_blocksize, rax", "jmp     loc_42F0"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 36, 0, 0, 4, 2, 1, 17, 13, 0.1969111969111969, ["mov     eax, cs:conversions_mask", "and     eax, 800h", "test    eax, eax", "jnz     short loc_46A3"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 7, 32, 0.06113256113256113, ["mov     rax, [rbp+name]", "lea     rsi, aOflag; \"oflag\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_4092"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 35, 0, 0, 4, 2, 1, 18, 13, 0.02775096525096525, ["mov     eax, cs:input_flags", "and     eax, 1", "test    eax, eax", "jnz     short loc_46A3"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 13, 35, 0.017454954954954954, ["mov     rax, [rbp+name]", "lea     rsi, aSkip; \"skip\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_426F"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [4, 0, 0, 0, 4, 14, 0, 4, 9, -1, 0.0, ["lea     rdi, aFullblock; \"fullblock\"", "call    quote", "mov     rbx, rax", "lea     rdi, aInvalidOutputF; \"invalid output flag\"", "call    _gettext", "mov     r8, rbx", "mov     rcx, rax", "lea     rdx, fmt; \"%s: %s\"", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,rbx", "mov~rcx,rax", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [0, 0, 112, 0, 0, 3, 0, 1, 14, 34, 0.008445945945945946, ["mov     rax, [rbp+n]", "mov     [rbp+skip], rax", "jmp     loc_42F0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 8, 0, 0, 4, 2, 1, 28, 2, 0.06177606177606178, ["mov     eax, cs:output_flags", "and     eax, 2", "test    eax, eax", "jz      short loc_48B1"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 58, 0, 0, 4, 2, 1, 9, 21, 0.23793436293436293, ["mov     eax, cs:input_flags", "and     eax, 10h", "test    eax, eax", "jz      short loc_44BB"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 33, 0, 0, 3, 1, 1, 20, 14, 0.011502574002574002, ["mov     rax, cs:max_records", "test    rax, rax", "jz      short loc_4685"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 34, 0, 0, 3, 1, 1, 19, 13, 0.02252252252252252, ["mov     rax, cs:skip_records", "test    rax, rax", "jnz     short loc_469C"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 2, 0, 0, 4, 1, 1, 29, 1, 0.016409266409266408, ["nop", "mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_48C6"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [2, 0, 3, 0, 0, 5, 2, 0, 31, 2, 0.0009652509652509653, ["and     eax, 1", "mov     cs:o_nocache_eof, al", "mov     eax, cs:output_flags", "and     eax, 0FFFFFFFDh", "mov     cs:output_flags, eax"], ["and~eax,0", "mov~<TAG>,al", "mov~eax,<TAG>", "and~eax,0", "mov~<TAG>,eax"]], [1, 0, 7, 0, 0, 4, 1, 1, 29, 4, 0.03120978120978121, ["mov     cs:o_nocache, 1", "mov     rax, cs:max_records", "test    rax, rax", "jnz     short loc_4894"], ["mov~<TAG>,0", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 32, 0, 0, 3, 0, 1, 21, 13, 0.0008177820677820677, ["mov     rax, cs:max_records", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jnz     short loc_469C"], ["mov~rax,<TAG>", "cmp~rax,0", "jnz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 14, 35, 0.011824324324324323, ["mov     rax, [rbp+name]", "lea     rsi, aSeek; \"seek\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_4290"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [3, 0, 24, 0, 2, 7, 0, 2, 22, 9, 0.0, ["lea     rdi, aCannotCombineA; \"cannot combine any two of {ascii,ebcdic\"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 25, 0, 1, 10, 3, 2, 21, 9, 0.15886422136422135, ["mov     cs:iread_fnc, rax", "mov     eax, cs:input_flags", "and     eax, 0FFFFFFFEh", "mov     cs:input_flags, eax", "mov     eax, cs:conversions_mask", "and     eax, 7", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jz      short loc_471B"], ["mov~<TAG>,rax", "mov~eax,<TAG>", "and~eax,0", "mov~<TAG>,eax", "mov~eax,<TAG>", "and~eax,0", "mov~edi,eax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 6, 0, 0, 3, 1, 1, 30, 4, 0.007882882882882882, ["mov     rax, cs:max_bytes", "test    rax, rax", "jnz     short loc_4894"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 112, 0, 1, 11, 1, 2, 8, 31, 0.006756756756756756, ["mov     rax, [rbp+val]", "lea     rcx, aInvalidOutputF; \"invalid output flag\"", "mov     edx, 0; exclusive", "lea     rsi, flags; table", "mov     rdi, rax; str", "call    parse_symbols", "mov     edx, eax", "mov     eax, cs:output_flags", "or      eax, edx", "mov     cs:output_flags, eax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~edx,eax", "mov~eax,<TAG>", "or~eax,edx", "mov~<TAG>,eax", "jmp~FOO"]], [0, 0, 112, 0, 0, 3, 0, 1, 15, 34, 0.008606821106821106, ["mov     rax, [rbp+n]", "mov     [rbp+seek], rax", "jmp     short loc_42F0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 31, 3, 0.00016087516087516087, ["mov     eax, 1", "jmp     short loc_4899"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 30, 3, 0.008285070785070785, ["mov     eax, 0"], ["mov~eax,0"]], [0, 1, 31, 0, 0, 6, 3, 1, 21, 13, 0.0018366580866580864, ["mov     edx, cs:input_flags", "mov     eax, cs:output_flags", "or      eax, edx", "and     eax, 4000h", "test    eax, eax", "jz      short loc_46A3"], ["mov~edx,<TAG>", "mov~eax,<TAG>", "or~eax,edx", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 29, 0, 0, 2, 0, 1, 20, 12, 0.007386851136851136, ["mov     eax, 1", "jmp     short loc_46A8"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 29, 0, 0, 1, 0, 0, 18, 12, 0.16523219648219648, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 112, 0, 1, 6, 1, 2, 15, 35, 0.006032818532818533, ["mov     rax, [rbp+name]", "lea     rsi, aCount; \"count\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_42B1"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 8, 32, 0.05719111969111969, ["mov     rax, [rbp+name]", "lea     rsi, aStatus; \"status\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_40D3"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 112, 0, 0, 3, 0, 1, 16, 34, 0.008767696267696268, ["mov     rax, [rbp+n]", "mov     [rbp+count], rax", "jmp     short loc_42F0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [4, 0, 0, 0, 4, 14, 0, 4, 10, -1, 0.0, ["lea     rdi, aSeekBytes; \"seek_bytes\"", "call    quote", "mov     rbx, rax", "lea     rdi, aInvalidInputFl; \"invalid input flag\"", "call    _gettext", "mov     r8, rbx", "mov     rcx, rax", "lea     rdx, fmt; \"%s: %s\"", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,rbx", "mov~rcx,rax", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [2, 0, 28, 0, 0, 6, 3, 1, 19, 11, 0.17117117117117117, ["and     eax, 1", "mov     cs:warn_partial_read, al", "mov     eax, cs:input_flags", "and     eax, 1", "test    eax, eax", "jz      short loc_46C7"], ["and~eax,0", "mov~<TAG>,al", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 10, 35, 0.03338159588159588, ["mov     rax, [rbp+name]", "lea     rsi, aObs; \"obs\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_41B8"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [3, 0, 112, 0, 2, 15, 1, 3, 9, 35, 0.05308880308880309, ["mov     [rbp+invalid], 0", "lea     rdx, [rbp+invalid]", "mov     rax, [rbp+val]", "mov     rsi, rdx; invalid", "mov     rdi, rax; str", "call    parse_integer", "mov     [rbp+n], rax", "mov     [rbp+n_min], 0", "mov     [rbp+n_max], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+name]", "lea     rsi, aIbs; \"ibs\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_4160"], ["mov~[rbp+0],0", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 30, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 26, 0, 0, 2, 0, 1, 20, 10, 0.08051801801801801, ["lea     rax, iread_fullblock", "jmp     short loc_46CE"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 56, 0, 0, 4, 2, 1, 10, 20, 0.23423423423423423, ["mov     eax, cs:output_flags", "and     eax, 0Ch", "test    eax, eax", "jz      short loc_4527"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 26, 0, 0, 1, 0, 0, 20, 10, 0.08051801801801801, ["lea     rax, iread"], ["lea~rax,<TAG>"]], [1, 0, 0, 1, 0, 4, 0, 0, 30, 0, 0.0, ["add     rsp, 78h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 112, 0, 1, 8, 0, 2, 9, 31, 0.006917631917631917, ["mov     rax, [rbp+val]", "lea     rcx, aInvalidStatusL; \"invalid status level\"", "mov     edx, 1; exclusive", "lea     rsi, statuses; table", "mov     rdi, rax; str", "call    parse_symbols", "mov     cs:status_level, eax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 3, 0, 0, 4, 2, 1, 11, -1, 0.012789575289575288, ["mov     eax, cs:output_flags", "and     eax, 4", "test    eax, eax", "jz      short loc_44DE"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 12, -1, 0.002171814671814672, ["lea     rax, aCountBytes; \"count_bytes\"", "jmp     short loc_44E5"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 12, -1, 0.002171814671814672, ["lea     rax, aSkipBytes; \"skip_bytes\""], ["lea~rax,<TAG>"]], [5, 0, 112, 1, 0, 16, 1, 1, 0, 30, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 78h", "mov     [rbp+argc], edi", "mov     [rbp+argv], rsi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+blocksize], 0", "mov     [rbp+count], 0FFFFFFFFFFFFFFFFh", "mov     [rbp+skip], 0", "mov     [rbp+seek], 0", "mov     eax, cs:optind@@GLIBC_2_2_5", "mov     [rbp+i], eax", "jmp     loc_436F"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [4, 0, 0, 0, 4, 14, 0, 4, 16, -1, 0.0, ["mov     rax, [rbp+name]", "mov     rdi, rax; arg", "call    quote", "mov     rbx, rax", "lea     rdi, aUnrecognizedOp; \"unrecognized operand %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [0, 0, 112, 0, 0, 3, 0, 0, 11, 33, 0.13215894465894465, ["mov     rax, [rbp+n]", "cmp     rax, [rbp+n_min]", "jnb     short loc_4303"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [4, 0, 112, 2, 0, 13, 0, 1, 10, 34, 0.02252252252252252, ["mov     [rbp+n_min], 1", "mov     rax, cs:page_size", "add     rax, 2", "add     rax, rax", "neg     rax", "mov     rcx, 7FFFFFFFFFFFFFFFh", "mov     rdx, 7FFFFFFFFFFFFFFFh", "cmp     rax, rcx", "cmova   rax, rdx", "mov     [rbp+n_max], rax", "mov     rax, [rbp+n]", "mov     cs:input_blocksize, rax", "jmp     loc_42F0"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "add~rax,0", "add~rax,rax", "neg~rax", "mov~rcx,0", "mov~rdx,0", "cmp~rax,rcx", "cmova~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "jmp~FOO"]], [3, 0, 112, 0, 0, 11, 0, 1, 11, 34, 0.007963320463320463, ["mov     [rbp+n_min], 1", "mov     rax, cs:page_size", "neg     rax", "mov     rcx, 7FFFFFFFFFFFFFFFh", "mov     rdx, 7FFFFFFFFFFFFFFFh", "cmp     rax, rcx", "cmova   rax, rdx", "mov     [rbp+n_max], rax", "mov     rax, [rbp+n]", "mov     cs:output_blocksize, rax", "jmp     loc_42F0"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "neg~rax", "mov~rcx,0", "mov~rdx,0", "cmp~rax,rcx", "cmova~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 112, 0, 0, 2, 0, 1, 12, 32, 0.06599903474903475, ["mov     [rbp+invalid], 4", "jmp     short loc_4314"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 112, 0, 0, 3, 0, 0, 12, 32, 0.06897522522522523, ["mov     rax, [rbp+n_max]", "cmp     rax, [rbp+n]", "jnb     short loc_4314"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 112, 0, 0, 1, 0, 0, 13, 32, 0.0, ["mov     [rbp+invalid], 1"], ["mov~[rbp+0],0"]], [0, 0, 112, 0, 0, 3, 1, 1, 13, 31, 0.15564671814671815, ["mov     eax, [rbp+invalid]", "test    eax, eax", "jz      short loc_436B"], ["mov~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [2, 0, 112, 1, 1, 14, 0, 2, 2, 33, 0.07866795366795366, ["mov     eax, [rbp+i]", "cdqe", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+argv]", "add     rax, rdx", "mov     rax, [rax]", "mov     [rbp+name], rax", "mov     rax, [rbp+name]", "mov     esi, 3Dh ; '='; c", "mov     rdi, rax; s", "call    _strchr", "mov     [rbp+val], rax", "cmp     [rbp+val], 0", "jnz     short loc_3F5E"], ["mov~eax,[rbp+0]", "cdqe~", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 112, 0, 0, 3, 0, 1, 1, 29, 0.29866473616473616, ["mov     eax, [rbp+i]", "cmp     eax, [rbp+argc]", "jl      loc_3EE8"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jl~FOO"]], [4, 0, 0, 0, 4, 14, 0, 4, 13, -1, 0.0, ["mov     rdi, rax; arg", "call    quote", "mov     rbx, rax", "lea     rdi, aInvalidOutputF; \"invalid output flag\"", "call    _gettext", "mov     r8, rbx", "mov     rcx, rax", "lea     rdx, fmt; \"%s: %s\"", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,rbx", "mov~rcx,rax", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 23, 0, 1, 6, 2, 2, 22, 8, 0.14985521235521235, ["mov     eax, cs:conversions_mask", "and     eax, 18h", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jz      short loc_4752"], ["mov~eax,<TAG>", "and~eax,0", "mov~edi,eax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 51, 0, 0, 4, 2, 1, 11, 19, 0.21742277992277992, ["mov     eax, cs:input_flags", "and     eax, 8", "test    eax, eax", "jz      short loc_4574"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 12, 19, 0.004343629343629344, ["cmp     [rbp+skip], 0", "jz      short loc_4574"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 112, 0, 2, 10, 0, 3, 14, 33, 0.008767696267696268, ["mov     rax, [rbp+val]", "mov     rdi, rax; arg", "call    quote", "mov     rbx, rax", "lea     rdi, aInvalidNumber; \"invalid number\"", "call    _gettext", "mov     rdx, rax", "mov     eax, [rbp+invalid]", "cmp     eax, 1", "jnz     short loc_4348"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 112, 0, 0, 2, 0, 1, 15, 32, 0.005791505791505791, ["mov     eax, 4Bh ; 'K'", "jmp     short loc_434D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 112, 0, 0, 1, 0, 0, 15, 32, 0.005791505791505791, ["mov     eax, 0"], ["mov~eax,0"]], [3, 0, 22, 0, 2, 7, 0, 2, 23, 8, 0.0, ["lea     rdi, aCannotCombineB; \"cannot combine block and unblock\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [4, 0, 0, 0, 4, 14, 0, 4, 3, -1, 0.0, ["mov     rax, [rbp+name]", "mov     rdi, rax; arg", "call    quote", "mov     rbx, rax", "lea     rdi, aUnrecognizedOp; \"unrecognized operand %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; status", "call    usage"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 21, 0, 1, 6, 2, 2, 23, 7, 0.1402027027027027, ["mov     eax, cs:conversions_mask", "and     eax, 60h", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jz      short loc_4789"], ["mov~eax,<TAG>", "and~eax,0", "mov~edi,eax", "call~FOO", "test~al,al", "jz~FOO"]], [2, 0, 112, 0, 1, 7, 0, 1, 16, 31, 0.02638352638352638, ["mov     r8, rbx", "mov     rcx, rdx", "lea     rdx, fmt; \"%s: %s\"", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~r8,rbx", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 112, 1, 0, 1, 0, 0, 5, 30, 0.28378378378378377, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 112, 0, 0, 3, 0, 1, 4, 31, 0.012226512226512226, ["mov     rax, [rbp+val]", "mov     cs:input_file, rax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "jmp~FOO"]], [0, 0, 112, 0, 0, 3, 0, 1, 5, 31, 0.006274131274131274, ["mov     rax, [rbp+val]", "mov     cs:output_file, rax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 112, 0, 1, 11, 1, 2, 6, 31, 0.006435006435006435, ["mov     rax, [rbp+val]", "lea     rcx, error_msgid; \"invalid conversion\"", "mov     edx, 0; exclusive", "lea     rsi, conversions; table", "mov     rdi, rax; str", "call    parse_symbols", "mov     edx, eax", "mov     eax, cs:conversions_mask", "or      eax, edx", "mov     cs:conversions_mask, eax", "jmp     loc_436B"], ["mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~edx,eax", "mov~eax,<TAG>", "or~eax,edx", "mov~<TAG>,eax", "jmp~FOO"]], [2, 0, 47, 2, 0, 12, 0, 1, 13, 18, 0.0018902831402831401, ["mov     rbx, cs:input_blocksize", "mov     rax, [rbp+skip]", "mov     edx, 0", "div     rbx", "mov     cs:skip_records, rax", "mov     rcx, cs:input_blocksize", "mov     rax, [rbp+skip]", "mov     edx, 0", "div     rcx", "mov     rax, rdx", "mov     cs:skip_bytes, rax", "jmp     short loc_4586"], ["mov~rbx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rbx", "mov~<TAG>,rax", "mov~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rcx", "mov~rax,rdx", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 112, 1, 1, 7, 1, 2, 3, 32, 0.0814028314028314, ["add     [rbp+val], 1", "mov     rax, [rbp+name]", "lea     rsi, aIf; \"if\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_3F8A"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 48, 0, 0, 2, 0, 1, 12, 18, 0.2104649292149292, ["cmp     [rbp+skip], 0", "jz      short loc_4586"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 47, 0, 0, 2, 0, 0, 13, 18, 0.0, ["mov     rax, [rbp+skip]", "mov     cs:skip_records, rax"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax"]], [1, 0, 71, 0, 0, 2, 0, 1, 2, 28, 0.22273166023166022, ["cmp     [rbp+blocksize], 0", "jz      short loc_439D"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 20, 0, 2, 7, 0, 2, 24, 7, 0.0, ["lea     rdi, aCannotCombineL; \"cannot combine lcase and ucase\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 46, 0, 0, 4, 2, 1, 13, 17, 0.2146074646074646, ["mov     eax, cs:input_flags", "and     eax, 4", "test    eax, eax", "jz      short loc_45D3"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 45, 0, 0, 2, 0, 1, 14, 17, 0.004745817245817245, ["cmp     [rbp+count], 0FFFFFFFFFFFFFFFFh", "jz      short loc_45D3"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 69, 0, 0, 5, 0, 1, 3, 27, 0.111003861003861, ["mov     rax, [rbp+blocksize]", "mov     cs:output_blocksize, rax", "mov     rax, cs:output_blocksize", "mov     cs:input_blocksize, rax", "jmp     short loc_43AC"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,<TAG>", "mov~<TAG>,rax", "jmp~FOO"]], [0, 1, 19, 0, 1, 6, 2, 2, 24, 6, 0.1299066924066924, ["mov     eax, cs:conversions_mask", "and     eax, 3000h", "mov     edi, eax; i", "call    multiple_bits_set", "test    al, al", "jz      short loc_47C2"], ["mov~eax,<TAG>", "and~eax,<STR>", "mov~edi,eax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 112, 0, 1, 6, 1, 2, 4, 32, 0.0719916344916345, ["mov     rax, [rbp+name]", "lea     rsi, aOf; \"of\"", "mov     rdi, rax; operand", "call    operand_is", "test    al, al", "jz      short loc_3FB1"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 69, 0, 0, 3, 1, 0, 3, 27, 0.111003861003861, ["mov     eax, cs:conversions_mask", "or      ah, 8", "mov     cs:conversions_mask, eax"], ["mov~eax,<TAG>", "or~ah,0", "mov~<TAG>,eax"]], [0, 0, 68, 0, 0, 3, 1, 1, 4, 26, 0.22972972972972971, ["mov     rax, cs:input_blocksize", "test    rax, rax", "jnz     short loc_43C3"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 1, 67, 0, 0, 1, 0, 0, 5, 26, 0.0, ["mov     cs:input_blocksize, 200h"], ["mov~<TAG>,<STR>"]], [3, 0, 18, 0, 2, 7, 0, 2, 25, 6, 0.0, ["lea     rdi, aCannotCombineE; \"cannot combine excl and nocreat\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 66, 0, 0, 3, 1, 1, 5, 25, 0.2335907335907336, ["mov     rax, cs:output_blocksize", "test    rax, rax", "jnz     short loc_43DA"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 1, 65, 0, 0, 1, 0, 0, 6, 25, 0.0, ["mov     cs:output_blocksize, 200h"], ["mov~<TAG>,<STR>"]], [2, 0, 42, 2, 0, 12, 0, 1, 15, 16, 0.001689189189189189, ["mov     rbx, cs:input_blocksize", "mov     rax, [rbp+count]", "mov     edx, 0", "div     rbx", "mov     cs:max_records, rax", "mov     rcx, cs:input_blocksize", "mov     rax, [rbp+count]", "mov     edx, 0", "div     rcx", "mov     rax, rdx", "mov     cs:max_bytes, rax", "jmp     short loc_45E5"], ["mov~rbx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rbx", "mov~<TAG>,rax", "mov~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rcx", "mov~rax,rdx", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 43, 0, 0, 2, 0, 1, 14, 16, 0.20583976833976833, ["cmp     [rbp+count], 0FFFFFFFFFFFFFFFFh", "jz      short loc_45E5"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 42, 0, 0, 2, 0, 0, 15, 16, 0.0, ["mov     rax, [rbp+count]", "mov     cs:max_records, rax"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax"]]], "func_feature": [59, 78, 139, 1, 113, 163, 1, 595, 0.06249, 58, 15], "succs": [[11, 12], [0, 2], [0], [10], [3, 5], [10, 3], [69], [16, 6], [24, 27], [8, 92], [32, 17], [33, 30], [11], [32], [13], [13], [25, 29], [22, 15], [26], [18, 20], [26, 23], [19, 20], [14, 15], [26], [89], [69], [50, 28], [52, 44], [50, 35], [40, 31], [], [69], [36, 38], [60, 54], [48, 39], [49, 34], [58, 62], [36], [43, 47], [48, 49], [51, 45], [79], [41, 79], [46, 47], [89], [69], [37], [37], [49, 50], [55], [55], [68, 53], [57, 63], [69], [], [59, 61], [71, 7], [56, 70], [], [42], [64, 80], [42], [], [89], [65, 66], [78], [78], [77], [], [72, 73], [69], [69], [75], [74, 75], [75], [89, 82], [94, 86], [97, 76], [], [85, 87], [81, 95], [93, 95], [83, 84], [88], [88], [87], [], [98, 102], [89], [77], [89], [89], [89], [99], [90, 103], [96, 99], [99], [104, 101], [102], [100, 111], [110, 111], [105], [107, 4], [9, 91], [105], [106, 108], [108], [4], [1, 109], [1], [21], [112, 21], [21]], "fname": "scanargs", "n_num": 113}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 16, 1, 0, 7, 2, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     eax, cs:conversions_mask", "and     eax, 1", "test    eax, eax", "jz      short loc_48EE"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 4, 0, 0, 4, 2, 1, 0, 2, 0.2, ["mov     eax, cs:conversions_mask", "and     eax, 2", "test    eax, eax", "jz      short loc_49CF"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 0, 3, 0.0625, ["mov     cs:translation_needed, 1", "jmp     short loc_499E"], ["mov~<TAG>,0", "jmp~FOO"]], [0, 1, 9, 0, 0, 4, 2, 1, 0, 3, 0.1125, ["mov     eax, cs:conversions_mask", "and     eax, 20h", "test    eax, eax", "jz      short loc_499E"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 0, 3, 0.0625, ["mov     cs:translation_needed, 1"], ["mov~<TAG>,0"]], [1, 0, 8, 0, 0, 2, 0, 1, 0, 5, 0.0375, ["mov     [rbp+i], 0", "jmp     short loc_4935"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 14, 0, 0, 4, 2, 1, 0, 4, 0.11666666666666667, ["mov     eax, cs:conversions_mask", "and     eax, 40h", "test    eax, eax", "jz      short loc_4947"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 0, 4, 0.07916666666666666, ["cmp     [rbp+i], 0FFh", "jle     short loc_4904"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 15, 0, 1, 2, 0, 1, 0, 5, 0.0, ["lea     rdi, ebcdic_to_ascii; new_trans", "call    translate_charset"], ["lea~rdi,<TAG>", "call~FOO"]], [1, 0, 8, 1, 1, 13, 0, 1, 0, 5, 0.0, ["mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "movzx   eax, byte ptr [rdx+rax]", "movzx   eax, al", "mov     edi, eax; c", "call    _tolower", "mov     ecx, eax", "mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "mov     [rdx+rax], cl", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~ecx,eax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "mov~<TAG>,cl", "add~[rbp+0],0"]], [1, 0, 8, 0, 0, 2, 0, 1, 0, 4, 0.0875, ["cmp     [rbp+i], 0FFh", "jle     short loc_495D"], ["cmp~[rbp+0],0", "jle~FOO"]], [2, 0, 1, 0, 1, 7, 0, 2, 0, 1, 0.027083333333333334, ["lea     rdi, ascii_to_ebcdic; new_trans", "call    translate_charset", "mov     eax, 25h ; '%'", "mov     byte ptr cs:newline_character, al; \"\\n\"", "mov     eax, 40h ; '@'", "mov     byte ptr cs:space_character, al; \" \"", "jmp     short loc_49FE"], ["lea~rdi,<TAG>", "call~FOO", "mov~eax,0", "mov~<TAG>,al", "mov~eax,0", "mov~<TAG>,al", "jmp~FOO"]], [1, 0, 8, 1, 1, 13, 0, 1, 0, 5, 0.0, ["mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "movzx   eax, byte ptr [rdx+rax]", "movzx   eax, al", "mov     edi, eax; c", "call    _toupper", "mov     ecx, eax", "mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "mov     [rdx+rax], cl", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~ecx,eax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "mov~<TAG>,cl", "add~[rbp+0],0"]], [1, 0, 8, 0, 0, 2, 0, 1, 0, 5, 0.05, ["mov     [rbp+i], 0", "jmp     short loc_498E"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [1, 0, 2, 0, 0, 4, 2, 1, 0, 1, 0.08125, ["mov     eax, cs:conversions_mask", "and     eax, 4", "test    eax, eax", "jz      short loc_49FE"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 1, 0, 1, 6, 0, 1, 0, 1, 0.0, ["lea     rdi, ascii_to_ibm; new_trans", "call    translate_charset", "mov     eax, 25h ; '%'", "mov     byte ptr cs:newline_character, al; \"\\n\"", "mov     eax, 40h ; '@'", "mov     byte ptr cs:space_character, al; \" \""], ["lea~rdi,<TAG>", "call~FOO", "mov~eax,0", "mov~<TAG>,al", "mov~eax,0", "mov~<TAG>,al"]]], "func_feature": [5, 10, 16, 0, 17, 23, 1, 78, 0.05392, 8, 3], "succs": [[8, 6], [11, 15], [1], [1, 13], [1], [7], [3, 5], [2, 12], [6], [10], [9, 4], [14], [7], [10], [], [16, 14], [14]], "fname": "apply_translations", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 0, 0.5, ["cmp     [rbp+i], 0", "jnz     short loc_4A23"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 1, 3, 1, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+buf], rdi", "mov     [rbp+nread], rsi", "mov     rax, [rbp+nread]", "mov     [rbp+i], rax", "mov     rax, [rbp+buf]", "mov     [rbp+cp], rax", "jmp     short loc_4A57"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 3, 2, 1, 14, 0, 1, 2, 0, 0.0, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "mov     edi, eax; ch_0", "call    to_uchar", "movzx   eax, al", "movsxd  rdx, eax", "lea     rax, trans_table", "movzx   eax, byte ptr [rdx+rax]", "mov     edx, eax", "mov     rax, [rbp+cp]", "mov     [rax], dl", "sub     [rbp+i], 1", "add     [rbp+cp], 1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movsx~eax,al", "mov~edi,eax", "call~FOO", "movzx~eax,al", "movsxd~rdx,eax", "lea~rax,<TAG>", "movzx~eax,<TAG>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "sub~[rbp+0],0", "add~[rbp+0],0"]]], "func_feature": [1, 0, 3, 0, 4, 4, 1, 29, 0.125, 1, 3], "succs": [[], [0, 3], [1], [1]], "fname": "translate_buffer", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 4, 1, 0, 12, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+nread]", "mov     rax, [rax]", "lea     rdx, [rax-1]", "mov     rax, [rbp+nread]", "mov     [rax], rdx", "mov     rax, [rbp+nread]", "mov     rdx, [rax]", "mov     rax, [rbp+bufstart]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     cs:saved_char, al", "mov     cs:char_is_saved, 1"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~<TAG>,0"]], [1, 0, 5, 0, 0, 5, 2, 1, 1, 3, 0.23809523809523808, ["mov     rax, [rbp+nread]", "mov     rax, [rax]", "and     eax, 1", "test    rax, rax", "jz      short loc_4AEA"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "and~eax,0", "test~rax,rax", "jz~FOO"]], [2, 0, 6, 1, 0, 10, 0, 0, 1, 4, 0.0, ["sub     [rbp+bufstart], 1", "movzx   edx, cs:saved_char", "mov     rax, [rbp+bufstart]", "mov     [rax], dl", "mov     rax, [rbp+nread]", "mov     rax, [rax]", "lea     rdx, [rax+1]", "mov     rax, [rbp+nread]", "mov     [rax], rdx", "mov     cs:char_is_saved, 0"], ["sub~[rbp+0],0", "movzx~edx,<TAG>", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~<TAG>,0"]], [0, 0, 7, 0, 0, 9, 1, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+buf], rdi", "mov     [rbp+nread], rsi", "mov     rax, [rbp+buf]", "mov     [rbp+bufstart], rax", "movzx   eax, cs:char_is_saved", "test    al, al", "jz      short loc_4AAB"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 1, 0.26190476190476186, ["cmp     [rbp+i], 0", "jnz     short loc_4B0C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 1, 0, 10, 0, 1, 2, 2, 0.2857142857142857, ["mov     rax, [rbp+nread]", "mov     rdx, [rax]", "mov     rax, [rbp+bufstart]", "add     rax, rdx", "mov     [rbp+cp], rax", "mov     rax, [rbp+nread]", "mov     rax, [rax]", "shr     rax, 1", "mov     [rbp+i], rax", "jmp     short loc_4B24"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "shr~rax,0", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 3, 2, 0, 6, 0, 0, 4, 2, 0.0, ["mov     rax, [rbp+cp]", "movzx   edx, byte ptr [rax-2]", "mov     rax, [rbp+cp]", "mov     [rax], dl", "sub     [rbp+i], 1", "sub     [rbp+cp], 2"], ["mov~rax,[rbp+0]", "movzx~edx,[yte ptr [rax-2]+0]", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "sub~[rbp+0],0", "sub~[rbp+0],0"]], [1, 0, 0, 1, 0, 4, 0, 0, 4, 0, 0.0, ["add     [rbp+bufstart], 1", "mov     rax, [rbp+bufstart]", "pop     rbp", "retn"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 3, 4, 0, 8, 10, 1, 58, 0.09821, 2, 6], "succs": [[5], [0, 5], [1], [1, 2], [6, 7], [4], [4], []], "fname": "swab_buffer", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.0, ["mov     cs:input_offset_overflow, 1"], ["mov~<TAG>,0"]], [0, 0, 2, 1, 0, 10, 0, 0, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+offset], rdi", "mov     rdx, cs:input_offset", "mov     rax, [rbp+offset]", "add     rax, rdx", "mov     cs:input_offset, rax", "mov     rax, cs:input_offset", "cmp     [rbp+offset], rax", "jbe     short loc_4B67"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,rax", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["nop", "pop     rbp", "retn"], ["nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 3, 3, 4, 14, 0.0, 2, 1], "succs": [[2], [0, 2], []], "fname": "advance_input_offset", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0.0, ["add     rsp, 0A8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 1, 0, 0.16363636363636364, ["mov     rax, [rbp+new_position]", "mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_4CB7"], ["mov~rax,[rbp+0]", "mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [2, 0, 9, 0, 1, 8, 1, 2, 2, 0, 0.10909090909090909, ["lea     rdx, [rbp+s2]", "mov     eax, [rbp+fdesc]", "mov     esi, 80306D02h; request", "mov     edi, eax; fd", "mov     eax, 0", "call    _ioctl", "test    eax, eax", "jnz     short loc_4C9C"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 1, 0, 0.06363636363636363, ["cmp     [rbp+got_original_tape_position], 0", "jz      loc_4C9C"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 4, 0, 1, 5, 0, 0.13636363636363635, ["mov     edx, [rbp+s1.mt_blkno]", "mov     eax, [rbp+s2.mt_blkno]", "cmp     edx, eax", "jnz     short loc_4C9C"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jnz~FOO"]], [0, 0, 7, 0, 0, 4, 0, 1, 4, 0, 0.14545454545454545, ["mov     edx, [rbp+s1.mt_fileno]", "mov     eax, [rbp+s2.mt_fileno]", "cmp     edx, eax", "jnz     short loc_4C9C"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jnz~FOO"]], [3, 0, 4, 0, 2, 12, 0, 2, 7, 0, 0.0, ["mov     rax, [rbp+s2.mt_type]", "mov     rbx, rax", "lea     rdi, aWarningWorking; \"warning: working around lseek kernel bu\"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     rax, [rbp+filename]", "mov     r8, rbx", "mov     rcx, rax", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 5, 0, 0, 3, 0, 1, 6, 0, 0.10909090909090909, ["mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_4C86"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [2, 0, 3, 0, 1, 3, 0, 1, 7, 0, 0.05454545454545454, ["call    ___errno_location", "mov     dword ptr [rax], 0", "mov     [rbp+new_position], 0FFFFFFFFFFFFFFFFh"], ["call~FOO", "mov~<TAG>,0", "mov~[rbp+0],0"]], [0, 0, 8, 0, 0, 4, 0, 1, 3, 0, 0.13636363636363635, ["mov     rdx, [rbp+s1.mt_resid]", "mov     rax, [rbp+s2.mt_resid]", "cmp     rdx, rax", "jnz     short loc_4C9C"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [4, 0, 11, 1, 2, 29, 2, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0A8h", "mov     [rbp+filename], rdi", "mov     [rbp+fdesc], esi", "mov     [rbp+offset], rdx", "mov     [rbp+whence], ecx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "lea     rdx, [rbp+s1]", "mov     eax, [rbp+fdesc]", "mov     esi, 80306D02h; request", "mov     edi, eax; fd", "mov     eax, 0", "call    _ioctl", "test    eax, eax", "setz    al", "mov     [rbp+got_original_tape_position], al", "mov     edx, [rbp+whence]; whence", "mov     rcx, [rbp+offset]", "mov     eax, [rbp+fdesc]", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    _lseek", "mov     [rbp+new_position], rax", "cmp     [rbp+new_position], 0", "js      loc_4C9C"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "test~eax,eax", "setz~al", "mov~[rbp+0],al", "mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [7, 4, 15, 1, 12, 18, 3, 78, 0.07652, 3, 2], "succs": [[], [0, 11], [9, 1], [1, 2], [1, 7], [1, 4], [8], [8, 6], [1], [1, 5], [1, 3], []], "fname": "skip_via_lseek", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 4, 0, 0, 2, 0, 1, 0, 0, 0.03805496828752643, ["cmp     [rbp+fdesc], 0", "jnz     short loc_505F"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 23, 0, 1, 7, 0, 1, 6, 5, 0.12949260042283298, ["mov     rsi, [rbp+buf]; char *", "mov     edi, [rbp+fdesc]; int", "mov     rdx, rax; size_t", "call    rcx ; iread_fnc", "mov     [rbp+nread], rax", "cmp     [rbp+nread], 0", "jns     loc_50AE"], ["mov~rsi,[rbp+0]", "mov~edi,[rbp+0]", "mov~rdx,rax", "call~rcx", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 2, 4, 0.012684989429175477, ["cmp     [rbp+fdesc], 0", "jnz     loc_4E74"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 43, 0, 1, 8, 1, 2, 1, 5, 0.006871035940803383, ["mov     rdx, [rbp+offset]; offset", "mov     esi, [rbp+fdesc]; fdesc", "mov     rax, [rbp+file]", "mov     ecx, 1; whence", "mov     rdi, rax; filename", "call    skip_via_lseek", "test    rax, rax", "js      loc_4E99"], ["mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "test~rax,rax", "js~FOO"]], [2, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.0063424947145877385, ["mov     [rbp+records], 0", "mov     rax, [rbp+bytes]", "mov     qword ptr [rax], 0"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,0"]], [1, 0, 25, 0, 0, 2, 0, 1, 2, 9, 0.036469344608879496, ["cmp     [rbp+fdesc], 0", "jnz     short loc_4F9E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 32, 0, 2, 11, 1, 3, 1, 10, 0.0306553911205074, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+lseek_errno], eax", "mov     esi, [rbp+fdesc]; fdesc", "mov     rax, [rbp+file]", "mov     ecx, 2; whence", "mov     edx, 0; offset", "mov     rdi, rax; filename", "call    skip_via_lseek", "test    rax, rax", "js      loc_4F80"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~edx,0", "mov~rdi,rax", "call~FOO", "test~rax,rax", "js~FOO"]], [0, 0, 23, 0, 0, 4, 1, 1, 12, 4, 0.02167019027484144, ["mov     rax, [rbp+bytes]", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_4FB1"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 23, 0, 0, 2, 0, 1, 11, 5, 0.0708245243128964, ["cmp     [rbp+records], 0", "jnz     loc_4FB1"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 23, 0, 0, 2, 0, 1, 9, 7, 0.06289640591966174, ["cmp     [rbp+records], 0", "jz      short loc_50E4"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 23, 0, 0, 2, 0, 1, 8, 8, 0.057610993657505286, ["cmp     [rbp+fdesc], 0", "jnz     short loc_50D0"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 23, 0, 1, 3, 0, 1, 9, 8, 0.0, ["mov     rax, [rbp+nread]", "mov     rdi, rax; offset", "call    advance_input_offset"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 4, 0, 0, 1, 0, 1, 13, 3, 0.014799154334038056, ["jmp     short loc_5116"], ["jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.01744186046511628, ["mov     rax, [rbp+records]", "jmp     loc_511D"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 4, 0, 1, 4, 0, 2, 6, 3, 0.012684989429175477, ["mov     rax, [rbp+offset]", "mov     rdi, rax; offset", "call    advance_input_offset", "jmp     short loc_4E8D"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 7, 1, 0, 7, 0, 0, 5, 5, 0.0031712473572938693, ["mov     rax, [rbp+st.st_size]", "mov     rcx, rax", "mov     rdx, cs:input_offset", "mov     rax, [rbp+offset]", "add     rax, rdx", "cmp     rcx, rax", "jnb     short loc_4E58"], ["mov~rax,[rbp+0]", "mov~rcx,rax", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~rcx,rax", "jnb~FOO"]], [0, 0, 8, 0, 1, 5, 1, 2, 4, 5, 0.014799154334038056, ["lea     rax, [rbp+st]", "mov     rdi, rax; sb", "call    usable_st_size", "test    al, al", "jz      short loc_4E58"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 9, 2, 0.02854122621564482, ["mov     rax, [rbp+records]"], ["mov~rax,[rbp+0]"]], [0, 0, 4, 0, 0, 1, 0, 0, 8, 3, 0.020084566596194505, ["nop"], ["nop"]], [0, 0, 23, 0, 1, 4, 0, 2, 3, 8, 0.022727272727272728, ["call    alloc_ibuf", "mov     rax, cs:ibuf", "mov     [rbp+buf], rax", "jmp     short loc_4FB1"], ["call~FOO", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [4, 0, 1, 0, 3, 15, 0, 3, 8, -1, 0.005021141649048626, ["mov     rax, [rbp+file]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aSCannotSeek; \"%s: cannot seek\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     eax, [rbp+lseek_errno]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 10, 0, 1, 6, 1, 2, 3, 6, 0.009513742071881607, ["lea     rax, [rbp+st]", "mov     rsi, rax; stat_buf", "mov     edi, 0; fildes", "call    fstat", "test    eax, eax", "jz      short loc_4DE7"], ["lea~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [4, 0, 2, 0, 4, 20, 2, 5, 8, -1, 0.015063424947145878, ["mov     rax, [rbp+file]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorReadingS; \"error reading %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, cs:conversions_mask", "and     eax, 100h", "test    eax, eax", "jz      short loc_50A4"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 23, 0, 0, 1, 0, 0, 5, 6, 0.057610993657505286, ["mov     rax, [rbp+blocksize]"], ["mov~rax,[rbp+0]"]], [1, 0, 23, 0, 0, 3, 0, 1, 4, 7, 0.12156448202959831, ["mov     rcx, cs:iread_fnc", "cmp     [rbp+records], 0", "jnz     short loc_4FCE"], ["mov~rcx,<TAG>", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 9, -1, 0.0, ["mov     edi, 1; code", "call    quit"], ["mov~edi,0", "call~FOO"]], [0, 0, 1, 0, 1, 2, 0, 2, 9, -1, 0.0, ["call    print_stats", "jmp     short loc_50A4"], ["call~FOO", "jmp~FOO"]], [0, 0, 23, 0, 1, 3, 0, 1, 3, 8, 0.022727272727272728, ["call    alloc_obuf", "mov     rax, cs:obuf", "mov     [rbp+buf], rax"], ["call~FOO", "mov~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0.03276955602536998, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_5131"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [4, 0, 1, 0, 3, 16, 0, 4, 4, -1, 0.0015856236786469346, ["mov     rax, [rbp+file]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aSCannotSkip; \"%s: cannot skip\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     eax, [rbp+lseek_errno]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "jmp     short loc_4F76"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, -1, 0.007928118393234672, ["cmp     [rbp+fdesc], 0", "jnz     short loc_4F31"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 23, 0, 0, 2, 0, 1, 7, 4, 0.08456659619450317, ["cmp     [rbp+nread], 0", "jz      short loc_5115"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 1, 0, 1, 0, 5, 0, 0, 6, 0, 0.0, ["add     rsp, 0F0h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [3, 1, 44, 4, 1, 27, 1, 2, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 0F0h", "mov     [rbp+fdesc], edi", "mov     [rbp+file], rsi", "mov     [rbp+records], rdx", "mov     [rbp+blocksize], rcx", "mov     [rbp+bytes], r8", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+records]", "imul    rax, [rbp+blocksize]", "mov     rdx, rax", "mov     rax, [rbp+bytes]", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+offset], rax", "call    ___errno_location", "mov     dword ptr [rax], 0", "mov     rax, 7FFFFFFFFFFFFFFFh", "mov     edx, 0", "div     [rbp+blocksize]", "cmp     [rbp+records], rax", "ja      loc_4E99"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "call~FOO", "mov~<TAG>,0", "mov~rax,0", "mov~edx,0", "div~,[rbp+0]", "cmp~[rbp+0],rax", "ja~FOO"]], [0, 0, 23, 0, 0, 3, 0, 1, 5, 6, 0.057610993657505286, ["mov     rax, [rbp+bytes]", "mov     rax, [rax]", "jmp     short loc_4FD5"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "jmp~FOO"]], [1, 0, 23, 1, 0, 2, 0, 1, 10, 6, 0.028276955602537, ["sub     [rbp+records], 1", "jmp     short loc_50F2"], ["sub~[rbp+0],0", "jmp~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 2, -1, 0.007928118393234672, ["cmp     [rbp+lseek_errno], 0", "jnz     short loc_4EE1"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 5, 3, 0, 14, 0, 1, 6, 4, 0.001321353065539112, ["mov     rax, [rbp+st.st_size]", "mov     rdx, rax", "mov     rax, [rbp+offset]", "sub     rax, rdx", "mov     edx, 0", "div     [rbp+blocksize]", "mov     [rbp+records], rax", "mov     rax, [rbp+st.st_size]", "mov     rdx, rax", "mov     rax, cs:input_offset", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+offset], rax", "jmp     short loc_4E63"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,rdx", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,<TAG>", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 3, -1, 0.0, ["mov     [rbp+lseek_errno], 4Bh ; 'K'"], ["mov~[rbp+0],0"]], [1, 0, 5, 0, 0, 1, 0, 0, 5, 4, 0.01083509513742072, ["mov     [rbp+records], 0"], ["mov~[rbp+0],0"]], [3, 0, 9, 0, 4, 16, 0, 4, 4, 6, 0.0, ["mov     rax, [rbp+file]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotFstatS; \"cannot fstat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 23, 0, 0, 2, 0, 0, 10, 6, 0.028276955602537, ["mov     rax, [rbp+bytes]", "mov     qword ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [4, 0, 1, 0, 3, 15, 0, 3, 4, -1, 0.0015856236786469346, ["mov     rax, [rbp+file]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aSCannotSeek; \"%s: cannot seek\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     eax, [rbp+lseek_errno]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 5, -1, 0.0, ["mov     edi, 1; code", "call    quit"], ["mov~edi,0", "call~FOO"]]], "func_feature": [32, 9, 59, 1, 45, 61, 2, 239, 0.02449, 10, 10], "succs": [[20, 22], [0, 32], [4, 21], [2, 6], [13], [27, 19], [5, 37], [24, 12], [24, 7], [42, 36], [9, 11], [9], [17], [29], [13], [40, 38], [40, 15], [29], [17], [24], [25], [16, 41], [25, 26], [1], [35, 23], [], [25], [24], [], [33, 28], [44], [43, 30], [10, 18], [], [3, 6], [1], [8], [31, 39], [14], [31], [14], [16], [8], [44], []], "fname": "skip", "n_num": 45}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[5, 0, 1, 0, 3, 15, 0, 4, 0, 0, 0.004901960784313725, ["mov     rax, cs:input_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aOffsetOverflow; \"offset overflow while reading file %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 0", "jmp     loc_533D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 14, 0, 1, 15, 3, 2, 1, 2, 0.042483660130718956, ["mov     rax, [rbp+nbytes]", "mov     rdi, rax; offset", "call    advance_input_offset", "movzx   eax, cs:input_offset_overflow", "movzx   edx, al", "mov     rax, cs:input_offset", "shr     rax, 3Fh", "movzx   eax, al", "or      eax, edx", "test    eax, eax", "setnz   al", "mov     cs:input_offset_overflow, al", "movzx   eax, cs:input_offset_overflow", "test    al, al", "jz      short loc_5207"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,<TAG>", "movzx~edx,al", "mov~rax,<TAG>", "shr~rax,0", "movzx~eax,al", "or~eax,edx", "test~eax,eax", "setnz~al", "mov~<TAG>,al", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 4, 0, 0, 3, 0, 1, 1, 2, 0.00980392156862745, ["mov     eax, cs:input_seek_errno", "cmp     eax, 1Dh", "jnz     short loc_516F"], ["mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 1, 18, 1, 0, 10, 2, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 20h", "mov     [rbp+nbytes], rdi", "movzx   eax, cs:input_seekable", "xor     eax, 1", "test    al, al", "jz      short loc_5184"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [4, 0, 12, 0, 1, 7, 0, 2, 2, 2, 0.07026143790849673, ["mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, 0; fd", "call    _lseek", "mov     [rbp+offset], rax", "cmp     [rbp+offset], 0", "js      loc_52EF"], ["mov~edx,0", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [0, 1, 0, 1, 0, 5, 0, 0, 3, 0, 0.0, ["add     rsp, 20h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.004901960784313725, ["mov     eax, 1", "jmp     loc_533D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.0032679738562091504, ["mov     eax, 1", "jmp     loc_533D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 7, 1, 0.016339869281045753, ["mov     eax, 1", "jmp     short loc_533D"], ["mov~eax,0", "jmp~FOO"]], [5, 0, 1, 0, 4, 18, 0, 4, 3, 1, 0.013071895424836602, ["mov     rax, cs:input_file", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aSCannotSeek; \"%s: cannot seek\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 0"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0"]], [0, 0, 8, 0, 0, 3, 0, 0, 5, 3, 0.03758169934640523, ["mov     rax, [rbp+diff]", "cmp     [rbp+nbytes], rax", "jnb     short loc_5298"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jnb~FOO"]], [1, 0, 9, 1, 0, 7, 0, 1, 4, 4, 0.09477124183006536, ["mov     rdx, cs:input_offset", "mov     rax, [rbp+offset]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+diff], rax", "cmp     [rbp+diff], 0", "js      short loc_526A"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [3, 0, 2, 0, 2, 7, 0, 2, 8, 2, 0.0, ["lea     rdi, aCannotWorkArou; \"cannot work around kernel bug after all\"", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 3, 0, 1, 4, 1, 2, 7, 2, 0.049019607843137254, ["call    ___errno_location", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_52EF"], ["call~FOO", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 5, 0, 1, 8, 1, 2, 6, 2, 0.10784313725490197, ["mov     rax, cs:input_file", "mov     rdx, [rbp+diff]; offset", "mov     ecx, 1; whence", "mov     esi, 0; fdesc", "mov     rdi, rax; filename", "call    skip_via_lseek", "test    rax, rax", "js      short loc_52C1"], ["mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~ecx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~rax,rax", "js~FOO"]], [1, 0, 7, 0, 0, 3, 0, 1, 5, 3, 0.057189542483660136, ["mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_5298"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 6, 0, 2, 7, 0, 2, 6, 3, 0.0, ["lea     rdi, aWarningInvalid; \"warning: invalid file offset after fail\"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 2, 0, 1, 5, 0, 2, 2, 2, 0.004901960784313725, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, cs:input_seek_errno", "mov     [rdx], eax", "jmp     loc_52EF"], ["call~FOO", "mov~rdx,rax", "mov~eax,<TAG>", "mov~<TAG>,eax", "jmp~FOO"]], [0, 0, 11, 0, 0, 4, 0, 1, 3, 2, 0.08823529411764706, ["mov     rdx, [rbp+offset]", "mov     rax, cs:input_offset", "cmp     rdx, rax", "jnz     short loc_5244"], ["mov~rdx,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]]], "func_feature": [16, 7, 30, 0, 19, 28, 1, 127, 0.03182, 10, 3], "succs": [[5], [0, 4], [17, 6], [1, 2], [9, 18], [], [5], [5], [5], [5], [14, 15], [10, 15], [9], [9, 12], [8, 13], [16, 14], [14], [9], [11, 7]], "fname": "advance_input_after_read_error", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [1, 0, 4, 0, 0, 2, 0, 1, 2, 0, 0.3333333333333333, ["cmp     [rbp+nread], 0", "jnz     loc_535E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 1, 4, 1, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+buf], rdi", "mov     [rbp+nread], rsi", "mov     rax, [rbp+buf]", "mov     [rbp+start], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 4, 0, 1, 1, 0, 1, 2, 0, 0.0, ["call    write_output"], ["call~FOO"]], [0, 0, 4, 4, 1, 27, 0, 1, 1, 0, 0.3333333333333333, ["mov     rdx, cs:output_blocksize", "mov     rax, cs:oc", "sub     rdx, rax", "mov     rax, rdx", "cmp     [rbp+nread], rax", "cmovbe  rax, [rbp+nread]", "mov     [rbp+nfree], rax", "mov     rdx, cs:obuf", "mov     rax, cs:oc", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nfree]; n", "mov     rax, [rbp+start]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rax, [rbp+nfree]", "sub     [rbp+nread], rax", "mov     rax, [rbp+nfree]", "add     [rbp+start], rax", "mov     rdx, cs:oc", "mov     rax, [rbp+nfree]", "add     rax, rdx", "mov     cs:oc, rax", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_53E1"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "sub~rdx,rax", "mov~rax,rdx", "cmp~[rbp+0],rax", "cmovbe~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rdx,<TAG>", "mov~rax,<TAG>", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,rax", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]]], "func_feature": [2, 0, 3, 0, 5, 6, 1, 40, 0.13333, 3, 5], "succs": [[], [0, 4], [4], [1], [1, 3]], "fname": "copy_simple", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 17, 0, 0, 3, 0, 1, 0, 0, 0.1764705882352941, ["mov     rax, cs:col", "mov     [rbp+j], rax", "jmp     short loc_5485"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 17, 0, 0, 4, 0, 0, 3, 4, 0.27205882352941174, ["mov     rdx, cs:col", "mov     rax, cs:conversion_blocksize", "cmp     rdx, rax", "jnb     short loc_5492"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jnb~FOO"]], [1, 0, 17, 1, 0, 1, 0, 0, 7, 5, 0.10661764705882353, ["add     [rbp+j], 1"], ["add~[rbp+0],0"]], [0, 0, 17, 0, 0, 11, 0, 0, 6, 6, 0.10661764705882353, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, byte ptr cs:space_character; \" \"", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_5480"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 17, 0, 1, 1, 0, 1, 7, 6, 0.0, ["call    write_output"], ["call~FOO"]], [1, 0, 17, 0, 0, 2, 0, 1, 1, 1, 0.6433823529411765, ["cmp     [rbp+i], 0", "jnz     loc_540C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 1, 17, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+buf], rdi", "mov     [rbp+nread], rsi", "mov     rax, [rbp+nread]", "mov     [rbp+i], rax", "jmp     loc_5536"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 17, 2, 0, 2, 0, 0, 5, 2, 0.5808823529411765, ["sub     [rbp+i], 1", "add     [rbp+buf], 1"], ["sub~[rbp+0],0", "add~[rbp+0],0"]], [0, 0, 17, 0, 0, 4, 0, 1, 3, 5, 0.25, ["mov     rdx, cs:col", "mov     rax, cs:conversion_blocksize", "cmp     rdx, rax", "jnz     short loc_54C9"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 17, 0, 0, 5, 0, 1, 2, 5, 0.5808823529411765, ["mov     rax, [rbp+buf]", "movzx   edx, byte ptr [rax]", "movzx   eax, byte ptr cs:newline_character; \"\\n\"", "cmp     dl, al", "jnz     loc_54A2"], ["mov~rax,[rbp+0]", "movzx~edx,<TAG>", "movzx~eax,<TAG>", "cmp~dl,al", "jnz~FOO"]], [0, 0, 17, 0, 0, 12, 0, 0, 5, 4, 0.05514705882352941, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "mov     rax, [rbp+buf]", "movzx   eax, byte ptr [rax]", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_551A"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 17, 0, 0, 4, 0, 0, 4, 4, 0.1488970588235294, ["mov     rdx, cs:col", "mov     rax, cs:conversion_blocksize", "cmp     rdx, rax", "jnb     short loc_551A"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jnb~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [1, 0, 17, 1, 0, 4, 0, 1, 4, 4, 0.042279411764705885, ["mov     rax, cs:r_truncate", "add     rax, 1", "mov     cs:r_truncate, rax", "jmp     short loc_551A"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "jmp~FOO"]], [0, 0, 17, 0, 0, 3, 0, 0, 5, 4, 0.34191176470588236, ["mov     rax, cs:conversion_blocksize", "cmp     [rbp+j], rax", "jb      short loc_5442"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 17, 0, 0, 2, 0, 1, 4, 3, 0.27205882352941174, ["mov     cs:col, 0", "jmp     loc_552C"], ["mov~<TAG>,0", "jmp~FOO"]], [1, 0, 17, 1, 0, 3, 0, 0, 5, 3, 0.25, ["mov     rax, cs:col", "add     rax, 1", "mov     cs:col, rax"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax"]], [0, 0, 17, 0, 1, 1, 0, 1, 6, 4, 0.0, ["call    write_output"], ["call~FOO"]]], "func_feature": [2, 0, 9, 0, 18, 25, 2, 73, 0.21262, 8, 6], "succs": [[14], [0, 15], [14], [2, 4], [2], [9, 12], [5], [5], [11, 13], [8, 1], [16, 17], [16, 10], [], [16], [3, 15], [7], [7], [16]], "fname": "copy_with_block", "n_num": 18}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 14, 1, 0, 3, 0, 0, 0, 0, 0.1263736263736264, ["mov     rax, cs:pending_spaces_6593", "sub     rax, 1", "mov     cs:pending_spaces_6593, rax"], ["mov~rax,<TAG>", "sub~rax,0", "mov~<TAG>,rax"]], [0, 0, 14, 0, 0, 11, 0, 0, 5, 6, 0.1263736263736264, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, byte ptr cs:space_character; \" \"", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_5656"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 14, 0, 1, 1, 0, 1, 6, 6, 0.0, ["call    write_output"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [0, 0, 14, 0, 0, 3, 0, 0, 1, 1, 0.5879120879120879, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+nread]", "jb      loc_5561"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [2, 0, 14, 1, 0, 15, 0, 0, 3, 3, 0.09340659340659341, ["mov     cs:pending_spaces_6593, 0", "mov     rax, cs:pending_spaces_6593", "mov     cs:col, rax", "sub     [rbp+i], 1", "mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, byte ptr cs:newline_character; \"\\n\"", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      loc_56AF"], ["mov~<TAG>,0", "mov~rax,<TAG>", "mov~<TAG>,rax", "sub~[rbp+0],0", "mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 14, 1, 0, 11, 0, 0, 2, 4, 0.5109890109890111, ["mov     rdx, [rbp+buf]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "mov     rax, cs:col", "lea     rdx, [rax+1]", "mov     cs:col, rdx", "mov     rdx, cs:conversion_blocksize", "cmp     rax, rdx", "jb      short loc_55F5"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "mov~rdx,<TAG>", "cmp~rax,rdx", "jb~FOO"]], [0, 0, 14, 0, 0, 11, 0, 0, 5, 3, 0.2417582417582418, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, [rbp+c]", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_56AF"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,[rbp+0]", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 14, 0, 0, 3, 1, 1, 4, 4, 0.4395604395604396, ["mov     rax, cs:pending_spaces_6593", "test    rax, rax", "jnz     short loc_5618"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 1, 14, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+buf], rdi", "mov     [rbp+nread], rsi", "mov     [rbp+i], 0", "jmp     loc_56B4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 14, 1, 0, 1, 0, 0, 4, 2, 0.5109890109890111, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 14, 0, 1, 1, 0, 1, 6, 3, 0.0, ["call    write_output"], ["call~FOO"]], [0, 0, 14, 0, 1, 2, 0, 2, 4, 3, 0.0, ["call    write_output", "jmp     loc_56AF"], ["call~FOO", "jmp~FOO"]], [0, 0, 14, 0, 0, 3, 0, 1, 3, 4, 0.3461538461538462, ["movzx   eax, byte ptr cs:space_character; \" \"", "cmp     [rbp+c], al", "jnz     short loc_5668"], ["movzx~eax,<TAG>", "cmp~[rbp+0],al", "jnz~FOO"]], [1, 0, 14, 1, 0, 4, 0, 1, 4, 3, 0.03296703296703297, ["mov     rax, cs:pending_spaces_6593", "add     rax, 1", "mov     cs:pending_spaces_6593, rax", "jmp     loc_56AF"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "jmp~FOO"]]], "func_feature": [3, 1, 8, 0, 15, 21, 2, 79, 0.2011, 8, 6], "succs": [[8], [0, 2], [0], [], [3, 6], [10, 12], [5, 13], [10, 11], [1, 7], [4], [4], [10], [10], [8, 14], [10]], "fname": "copy_with_unblock", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 8, 0, 0, 2, 0, 1, 0, 0, 0.19005847953216373, ["cmp     [rbp+ok], 0", "jz      short loc_5819"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 15, 0, 0, 4, 2, 1, 3, 4, 0.08771929824561403, ["mov     eax, [rbp+new_flags]", "and     eax, 10000h", "test    eax, eax", "jz      short loc_57D9"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 9, 0, 0, 1, 1, 0, 6, 4, 0.13157894736842105, ["and     [rbp+new_flags], 0FFFEFFFFh"], ["and~[rbp+0],0"]], [0, 0, 16, 0, 0, 3, 0, 1, 2, 3, 0.07456140350877193, ["mov     eax, [rbp+old_flags]", "cmp     eax, [rbp+new_flags]", "jz      loc_5819"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jz~FOO"]], [4, 0, 18, 0, 1, 12, 1, 1, 1, 4, 0.043859649122807015, ["mov     eax, [rbp+fd]", "mov     esi, 3; action", "mov     edi, eax; fd", "mov     eax, 0", "call    rpl_fcntl", "mov     [rbp+old_flags], eax", "mov     eax, [rbp+old_flags]", "or      eax, [rbp+add_flags]", "mov     [rbp+new_flags], eax", "mov     [rbp+ok], 1", "cmp     [rbp+old_flags], 0", "jns     short loc_5757"], ["mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "or~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 4, 0, 0, 4, 2, 1, 3, 2, 0.16666666666666666, ["movzx   eax, [rbp+ok]", "xor     eax, 1", "test    al, al", "jz      short loc_586B"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 2, 3, 0.01023391812865497, ["mov     [rbp+ok], 0", "jmp     loc_5819"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 7, 0, 0, 3, 0, 1, 5, 3, 0.06432748538011696, ["mov     eax, [rbp+old_flags]", "cmp     eax, [rbp+new_flags]", "jz      short loc_5819"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jz~FOO"]], [3, 0, 6, 0, 1, 8, 0, 2, 6, 3, 0.03508771929824561, ["mov     edx, [rbp+new_flags]", "mov     eax, [rbp+fd]", "mov     esi, 4; action", "mov     edi, eax; fd", "mov     eax, 0", "call    rpl_fcntl", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_5819"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "cmp~eax,0", "jnz~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 7, 3, 0.0, ["mov     [rbp+ok], 0"], ["mov~[rbp+0],0"]], [3, 0, 19, 1, 0, 14, 2, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 0C0h", "mov     [rbp+fd], edi", "mov     [rbp+add_flags], esi", "mov     [rbp+name], rdx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "and     [rbp+add_flags], 0FFFDFEFFh", "cmp     [rbp+add_flags], 0", "jz      loc_586B"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "and~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 10, 0, 1, 3, 0, 1, 7, 5, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 14h", "mov     [rbp+ok], 0"], ["call~FOO", "mov~<TAG>,0", "mov~[rbp+0],0"]], [1, 1, 11, 0, 0, 4, 1, 1, 6, 5, 0.017543859649122806, ["mov     eax, [rbp+st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_57CF"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 2, 0, 0.0, ["add     rsp, 0C0h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 1, 1, 0.09941520467836257, ["nop", "mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_5880"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 5, 5, 0.02046783625730994, ["mov     [rbp+ok], 0", "jmp     short loc_57CF"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 12, 0, 0, 4, 2, 1, 5, 5, 0.049707602339181284, ["mov     eax, [rbp+new_flags]", "and     eax, 10000h", "test    eax, eax", "jz      short loc_57CF"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 14, 0, 1, 7, 1, 2, 4, 6, 0.05847953216374269, ["lea     rdx, [rbp+st]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "jz      short loc_579C"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [3, 0, 3, 0, 4, 16, 0, 4, 4, 2, 0.0, ["mov     rax, [rbp+name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aSettingFlagsFo; \"setting flags for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]]], "func_feature": [9, 13, 22, 1, 20, 30, 2, 100, 0.05249, 2, 2], "succs": [[5, 7], [0, 17], [0], [1, 5], [3, 6], [19, 14], [5], [8, 5], [9, 5], [5], [4, 14], [2], [2, 11], [], [18, 13], [2], [2, 12], [16, 15], [], [14]], "fname": "set_fd_flags", "n_num": 20}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[3, 0, 106, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     [rbp+exit_status], 1", "mov     cs:input_seekable, 0", "mov     cs:input_seek_errno, 1Dh"], ["mov~[rbp+0],0", "mov~<TAG>,0", "mov~<TAG>,0"]], [2, 0, 106, 1, 3, 14, 2, 4, 16, 10, 0.037724909288145744, ["call    print_stats", "mov     rax, cs:input_blocksize", "sub     rax, [rbp+partread]", "mov     [rbp+bad_portion], rax", "mov     rax, [rbp+bad_portion]", "mov     rsi, rax; len", "mov     edi, 0; fd", "call    invalidate_cache", "mov     rax, [rbp+bad_portion]", "mov     rdi, rax; nbytes", "call    advance_input_after_read_error", "xor     eax, 1", "test    al, al", "jz      short loc_5E0D"], ["call~FOO", "mov~rax,<TAG>", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 44, 0, 0, 4, 2, 1, 10, 9, 0.0244080350129054, ["mov     eax, cs:conversions_mask", "and     eax, 8", "test    eax, eax", "jz      short loc_6116"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 45, 0, 0, 3, 1, 1, 9, 8, 0.20805745707552464, ["movzx   eax, cs:char_is_saved", "test    al, al", "jz      short loc_6174"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 106, 0, 0, 5, 2, 1, 10, 13, 0.012849287397598474, ["mov     rdx, cs:input_blocksize; n", "mov     eax, cs:conversions_mask", "and     eax, 18h", "test    eax, eax", "jz      short loc_5C11"], ["mov~rdx,<TAG>", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 106, 0, 0, 4, 2, 1, 9, 11, 0.017001458871058243, ["mov     eax, cs:conversions_mask", "and     eax, 100h", "test    eax, eax", "jz      short loc_5C27"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 30, 0, 0, 4, 2, 1, 12, 6, 0.011334305914038828, ["mov     eax, cs:conversions_mask", "and     eax, 10h", "test    eax, eax", "jz      short loc_624A"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 31, 0, 0, 3, 1, 1, 11, 6, 0.16485242958141624, ["mov     rax, cs:col", "test    rax, rax", "jz      short loc_624A"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 1, 106, 0, 0, 2, 0, 1, 11, 12, 0.004993827853215128, ["mov     ecx, 20h ; ' '", "jmp     short loc_5C16"], ["mov~ecx,<STR>", "jmp~FOO"]], [1, 0, 106, 0, 0, 1, 0, 0, 11, 12, 0.004993827853215128, ["mov     ecx, 0"], ["mov~ecx,0"]], [0, 0, 106, 0, 0, 3, 1, 1, 16, 16, 0.037145101559869824, ["movzx   eax, cs:translation_needed", "test    al, al", "jz      short loc_6031"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 106, 0, 0, 4, 0, 1, 15, 4, 0.12718363071858751, ["mov     rdx, cs:ibuf", "mov     rax, cs:obuf", "cmp     rdx, rax", "jnz     loc_600D"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [2, 0, 125, 0, 1, 13, 0, 2, 3, 6, 0.007574907417798227, ["mov     rax, cs:seek_bytes", "mov     [rbp+bytes], rax", "mov     rcx, cs:output_blocksize; blocksize", "mov     rdx, cs:seek_records; records", "mov     rax, cs:output_file", "lea     rsi, [rbp+bytes]", "mov     r8, rsi; bytes", "mov     rsi, rax; file", "mov     edi, 1; fdesc", "call    skip", "mov     [rbp+write_records], rax", "cmp     [rbp+write_records], 0", "jnz     short loc_5A2B"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rcx,<TAG>", "mov~rdx,<TAG>", "mov~rax,<TAG>", "lea~rsi,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 127, 0, 0, 3, 1, 1, 2, 6, 0.049882168106834254, ["mov     rax, cs:seek_records", "test    rax, rax", "jnz     short loc_59D0"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 126, 0, 0, 3, 1, 1, 3, 5, 0.049377174278981036, ["mov     rax, cs:seek_bytes", "test    rax, rax", "jz      loc_5B2C"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 1, 106, 0, 0, 4, 2, 1, 17, 9, 0.040754872255265036, ["mov     eax, cs:conversions_mask", "and     eax, 400h", "test    eax, eax", "jz      loc_60E4"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 0, 106, 0, 1, 4, 0, 1, 12, 11, 0.01739423184827741, ["mov     rax, cs:ibuf", "mov     esi, ecx; c", "mov     rdi, rax; s", "call    _memset"], ["mov~rax,<TAG>", "mov~esi,ecx", "mov~rdi,rax", "call~FOO"]], [0, 0, 124, 0, 0, 3, 1, 1, 4, 5, 0.0061721467848726294, ["mov     rax, [rbp+bytes]", "test    rax, rax", "jz      loc_5B2C"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [1, 0, 106, 0, 0, 2, 0, 1, 18, 8, 0.016047581640668836, ["cmp     [rbp+partread], 0", "jnz     loc_60E4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 106, 0, 1, 5, 0, 1, 17, 16, 0.0, ["mov     rdx, [rbp+bytes]", "mov     rax, cs:ibuf", "mov     rsi, rdx; nread", "mov     rdi, rax; buf", "call    translate_buffer"], ["mov~rdx,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [1, 0, 106, 1, 0, 4, 0, 1, 18, 13, 0.03834212396663302, ["mov     rax, cs:w_partial", "add     rax, 1", "mov     cs:w_partial, rax", "jmp     loc_60E5"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "jmp~FOO"]], [0, 0, 106, 0, 0, 4, 0, 1, 17, 14, 0.07954587962443427, ["mov     rdx, [rbp+bytes]", "mov     rax, cs:input_blocksize", "cmp     rdx, rax", "jnz     short loc_5FF6"], ["mov~rdx,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 123, 0, 0, 2, 0, 1, 4, 14, 0.008023790820334418, ["cmp     [rbp+write_records], 0", "jz      short loc_5A3E"], ["cmp~[rbp+0],0", "jz~FOO"]], [4, 0, 3, 0, 4, 20, 0, 5, 19, 2, 0.00042082818987767927, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToTrunca_0; \"failed to truncate to %ld bytes in outp\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+output_offset]", "mov     r8, r12", "mov     rcx, rdx", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 1", "jmp     loc_654D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~r8,r12", "mov~rcx,rdx", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 16, 0, 1, 6, 1, 2, 18, 3, 0.006592974974750309, ["mov     rax, [rbp+output_offset]", "mov     rsi, rax; length", "mov     edi, 1; fd", "call    iftruncate", "test    eax, eax", "jz      short loc_643B"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 106, 0, 0, 2, 0, 1, 19, 7, 0.013298170800134665, ["mov     [rbp+nread], 0", "jmp     short loc_5E4A"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 121, 0, 0, 2, 0, 1, 5, 13, 0.006789361463359893, ["mov     rax, cs:output_blocksize", "jmp     short loc_5A45"], ["mov~rax,<TAG>", "jmp~FOO"]], [0, 0, 121, 0, 0, 1, 0, 0, 5, 13, 0.006789361463359893, ["mov     rax, [rbp+bytes]"], ["mov~rax,[rbp+0]"]], [0, 0, 106, 1, 0, 6, 0, 0, 9, 10, 0.18342498036135116, ["mov     rdx, cs:r_partial", "mov     rax, cs:r_full", "add     rdx, rax", "mov     rax, cs:max_records", "cmp     rdx, rax", "jb      short loc_5C6C"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "add~rdx,rax", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 1, 106, 0, 0, 4, 2, 1, 8, 11, 0.17433509145999326, ["mov     eax, cs:conversions_mask", "and     eax, 400h", "test    eax, eax", "jz      short loc_5C27"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 0, 29, 0, 0, 11, 0, 0, 13, 6, 0.005723263382336439, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, byte ptr cs:newline_character; \"\\n\"", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_624A"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [1, 0, 46, 0, 0, 2, 0, 1, 16, 9, 0.010324318258332398, ["mov     [rbp+exit_status], 1", "jmp     loc_60EB"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 106, 0, 0, 4, 2, 1, 15, 10, 0.050966969662963386, ["mov     eax, cs:conversions_mask", "and     eax, 100h", "test    eax, eax", "jz      loc_5E3B"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 1, 14, 0, 0, 4, 2, 1, 14, 4, 0.07061497026147459, ["mov     eax, cs:conversions_mask", "and     eax, 4000h", "test    eax, eax", "jz      loc_64D1"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 0, 22, 0, 0, 3, 1, 1, 13, 4, 0.11943104028728538, ["movzx   eax, cs:final_op_was_seek", "test    al, al", "jz      loc_643B"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [2, 0, 19, 0, 0, 4, 1, 1, 15, 5, 0.025361912243294805, ["mov     eax, [rbp+stdout_stat.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     loc_643B"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [4, 0, 18, 0, 1, 7, 0, 2, 16, 5, 0.01868477163056896, ["mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, 1; fd", "call    _lseek", "mov     [rbp+output_offset], rax", "cmp     [rbp+output_offset], 0", "js      short loc_643B"], ["mov~edx,0", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 17, 0, 0, 3, 0, 1, 17, 4, 0.012652900908988891, ["mov     rax, [rbp+stdout_stat.st_size]", "cmp     [rbp+output_offset], rax", "jle     short loc_643B"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jle~FOO"]], [0, 0, 27, 0, 0, 3, 1, 1, 12, 5, 0.14846818538884526, ["mov     rax, cs:oc", "test    rax, rax", "jz      loc_630E"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 28, 0, 1, 1, 0, 1, 14, 6, 0.0, ["call    write_output"], ["call~FOO"]], [1, 0, 120, 0, 1, 5, 0, 1, 6, 12, 0.026371899899001235, ["mov     rcx, cs:obuf", "mov     rdx, rax; n", "mov     esi, 0; c", "mov     rdi, rcx; s", "call    _memset"], ["mov~rcx,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~rdi,rcx", "call~FOO"]], [1, 0, 13, 0, 1, 4, 1, 2, 15, 4, 0.025810795645830997, ["mov     edi, 1; fildes", "call    _fdatasync", "test    eax, eax", "jz      short loc_64D1"], ["mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 106, 0, 1, 7, 0, 2, 18, 14, 0.01865671641791045, ["mov     rax, cs:ibuf", "lea     rdx, [rbp+bytes]", "mov     rsi, rdx; nread", "mov     rdi, rax; buf", "call    swab_buffer", "mov     [rbp+bufstart], rax", "jmp     short loc_6070"], ["mov~rax,<TAG>", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 1, 106, 0, 0, 4, 2, 1, 17, 15, 0.040175064526989115, ["mov     eax, cs:conversions_mask", "and     eax, 80h", "test    eax, eax", "jz      short loc_6062"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 120, 0, 0, 2, 0, 1, 7, 11, 0.034227359443384585, ["cmp     [rbp+write_records], 0", "jz      short loc_5A6F"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 120, 0, 0, 2, 0, 1, 12, 6, 0.07058691504881608, ["cmp     [rbp+write_records], 0", "jnz     loc_5A5C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 120, 0, 0, 3, 1, 1, 13, 5, 0.07406576141847156, ["mov     rax, [rbp+bytes]", "test    rax, rax", "jnz     loc_5A5C"], ["mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [1, 0, 12, 0, 1, 4, 0, 2, 16, 5, 0.01952642801032432, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jz      short loc_64C2"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 106, 0, 0, 2, 0, 0, 18, 14, 0.01865671641791045, ["mov     rax, cs:ibuf", "mov     [rbp+bufstart], rax"], ["mov~rax,<TAG>", "mov~[rbp+0],rax"]], [1, 0, 106, 0, 1, 8, 0, 2, 10, 9, 0.09028167433509146, ["mov     rax, cs:iread_fnc", "mov     rdx, cs:max_bytes; size_t", "mov     rcx, cs:ibuf", "mov     rsi, rcx; char *", "mov     edi, 0; int", "call    rax ; iread_fnc", "mov     [rbp+nread], rax", "jmp     short loc_5C92"], ["mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~rcx,<TAG>", "mov~rsi,rcx", "mov~edi,0", "call~rax", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 120, 0, 0, 2, 0, 1, 8, 10, 0.019161710245763665, ["mov     rax, cs:output_blocksize", "jmp     short loc_5A76"], ["mov~rax,<TAG>", "jmp~FOO"]], [0, 0, 120, 0, 0, 1, 0, 0, 8, 10, 0.019161710245763665, ["mov     rax, [rbp+bytes]"], ["mov~rax,[rbp+0]"]], [1, 0, 11, 0, 1, 4, 0, 2, 17, 5, 0.006564919762091797, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jz      short loc_64C2"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 106, 0, 0, 6, 0, 0, 13, 6, 0.11354879736655078, ["mov     rax, [rbp+nread]", "mov     [rbp+bytes], rax", "mov     rdx, [rbp+bytes]", "mov     rax, cs:input_blocksize", "cmp     rdx, rax", "jnb     loc_5F00"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnb~FOO"]], [0, 0, 106, 0, 1, 6, 1, 2, 12, 7, 0.09132906894100928, ["mov     rax, [rbp+nread]", "mov     rdi, rax; offset", "call    advance_input_offset", "movzx   eax, cs:i_nocache", "test    al, al", "jz      loc_5E4A"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 106, 0, 1, 5, 0, 2, 13, 7, 0.0, ["mov     rax, [rbp+nread]", "mov     rsi, rax; len", "mov     edi, 0; fd", "call    invalidate_cache", "jmp     loc_5E4A"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 106, 0, 0, 4, 2, 1, 19, 13, 0.044720008977668056, ["mov     eax, cs:conversions_mask", "and     eax, 8", "test    eax, eax", "jz      short loc_609B"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 106, 0, 1, 7, 0, 1, 10, 9, 0.09028167433509146, ["mov     rax, cs:iread_fnc", "mov     rdx, cs:input_blocksize; size_t", "mov     rcx, cs:ibuf", "mov     rsi, rcx; char *", "mov     edi, 0; int", "call    rax ; iread_fnc", "mov     [rbp+nread], rax"], ["mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~rcx,<TAG>", "mov~rsi,rcx", "mov~edi,0", "call~rax", "mov~[rbp+0],rax"]], [0, 0, 106, 0, 1, 6, 0, 2, 20, 12, 0.033217371787678154, ["mov     rdx, [rbp+bytes]", "mov     rax, [rbp+bufstart]", "mov     rsi, rdx; nread", "mov     rdi, rax; buf", "call    copy_with_block", "jmp     loc_5B59"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 106, 0, 0, 2, 0, 1, 11, 8, 0.1879699248120301, ["cmp     [rbp+nread], 0", "jle     short loc_5CD3"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 1, 106, 1, 0, 9, 2, 1, 14, 5, 0.0679123181087046, ["mov     rax, cs:r_partial", "add     rax, 1", "mov     cs:r_partial, rax", "mov     rax, [rbp+bytes]", "mov     [rbp+partread], rax", "mov     eax, cs:conversions_mask", "and     eax, 400h", "test    eax, eax", "jz      short loc_5F1D"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 120, 0, 1, 8, 0, 2, 9, 9, 0.050387161934687466, ["mov     [rbp+size], rax", "mov     rax, cs:obuf", "mov     rdx, [rbp+size]; size", "mov     rsi, rax; buf", "mov     edi, 1; fd", "call    iwrite", "cmp     [rbp+size], rax", "jz      short loc_5AEF"], ["mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "cmp~[rbp+0],rax", "jz~FOO"]], [1, 0, 106, 0, 0, 4, 2, 1, 20, 13, 0.008641005498821682, ["mov     eax, cs:conversions_mask", "and     eax, 10h", "test    eax, eax", "jz      short loc_60C6"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 25, 1, 0, 3, 0, 0, 14, 4, 0.0, ["mov     rax, cs:w_partial", "add     rax, 1", "mov     cs:w_partial, rax"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax"]], [2, 0, 26, 1, 1, 12, 0, 2, 13, 4, 0.02196723151161486, ["mov     rdx, cs:oc; size", "mov     rax, cs:obuf", "mov     rsi, rax; buf", "mov     edi, 1; fd", "call    iwrite", "mov     [rbp+nwritten_0], rax", "mov     rdx, cs:w_bytes", "mov     rax, [rbp+nwritten_0]", "add     rax, rdx", "mov     cs:w_bytes, rax", "cmp     [rbp+nwritten_0], 0", "jz      short loc_62B0"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 106, 0, 0, 4, 2, 1, 15, 6, 0.021097519919200988, ["mov     eax, cs:conversions_mask", "and     eax, 100h", "test    eax, eax", "jnz     short loc_5EF0"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [4, 0, 10, 0, 4, 17, 0, 4, 18, 5, 0.0, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFdatasyncFaile; \"fdatasync failed for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     [rbp+exit_status], 1"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0"]], [0, 0, 24, 0, 0, 3, 0, 1, 14, 3, 0.012877342610256987, ["mov     rax, cs:oc", "cmp     [rbp+nwritten_0], rax", "jz      short loc_630E"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 106, 0, 1, 6, 0, 2, 21, 12, 0.002889686903826731, ["mov     rdx, [rbp+bytes]", "mov     rax, [rbp+bufstart]", "mov     rsi, rdx; nread", "mov     rdi, rax; buf", "call    copy_with_unblock", "jmp     loc_5B59"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [3, 0, 134, 1, 0, 13, 2, 1, 0, 8, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 120h", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+partread], 0", "mov     [rbp+exit_status], 0", "mov     rax, cs:skip_records", "test    rax, rax", "jnz     short loc_58DA"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 106, 1, 0, 7, 2, 1, 16, 8, 0.012849287397598474, ["mov     rdx, cs:input_blocksize", "mov     rax, [rbp+bytes]", "sub     rdx, rax; n", "mov     eax, cs:conversions_mask", "and     eax, 18h", "test    eax, eax", "jz      short loc_5ED2"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 1, 9, 0, 0, 3, 1, 0, 17, 4, 0.0015149814835596455, ["mov     eax, cs:conversions_mask", "or      ah, 80h", "mov     cs:conversions_mask, eax"], ["mov~eax,<TAG>", "or~ah,<STR>", "mov~<TAG>,eax"]], [0, 1, 106, 0, 0, 2, 0, 1, 17, 7, 0.004993827853215128, ["mov     esi, 20h ; ' '", "jmp     short loc_5ED7"], ["mov~esi,<STR>", "jmp~FOO"]], [1, 0, 106, 0, 0, 1, 0, 0, 17, 7, 0.004993827853215128, ["mov     esi, 0; c"], ["mov~esi,0"]], [0, 0, 133, 0, 0, 3, 1, 1, 1, 7, 0.00718213444057906, ["mov     rax, cs:skip_bytes", "test    rax, rax", "jz      loc_59B4"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 106, 0, 0, 2, 0, 1, 12, 12, 0.09377922417985257, ["cmp     [rbp+nread], 0", "jnz     short loc_5D3D"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 8, 0, 0, 4, 2, 1, 15, 3, 0.03492873975984738, ["mov     eax, cs:conversions_mask", "and     eax, 8000h", "test    eax, eax", "jz      short loc_6547"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 106, 0, 1, 6, 0, 2, 21, 12, 0.002889686903826731, ["mov     rdx, [rbp+bytes]", "mov     rax, [rbp+bufstart]", "mov     rsi, rdx; nread", "mov     rdi, rax; buf", "call    copy_simple", "jmp     loc_5B59"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 7, 0, 0, 1, 0, 1, 16, 4, 0.02036808439007968, ["jmp     short loc_6539"], ["jmp~FOO"]], [0, 0, 106, 0, 0, 1, 0, 0, 18, 13, 0.026110051247521762, ["nop"], ["nop"]], [1, 0, 47, 0, 0, 1, 0, 0, 14, 10, 0.035097071035798455, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 50, 0, 0, 12, 3, 1, 13, 11, 0.044439456851082935, ["movzx   edx, cs:i_nocache_eof", "movzx   eax, cs:i_nocache", "or      eax, edx", "movzx   eax, al", "test    eax, eax", "setnz   al", "mov     cs:i_nocache_eof, al", "movzx   eax, cs:o_nocache_eof", "movzx   edx, al", "movzx   eax, cs:o_nocache", "test    al, al", "jz      short loc_5D26"], ["movzx~edx,<TAG>", "movzx~eax,<TAG>", "or~eax,edx", "movzx~eax,al", "test~eax,eax", "setnz~al", "mov~<TAG>,al", "movzx~eax,<TAG>", "movzx~edx,al", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 1, 49, 0, 0, 4, 2, 1, 14, 11, 0.004488834025361913, ["mov     eax, cs:conversions_mask", "and     eax, 200h", "test    eax, eax", "jnz     short loc_5D26"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jnz~FOO"]], [4, 0, 0, 0, 5, 18, 0, 5, 10, -1, 0.0, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aWritingToS; \"writing to %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     edi, 1; code", "call    quit"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [0, 0, 106, 1, 1, 5, 0, 1, 18, 6, 0.01739423184827741, ["mov     rcx, cs:ibuf", "mov     rax, [rbp+bytes]", "add     rax, rcx", "mov     rdi, rax; s", "call    _memset"], ["mov~rcx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 7, 0, 1, 4, 0, 2, 18, 3, 0.00690158231399394, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_6539"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 7, 0, 1, 4, 1, 2, 17, 3, 0.013971495903938952, ["mov     edi, 1; fd", "call    _fsync", "test    eax, eax", "jnz     short loc_64E2"], ["mov~edi,0", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 46, 0, 0, 5, 2, 1, 15, 9, 0.03703288070923578, ["or      eax, edx", "test    eax, eax", "setnz   al", "mov     cs:o_nocache_eof, al", "jmp     loc_60EB"], ["or~eax,edx", "test~eax,eax", "setnz~al", "mov~<TAG>,al", "jmp~FOO"]], [0, 0, 46, 0, 0, 1, 0, 0, 8, 9, 0.15778251599147122, ["nop"], ["nop"]], [4, 0, 3, 0, 4, 18, 0, 5, 15, 2, 0.004629110088654472, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotFstatS; \"cannot fstat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 1", "jmp     loc_654D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 21, 0, 1, 6, 1, 2, 14, 3, 0.04115699697003704, ["lea     rax, [rbp+stdout_stat]", "mov     rsi, rax; stat_buf", "mov     edi, 1; fildes", "call    fstat", "test    eax, eax", "jz      short loc_6383"], ["lea~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 120, 0, 0, 2, 0, 1, 10, 8, 0.05442711255751319, ["cmp     [rbp+write_records], 0", "jz      short loc_5B03"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 106, 0, 0, 3, 0, 1, 16, 5, 0.028672427336999217, ["mov     rax, cs:input_blocksize", "mov     [rbp+bytes], rax", "jmp     short loc_5F1D"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 120, 1, 0, 2, 0, 1, 11, 7, 0.029261586802827966, ["sub     [rbp+write_records], 1", "jmp     short loc_5B0E"], ["sub~[rbp+0],0", "jmp~FOO"]], [1, 0, 120, 0, 0, 1, 0, 0, 11, 7, 0.029261586802827966, ["mov     [rbp+bytes], 0"], ["mov~[rbp+0],0"]], [4, 0, 3, 0, 4, 18, 0, 5, 15, 2, 0.004797441364605544, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorWritingS; \"error writing %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 1", "jmp     loc_654D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [2, 0, 106, 1, 0, 4, 0, 0, 14, 5, 0.042774847566677925, ["mov     rax, cs:r_full", "add     rax, 1", "mov     cs:r_full, rax", "mov     [rbp+partread], 0"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "mov~[rbp+0],0"]], [1, 0, 39, 0, 1, 4, 0, 2, 11, 8, 0.0021883065873639323, ["mov     esi, 1; nread", "lea     rdi, saved_char; buf", "call    copy_with_block", "jmp     short loc_6174"], ["mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [1, 0, 42, 0, 0, 4, 2, 1, 11, 9, 0.01481315228369431, ["mov     eax, cs:conversions_mask", "and     eax, 10h", "test    eax, eax", "jz      short loc_6136"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 47, 0, 0, 2, 0, 1, 15, 10, 0.0013185949949500618, ["mov     eax, 1", "jmp     short loc_5D2B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 39, 0, 1, 4, 0, 2, 12, 8, 0.0010941532936819662, ["mov     esi, 1; nread", "lea     rdi, saved_char; buf", "call    copy_with_unblock", "jmp     short loc_6174"], ["mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [0, 0, 109, 0, 0, 3, 1, 1, 4, 4, 0.14678487262933454, ["mov     rax, cs:max_records", "test    rax, rax", "jnz     short loc_5B4F"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 19, 2, 0.00016833127595107172, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFsyncFailedFor; \"fsync failed for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 1", "jmp     short loc_654D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 108, 0, 0, 3, 1, 1, 5, 3, 0.0056110425317023906, ["mov     rax, cs:max_bytes", "test    rax, rax", "jnz     short loc_5B4F"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 16, 2, 0.001767478397486253, ["mov     eax, [rbp+exit_status]"], ["mov~eax,[rbp+0]"]], [1, 0, 106, 0, 0, 4, 2, 1, 13, 12, 0.046422025212284466, ["mov     eax, cs:conversions_mask", "and     eax, 100h", "test    eax, eax", "jz      short loc_5D57"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 132, 4, 1, 20, 0, 2, 1, 8, 0.00044888340253619125, ["mov     rdx, cs:skip_records", "mov     rax, cs:input_blocksize", "imul    rdx, rax", "mov     rax, cs:input_offset", "add     rdx, rax", "mov     rax, cs:skip_bytes", "add     rax, rdx", "mov     [rbp+us_bytes], rax", "mov     rcx, cs:input_blocksize; blocksize", "mov     rdx, cs:skip_records; records", "mov     rax, cs:input_file", "lea     r8, skip_bytes; bytes", "mov     rsi, rax; file", "mov     edi, 0; fdesc", "call    skip", "mov     [rbp+us_blocks], rax", "mov     rax, cs:input_offset", "sub     [rbp+us_bytes], rax", "cmp     [rbp+us_blocks], 0", "jnz     short loc_5967"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "imul~rdx,rax", "mov~rax,<TAG>", "add~rdx,rax", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rcx,<TAG>", "mov~rdx,<TAG>", "mov~rax,<TAG>", "lea~r8,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "sub~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 106, 0, 2, 2, 0, 2, 5, 12, 0.15026371899899002, ["call    alloc_ibuf", "call    alloc_obuf"], ["call~FOO", "call~FOO"]], [1, 0, 106, 0, 0, 3, 0, 1, 14, 11, 0.021808251973216636, ["mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_5D9B"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 7, 1, 0.014700931433060263, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_6561"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 6, 2, 0.004376613174727865, ["mov     eax, [rbp+exit_status]", "jmp     loc_654D"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 17, 2, 0.004713275726630008, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorWritingS; \"error writing %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     eax, 1", "jmp     loc_654D"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 131, 0, 0, 4, 2, 1, 2, 7, 0.0037593984962406017, ["movzx   eax, cs:input_offset_overflow", "xor     eax, 1", "test    al, al", "jz      short loc_59B4"], ["movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 8, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 106, 0, 0, 1, 0, 1, 19, 12, 0.11609246998092246, ["jmp     loc_5B59"], ["jmp~FOO"]], [1, 0, 106, 1, 0, 4, 0, 1, 18, 13, 0.03834212396663302, ["mov     rax, cs:w_full", "add     rax, 1", "mov     cs:w_full, rax", "jmp     loc_60E5"], ["mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "jmp~FOO"]], [1, 0, 106, 0, 0, 3, 0, 1, 6, 11, 0.3304904051172708, ["mov     eax, cs:status_level", "cmp     eax, 4", "jnz     short loc_5BA3"], ["mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 130, 0, 0, 2, 0, 1, 3, 7, 0.00011222085063404781, ["cmp     [rbp+us_bytes], 0", "jz      short loc_59B4"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 8, 0, 0.0, ["add     rsp, 120h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 40, 0, 0, 11, 0, 0, 12, 8, 0.006087981146897094, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, cs:saved_char", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_6174"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 39, 0, 1, 1, 0, 1, 13, 8, 0.0, ["call    write_output"], ["call~FOO"]], [1, 0, 129, 0, 0, 3, 0, 1, 2, 7, 0.0038716193468746494, ["mov     eax, cs:status_level", "cmp     eax, 1", "jz      short loc_59B4"], ["mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 106, 1, 1, 13, 0, 2, 16, 3, 0.08717689746754953, ["mov     rdx, [rbp+bytes]; size", "mov     rax, cs:obuf", "mov     rsi, rax; buf", "mov     edi, 1; fd", "call    iwrite", "mov     [rbp+nwritten], rax", "mov     rdx, cs:w_bytes", "mov     rax, [rbp+nwritten]", "add     rax, rdx", "mov     cs:w_bytes, rax", "mov     rax, [rbp+bytes]", "cmp     [rbp+nwritten], rax", "jz      short loc_5FCC"], ["mov~rdx,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 106, 1, 0, 11, 1, 0, 7, 10, 0.3350353495679497, ["mov     rdx, cs:r_partial", "mov     rax, cs:r_full", "lea     rcx, [rdx+rax]", "mov     rax, cs:max_bytes", "test    rax, rax", "setnz   al", "movzx   edx, al", "mov     rax, cs:max_records", "add     rax, rdx", "cmp     rcx, rax", "jnb     loc_60EA"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "lea~rcx,<TAG>", "mov~rax,<TAG>", "test~rax,rax", "setnz~al", "movzx~edx,al", "mov~rax,<TAG>", "add~rax,rdx", "cmp~rcx,rax", "jnb~FOO"]], [0, 0, 106, 0, 1, 5, 0, 2, 7, 11, 0.004320502749410841, ["call    gethrxtime", "mov     [rbp+progress_time], rax", "mov     rax, cs:next_time", "cmp     [rbp+progress_time], rax", "jl      short loc_5BA3"], ["call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jl~FOO"]], [1, 0, 38, 0, 0, 4, 2, 1, 10, 7, 0.1892043541690046, ["mov     eax, cs:conversions_mask", "and     eax, 8", "test    eax, eax", "jz      short loc_61F3"], ["mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 37, 0, 0, 3, 1, 1, 11, 7, 0.026371899899001235, ["mov     rax, cs:col", "test    rax, rax", "jz      short loc_61F3"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [3, 0, 106, 0, 4, 16, 0, 4, 14, 11, 0.021808251973216636, ["mov     rax, cs:input_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorReadingS; \"error reading %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 36, 0, 0, 3, 0, 1, 12, 8, 0.021321961620469083, ["mov     rax, cs:col", "mov     [rbp+i], rax", "jmp     short loc_61E3"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 106, 1, 1, 6, 0, 1, 8, 11, 0.0, ["mov     rax, [rbp+progress_time]", "mov     rdi, rax; progress_time", "call    print_xfer_stats", "mov     rax, cs:next_time", "add     rax, 3B9ACA00h", "mov     cs:next_time, rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax"]], [0, 0, 36, 0, 0, 3, 0, 0, 13, 7, 0.023510268207833016, ["mov     rax, cs:conversion_blocksize", "cmp     [rbp+i], rax", "jb      short loc_619D"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 36, 1, 0, 1, 0, 0, 15, 8, 0.0037593984962406017, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [5, 0, 128, 0, 3, 14, 0, 3, 3, 7, 0.0, ["mov     rax, cs:input_file", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aSCannotSkipToS; \"%s: cannot skip to specified offset\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; fmt", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 36, 0, 0, 11, 0, 0, 14, 9, 0.010941532936819662, ["mov     rcx, cs:obuf", "mov     rax, cs:oc", "lea     rdx, [rax+1]", "mov     cs:oc, rdx", "lea     rdx, [rcx+rax]", "movzx   eax, byte ptr cs:space_character; \" \"", "mov     [rdx], al", "mov     rdx, cs:oc", "mov     rax, cs:output_blocksize", "cmp     rdx, rax", "jb      short loc_61DB"], ["mov~rcx,<TAG>", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~<TAG>,rdx", "lea~rdx,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "mov~rdx,<TAG>", "mov~rax,<TAG>", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 36, 0, 1, 1, 0, 1, 15, 9, 0.0, ["call    write_output"], ["call~FOO"]]], "func_feature": [74, 71, 171, 1, 135, 207, 1, 698, 0.04021, 47, 21], "succs": [[15], [0, 15], [97, 98], [2, 125], [8, 9], [28, 4], [38, 30], [38, 6], [16], [16], [43, 19], [10, 122], [17, 22], [12, 14], [12, 101], [18, 79], [28], [101, 22], [25, 79], [43], [114], [115, 20], [26, 27], [109], [33, 23], [53], [40], [40], [49, 57], [28, 5], [38, 39], [3], [1, 31], [41, 76], [33, 90], [33, 36], [33, 37], [24, 33], [64, 34], [38], [44], [76, 47], [56], [48, 42], [50, 51], [44, 46], [44, 101], [52, 71], [56], [59], [61], [61], [66, 71], [96, 60], [53, 55], [53], [58, 62], [59], [116], [75, 54], [65, 11], [91, 83], [68, 77], [67], [67, 63], [92, 70], [71], [34, 95], [116], [74, 106], [72, 73], [76], [84], [84], [106, 13], [81, 105], [104, 78], [116], [86], [114], [87], [80, 82], [80, 99], [], [92], [86, 102], [104, 85], [3], [3], [109], [89, 35], [93, 94], [11], [45], [45], [109], [11], [125], [100, 119], [87], [125], [107, 103], [109], [107, 110], [109], [108, 127], [112, 121], [116], [32, 127], [113, 118], [109], [109], [117, 13], [], [116], [114], [123, 124], [121, 13], [], [120, 125], [125], [132, 13], [21, 111], [88, 29], [129, 123], [126, 7], [128, 7], [32], [130], [123], [133, 7], [130], [13], [131, 134], [131]], "fname": "dd_copy", "n_num": 135}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 38, 0, 0, 5, 2, 1, 0, 0, 0.07400555041628122, ["mov     [rbp+perms], 1B6h", "mov     eax, cs:conversions_mask", "and     eax, 1000h", "test    eax, eax", "jz      short loc_680C"], ["mov~[rbp+0],0", "mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [6, 0, 40, 0, 2, 19, 1, 3, 4, 8, 0.12950971322849214, ["mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, 0; fd", "call    _lseek", "mov     [rbp+offset], rax", "mov     rax, [rbp+offset]", "not     rax", "shr     rax, 3Fh", "mov     cs:input_seekable, al", "mov     eax, 0", "cmp     [rbp+offset], 0", "cmovns  rax, [rbp+offset]", "mov     cs:input_offset, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     cs:input_seek_errno, eax", "mov     rax, cs:output_file", "test    rax, rax", "jnz     short loc_67EC"], ["mov~edx,0", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "not~rax", "shr~rax,0", "mov~<TAG>,al", "mov~eax,0", "cmp~[rbp+0],0", "cmovns~rax,[rbp+0]", "mov~<TAG>,rax", "call~FOO", "mov~eax,<TAG>", "mov~<TAG>,eax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 47, 1, 0, 7, 0, 0, 2, 12, 0.0, ["mov     eax, [rbp+i]", "mov     ecx, eax", "mov     eax, [rbp+i]", "movsxd  rdx, eax", "lea     rax, trans_table", "mov     [rdx+rax], cl", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "mov~ecx,eax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "mov~<TAG>,cl", "add~[rbp+0],0"]], [1, 0, 47, 0, 0, 2, 0, 1, 1, 11, 0.04209065679925995, ["cmp     [rbp+i], 0FFh", "jle     short loc_666C"], ["cmp~[rbp+0],0", "jle~FOO"]], [2, 0, 6, 0, 1, 3, 0, 1, 8, 4, 0.04079555966697505, ["mov     esi, 0; len", "mov     edi, 0; fd", "call    invalidate_cache"], ["mov~esi,0", "mov~edi,0", "call~FOO"]], [0, 0, 8, 0, 0, 3, 1, 1, 7, 5, 0.10841813135985205, ["movzx   eax, cs:i_nocache", "test    al, al", "jnz     short loc_6BFE"], ["movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 7, 0, 0, 3, 1, 1, 8, 4, 0.04079555966697505, ["movzx   eax, cs:i_nocache_eof", "test    al, al", "jz      short loc_6C0D"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 36, 0, 0, 2, 0, 1, 6, 12, 0.041628122109158186, ["mov     edx, 0", "jmp     short loc_6811"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 36, 0, 0, 1, 0, 0, 6, 12, 0.041628122109158186, ["mov     edx, 40h ; '@'"], ["mov~edx,0"]], [3, 0, 5, 0, 1, 6, 2, 2, 10, 3, 0.016651248843663275, ["mov     esi, 0; len", "mov     edi, 1; fd", "call    invalidate_cache", "xor     eax, 1", "test    al, al", "jz      loc_6C34"], ["mov~esi,0", "mov~edi,0", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 6, 0, 0, 3, 1, 1, 9, 3, 0.0627197039777983, ["movzx   eax, cs:o_nocache", "test    al, al", "jz      loc_6C34"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [2, 0, 30, 0, 1, 12, 2, 1, 10, 8, 0.07030527289546716, ["mov     eax, [rbp+opts]", "or      eax, 2", "mov     esi, eax", "mov     rax, cs:output_file", "mov     edx, [rbp+perms]", "mov     ecx, edx; mode", "mov     edx, esi; flag", "mov     rsi, rax; file", "mov     edi, 1; desired_fd", "call    ifd_reopen", "test    eax, eax", "jns     short loc_6902"], ["mov~eax,[rbp+0]", "or~eax,0", "mov~esi,eax", "mov~rax,<TAG>", "mov~edx,[rbp+0]", "mov~ecx,edx", "mov~edx,esi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 31, 0, 0, 5, 2, 1, 9, 9, 0.1484736355226642, ["or      eax, edx", "mov     [rbp+opts], eax", "mov     rax, cs:seek_records", "test    rax, rax", "jz      short loc_6891"], ["or~eax,edx", "mov~[rbp+0],eax", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [2, 0, 42, 0, 1, 8, 1, 1, 3, 9, 0.039777983348751156, ["mov     edx, cs:input_flags; flag", "mov     rax, cs:input_file", "mov     ecx, 0; mode", "mov     rsi, rax; file", "mov     edi, 0; desired_fd", "call    ifd_reopen", "test    eax, eax", "jns     short loc_6757"], ["mov~edx,<TAG>", "mov~rax,<TAG>", "mov~ecx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 44, 0, 2, 9, 1, 3, 2, 10, 0.06105457909343201, ["mov     rdx, [rbp+argv]", "mov     eax, [rbp+argc]", "mov     rsi, rdx; argv", "mov     edi, eax; argc", "call    scanargs", "call    apply_translations", "mov     rax, cs:input_file", "test    rax, rax", "jnz     short loc_66F0"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [3, 0, 8, 0, 1, 6, 2, 2, 9, 4, 0.015263644773358002, ["mov     esi, 0; len", "mov     edi, 0; fd", "call    invalidate_cache", "xor     eax, 1", "test    al, al", "jz      short loc_6B6A"], ["mov~esi,0", "mov~edi,0", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 9, 0, 0, 3, 1, 1, 8, 4, 0.09879740980573538, ["movzx   eax, cs:i_nocache", "test    al, al", "jz      short loc_6B6A"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 5, 0, 0, 3, 1, 1, 9, 3, 0.07095282146160967, ["movzx   eax, cs:o_nocache", "test    al, al", "jnz     short loc_6C23"], ["movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [9, 0, 47, 3, 8, 52, 1, 9, 0, 12, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 0E0h", "mov     [rbp+argc], edi", "mov     [rbp+argv], rsi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "call    install_signal_handlers", "mov     rax, [rbp+argv]", "mov     rax, [rax]", "mov     rdi, rax; argv0", "call    set_program_name", "lea     rsi, locale; locale", "mov     edi, 6; category", "call    _setlocale", "lea     rsi, dirname; \"/usr/local/share/locale\"", "lea     rdi, package; \"coreutils\"", "call    _bindtextdomain", "lea     rdi, package; \"coreutils\"", "call    _textdomain", "lea     rdi, maybe_close_stdout", "call    atexit", "call    _getpagesize", "cdqe", "mov     cs:page_size, rax", "mov     rcx, cs:Version", "mov     rsi, [rbp+argv]; argv", "mov     eax, [rbp+argc]", "sub     rsp, 8", "push    0", "lea     rdx, aStuartKemp; \"Stuart Kemp\"", "push    rdx", "lea     rdx, aDavidMackenzie; \"David MacKenzie\"", "push    rdx", "lea     rdx, aPaulRubin; \"Paul Rubin\"", "push    rdx", "lea     rdx, usage", "push    rdx; usage_func", "mov     r9d, 1; scan_all", "mov     r8, rcx; version", "lea     rcx, package; \"coreutils\"", "lea     rdx, command_name; command_name", "mov     edi, eax; argc", "mov     eax, 0", "call    parse_gnu_standard_options_only", "add     rsp, 30h", "mov     cs:close_stdout_required, 0", "mov     [rbp+i], 0", "jmp     short loc_668E"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "call~FOO", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "lea~rsi,<TAG>", "mov~edi,0", "call~FOO", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "call~FOO", "cdqe~", "mov~<TAG>,rax", "mov~rcx,<TAG>", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "sub~rsp,0", "push~0", "lea~rdx,<TAG>", "push~rdx", "lea~rdx,<TAG>", "push~rdx", "lea~rdx,<TAG>", "push~rdx", "lea~rdx,<TAG>", "push~rdx", "mov~r9d,0", "mov~r8,rcx", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~edi,eax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~<TAG>,0", "mov~[rbp+0],0", "jmp~FOO"]], [0, 1, 26, 0, 0, 4, 2, 1, 12, 7, 0.07400555041628122, ["mov     eax, cs:conversions_mask", "and     eax, 200h", "test    eax, eax", "jnz     loc_6AAB"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jnz~FOO"]], [0, 0, 27, 0, 0, 3, 1, 1, 11, 7, 0.17067530064754857, ["mov     rax, cs:seek_records", "test    rax, rax", "jz      loc_6AAB"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 4, 0, 0, 3, 1, 1, 10, 2, 0.01998149861239594, ["movzx   eax, cs:o_nocache_eof", "test    al, al", "jz      short loc_6C35"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [3, 0, 18, 0, 3, 17, 0, 3, 17, 7, 0.012488436632747457, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aFailedToTrunca; \"failed to truncate to %lu bytes in outp\"...", "call    _gettext", "mov     rsi, rax", "mov     rdx, [rbp+size]", "mov     eax, [rbp+ftruncate_errno]", "mov     r8, rbx", "mov     rcx, rdx", "mov     rdx, rsi; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rdx", "mov~rdx,rsi", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 20, 0, 0, 4, 1, 1, 16, 8, 0.04070305272895467, ["mov     eax, [rbp+stdout_stat.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jz      short loc_6A5E"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 1, 19, 0, 0, 4, 1, 1, 17, 7, 0.012488436632747457, ["mov     eax, [rbp+stdout_stat.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_6AAB"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jnz~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 12, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 2, 0, 1, 5, 1, 2, 11, 1, 0.041628122109158186, ["call    finish_up", "mov     eax, [rbp+exit_status]", "mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_6C54"], ["call~FOO", "mov~eax,[rbp+0]", "mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [3, 0, 24, 0, 2, 11, 0, 2, 14, 8, 0.0, ["mov     rbx, cs:seek_records", "lea     rdi, aOffsetTooLarge; \"offset too large: cannot truncate to a \"...", "call    _gettext", "mov     rdx, rax; fmt", "mov     rax, [rbp+obs]", "mov     r8, rax", "mov     rcx, rbx", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rax", "mov~rcx,rbx", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 25, 3, 0, 16, 0, 0, 13, 8, 0.06799259944495838, ["mov     rdx, cs:seek_records", "mov     rax, cs:output_blocksize", "imul    rdx, rax", "mov     rax, cs:seek_bytes", "add     rax, rdx", "mov     [rbp+size], rax", "mov     rax, cs:output_blocksize", "mov     [rbp+obs], rax", "mov     rcx, cs:output_blocksize", "mov     rax, 7FFFFFFFFFFFFFFFh", "mov     edx, 0", "div     rcx", "mov     rdx, rax", "mov     rax, cs:seek_records", "cmp     rdx, rax", "jnb     short loc_69B5"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "imul~rdx,rax", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rcx,<TAG>", "mov~rax,0", "mov~edx,0", "div~,rcx", "mov~rdx,rax", "mov~rax,<TAG>", "cmp~rdx,rax", "jnb~FOO"]], [2, 0, 3, 0, 1, 4, 0, 2, 10, 2, 0.01998149861239594, ["mov     esi, 0; len", "mov     edi, 1; fd", "call    invalidate_cache", "jmp     short loc_6C35"], ["mov~esi,0", "mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 1, 35, 0, 0, 9, 4, 1, 7, 11, 0.11147086031452359, ["mov     eax, cs:output_flags", "or      edx, eax", "mov     eax, cs:conversions_mask", "sar     eax, 6", "and     eax, 80h", "or      edx, eax", "mov     rax, cs:seek_records", "test    rax, rax", "jnz     short loc_6844"], ["mov~eax,<TAG>", "or~edx,eax", "mov~eax,<TAG>", "sar~eax,0", "and~eax,<STR>", "or~edx,eax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 10, 2, 0.018316373728029616, ["nop"], ["nop"]], [5, 0, 4, 0, 4, 19, 0, 5, 11, 3, 0.0, ["mov     rax, cs:output_file", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aFailedToDiscar; \"failed to discard cache for: %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     [rbp+exit_status], 1", "jmp     short loc_6C34"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [3, 0, 21, 0, 4, 16, 0, 4, 16, 9, 0.0, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotFstatS; \"cannot fstat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 22, 0, 2, 9, 1, 3, 15, 9, 0.04440333024976874, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+ftruncate_errno], eax", "lea     rax, [rbp+stdout_stat]", "mov     rsi, rax; stat_buf", "mov     edi, 1; fildes", "call    fstat", "test    eax, eax", "jz      short loc_6A3A"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 29, 0, 1, 12, 2, 1, 10, 8, 0.07816836262719705, ["mov     eax, [rbp+opts]", "or      eax, 1", "mov     esi, eax", "mov     rax, cs:output_file", "mov     edx, [rbp+perms]", "mov     ecx, edx; mode", "mov     edx, esi; flag", "mov     rsi, rax; file", "mov     edi, 1; desired_fd", "call    ifd_reopen", "test    eax, eax", "jns     short loc_6902"], ["mov~eax,[rbp+0]", "or~eax,0", "mov~esi,eax", "mov~rax,<TAG>", "mov~edx,[rbp+0]", "mov~ecx,edx", "mov~edx,esi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [3, 0, 28, 0, 4, 16, 0, 4, 11, 8, 0.0, ["mov     rax, cs:output_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToOpenS; \"failed to open %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 41, 0, 2, 9, 0, 3, 3, 9, 0.037927844588344126, ["lea     rdi, aStandardInput; \"standard input\"", "call    _gettext", "mov     cs:input_file, rax", "mov     rdx, cs:input_file; name", "mov     eax, cs:input_flags", "mov     esi, eax; add_flags", "mov     edi, 0; fd", "call    set_fd_flags", "jmp     short loc_6757"], ["lea~rdi,<TAG>", "call~FOO", "mov~<TAG>,rax", "mov~rdx,<TAG>", "mov~eax,<TAG>", "mov~esi,eax", "mov~edi,0", "call~FOO", "jmp~FOO"]], [3, 0, 41, 0, 4, 16, 0, 4, 4, 9, 0.0, ["mov     rax, cs:input_file", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToOpenS; \"failed to open %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    nl_error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [5, 0, 7, 0, 4, 18, 0, 4, 10, 4, 0.0, ["mov     rax, cs:input_file", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aFailedToDiscar; \"failed to discard cache for: %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; fmt", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    nl_error", "mov     [rbp+exit_status], 1"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0"]], [0, 1, 34, 0, 0, 4, 2, 1, 8, 11, 0.005550416281221092, ["mov     eax, cs:conversions_mask", "and     eax, 200h", "test    eax, eax", "jz      short loc_684B"], ["mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 23, 0, 1, 6, 1, 2, 14, 7, 0.0698427382053654, ["mov     rax, [rbp+size]", "mov     rsi, rax; length", "mov     edi, 1; fd", "call    iftruncate", "test    eax, eax", "jz      loc_6AAB"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 32, 0, 0, 2, 0, 1, 8, 10, 0.11840888066604996, ["mov     eax, 0", "jmp     short loc_6850"], ["mov~eax,0", "jmp~FOO"]], [0, 1, 32, 0, 0, 1, 0, 0, 9, 10, 0.0074005550416281225, ["mov     eax, 200h"], ["mov~eax,<STR>"]], [0, 0, 0, 0, 1, 1, 0, 1, 12, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 17, 1, 2, 10, 1, 3, 6, 6, 0.2358926919518964, ["call    gethrxtime", "mov     cs:start_time, rax", "mov     rax, cs:start_time", "add     rax, 3B9ACA00h", "mov     cs:next_time, rax", "call    dd_copy", "mov     [rbp+exit_status], eax", "mov     rax, cs:max_records", "test    rax, rax", "jnz     loc_6BE8"], ["call~FOO", "mov~<TAG>,rax", "mov~rax,<TAG>", "add~rax,0", "mov~<TAG>,rax", "call~FOO", "mov~[rbp+0],eax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 18, 0, 2, 9, 0, 3, 5, 7, 0.0666049953746531, ["lea     rdi, aStandardOutput; \"standard output\"", "call    _gettext", "mov     cs:output_file, rax", "mov     rdx, cs:output_file; name", "mov     eax, cs:output_flags", "mov     esi, eax; add_flags", "mov     edi, 1; fd", "call    set_fd_flags", "jmp     loc_6AAB"], ["lea~rdi,<TAG>", "call~FOO", "mov~<TAG>,rax", "mov~rdx,<TAG>", "mov~eax,<TAG>", "mov~esi,eax", "mov~edi,0", "call~FOO", "jmp~FOO"]], [0, 0, 16, 0, 0, 3, 1, 1, 7, 5, 0.10897317298797404, ["mov     rax, cs:max_bytes", "test    rax, rax", "jnz     loc_6BE8"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]]], "func_feature": [55, 38, 86, 1, 48, 74, 0, 389, 0.05137, 40, 8], "succs": [[8, 7], [0, 46], [3], [2, 14], [17], [4, 6], [17, 4], [30], [30], [32, 31], [9, 31], [35, 20], [35, 11], [1, 38], [13, 37], [10, 39], [10, 15], [21, 29], [3], [28, 45], [19, 45], [26, 29], [45], [24, 22], [45, 22], [], [25, 44], [41], [41, 27], [26], [40, 42], [26], [31], [23], [33, 23], [36, 20], [20], [1], [1], [10], [42, 43], [34, 45], [12], [12], [], [5, 47], [45], [16, 5]], "fname": "main", "n_num": 48}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.05357142857142857, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 7, 0, 0, 2, 0, 1, 1, 2, 0.0625, ["cmp     [rbp+fclose_fail], 0", "jz      short loc_6CE1"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 5, 0, 1, 4, 0, 2, 3, 2, 0.026785714285714284, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 9", "jz      short loc_6CE1"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 3, 0.08928571428571427, ["cmp     [rbp+some_pending], 0", "jnz     short loc_6CC4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.05357142857142857, ["mov     eax, 0FFFFFFFFh", "jmp     short locret_6CE6"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 8, 1, 3, 24, 3, 4, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+stream], rdi", "mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    ___fpending", "test    rax, rax", "setnz   al", "mov     [rbp+some_pending], al", "mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _ferror_unlocked", "test    eax, eax", "setnz   al", "mov     [rbp+prev_fail], al", "mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    rpl_fclose", "test    eax, eax", "setnz   al", "mov     [rbp+fclose_fail], al", "cmp     [rbp+prev_fail], 0", "jnz     short loc_6CC4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~rax,rax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 0, 4, 2, 1, 1, 2, 0.1607142857142857, ["movzx   eax, [rbp+fclose_fail]", "xor     eax, 1", "test    al, al", "jz      short loc_6CDA"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 2, 0, 1, 2, 0, 1, 2, 2, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 0"], ["call~FOO", "mov~<TAG>,0"]]], "func_feature": [5, 5, 11, 0, 9, 13, 3, 43, 0.0496, 0, 1], "succs": [[4], [0, 3], [0, 7], [2, 7], [], [4], [1, 7], [8, 5], [5]], "fname": "close_stream", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     cs:file_name, rax", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 8, 0.0, 1, 0], "succs": [[]], "fname": "close_stdout_set_file_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+ignore], al", "movzx   eax, [rbp+ignore]", "mov     cs:ignore_EPIPE, al", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "mov~<TAG>,al", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 9, 0.0, 1, 0], "succs": [[]], "fname": "close_stdout_set_ignore_EPIPE", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 8, 0, 0, 4, 2, 1, 0, 0, 0.06944444444444445, ["movzx   eax, cs:ignore_EPIPE", "xor     eax, 1", "test    al, al", "jnz     short loc_6D52"], ["movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 9, 1, 1, 9, 1, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 18h", "mov     rax, cs:stdout@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      loc_6DDE"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 2, -1, 0.0, ["mov     eax, cs:exit_failure", "mov     edi, eax; status", "call    __exit"], ["mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]], [0, 0, 2, 0, 1, 5, 1, 2, 1, 1, 0.08333333333333333, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      short loc_6DFE"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 2, 0, 0.0, ["nop", "add     rsp, 18h", "pop     rbx", "pop     rbp", "retn"], ["nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [0, 1, 7, 0, 1, 4, 0, 2, 2, 2, 0.041666666666666664, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 20h ; ' '", "jz      loc_6DDE"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,<STR>", "jz~FOO"]], [0, 0, 3, 0, 1, 6, 1, 2, 2, -1, 0.125, ["lea     rdi, aWriteError; \"write error\"", "call    _gettext", "mov     [rbp+write_error], rax", "mov     rax, cs:file_name", "test    rax, rax", "jz      short loc_6DAB"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [2, 0, 1, 0, 3, 15, 0, 4, 3, -1, 0.027777777777777776, ["mov     rax, cs:file_name", "mov     rdi, rax; arg", "call    quotearg_colon", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+write_error]", "mov     r8, rdx", "mov     rcx, rbx", "lea     rdx, aSS_0; \"%s: %s\"", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_6DD1"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~r8,rdx", "mov~rcx,rbx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 4, -1, 0.0, ["mov     eax, cs:exit_failure", "mov     edi, eax; status", "call    __exit"], ["mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]], [2, 0, 1, 0, 2, 9, 0, 2, 3, -1, 0.027777777777777776, ["call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+write_error]", "mov     rcx, rdx", "lea     rdx, off_12860; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]]], "func_feature": [11, 5, 17, 0, 10, 12, 1, 63, 0.0375, 8, 2], "succs": [[5, 6], [0, 3], [], [2, 4], [], [3, 6], [9, 7], [8], [], [8]], "fname": "close_stdout", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.125, ["mov     eax, [rbp+fd]", "jmp     short locret_6E80"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [2, 0, 4, 1, 1, 18, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+desired_fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+flags], edx", "mov     [rbp+mode], ecx", "mov     edx, [rbp+mode]", "mov     ecx, [rbp+flags]", "mov     rax, [rbp+file]", "mov     esi, ecx; oflag", "mov     rdi, rax; file", "mov     eax, 0", "call    _open", "mov     [rbp+fd], eax", "mov     eax, [rbp+fd]", "cmp     eax, [rbp+desired_fd]", "jz      short loc_6E45"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],ecx", "mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 0, 1, 2, 0.08333333333333333, ["cmp     [rbp+fd], 0", "jns     short loc_6E4A"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 4, 17, 0, 4, 2, 1, 0.041666666666666664, ["mov     edx, [rbp+desired_fd]", "mov     eax, [rbp+fd]", "mov     esi, edx; fd2", "mov     edi, eax; fd", "call    _dup2", "mov     [rbp+fd2], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     eax, [rbp+fd2]"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,[rbp+0]"]]], "func_feature": [5, 0, 7, 0, 5, 6, 1, 41, 0.05, 0, 1], "succs": [[3], [0, 2], [0, 4], [], [3]], "fname": "fd_reopen", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 3, 0, 1, 6, 0, 2, 0, 0, 0.07500000000000001, ["mov     rdx, [rbp+ts.tv_nsec]", "mov     rax, [rbp+ts.tv_sec]", "mov     rsi, rdx; ns", "mov     rdi, rax; s", "call    xtime_make", "jmp     short loc_6EE2"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 1, 5, 1, 1, 12, 2, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+ts]", "mov     rsi, rax; tp", "mov     edi, 1; clock_id", "call    _clock_gettime", "test    eax, eax", "jnz     short loc_6EC3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.30000000000000004, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_6EF6"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 2, 8, 0, 2, 1, 2, 0.07500000000000001, ["lea     rax, [rbp+ts]", "mov     rdi, rax; ts", "call    gettime", "mov     rdx, [rbp+ts.tv_nsec]", "mov     rax, [rbp+ts.tv_sec]", "mov     rsi, rdx; ns", "mov     rdi, rax; s", "call    xtime_make"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 3, 8, 1, 6, 6, 3, 32, 0.075, 1, 1], "succs": [[2], [0, 3], [4, 5], [2], [], []], "fname": "gethrxtime", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 5, 0, 19, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+s], rdi", "mov     [rbp+ns], rsi", "mov     [rbp+giga], 3B9ACA00h", "mov     rax, [rbp+ns]", "cqo", "idiv    [rbp+giga]", "add     [rbp+s], rax", "mov     rax, [rbp+ns]", "cqo", "idiv    [rbp+giga]", "mov     [rbp+ns], rdx", "mov     rax, [rbp+s]", "imul    rdx, rax, 3B9ACA00h", "mov     rax, [rbp+ns]", "add     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "cqo~,", "idiv~,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "cqo~,", "idiv~,[rbp+0]", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "imul~rdx,rax,0", "mov~rax,[rbp+0]", "add~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 19, 0.0, 0, 5], "succs": [[]], "fname": "xtime_make", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[3, 0, 0, 2, 0, 14, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+t], rdi", "mov     rcx, [rbp+t]", "mov     rdx, 112E0BE826D694B3h", "mov     rax, rcx", "imul    rdx", "sar     rdx, 1Ah", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rcx,[rbp+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 14, 0.0, 0, 2], "succs": [[]], "fname": "xtime_nonnegative_sec", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 8", "mov     [rbp+t], rdi", "cmp     [rbp+t], 0", "jns     short loc_6FB0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [4, 0, 1, 3, 0, 12, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+t]", "lea     rcx, [rax+3B9AC9FFh]", "mov     rdx, 112E0BE826D694B3h", "mov     rax, rcx", "imul    rdx", "sar     rdx, 1Ah", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "sub     rax, 1", "jmp     short locret_6FBC"], ["mov~rax,[rbp+0]", "lea~rcx,[rax+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "sub~rax,0", "jmp~FOO"]], [0, 0, 1, 0, 1, 3, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+t]", "mov     rdi, rax; t", "call    xtime_nonnegative_sec"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]]], "func_feature": [1, 0, 2, 0, 4, 4, 0, 23, 0.04167, 0, 4], "succs": [[2, 3], [], [1], [1]], "fname": "xtime_sec", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[4, 0, 0, 4, 0, 17, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+t], rdi", "mov     rcx, [rbp+t]", "mov     rdx, 112E0BE826D694B3h", "mov     rax, rcx", "imul    rdx", "sar     rdx, 1Ah", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "imul    rax, 3B9ACA00h", "sub     rcx, rax", "mov     rax, rcx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rcx,[rbp+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "imul~rax,,0", "sub~rcx,rax", "mov~rax,rcx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 17, 0.0, 0, 4], "succs": [[]], "fname": "xtime_nonnegative_nsec", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+ns]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "pop~rbp", "retn"]], [5, 0, 2, 4, 0, 18, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+t], rdi", "mov     rcx, [rbp+t]", "mov     rdx, 112E0BE826D694B3h", "mov     rax, rcx", "imul    rdx", "sar     rdx, 1Ah", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "imul    rax, 3B9ACA00h", "sub     rcx, rax", "mov     rax, rcx", "mov     [rbp+ns], rax", "cmp     [rbp+ns], 0", "jns     short loc_7047"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rcx,[rbp+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "imul~rax,,0", "sub~rcx,rax", "mov~rax,rcx", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0.0, ["add     [rbp+ns], 3B9ACA00h"], ["add~[rbp+0],0"]]], "func_feature": [0, 0, 0, 0, 3, 3, 0, 22, 0.0, 0, 5], "succs": [[], [0, 2], [0]], "fname": "xtime_nsec", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+ts], rdi", "mov     rax, [rbp+ts]", "mov     rsi, rax; tp", "mov     edi, 0; clock_id", "call    _clock_gettime", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 11, 0.0, 0, 1], "succs": [[]], "fname": "gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 1, 2, 1, 1, 14, 2, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+ts]", "mov     rdi, rax; ts", "call    gettime", "mov     rax, [rbp+ts.tv_sec]", "mov     rdx, [rbp+ts.tv_nsec]", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_70AC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 2, 3, 1, 3, 2, 0, 17, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "current_timespec", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0.0, ["fld     cs:tbyte_12900", "faddp   st(1), st"], ["fld~<TAG>,<TAG>", "faddp~<TAG>,<TAG>"]], [0, 0, 3, 1, 0, 7, 1, 0, 6, 2, 0.14705882352941177, ["movsxd  rdx, eax", "mov     rax, [rbp+u]", "add     rax, rdx", "mov     [rbp+var_20], rax", "fild    [rbp+var_20]", "test    rax, rax", "jns     short loc_718B"], ["movsxd~rdx,eax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "fild~<TAG>,[rbp+0]", "test~rax,rax", "jns~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 8, 3, 0.051470588235294115, ["mov     eax, 1", "jmp     short loc_716D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 5, 3, 0.11764705882352941, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 11, 0, 0, 3, 0, 0, 5, 6, 0.1323529411764706, ["fild    [rbp+u]", "cmp     [rbp+u], 0", "jns     short loc_714D"], ["fild~<TAG>,[rbp+0]", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 12, 0, 0, 4, 0, 1, 4, 4, 0.21323529411764705, ["mov     rax, [rbp+u]", "mov     [rbp+u], rax", "cmp     [rbp+inexact_style], 0", "jnz     short loc_7168"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 5, 0, 0, 1, 0, 1, 8, 4, 0.003676470588235294, ["jmp     short loc_7161"], ["jmp~FOO"]], [0, 0, 5, 0, 0, 1, 0, 0, 7, 4, 0.05514705882352941, ["fstp    st"], ["fstp~<TAG>,<TAG>"]], [0, 0, 7, 0, 0, 4, 0, 1, 7, 4, 0.0661764705882353, ["fld     [rbp+value.value]", "fucomip st, st(1)", "fstp    st", "jz      short loc_7168"], ["fld~<TAG>,[rbp+0]", "fucomip~<TAG>,<TAG>", "fstp~<TAG>,<TAG>", "jz~FOO"]], [2, 0, 13, 0, 0, 12, 2, 0, 3, 5, 0.06801470588235294, ["fld     [rbp+value.value]", "fld     cs:tbyte_128F0", "fsubp   st(1), st", "fnstcw  [rbp+var_16]", "movzx   eax, [rbp+var_16]", "or      ah, 0Ch", "mov     [rbp+var_18], ax", "fldcw   [rbp+var_18]", "fistp   [rbp+u]", "fldcw   [rbp+var_16]", "mov     rax, 8000000000000000h", "xor     [rbp+u], rax"], ["fld~<TAG>,[rbp+0]", "fld~<TAG>,<TAG>", "fsubp~<TAG>,<TAG>", "fnstcw~[rbp+0]", "movzx~eax,[rbp+0]", "or~ah,0", "mov~[rbp+0],ax", "fldcw~[rbp+0]", "fistp~<TAG>,[rbp+0]", "fldcw~[rbp+0]", "mov~rax,0", "xor~[rbp+0],rax"]], [0, 0, 15, 0, 0, 5, 0, 0, 2, 6, 0.10294117647058823, ["fld     cs:tbyte_128F0", "fld     [rbp+value.value]", "fucomip st, st(1)", "fstp    st", "jnb     short loc_70FD"], ["fld~<TAG>,<TAG>", "fld~<TAG>,[rbp+0]", "fucomip~<TAG>,<TAG>", "fstp~<TAG>,<TAG>", "jnb~FOO"]], [0, 0, 10, 0, 0, 2, 0, 0, 6, 6, 0.0, ["fld     cs:tbyte_12900", "faddp   st(1), st"], ["fld~<TAG>,<TAG>", "faddp~<TAG>,<TAG>"]], [0, 0, 16, 0, 0, 5, 0, 0, 1, 1, 0.05514705882352941, ["fld     [rbp+value.value]", "fld     cs:tbyte_128E0", "fucomip st, st(1)", "fstp    st", "jbe     loc_718E"], ["fld~<TAG>,[rbp+0]", "fld~<TAG>,<TAG>", "fucomip~<TAG>,<TAG>", "fstp~<TAG>,<TAG>", "jbe~FOO"]], [1, 0, 17, 0, 0, 5, 0, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+inexact_style], edi", "cmp     [rbp+inexact_style], 1", "jz      loc_718E"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["fld     [rbp+value.value]", "pop     rbp", "retn"], ["fld~<TAG>,[rbp+0]", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 7, 1, 0.051470588235294115, ["fstp    [rbp+value.value]"], ["fstp~<TAG>,[rbp+0]"]], [0, 0, 9, 0, 0, 3, 0, 0, 6, 5, 0.15441176470588236, ["fld     [rbp+value.value]", "fucomip st, st(1)", "jp      short loc_715F"], ["fld~<TAG>,[rbp+0]", "fucomip~<TAG>,<TAG>", "jp~FOO"]], [1, 0, 13, 0, 0, 9, 1, 1, 3, 5, 0.06801470588235294, ["fld     [rbp+value.value]", "fnstcw  [rbp+var_16]", "movzx   eax, [rbp+var_16]", "or      ah, 0Ch", "mov     [rbp+var_18], ax", "fldcw   [rbp+var_18]", "fistp   [rbp+u]", "fldcw   [rbp+var_16]", "jmp     short loc_712D"], ["fld~<TAG>,[rbp+0]", "fnstcw~[rbp+0]", "movzx~eax,[rbp+0]", "or~ah,0", "mov~[rbp+0],ax", "fldcw~[rbp+0]", "fistp~<TAG>,[rbp+0]", "fldcw~[rbp+0]", "jmp~FOO"]]], "func_feature": [0, 4, 6, 3, 18, 25, 3, 70, 0.07149, 3, 1], "succs": [[15], [0, 15], [1], [1], [16, 11], [3, 4], [2], [2], [3, 6], [5], [9, 17], [16], [10, 14], [12, 14], [], [14], [8, 7], [5]], "fname": "adjust_value", "n_num": 18}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 13, 2, 1, 15, 0, 2, 0, 0, 0.4230769230769231, ["mov     rax, [rbp+grouplen]", "neg     rax", "add     d, rax", "mov     rax, [rbp+grouplen]", "sub     [rbp+i], rax", "lea     rdx, [rbp+buf]", "mov     rax, [rbp+i]", "lea     rcx, [rdx+rax]", "mov     rax, [rbp+grouplen]", "mov     rdx, rax; n", "mov     rsi, rcx; src", "mov     rdi, d; dest", "call    _memcpy", "cmp     [rbp+i], 0", "jnz     short loc_7296"], ["mov~rax,[rbp+0]", "neg~rax", "add~d,rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rsi,rcx", "mov~rdi,d", "call~FOO", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 13, 0, 0, 3, 0, 0, 2, 3, 0.3846153846153846, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+grouplen]", "jnb     short loc_724B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 13, 0, 0, 2, 0, 0, 3, 3, 0.0, ["mov     rax, [rbp+i]", "mov     [rbp+grouplen], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 13, 0, 0, 2, 0, 1, 2, 6, 0.14102564102564102, ["cmp     [rbp+g], 7Eh ; '~'", "ja      short loc_7229"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 13, 0, 0, 5, 0, 1, 1, 4, 0.28846153846153844, ["mov     rax, [rbp+grouping]", "movzx   eax, byte ptr [rax]", "mov     [rbp+g], al", "cmp     [rbp+g], 0", "jz      short loc_7239"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 5, -1, 0.07051282051282051, ["jmp     short loc_72BB"], ["jmp~FOO"]], [0, 0, 13, 1, 1, 9, 0, 2, 4, 5, 0.1858974358974359, ["mov     rax, [rbp+thousands_seplen]", "neg     rax", "add     d, rax", "mov     rdx, [rbp+thousands_seplen]; n", "mov     rax, [rbp+thousands_sep]", "mov     rsi, rax; src", "mov     rdi, d; dest", "call    _memcpy", "jmp     loc_720A"], ["mov~rax,[rbp+0]", "neg~rax", "add~d,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,d", "call~FOO", "jmp~FOO"]], [1, 1, 13, 1, 2, 27, 1, 2, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "push    d", "sub     rsp, 88h", "mov     [rbp+number], rdi", "mov     [rbp+numberlen], rsi", "mov     [rbp+grouping], rdx", "mov     [rbp+thousands_sep], rcx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+grouplen], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+thousands_sep]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+thousands_seplen], rax", "mov     rax, [rbp+numberlen]", "mov     [rbp+i], rax", "mov     rdx, [rbp+numberlen]; n", "mov     rcx, [rbp+number]", "lea     rax, [rbp+buf]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rdx, [rbp+number]", "mov     rax, [rbp+numberlen]", "lea     d, [rdx+rax]"], ["push~rbp", "mov~rbp,rsp", "push~d", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~d,<TAG>"]], [0, 0, 13, 0, 0, 2, 0, 1, 3, 5, 0.05128205128205128, ["movzx   eax, [rbp+g]", "jmp     short loc_722D"], ["movzx~eax,[rbp+0]", "jmp~FOO"]], [0, 0, 13, 0, 0, 1, 0, 0, 3, 5, 0.05128205128205128, ["mov     rax, [rbp+i]"], ["mov~rax,[rbp+0]"]], [1, 0, 13, 1, 0, 2, 0, 0, 4, 4, 0.1987179487179487, ["mov     [rbp+grouplen], rax", "add     [rbp+grouping], 1"], ["mov~[rbp+0],rax", "add~[rbp+0],0"]], [0, 0, 3, 0, 0, 4, 1, 1, 4, 1, 0.1923076923076923, ["mov     rax, d", "mov     rsi, [rbp+var_18]", "xor     rsi, fs:28h", "jz      short loc_72C0"], ["mov~rax,d", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 1, 0, 1, 0, 4, 0, 0, 5, 0, 0.0, ["add     rsp, 88h", "pop     d", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~d", "pop~rbp", "retn"]]], "func_feature": [5, 2, 12, 1, 14, 17, 1, 78, 0.14194, 1, 6], "succs": [[12, 7], [0, 2], [0], [9, 10], [1, 3], [], [5], [4], [4], [11], [11], [1], [13, 6], []], "fname": "group_number", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[4, 0, 26, 2, 3, 24, 0, 3, 0, 0, 0.004949552636588616, ["fld     [rbp+damt.value]", "fld     cs:tbyte_12910", "fmulp   st(1), st", "mov     eax, [rbp+inexact_style]", "lea     rsp, [rsp-10h]", "fstp    [rsp+120h+value.value]; value", "mov     edi, eax; inexact_style", "call    adjust_value", "add     rsp, 10h", "fld     cs:tbyte_12910", "fdivp   st(1), st", "mov     rax, [rbp+buf]", "lea     rsp, [rsp-10h]", "fstp    [rsp+120h+value.value]", "lea     rsi, a0lf; \"%.0Lf\"", "mov     rdi, rax; s", "mov     eax, 0", "call    _sprintf", "add     rsp, 10h", "mov     rax, [rbp+buf]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+buflen], rax", "mov     [rbp+nonintegerlen], 0"], ["fld~<TAG>,[rbp+0]", "fld~<TAG>,<TAG>", "fmulp~<TAG>,<TAG>", "mov~eax,[rbp+0]", "lea~rsp,[rsp-10h]+0]", "fstp~<TAG>,<TAG>", "mov~edi,eax", "call~FOO", "add~rsp,0", "fld~<TAG>,<TAG>", "fdivp~<TAG>,<TAG>", "mov~rax,[rbp+0]", "lea~rsp,[rsp-10h]+0]", "fstp~<TAG>,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0"]], [5, 1, 29, 5, 3, 35, 2, 4, 14, 5, 0.014563106796116505, ["fld     [rbp+damt.value]", "fld     [rbp+e.value]", "fdivp   st(1), st", "fstp    [rbp+damt.value]", "mov     eax, [rbp+inexact_style]", "push    qword ptr [rbp+damt.value+8]", "push    qword ptr [rbp+damt.value]; value", "mov     edi, eax; inexact_style", "call    adjust_value", "add     rsp, 10h", "mov     rax, [rbp+buf]", "lea     rsp, [rsp-10h]", "fstp    [rsp+120h+value.value]", "lea     rsi, a1lf; \"%.1Lf\"", "mov     rdi, rax; s", "mov     eax, 0", "call    _sprintf", "add     rsp, 10h", "mov     rax, [rbp+buf]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+buflen], rax", "mov     rax, [rbp+decimal_pointlen]", "add     rax, 1", "mov     [rbp+nonintegerlen], rax", "mov     eax, [rbp+opts]", "and     eax, 20h", "test    eax, eax", "setz    al", "movzx   edx, al", "mov     rax, [rbp+nonintegerlen]", "add     rax, rdx", "add     rax, 1", "cmp     [rbp+buflen], rax", "ja      short loc_7745"], ["fld~<TAG>,[rbp+0]", "fld~<TAG>,[rbp+0]", "fdivp~<TAG>,<TAG>", "fstp~<TAG>,[rbp+0]", "mov~eax,[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "mov~edi,eax", "call~FOO", "add~rsp,0", "mov~rax,[rbp+0]", "lea~rsp,[rsp-10h]+0]", "fstp~<TAG>,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "setz~al", "movzx~edx,al", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 27, 1, 0, 7, 0, 1, 16, 4, 9.518370454978108e-05, ["mov     rax, [rbp+buflen]", "lea     rdx, [rax-1]", "mov     rax, [rbp+buf]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 30h ; '0'", "jnz     short loc_77B3"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 25, 3, 1, 19, 0, 2, 13, 3, 0.0713877784123358, ["mov     rax, [rbp+buflen]", "neg     rax", "mov     rdx, rax", "mov     rax, [rbp+psuffix]", "add     rax, rdx", "mov     [rbp+p], rax", "mov     rdx, [rbp+buflen]; n", "mov     rcx, [rbp+buf]", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memmove", "mov     rax, [rbp+buflen]", "sub     rax, [rbp+nonintegerlen]", "mov     rdx, rax", "mov     rax, [rbp+p]", "add     rax, rdx", "mov     [rbp+integerlim], rax", "jmp     do_grouping"], ["mov~rax,[rbp+0]", "neg~rax", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [4, 0, 26, 2, 3, 20, 0, 4, 12, 4, 0.05444507900247478, ["mov     eax, [rbp+inexact_style]", "push    qword ptr [rbp+damt.value+8]", "push    qword ptr [rbp+damt.value]; value", "mov     edi, eax; inexact_style", "call    adjust_value", "add     rsp, 10h", "mov     rax, [rbp+buf]", "lea     rsp, [rsp-10h]", "fstp    [rsp+120h+value.value]", "lea     rsi, a0lf; \"%.0Lf\"", "mov     rdi, rax; s", "mov     eax, 0", "call    _sprintf", "add     rsp, 10h", "mov     rax, [rbp+buf]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+buflen], rax", "mov     [rbp+nonintegerlen], 0", "jmp     loc_77B3"], ["mov~eax,[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "mov~edi,eax", "call~FOO", "add~rsp,0", "mov~rax,[rbp+0]", "lea~rsp,[rsp-10h]+0]", "fstp~<TAG>,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 28, 0, 0, 4, 2, 1, 15, 4, 0.0074243289548829245, ["mov     eax, [rbp+opts]", "and     eax, 8", "test    eax, eax", "jz      loc_77B3"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 23, 1, 1, 11, 0, 1, 15, 2, 0.0, ["mov     rdx, [rbp+integerlim]", "mov     rax, [rbp+p]", "sub     rdx, rax", "mov     rax, rdx", "mov     rsi, rax; numberlen", "mov     rcx, [rbp+thousands_sep]; thousands_sep", "mov     rdx, [rbp+grouping]; grouping", "mov     rax, [rbp+p]", "mov     rdi, rax; number", "call    group_number", "mov     [rbp+p], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~rsi,rax", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 24, 0, 0, 4, 2, 1, 14, 2, 0.18046830382638493, ["mov     eax, [rbp+opts]", "and     eax, 4", "test    eax, eax", "jz      short loc_7C0F"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 93, 1, 0, 8, 0, 1, 6, 10, 0.0885208452312964, ["mov     rax, [rbp+buf]", "add     rax, 287h", "mov     [rbp+psuffix], rax", "mov     rax, [rbp+psuffix]", "mov     [rbp+p], rax", "mov     rax, [rbp+to_block_size]", "cmp     rax, [rbp+from_block_size]", "ja      short loc_7490"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [1, 0, 95, 0, 1, 9, 0, 2, 5, 11, 0.07233961545783361, ["mov     rax, [rbp+l]", "mov     rax, [rax+10h]", "mov     [rbp+grouping], rax", "mov     rax, [rbp+l]", "mov     rax, [rax+8]", "mov     rdi, rax; s", "call    _strlen", "cmp     rax, 10h", "ja      short loc_73DF"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "cmp~rax,0", "ja~FOO"]], [0, 0, 94, 0, 0, 3, 0, 0, 6, 11, 0.0, ["mov     rax, [rbp+l]", "mov     rax, [rax+8]", "mov     [rbp+thousands_sep], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [1, 0, 65, 0, 0, 4, 2, 1, 10, 9, 0.10041880830001904, ["mov     eax, [rbp+opts]", "and     eax, 10h", "test    eax, eax", "jz      loc_7A42"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 66, 0, 0, 3, 0, 1, 9, 10, 0.05073291452503331, ["mov     [rbp+tenths], 0", "mov     [rbp+rounding], 0", "jmp     use_integer_arithmetic"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 66, 0, 0, 2, 0, 1, 11, 10, 0.0392156862745098, ["mov     [rbp+rounding], eax", "jmp     use_integer_arithmetic"], ["mov~[rbp+0],eax", "jmp~FOO"]], [0, 1, 22, 0, 0, 4, 2, 1, 15, 1, 0.1696173615077099, ["mov     eax, [rbp+opts]", "and     eax, 80h", "test    eax, eax", "jz      loc_7D4A"], ["mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 21, 0, 0, 2, 0, 0, 16, 4, 0.15610127546164096, ["cmp     [rbp+exponent], 0", "jns     short loc_7C76"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 84, 1, 0, 6, 1, 1, 7, 9, 0.06648581762802208, ["mov     rax, [rbp+from_block_size]", "mov     edx, 0", "div     [rbp+to_block_size]", "mov     rax, rdx", "test    rax, rax", "jnz     loc_756E"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "test~rax,rax", "jnz~FOO"]], [1, 0, 32, 0, 0, 3, 0, 0, 12, 7, 0.012564249000571102, ["fld1", "fstp    [rbp+e.value]", "mov     [rbp+exponent], 0"], ["fld1~<TAG>", "fstp~<TAG>,[rbp+0]", "mov~[rbp+0],0"]], [1, 0, 34, 0, 0, 8, 2, 1, 11, 5, 0.06796116504854369, ["fld     [rbp+dto_block_size.value]", "fdivp   st(1), st", "fmulp   st(1), st", "fstp    [rbp+damt.value]", "mov     eax, [rbp+opts]", "and     eax, 10h", "test    eax, eax", "jnz     short loc_762E"], ["fld~<TAG>,[rbp+0]", "fdivp~<TAG>,<TAG>", "fmulp~<TAG>,<TAG>", "fstp~<TAG>,[rbp+0]", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [1, 0, 64, 0, 0, 4, 0, 0, 11, 9, 0.04816295450218923, ["mov     [rbp+exponent], 0", "mov     eax, [rbp+base]", "cmp     [rbp+amt], rax", "jb      loc_7A42"], ["mov~[rbp+0],0", "mov~eax,[rbp+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [3, 0, 42, 3, 1, 18, 0, 1, 21, 9, 0.0019988577955454027, ["mov     eax, [rbp+tenths]", "add     eax, 30h ; '0'", "sub     [rbp+p], 1", "mov     edx, eax", "mov     rax, [rbp+p]", "mov     [rax], dl", "mov     rax, [rbp+decimal_pointlen]", "neg     rax", "add     [rbp+p], rax", "mov     rdx, [rbp+decimal_pointlen]; n", "mov     rcx, [rbp+decimal_point]", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+rounding], 0", "mov     eax, [rbp+rounding]", "mov     [rbp+tenths], eax"], ["mov~eax,[rbp+0]", "add~eax,0", "sub~[rbp+0],0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~rax,[rbp+0]", "neg~rax", "add~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "mov~[rbp+0],eax"]], [1, 0, 44, 0, 0, 2, 0, 1, 20, 10, 0.008185798591281173, ["cmp     [rbp+tenths], 0", "jnz     short loc_79DF"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 43, 0, 0, 4, 2, 1, 21, 9, 0.0019988577955454027, ["mov     eax, [rbp+opts]", "and     eax, 8", "test    eax, eax", "jnz     short loc_7A42"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [2, 0, 20, 0, 0, 3, 0, 1, 17, 6, 0.039501237388159145, ["mov     [rbp+exponent], 0", "mov     [rbp+power], 1", "jmp     short loc_7C66"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 41, 0, 0, 2, 0, 1, 11, 8, 0.14382257757471922, ["cmp     [rbp+inexact_style], 1", "jnz     short loc_7A79"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 56, 0, 0, 2, 0, 1, 15, 9, 0.06929373691224062, ["cmp     [rbp+amt], 9", "ja      loc_7A42"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 45, 0, 0, 2, 0, 1, 19, 9, 0.05197030268418047, ["cmp     [rbp+amt], 9", "ja      short loc_7A42"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 20, 1, 0, 4, 0, 1, 19, 5, 0.016276413478012564, ["add     [rbp+exponent], 1", "mov     eax, [rbp+exponent]", "cmp     eax, [rbp+exponent_max]", "jz      short loc_7C75"], ["add~[rbp+0],0", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jz~FOO"]], [0, 0, 20, 0, 0, 3, 0, 0, 18, 5, 0.035217970683418996, ["mov     rax, [rbp+power]", "cmp     rax, [rbp+to_block_size]", "jb      short loc_7C3F"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 20, 1, 0, 4, 0, 0, 20, 6, 0.00019036740909956216, ["mov     eax, [rbp+base]", "mov     rdx, [rbp+power]", "imul    rax, rdx", "mov     [rbp+power], rax"], ["mov~eax,[rbp+0]", "mov~rdx,[rbp+0]", "imul~rax,rdx", "mov~[rbp+0],rax"]], [2, 0, 83, 3, 0, 12, 0, 1, 8, 9, 0.047972587093089665, ["mov     rax, [rbp+from_block_size]", "mov     edx, 0", "div     [rbp+to_block_size]", "mov     [rbp+multiplier], rax", "mov     rax, [rbp+n]", "imul    rax, [rbp+multiplier]", "mov     [rbp+amt], rax", "mov     rax, [rbp+amt]", "mov     edx, 0", "div     [rbp+multiplier]", "cmp     [rbp+n], rax", "jnz     loc_756E"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 15, 0, 0, 1, 0, 1, 19, 4, 0.004283266704740148, ["jmp     short loc_7C76"], ["jmp~FOO"]], [0, 0, 15, 0, 0, 1, 0, 0, 20, 4, 0.0014277555682467161, ["nop"], ["nop"]], [2, 0, 35, 2, 0, 13, 2, 1, 12, 7, 0.12088330477822197, ["mov     eax, [rbp+rounding]", "cdqe", "mov     rdx, [rbp+amt]", "and     edx, 1", "add     rax, rdx", "test    rax, rax", "setnz   al", "movzx   edx, al", "mov     eax, [rbp+tenths]", "add     eax, edx", "cmp     eax, 5", "setnle  al", "jmp     short loc_7AA3"], ["mov~eax,[rbp+0]", "cdqe~", "mov~rdx,[rbp+0]", "and~edx,0", "add~rax,rdx", "test~rax,rax", "setnz~al", "movzx~edx,al", "mov~eax,[rbp+0]", "add~eax,edx", "cmp~eax,0", "setnle~al", "jmp~FOO"]], [1, 0, 32, 1, 0, 16, 0, 0, 13, 6, 0.013420902341519133, ["mov     eax, [rbp+base]", "mov     [rbp+var_110], rax", "fild    [rbp+var_110]", "fld     [rbp+e.value]", "fmulp   st(1), st", "fstp    [rbp+e.value]", "add     [rbp+exponent], 1", "mov     eax, [rbp+base]", "mov     [rbp+var_110], rax", "fild    [rbp+var_110]", "fld     [rbp+e.value]", "fmulp   st(1), st", "fld     [rbp+damt.value]", "fucomip st, st(1)", "fstp    st", "jb      short loc_768E"], ["mov~eax,[rbp+0]", "mov~[rbp+0],rax", "fild~<TAG>,[rbp+0]", "fld~<TAG>,[rbp+0]", "fmulp~<TAG>,<TAG>", "fstp~<TAG>,[rbp+0]", "add~[rbp+0],0", "mov~eax,[rbp+0]", "mov~[rbp+0],rax", "fild~<TAG>,[rbp+0]", "fld~<TAG>,[rbp+0]", "fmulp~<TAG>,<TAG>", "fld~<TAG>,[rbp+0]", "fucomip~<TAG>,<TAG>", "fstp~<TAG>,<TAG>", "jb~FOO"]], [0, 0, 32, 0, 0, 3, 0, 1, 14, 6, 0.0, ["mov     eax, [rbp+exponent]", "cmp     eax, [rbp+exponent_max]", "jl      short loc_763D"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jl~FOO"]], [1, 0, 39, 0, 0, 2, 0, 1, 12, 9, 0.017894536455358843, ["cmp     [rbp+inexact_style], 0", "jnz     short loc_7A9B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 14, 0, 0, 5, 3, 1, 17, 3, 0.11079383209594518, ["mov     eax, [rbp+opts]", "and     eax, 100h", "or      eax, [rbp+exponent]", "test    eax, eax", "jz      short loc_7CAD"], ["mov~eax,[rbp+0]", "and~eax,0", "or~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [0, 0, 38, 1, 0, 5, 1, 1, 13, 9, 0.004568817818389492, ["mov     edx, [rbp+tenths]", "mov     eax, [rbp+rounding]", "add     eax, edx", "test    eax, eax", "jle     short loc_7A9B"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "add~eax,edx", "test~eax,eax", "jle~FOO"]], [1, 0, 13, 0, 0, 4, 2, 1, 18, 3, 0.008566533409480296, ["mov     eax, [rbp+opts]", "and     eax, 40h", "test    eax, eax", "jz      short loc_7CAD"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 89, 0, 0, 2, 0, 1, 7, 9, 0.028793070626308776, ["cmp     [rbp+from_block_size], 0", "jz      loc_756E"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 36, 0, 0, 2, 0, 1, 14, 8, 0.0017133066818960595, ["mov     eax, 1", "jmp     short loc_7AA0"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 36, 0, 0, 1, 0, 0, 13, 8, 0.009613554159527889, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 35, 0, 0, 1, 1, 0, 14, 7, 0.01332571863696935, ["and     eax, 1"], ["and~eax,0"]], [0, 0, 34, 0, 0, 2, 1, 1, 13, 6, 0.1358271463925376, ["test    al, al", "jz      loc_7B3F"], ["test~al,al", "jz~FOO"]], [0, 1, 12, 0, 0, 4, 0, 0, 19, 3, 0.0, ["mov     rax, [rbp+psuffix]", "lea     rdx, [rax+1]", "mov     [rbp+psuffix], rdx", "mov     byte ptr [rax], 20h ; ' '"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,<STR>"]], [0, 0, 48, 0, 0, 2, 1, 1, 18, 10, 0.05025699600228441, ["test    al, al", "jz      short loc_79BF"], ["test~al,al", "jz~FOO"]], [3, 0, 47, 1, 0, 4, 0, 1, 19, 10, 0.003807348181991243, ["add     [rbp+tenths], 1", "mov     [rbp+rounding], 0", "cmp     [rbp+tenths], 0Ah", "jnz     short loc_79BF"], ["add~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 46, 1, 0, 2, 0, 0, 20, 10, 0.0, ["add     [rbp+amt], 1", "mov     [rbp+tenths], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 11, 0, 0, 2, 0, 1, 18, 2, 0.0885208452312964, ["cmp     [rbp+exponent], 0", "jz      short loc_7CFB"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 88, 1, 0, 6, 1, 1, 8, 9, 0.010755758614125262, ["mov     rax, [rbp+to_block_size]", "mov     edx, 0", "div     [rbp+from_block_size]", "mov     rax, rdx", "test    rax, rax", "jnz     loc_756E"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "test~rax,rax", "jnz~FOO"]], [1, 0, 0, 0, 0, 5, 0, 0, 16, 0, 0.0, ["mov     rax, [rbp+psuffix]", "mov     byte ptr [rax], 0", "mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "leave", "retn"]], [1, 0, 5, 0, 0, 4, 2, 1, 19, 1, 0.03883495145631068, ["mov     eax, [rbp+opts]", "and     eax, 100h", "test    eax, eax", "jz      short loc_7D4A"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 1, 0, 0, 4, 0, 0, 21, 1, 0.00028555111364934324, ["mov     rax, [rbp+psuffix]", "lea     rdx, [rax+1]", "mov     [rbp+psuffix], rdx", "mov     byte ptr [rax], 42h ; 'B'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [2, 0, 33, 1, 0, 5, 2, 1, 14, 6, 0.02569960022844089, ["add     [rbp+amt], 1", "mov     eax, [rbp+opts]", "and     eax, 10h", "test    eax, eax", "jz      short loc_7B3F"], ["add~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 1, 10, 0, 0, 4, 2, 1, 19, 4, 0.03540833809251856, ["mov     eax, [rbp+opts]", "and     eax, 20h", "test    eax, eax", "jnz     short loc_7CCC"], ["mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jnz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 20, 4, 0.008947268227679422, ["cmp     [rbp+exponent], 1", "jz      short loc_7CE2"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 32, 0, 0, 3, 0, 1, 15, 6, 0.020940415000951836, ["mov     eax, [rbp+base]", "cmp     [rbp+amt], rax", "jnz     short loc_7B3F"], ["mov~eax,[rbp+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [6, 0, 64, 9, 0, 35, 0, 0, 12, 12, 0.0497810774795355, ["mov     ecx, [rbp+base]", "mov     rax, [rbp+amt]", "mov     edx, 0", "div     rcx", "mov     rax, rdx", "mov     edx, eax", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "mov     edx, eax", "mov     eax, [rbp+tenths]", "add     eax, edx", "mov     [rbp+r10_1], eax", "mov     eax, [rbp+r10_1]", "mov     edx, 0", "div     [rbp+base]", "mov     eax, edx", "lea     edx, [rax+rax]", "mov     eax, [rbp+rounding]", "sar     eax, 1", "add     eax, edx", "mov     [rbp+r2_0], eax", "mov     esi, [rbp+base]", "mov     rax, [rbp+amt]", "mov     edx, 0", "div     rsi", "mov     [rbp+amt], rax", "mov     eax, [rbp+r10_1]", "mov     edx, 0", "div     [rbp+base]", "mov     [rbp+tenths], eax", "mov     eax, [rbp+r2_0]", "cmp     eax, [rbp+base]", "jnb     short loc_78EC"], ["mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rcx", "mov~rax,rdx", "mov~edx,eax", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "mov~edx,eax", "mov~eax,[rbp+0]", "add~eax,edx", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~eax,edx", "lea~edx,<TAG>", "mov~eax,[rbp+0]", "sar~eax,0", "add~eax,edx", "mov~[rbp+0],eax", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "div~,rsi", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jnb~FOO"]], [0, 0, 64, 0, 0, 3, 0, 1, 15, 10, 0.0018084903864458404, ["mov     eax, [rbp+exponent]", "cmp     eax, [rbp+exponent_max]", "jl      loc_783A"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jl~FOO"]], [1, 0, 36, 0, 0, 3, 0, 0, 10, 6, 0.06510565391205025, ["fild    [rbp+from_block_size]", "cmp     [rbp+from_block_size], 0", "jns     short loc_75B9"], ["fild~<TAG>,[rbp+0]", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 35, 0, 0, 2, 0, 0, 11, 6, 0.0, ["fld     cs:tbyte_12900", "faddp   st(1), st"], ["fld~<TAG>,<TAG>", "faddp~<TAG>,<TAG>"]], [0, 0, 31, 0, 0, 3, 0, 1, 16, 6, 0.01599086236436322, ["mov     eax, [rbp+exponent]", "cmp     eax, [rbp+exponent_max]", "jge     short loc_7B3F"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jge~FOO"]], [0, 0, 7, 0, 0, 5, 0, 1, 20, 3, 0.009851513420902342, ["mov     eax, [rbp+exponent]", "movsxd  rdx, eax", "lea     rax, power_letter", "movzx   edx, byte ptr [rdx+rax]", "jmp     short loc_7CE7"], ["mov~eax,[rbp+0]", "movsxd~rdx,eax", "lea~rax,<TAG>", "movzx~edx,<TAG>", "jmp~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 21, 3, 0.00033314296592423375, ["mov     edx, 6Bh ; 'k'"], ["mov~edx,0"]], [0, 0, 64, 1, 0, 7, 1, 1, 13, 11, 0.04454597372929754, ["mov     edx, [rbp+rounding]", "mov     eax, [rbp+r2_0]", "add     eax, edx", "test    eax, eax", "setnz   al", "movzx   eax, al", "jmp     short loc_790E"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "add~eax,edx", "test~eax,eax", "setnz~al", "movzx~eax,al", "jmp~FOO"]], [2, 0, 30, 1, 0, 5, 2, 1, 17, 7, 0.010850942318675044, ["add     [rbp+exponent], 1", "mov     eax, [rbp+opts]", "and     eax, 8", "test    eax, eax", "jnz     short loc_7B34"], ["add~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [0, 0, 6, 0, 0, 4, 0, 0, 21, 2, 0.002284408909194746, ["mov     rax, [rbp+psuffix]", "lea     rcx, [rax+1]", "mov     [rbp+psuffix], rcx", "mov     [rax], dl"], ["mov~rax,[rbp+0]", "lea~rcx,[rax+0]", "mov~[rbp+0],rcx", "mov~<TAG>,dl"]], [0, 0, 64, 1, 0, 5, 0, 0, 13, 12, 0.005520654863887303, ["mov     edx, [rbp+rounding]", "mov     eax, [rbp+r2_0]", "add     eax, edx", "cmp     [rbp+base], eax", "jnb     short loc_7909"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "add~eax,edx", "cmp~[rbp+0],eax", "jnb~FOO"]], [1, 0, 64, 0, 0, 2, 0, 1, 14, 11, 0.0029031029887683227, ["mov     eax, 3", "jmp     short loc_790E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 64, 0, 0, 1, 0, 0, 14, 11, 0.0029031029887683227, ["mov     eax, 2"], ["mov~eax,0"]], [2, 1, 103, 1, 0, 15, 3, 1, 0, 16, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 110h", "mov     [rbp+n], rdi", "mov     [rbp+buf], rsi", "mov     [rbp+opts], edx", "mov     [rbp+from_block_size], rcx", "mov     [rbp+to_block_size], r8", "mov     eax, [rbp+opts]", "and     eax, 3", "mov     [rbp+inexact_style], eax", "mov     eax, [rbp+opts]", "and     eax, 20h", "test    eax, eax", "jz      short loc_731A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~eax,[rbp+0]", "and~eax,0", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 1, 4, 0, 0, 4, 2, 1, 20, 2, 0.02826956025128498, ["mov     eax, [rbp+opts]", "and     eax, 20h", "test    eax, eax", "jz      short loc_7D35"], ["mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 1, 101, 0, 0, 2, 0, 1, 1, 15, 0.0048067770797639445, ["mov     eax, 400h", "jmp     short loc_731F"], ["mov~eax,<STR>", "jmp~FOO"]], [1, 0, 101, 0, 0, 1, 0, 0, 1, 15, 0.0048067770797639445, ["mov     eax, 3E8h"], ["mov~eax,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 21, 2, 0.009518370454978107, ["cmp     [rbp+exponent], 0", "jz      short loc_7D35"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 100, 0, 0, 1, 0, 0, 2, 14, 0.028555111364934323, ["mov     [rbp+base], eax"], ["mov~[rbp+0],eax"]], [1, 0, 99, 0, 0, 1, 0, 0, 3, 13, 0.03769274700171331, ["mov     [rbp+exponent], 0FFFFFFFFh"], ["mov~[rbp+0],0"]], [1, 0, 64, 1, 0, 5, 0, 0, 14, 10, 0.06548638873024938, ["mov     [rbp+rounding], eax", "add     [rbp+exponent], 1", "mov     eax, [rbp+base]", "cmp     [rbp+amt], rax", "jb      short loc_793C"], ["mov~[rbp+0],eax", "add~[rbp+0],0", "mov~eax,[rbp+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [2, 0, 29, 2, 1, 12, 0, 1, 18, 7, 0.0, ["sub     [rbp+p], 1", "mov     rax, [rbp+p]", "mov     byte ptr [rax], 30h ; '0'", "mov     rax, [rbp+decimal_pointlen]", "neg     rax", "add     [rbp+p], rax", "mov     rdx, [rbp+decimal_pointlen]; n", "mov     rcx, [rbp+decimal_point]", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["sub~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "neg~rax", "add~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 2, 0, 0, 4, 0, 0, 22, 2, 0.0, ["mov     rax, [rbp+psuffix]", "lea     rdx, [rax+1]", "mov     [rbp+psuffix], rdx", "mov     byte ptr [rax], 69h ; 'i'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [1, 0, 28, 0, 0, 1, 0, 0, 18, 6, 0.00533028745478774, ["mov     [rbp+amt], 1"], ["mov~[rbp+0],0"]], [6, 0, 71, 9, 0, 29, 0, 0, 9, 12, 0.013992004568817818, ["mov     rax, [rbp+to_block_size]", "mov     edx, 0", "div     [rbp+from_block_size]", "mov     [rbp+divisor], rax", "mov     rax, [rbp+n]", "mov     edx, 0", "div     [rbp+divisor]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "mov     [rbp+r10_0], rax", "mov     rax, [rbp+r10_0]", "mov     edx, 0", "div     [rbp+divisor]", "mov     rax, rdx", "add     rax, rax", "mov     [rbp+r2], rax", "mov     rax, [rbp+n]", "mov     edx, 0", "div     [rbp+divisor]", "mov     [rbp+amt], rax", "mov     rax, [rbp+r10_0]", "mov     edx, 0", "div     [rbp+divisor]", "mov     [rbp+tenths], eax", "mov     rax, [rbp+r2]", "cmp     rax, [rbp+divisor]", "jnb     short loc_754D"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 27, 0, 0, 2, 0, 0, 14, 5, 0.11850371216447744, ["mov     rax, [rbp+p]", "mov     [rbp+integerlim], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 49, 0, 0, 1, 1, 0, 19, 11, 0.01865600609175709, ["and     eax, 1"], ["and~eax,0"]], [1, 0, 50, 0, 0, 2, 0, 1, 19, 12, 0.002379592613744527, ["mov     eax, 1", "jmp     short loc_798C"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 50, 0, 0, 1, 0, 0, 18, 12, 0.010279840091376356, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 67, 0, 0, 4, 0, 1, 10, 11, 0.015419760137064534, ["cmp     [rbp+r2], 0", "setnz   al", "movzx   eax, al", "jmp     short loc_7563"], ["cmp~[rbp+0],0", "setnz~al", "movzx~eax,al", "jmp~FOO"]], [1, 0, 55, 0, 0, 2, 0, 1, 16, 12, 0.03959642109270893, ["cmp     [rbp+inexact_style], 1", "jnz     short loc_796E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 69, 0, 0, 3, 0, 0, 10, 12, 0.00266514372739387, ["mov     rax, [rbp+divisor]", "cmp     rax, [rbp+r2]", "jnb     short loc_755E"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 67, 0, 0, 2, 0, 1, 11, 11, 0.0031886541024176663, ["mov     eax, 3", "jmp     short loc_7563"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 67, 0, 0, 1, 0, 0, 11, 11, 0.0031886541024176663, ["mov     eax, 2"], ["mov~eax,0"]], [2, 0, 49, 1, 0, 8, 1, 1, 17, 11, 0.025985151342090236, ["mov     eax, [rbp+tenths]", "and     eax, 1", "mov     edx, eax", "mov     eax, [rbp+rounding]", "add     eax, edx", "cmp     eax, 2", "setnle  al", "jmp     short loc_798F"], ["mov~eax,[rbp+0]", "and~eax,0", "mov~edx,eax", "mov~eax,[rbp+0]", "add~eax,edx", "cmp~eax,0", "setnle~al", "jmp~FOO"]], [1, 0, 53, 0, 0, 2, 0, 1, 17, 13, 0.012564249000571102, ["cmp     [rbp+inexact_style], 0", "jnz     short loc_7987"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 40, 0, 0, 3, 0, 0, 8, 8, 0.05711022272986865, ["fild    [rbp+to_block_size]", "cmp     [rbp+to_block_size], 0", "jns     short loc_7586"], ["fild~<TAG>,[rbp+0]", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 52, 0, 0, 2, 0, 1, 18, 13, 0.003236245954692557, ["cmp     [rbp+rounding], 0", "jle     short loc_7987"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 39, 0, 0, 2, 0, 0, 9, 8, 0.0, ["fld     cs:tbyte_12900", "faddp   st(1), st"], ["fld~<TAG>,<TAG>", "faddp~<TAG>,<TAG>"]], [3, 0, 98, 0, 2, 17, 0, 3, 4, 12, 0.04664001522939273, ["mov     [rbp+exponent_max], 8", "lea     rax, unk_12879", "mov     [rbp+decimal_point], rax", "mov     [rbp+decimal_pointlen], 1", "lea     rax, unk_1287B", "mov     [rbp+grouping], rax", "lea     rax, unk_1287B", "mov     [rbp+thousands_sep], rax", "call    _localeconv", "mov     [rbp+l], rax", "mov     rax, [rbp+l]", "mov     rax, [rax]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+pointlen], rax", "cmp     [rbp+pointlen], 0", "jz      short loc_73AE"], ["mov~[rbp+0],0", "lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 97, 0, 0, 2, 0, 1, 5, 12, 0.0005711022272986865, ["cmp     [rbp+pointlen], 10h", "ja      short loc_73AE"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 38, 0, 0, 4, 0, 0, 9, 7, 0.061488673139158574, ["fstp    [rbp+dto_block_size.value]", "fild    [rbp+n]", "cmp     [rbp+n], 0", "jns     short loc_75A1"], ["fstp~<TAG>,[rbp+0]", "fild~<TAG>,[rbp+0]", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 37, 0, 0, 2, 0, 0, 10, 7, 0.0, ["fld     cs:tbyte_12900", "faddp   st(1), st"], ["fld~<TAG>,<TAG>", "faddp~<TAG>,<TAG>"]], [0, 0, 96, 0, 0, 5, 0, 0, 6, 12, 0.0, ["mov     rax, [rbp+l]", "mov     rax, [rax]", "mov     [rbp+decimal_point], rax", "mov     rax, [rbp+pointlen]", "mov     [rbp+decimal_pointlen], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [8, 0, 27, 8, 0, 26, 0, 1, 15, 4, 0.11526746620978488, ["mov     rcx, [rbp+amt]", "mov     rdx, 0CCCCCCCCCCCCCCCDh", "mov     rax, rcx", "mul     rdx", "shr     rdx, 3", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "sub     rcx, rax", "mov     rdx, rcx", "mov     [rbp+digit], edx", "mov     eax, [rbp+digit]", "add     eax, 30h ; '0'", "sub     [rbp+p], 1", "mov     edx, eax", "mov     rax, [rbp+p]", "mov     [rax], dl", "mov     rax, [rbp+amt]", "mov     rdx, 0CCCCCCCCCCCCCCCDh", "mul     rdx", "mov     rax, rdx", "shr     rax, 3", "mov     [rbp+amt], rax", "cmp     [rbp+amt], 0", "jnz     short loc_7B4D"], ["mov~rcx,[rbp+0]", "mov~rdx,0", "mov~rax,rcx", "mul~,rdx", "shr~rdx,0", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "sub~rcx,rax", "mov~rdx,rcx", "mov~[rbp+0],edx", "mov~eax,[rbp+0]", "add~eax,0", "sub~[rbp+0],0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~rax,[rbp+0]", "mov~rdx,0", "mul~,rdx", "mov~rax,rdx", "shr~rax,0", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 25, 0, 0, 1, 0, 0, 16, 3, 0.11184085284599277, ["nop"], ["nop"]]], "func_feature": [16, 43, 77, 1, 104, 160, 5, 586, 0.03303, 7, 66], "succs": [[3], [0, 5], [0, 3], [7], [3], [2, 3], [14], [14, 6], [16, 40], [8, 10], [8], [24, 19], [11], [11], [51, 15], [37, 23], [94, 30], [34], [17, 4], [24, 58], [24], [20, 22], [24, 20], [28], [33, 36], [24, 88], [24, 21], [32, 29], [27, 31], [28], [12, 94], [37], [37], [44], [1, 35], [1, 34], [42, 38], [49, 39], [41, 42], [49, 45], [50, 94], [43], [43], [44], [83, 54], [49], [26, 47], [48, 26], [26], [52, 55], [82, 94], [], [72, 51], [51], [57, 83], [56, 63], [64, 63], [83, 62], [65, 68], [25, 58], [18, 61], [18], [66, 83], [67], [67], [78], [81, 79], [52], [69, 70], [78], [78], [73, 74], [75, 53], [76], [76], [80, 53], [77], [97], [25, 59], [81], [53], [83], [89, 87], [102], [46], [84], [84], [13], [92, 93], [90, 91], [13], [13], [46], [86, 95], [96, 99], [85, 86], [99], [9, 98], [9, 101], [60, 100], [60], [9], [102, 103], [7]], "fname": "human_readable", "n_num": 104}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 3, 0, 1, 6, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "lea     rdi, aPosixlyCorrect_0; \"POSIXLY_CORRECT\"", "call    _getenv", "test    rax, rax", "jz      short loc_7D79"], ["push~rbp", "mov~rbp,rsp", "lea~rdi,<TAG>", "call~FOO", "test~rax,rax", "jz~FOO"]], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 400h"], ["mov~eax,<STR>"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 1, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, 200h", "jmp     short loc_7D7E"], ["mov~eax,<STR>", "jmp~FOO"]]], "func_feature": [1, 1, 3, 0, 4, 4, 2, 11, 0.04167, 1, 0], "succs": [[1, 3], [2], [], [2]], "fname": "default_block_size", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 19, 1, 0, 2, 1, 0, 0, 0, 0.0, ["or      [rbp+opts], 4", "add     [rbp+spec], 1"], ["or~[rbp+0],0", "add~[rbp+0],0"]], [1, 0, 20, 0, 0, 4, 0, 1, 1, 5, 0.09148550724637682, ["mov     rax, [rbp+spec]", "movzx   eax, byte ptr [rax]", "cmp     al, 27h ; '''", "jnz     short loc_7E07"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 0, 16, 0, 1, 11, 0, 2, 3, 3, 0.1403985507246377, ["mov     rdx, [rbp+block_size]", "lea     rsi, [rbp+ptr]; ptr", "mov     rax, [rbp+spec]", "lea     r8, aEeggkkmmppttyy; \"eEgGkKmMpPtTyYzZ0\"", "mov     rcx, rdx; val", "mov     edx, 0; strtol_base", "mov     rdi, rax; s", "call    xstrtoumax", "mov     [rbp+e], eax", "cmp     [rbp+e], 0", "jz      short loc_7EE4"], ["mov~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rax,[rbp+0]", "lea~r8,<TAG>", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 18, 0, 1, 9, 0, 2, 2, 4, 0.14583333333333334, ["mov     rax, [rbp+spec]", "mov     ecx, 4; valsize", "lea     rdx, block_size_opts; vallist", "lea     rsi, block_size_args; arglist", "mov     rdi, rax; arg", "call    argmatch", "mov     [rbp+i], eax", "cmp     [rbp+i], 0", "js      short loc_7E59"], ["mov~rax,[rbp+0]", "mov~ecx,0", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 3, 0, 0, 4, 0, 0, 4, 2, 0.09329710144927536, ["mov     rax, [rbp+options]", "mov     edx, [rbp+opts]", "mov     [rax], edx", "mov     eax, 0"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~<TAG>,edx", "mov~eax,0"]], [0, 0, 4, 0, 1, 5, 0, 2, 3, 3, 0.017210144927536232, ["call    default_block_size", "mov     rdx, rax", "mov     rax, [rbp+block_size]", "mov     [rax], rdx", "jmp     loc_7EFD"], ["call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "jmp~FOO"]], [1, 0, 4, 0, 0, 9, 1, 1, 3, 3, 0.016304347826086956, ["mov     eax, [rbp+i]", "cdqe", "lea     rdx, ds:0[rax*4]", "lea     rax, block_size_opts", "mov     eax, [rdx+rax]", "or      [rbp+opts], eax", "mov     rax, [rbp+block_size]", "mov     qword ptr [rax], 1", "jmp     loc_7EFD"], ["mov~eax,[rbp+0]", "cdqe~", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "or~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~<TAG>,0", "jmp~FOO"]], [0, 0, 4, 0, 0, 1, 0, 1, 6, 3, 0.025966183574879224, ["jmp     short loc_7EFD"], ["jmp~FOO"]], [0, 0, 4, 0, 0, 1, 0, 0, 9, 3, 0.041062801932367145, ["nop"], ["nop"]], [1, 0, 3, 0, 0, 4, 0, 1, 4, 2, 0.015398550724637682, ["mov     rax, [rbp+options]", "mov     dword ptr [rax], 0", "mov     eax, [rbp+e]", "jmp     short loc_7F0B"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,[rbp+0]", "jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0.07971014492753624, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_7F1F"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 15, 0, 0, 3, 0, 1, 5, 7, 0.12681159420289856, ["mov     rax, [rbp+ptr]", "cmp     [rbp+spec], rax", "jnz     short loc_7EDF"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 15, 0, 0, 4, 0, 1, 4, 5, 0.15821256038647344, ["mov     rax, [rbp+spec]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_7E94"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 15, 0, 0, 4, 0, 1, 5, 4, 0.03683574879227053, ["mov     rax, [rbp+spec]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      short loc_7E94"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [3, 0, 24, 1, 0, 12, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+spec], rdi", "mov     [rbp+block_size], rsi", "mov     [rbp+options], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+opts], 0", "cmp     [rbp+spec], 0", "jnz     short loc_7DF3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 1, 9, 1, 0, 6, 1, 1, 6, 6, 0.10446859903381642, ["or      [rbp+opts], 80h", "mov     rax, [rbp+ptr]", "sub     rax, 1", "movzx   eax, byte ptr [rax]", "cmp     al, 42h ; 'B'", "jnz     short loc_7EBB"], ["or~[rbp+0],<STR>", "mov~rax,[rbp+0]", "sub~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 8, 0, 0, 1, 1, 0, 7, 6, 0.0, ["or      [rbp+opts], 100h"], ["or~[rbp+0],0"]], [1, 0, 23, 0, 1, 5, 0, 2, 1, 5, 0.006340579710144928, ["lea     rdi, aBlockSize; \"BLOCK_SIZE\"", "call    _getenv", "mov     [rbp+spec], rax", "cmp     [rbp+spec], 0", "jnz     short loc_7DF3"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 7, 1, 0, 5, 0, 1, 7, 5, 0.08997584541062802, ["mov     rax, [rbp+ptr]", "sub     rax, 1", "movzx   eax, byte ptr [rax]", "cmp     al, 42h ; 'B'", "jnz     short loc_7ED9"], ["mov~rax,[rbp+0]", "sub~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 0, 6, 1, 0, 5, 0, 1, 8, 4, 0.025966183574879224, ["mov     rax, [rbp+ptr]", "sub     rax, 2", "movzx   eax, byte ptr [rax]", "cmp     al, 69h ; 'i'", "jnz     short loc_7EFC"], ["mov~rax,[rbp+0]", "sub~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 22, 0, 1, 5, 0, 2, 2, 4, 0.01358695652173913, ["lea     rdi, aBlocksize; \"BLOCKSIZE\"", "call    _getenv", "mov     [rbp+spec], rax", "cmp     [rbp+spec], 0", "jnz     short loc_7DF3"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 1, 5, 0, 0, 2, 1, 1, 8, 4, 0.025966183574879224, ["or      [rbp+opts], 20h", "jmp     short loc_7EFC"], ["or~[rbp+0],<STR>", "jmp~FOO"]], [1, 0, 15, 1, 0, 1, 0, 0, 6, 6, 0.00966183574879227, ["add     [rbp+spec], 1"], ["add~[rbp+0],0"]]], "func_feature": [6, 7, 24, 1, 25, 36, 1, 109, 0.05058, 6, 6], "succs": [[3], [0, 3], [9, 13], [2, 6], [10], [4], [4], [4], [4], [10], [11, 15], [], [24, 17], [12, 14], [12, 7], [], [1, 19], [18, 20], [20], [1, 22], [21, 23], [8, 23], [1, 5], [8], [13]], "fname": "humblock", "n_num": 25}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 2, 1, 1, 17, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+spec], rdi", "mov     [rbp+opts], rsi", "mov     [rbp+block_size], rdx", "mov     rdx, [rbp+opts]; options", "mov     rcx, [rbp+block_size]", "mov     rax, [rbp+spec]", "mov     rsi, rcx; block_size", "mov     rdi, rax; spec", "call    humblock", "mov     [rbp+e], eax", "mov     rax, [rbp+block_size]", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_7F71"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 1, 0, 1, 5, 0, 1, 0, 1, 0.0, ["call    default_block_size", "mov     rdx, rax", "mov     rax, [rbp+block_size]", "mov     [rax], rdx", "mov     [rbp+e], 4"], ["call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~[rbp+0],0"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     eax, [rbp+e]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 1, 3, 0, 3, 3, 0, 25, 0.0, 0, 1], "succs": [[1, 2], [2], []], "fname": "human_options", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[3, 0, 0, 0, 2, 16, 0, 2, 0, 0, 0.0, ["mov     [rbp+authors.gp_offset], 30h ; '0'", "mov     [rbp+authors.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+authors.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+authors.reg_save_area], rax", "mov     rax, cs:stdout@@GLIBC_2_2_5", "lea     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_va", "mov     edi, 0; status", "call    _exit"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 4, 3, 0.07575757575757576, ["cmp     eax, 76h ; 'v'", "jz      short loc_8060"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.09090909090909091, ["nop"], ["nop"]], [2, 0, 10, 0, 0, 8, 1, 1, 1, 3, 0.15151515151515152, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     eax, cs:opterr@@GLIBC_2_2_5", "mov     [rbp+saved_opterr], eax", "mov     cs:opterr@@GLIBC_2_2_5, 0", "cmp     [rbp+argc], 2", "jnz     loc_80C5"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~<TAG>,0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 9, 0, 1, 10, 0, 2, 2, 3, 0.11363636363636365, ["mov     rsi, [rbp+argv]; argv", "mov     eax, [rbp+argc]", "mov     r8d, 0; longind", "lea     rcx, long_options; longopts", "lea     rdx, shortopts; \"+\"", "mov     edi, eax; argc", "call    _getopt_long", "mov     [rbp+c], eax", "cmp     [rbp+c], 0FFFFFFFFh", "jz      loc_80C5"], ["mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 0, 3, 0, 1, 3, 3, 0.12121212121212122, ["mov     eax, [rbp+c]", "cmp     eax, 68h ; 'h'", "jz      short loc_8050"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 12, 1, 0, 11, 1, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 110h", "mov     [rbp+argc], edi", "mov     [rbp+argv], rsi", "mov     [rbp+command_name], rdx", "mov     [rbp+package], rcx", "mov     [rbp+version], r8", "mov     [rbp+usage_func], r9", "test    al, al", "jz      short loc_7FCE"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 11, 0, 0, 8, 0, 0, 1, 4, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [1, 0, 2, 0, 0, 7, 1, 1, 3, 1, 0.13636363636363635, ["mov     eax, [rbp+saved_opterr]", "mov     cs:opterr@@GLIBC_2_2_5, eax", "mov     cs:optind@@GLIBC_2_2_5, 0", "nop", "mov     rax, [rbp+var_B8]", "xor     rax, fs:28h", "jz      short locret_80F4"], ["mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~<TAG>,0", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 1, 5, 2, 0.022727272727272728, ["jmp     short loc_80C6"], ["jmp~FOO"]], [1, 0, 3, 0, 1, 4, 0, 2, 4, 2, 0.022727272727272728, ["mov     rax, [rbp+usage_func]", "mov     edi, 0", "call    rax", "jmp     short loc_80C6"], ["mov~rax,[rbp+0]", "mov~edi,0", "call~rax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 3, 13, 10, 13, 16, 0, 74, 0.05653, 6, 1], "succs": [[], [0, 9], [8], [2, 4], [2, 5], [1, 10], [3, 7], [3], [11, 12], [8], [8], [], []], "fname": "parse_long_options", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 1, 4, 0, 2, 0, 0, 0.014285714285714287, ["mov     rax, [rbp+usage_func]", "mov     edi, 0", "call    rax", "jmp     short loc_827B"], ["mov~rax,[rbp+0]", "mov~edi,0", "call~rax", "jmp~FOO"]], [1, 0, 8, 0, 0, 3, 0, 1, 4, 3, 0.14285714285714288, ["mov     eax, [rbp+c]", "cmp     eax, 68h ; 'h'", "jz      short loc_81F2"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 6, 1, 1, 5, 1, 0.1142857142857143, ["mov     eax, [rbp+saved_opterr]", "mov     cs:opterr@@GLIBC_2_2_5, eax", "nop", "mov     rax, [rbp+var_B8]", "xor     rax, fs:28h", "jz      short locret_829F"], ["mov~eax,[rbp+0]", "mov~<TAG>,eax", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [3, 0, 0, 0, 2, 16, 0, 2, 6, -1, 0.0, ["mov     [rbp+authors.gp_offset], 30h ; '0'", "mov     [rbp+authors.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_8]", "mov     [rbp+authors.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+authors.reg_save_area], rax", "mov     rax, cs:stdout@@GLIBC_2_2_5", "lea     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_va", "mov     edi, 0; status", "call    _exit"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 5, 4, 0.1, ["cmp     eax, 76h ; 'v'", "jz      short loc_8202"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 14, 0, 0, 8, 0, 0, 1, 6, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [1, 0, 15, 1, 0, 11, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 110h", "mov     [rbp+argc], edi", "mov     [rbp+argv], rsi", "mov     [rbp+command_name], rdx", "mov     [rbp+package], rcx", "mov     [rbp+version], r8", "mov     edx, r9d", "test    al, al", "jz      short loc_814A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~edx,r9d", "test~al,al", "jz~FOO"]], [2, 0, 10, 0, 1, 11, 0, 2, 3, 3, 0.2380952380952381, ["mov     [rbp+optstring], rax", "mov     rdx, [rbp+optstring]; shortopts", "mov     rsi, [rbp+argv]; argv", "mov     eax, [rbp+argc]", "mov     r8d, 0; longind", "lea     rcx, long_options; longopts", "mov     edi, eax; argc", "call    _getopt_long", "mov     [rbp+c], eax", "cmp     [rbp+c], 0FFFFFFFFh", "jz      loc_827A"], ["mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8d,0", "lea~rcx,<TAG>", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 13, 0, 0, 12, 1, 1, 1, 5, 0.12380952380952381, ["mov     eax, edx", "mov     [rbp+scan_all], al", "mov     rax, [rbp+arg_0]", "mov     [rbp+usage_func], rax", "mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     eax, cs:opterr@@GLIBC_2_2_5", "mov     [rbp+saved_opterr], eax", "mov     cs:opterr@@GLIBC_2_2_5, 1", "cmp     [rbp+scan_all], 0", "jz      short loc_8197"], ["mov~eax,edx", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 0, 1, 0, 1, 6, 3, 0.05238095238095239, ["jmp     short loc_8267"], ["jmp~FOO"]], [0, 0, 3, 0, 1, 5, 0, 2, 7, 2, 0.028571428571428574, ["mov     edx, cs:exit_failure", "mov     rax, [rbp+usage_func]", "mov     edi, edx", "call    rax", "jmp     short loc_827B"], ["mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~edi,edx", "call~rax", "jmp~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 4, 2, 0.08571428571428572, ["nop"], ["nop"]], [0, 0, 11, 0, 0, 2, 0, 1, 2, 4, 0.07857142857142858, ["lea     rax, unk_1292F", "jmp     short loc_819E"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 11, 0, 0, 1, 0, 0, 2, 4, 0.07857142857142858, ["lea     rax, shortopts; \"+\""], ["lea~rax,<TAG>"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [6, 3, 16, 9, 16, 19, 1, 86, 0.06607, 7, 1], "succs": [[3], [0, 5], [], [2, 15], [], [10, 4], [9], [9, 6], [1, 12], [13, 14], [11], [3], [3], [8], [8], []], "fname": "parse_gnu_standard_options_only", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+argv0]", "mov     cs:program_name, rax", "mov     rax, [rbp+argv0]", "mov     cs:program_invocation_name@@GLIBC_2_2_5, rax", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "nop", "leave", "retn"]], [1, 0, 4, 1, 0, 7, 0, 1, 3, 0, 0.2222222222222222, ["mov     [rbp+base], rax", "mov     rdx, [rbp+base]", "mov     rax, [rbp+argv0]", "sub     rdx, rax", "mov     rax, rdx", "cmp     rax, 6", "jle     short loc_8376"], ["mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "cmp~rax,0", "jle~FOO"]], [2, 0, 3, 1, 1, 8, 1, 2, 4, 0, 0.1388888888888889, ["mov     rax, [rbp+base]", "sub     rax, 7", "mov     edx, 7; n", "lea     rsi, aLibs; \"/.libs/\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     short loc_8376"], ["mov~rax,[rbp+0]", "sub~rax,0", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 2, 0, 1, 9, 1, 2, 5, 0, 0.08333333333333333, ["mov     rax, [rbp+base]", "mov     [rbp+argv0], rax", "mov     rax, [rbp+base]", "mov     edx, 3; n", "lea     rsi, aLt; \"lt-\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     short loc_8376"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 1, 1, 0, 5, 0, 0, 6, 0, 0.0, ["mov     rax, [rbp+base]", "add     rax, 3", "mov     [rbp+argv0], rax", "mov     rax, [rbp+argv0]", "mov     cs:__bss_start, rax"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax"]], [1, 1, 9, 1, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+argv0], rdi", "cmp     [rbp+argv0], 0", "jnz     short loc_82D9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 7, 0, 1, 7, 0, 2, 1, 0, 0.09722222222222221, ["mov     rax, [rbp+argv0]", "mov     esi, 2Fh ; '/'; c", "mov     rdi, rax; s", "call    _strrchr", "mov     [rbp+slash], rax", "cmp     [rbp+slash], 0", "jz      short loc_82FF"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 0, 0, 2, 7, 0, 2, 1, 0, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rcx, rax; s", "mov     edx, 37h ; '7'; n", "mov     esi, 1; size", "lea     rdi, aANullArgv0WasP; \"A NULL argv[0] was passed through an ex\"...", "call    _fwrite", "call    _abort"], ["mov~rax,<TAG>", "mov~rcx,rax", "mov~edx,0", "mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "call~FOO"]], [1, 0, 5, 1, 0, 3, 0, 1, 2, 0, 0.06944444444444445, ["mov     rax, [rbp+slash]", "add     rax, 1", "jmp     short loc_8303"], ["mov~rax,[rbp+0]", "add~rax,0", "jmp~FOO"]], [0, 0, 5, 0, 0, 1, 0, 0, 2, 0, 0.06944444444444445, ["mov     rax, [rbp+argv0]"], ["mov~rax,[rbp+0]"]]], "func_feature": [5, 2, 11, 0, 10, 13, 1, 60, 0.06806, 7, 5], "succs": [[], [0, 2], [0, 3], [0, 4], [0], [6, 7], [8, 9], [], [1], [1]], "fname": "set_program_name", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_83B9"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 1, 3, 1, 1, 9, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+o], rdi", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "cmp     [rbp+o], 0", "jz      short loc_83B2"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 0, 2, 11, 0, 2, 2, 0, 0.0, ["mov     esi, 38h ; '8'; s", "mov     rdi, rax; p", "call    xmemdup", "mov     [rbp+p], rax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+p]", "leave", "retn"], ["mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]]], "func_feature": [3, 0, 5, 0, 4, 4, 0, 23, 0.04167, 1, 1], "succs": [[2], [0, 3], [], [2]], "fname": "clone_quoting_options", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_83F9"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "cmp     [rbp+o], 0", "jz      short loc_83F2"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     eax, [rax]", "pop     rbp", "retn"], ["mov~eax,<TAG>", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 11, 0.04167, 1, 0], "succs": [[2], [0, 3], [], [2]], "fname": "get_quoting_style", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0.0, ["mov     edx, [rbp+s]", "mov     [rax], edx", "nop", "pop     rbp", "retn"], ["mov~edx,[rbp+0]", "mov~<TAG>,edx", "nop", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_841C"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [1, 0, 3, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     [rbp+s], esi", "cmp     [rbp+o], 0", "jz      short loc_8415"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 14, 0.04167, 1, 0], "succs": [[], [0], [0], [1, 2]], "fname": "set_quoting_style", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     eax, esi", "mov     [rbp+i], edx", "mov     [rbp+c], al", "movzx   eax, [rbp+c]", "mov     [rbp+uc], al", "cmp     [rbp+o], 0", "jz      short loc_8448"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~eax,esi", "mov~[rbp+0],edx", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [5, 0, 0, 3, 0, 34, 5, 0, 0, 0, 0.0, ["lea     rdx, [rax+8]", "movzx   eax, [rbp+uc]", "shr     al, 5", "movzx   eax, al", "shl     rax, 2", "add     rax, rdx", "mov     [rbp+p], rax", "movzx   eax, [rbp+uc]", "and     eax, 1Fh", "mov     [rbp+shift], eax", "mov     rax, [rbp+p]", "mov     edx, [rax]", "mov     eax, [rbp+shift]", "mov     ecx, eax", "shr     edx, cl", "mov     eax, edx", "and     eax, 1", "mov     [rbp+r], eax", "mov     rax, [rbp+p]", "mov     edx, [rax]", "mov     eax, [rbp+i]", "and     eax, 1", "xor     eax, [rbp+r]", "mov     esi, eax", "mov     eax, [rbp+shift]", "mov     ecx, eax", "shl     esi, cl", "mov     eax, esi", "xor     edx, eax", "mov     rax, [rbp+p]", "mov     [rax], edx", "mov     eax, [rbp+r]", "pop     rbp", "retn"], ["lea~rdx,[rax+0]", "movzx~eax,[rbp+0]", "shr~al,0", "movzx~eax,al", "shl~rax,0", "add~rax,rdx", "mov~[rbp+0],rax", "movzx~eax,[rbp+0]", "and~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~eax,[rbp+0]", "mov~ecx,eax", "shr~edx,cl", "mov~eax,edx", "and~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~eax,[rbp+0]", "and~eax,0", "xor~eax,[rbp+0]", "mov~esi,eax", "mov~eax,[rbp+0]", "mov~ecx,eax", "shl~esi,cl", "mov~eax,esi", "xor~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~eax,[rbp+0]", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_844F"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [0, 5, 2, 0, 4, 4, 2, 47, 0.04167, 1, 3], "succs": [[1, 3], [2], [], [2]], "fname": "set_char_quoting", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+o]", "mov     eax, [rax+4]", "mov     [rbp+r], eax", "mov     rax, [rbp+o]", "mov     edx, [rbp+i]", "mov     [rax+4], edx", "mov     eax, [rbp+r]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~[rax+0],edx", "mov~eax,[rbp+0]", "pop~rbp", "retn"]], [1, 0, 2, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     [rbp+i], esi", "cmp     [rbp+o], 0", "jnz     short loc_84CB"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0.0, ["lea     rax, default_quoting_options", "mov     [rbp+o], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]]], "func_feature": [0, 0, 1, 0, 3, 3, 0, 17, 0.0, 1, 0], "succs": [[], [0, 2], [0]], "fname": "set_quoting_flags", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0.15000000000000002, ["cmp     [rbp+right_quote], 0", "jnz     short loc_8527"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 1, 2, 0.30000000000000004, ["mov     rax, [rbp+o]", "mov     dword ptr [rax], 0Ah", "cmp     [rbp+left_quote], 0", "jz      short loc_8522"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 9, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+o]", "mov     rdx, [rbp+left_quote]", "mov     [rax+28h], rdx", "mov     rax, [rbp+o]", "mov     rdx, [rbp+right_quote]", "mov     [rax+30h], rdx", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 4, 0, 0, 2, 0, 0, 1, 3, 0.0, ["lea     rax, default_quoting_options", "mov     [rbp+o], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [1, 1, 5, 1, 0, 8, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+o], rdi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "cmp     [rbp+o], 0", "jnz     short loc_850A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [1, 0, 4, 0, 6, 7, 1, 26, 0.075, 1, 1], "succs": [[2, 3], [0, 3], [], [], [1], [1, 4]], "fname": "set_custom_quoting", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 21, 1, 1, 1, 0, 0.16666666666666666, ["mov     eax, [rbp+style]", "mov     [rbp+o.style], eax", "mov     rcx, [rbp+var_48]", "mov     rax, qword ptr [rbp+o.style]", "mov     rdx, qword ptr [rbp+o.quote_these_too]", "mov     [rcx], rax", "mov     [rcx+8], rdx", "mov     rax, qword ptr [rbp+o.quote_these_too+8]", "mov     rdx, qword ptr [rbp+o.quote_these_too+10h]", "mov     [rcx+10h], rax", "mov     [rcx+18h], rdx", "mov     rax, qword ptr [rbp+o.quote_these_too+18h]", "mov     rdx, [rbp+o.left_quote]", "mov     [rcx+20h], rax", "mov     [rcx+28h], rdx", "mov     rax, [rbp+o.right_quote]", "mov     [rcx+30h], rax", "mov     rax, [rbp+var_48]", "mov     rdx, [rbp+var_8]", "xor     rdx, fs:28h", "jz      short locret_85FC"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rcx,[rbp+0]", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~<TAG>,rax", "mov~[rcx+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[rcx+0],rax", "mov~[rcx+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[rbp+0]", "mov~[rcx+0],rax", "mov~[rcx+0],rdx", "mov~rax,[rbp+0]", "mov~[rcx+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "xor~rdx,<TAG>", "jz~FOO"]], [8, 1, 4, 1, 0, 17, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+var_48], rdi", "mov     [rbp+style], esi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     qword ptr [rbp+o.style], 0", "mov     qword ptr [rbp+o.quote_these_too], 0", "mov     qword ptr [rbp+o.quote_these_too+8], 0", "mov     qword ptr [rbp+o.quote_these_too+10h], 0", "mov     qword ptr [rbp+o.quote_these_too+18h], 0", "mov     [rbp+o.left_quote], 0", "mov     [rbp+o.right_quote], 0", "cmp     [rbp+style], 0Ah", "jnz     short loc_85A3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 2, 4, 2, 5, 4, 3, 42, 0.03333, 1, 1], "succs": [[], [0, 4], [1, 3], [], []], "fname": "quoting_options_from_style", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.00641025641025641, ["lea     rax, unk_12A0E", "jmp     short locret_86B7"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 3, 0, 0, 4, 0, 1, 2, 2, 0.03205128205128205, ["mov     rax, [rbp+msgid]", "movzx   eax, byte ptr [rax]", "cmp     al, 60h ; '`'", "jnz     short loc_8664"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.00641025641025641, ["lea     rax, unk_12A12", "jmp     short locret_86B7"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 1, 13, 1, 1, 12, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+msgid], rdi", "mov     [rbp+s], esi", "mov     rax, [rbp+msgid]", "mov     rdi, rax; msgid", "call    _gettext", "mov     [rbp+translation], rax", "mov     rax, [rbp+translation]", "cmp     rax, [rbp+msgid]", "jz      short loc_8630"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.00641025641025641, ["mov     rax, [rbp+translation]", "jmp     locret_86B7"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 7, 0, 1, 6, 1, 2, 2, 3, 0.07692307692307693, ["mov     rax, [rbp+locale_code]", "lea     rsi, aGb18030; \"GB18030\"", "mov     rdi, rax; s1", "call    c_strcasecmp", "test    eax, eax", "jnz     short loc_86A1"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 11, 0, 2, 8, 1, 3, 1, 3, 0.0641025641025641, ["call    locale_charset", "mov     [rbp+locale_code], rax", "mov     rax, [rbp+locale_code]", "lea     rsi, aUtf8; \"UTF-8\"", "mov     rdi, rax; s1", "call    c_strcasecmp", "test    eax, eax", "jnz     short loc_866D"], ["call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 3, 0, 0, 4, 0, 1, 3, 2, 0.041666666666666664, ["mov     rax, [rbp+msgid]", "movzx   eax, byte ptr [rax]", "cmp     al, 60h ; '`'", "jnz     short loc_8698"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.004807692307692308, ["lea     rax, asc_12A27; \"'\""], ["lea~rax,<TAG>"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.041666666666666664, ["cmp     [rbp+s], 9", "jnz     short loc_86B0"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_12A25", "jmp     short locret_86B7"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_12A1E", "jmp     short locret_86B7"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_12A22", "jmp     short locret_86B7"], ["lea~rax,<TAG>", "jmp~FOO"]]], "func_feature": [4, 2, 16, 0, 14, 19, 2, 51, 0.02106, 8, 1], "succs": [[12], [0, 2], [12], [4, 6], [12], [9, 7], [1, 5], [11, 13], [12], [8, 10], [12], [12], [], [12]], "fname": "gettext_quote", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 281, 0, 0, 2, 0, 1, 0, 0, 0.015391459074733096, ["nop", "jmp     short store_c"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.018485002541942047, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_93FF"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 281, 2, 0, 6, 1, 1, 21, 12, 0.05510930350788002, ["add     [rbp+len], 1", "movzx   eax, [rbp+c]", "and     eax, 7", "add     eax, 30h ; '0'", "mov     [rbp+c], al", "jmp     short loc_9219"], ["add~[rbp+0],0", "movzx~eax,[rbp+0]", "and~eax,0", "add~eax,0", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 13, 0.0543467208947636, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_91D8"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 9, 1, 0, 21, 13, 0.0, ["movzx   eax, [rbp+c]", "shr     al, 3", "and     eax, 7", "lea     ecx, [rax+30h]", "mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     edx, ecx", "mov     [rax], dl"], ["movzx~eax,[rbp+0]", "shr~al,0", "and~eax,0", "lea~ecx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,ecx", "mov~<TAG>,dl"]], [0, 0, 7, 0, 0, 2, 0, 1, 16, 4, 0.0006227758007117438, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 5, 0.006875953228266395, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_9601"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 0, 0, 3, 0, 1, 3, 11, 0.020939247585155057, ["mov     [rbp+backslash_escapes], 1; jumptable 00000000000087A1 case 7", "mov     [rbp+elide_outer_quotes], 0", "jmp     loc_8928"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 2, 12, 0.1197508896797153, ["mov     eax, [rbp+quoting_style]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_12A2C", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_12A2C", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 281, 0, 0, 1, 0, 0, 15, 14, 0.3029422979156075, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 7, 0.33018132519911875, ["movzx   eax, [rbp+is_right_quote]", "xor     eax, 1", "test    al, al", "jnz     loc_9405"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 19, 4, 0.0006227758007117438, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 18, 5, 0.03173614641586172, ["cmp     [rbp+elide_outer_quotes], 0; jumptable 0000000000008C3C cases 33,39-41,45,47,60-62", "jnz     loc_9607"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 3, 0, 0, 14, 6, 0.006494661921708185, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_95C5"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 10, 0, 0, 4, 1, 1, 13, 4, 0.010027961362480934, ["mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_95A1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 13, 0.5487925775292323, ["cmp     [rbp+pending_shell_escape_end], 0", "jz      short loc_9461"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 17, 14, 0.1396733604473818, ["nop", "jmp     store_c"], ["nop", "jmp~FOO"]], [1, 0, 281, 1, 0, 2, 0, 1, 17, 14, 0.06698017285205897, ["add     [rbp+len], 1", "jmp     short store_c"], ["add~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 15, 14, 0.009189120488052873, ["nop", "jmp     short store_c"], ["nop", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 12, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_925A"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9210"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 13, 4, 0.0002846975088967971, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.03444839857651246, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_960D"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 3, 13, 0.024885612608032535, ["cmp     [rbp+quoting_style], 0Ah; jumptable 00000000000087A1 cases 8-10", "jz      short loc_8847"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 15, 0.031354855109303505, ["cmp     [rbp+buffersize], 0", "jz      short loc_8E30"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 281, 0, 0, 4, 0, 1, 11, 6, 0.04040925266903915, ["mov     [rbp+encountered_single_quote], 1; jumptable 0000000000008A1D case 39", "mov     [rbp+c_and_shell_quote_compat], 1", "cmp     [rbp+quoting_style], 2", "jnz     loc_92DF"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 4, 0, 12, 0, 1, 19, 6, 0.010015251652262329, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+j]", "add     rdx, rax", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 5Bh ; '['; switch 34 cases", "cmp     eax, 21h ; '!'", "ja      short loc_9039; jumptable 0000000000009037 default case"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 7, 0.026715810879511945, ["mov     rax, [rbp+j]", "cmp     rax, [rbp+bytes]", "jb      short loc_8FEC"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [2, 0, 281, 2, 0, 9, 0, 1, 16, 7, 0.04378495170310117, ["mov     rax, [rbp+i]", "lea     rdx, [rax+2]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 21h ; '!'; switch 30 cases", "cmp     eax, 1Dh", "ja      loc_8CF3; jumptable 0000000000008C3C default case"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 15, 8, 0.04668276563294357, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 3Fh ; '?'", "jnz     loc_8CFC"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 15, 4, 0.006183274021352313, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 5, 0.07177808845958311, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_9616"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 15, 0.0031647178444331467, ["cmp     [rbp+orig_buffersize], 0", "jnz     short loc_8E30"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 0, 1, 0, 0, 11, 4, 0.00376842907981698, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 5, 0.006856888662938485, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_9619"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 1, 0, 4, 0, 0, 13, 8, 0.13445602440264362, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rax, rdx", "mov     [rbp+ilim], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [1, 0, 281, 0, 0, 4, 0, 1, 12, 9, 0.18070665988815454, ["movzx   eax, [rbp+printable]", "mov     [rbp+c_and_shell_quote_compat], al", "cmp     [rbp+m], 1", "ja      short loc_90A4"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 9, 0.0005147432638535841, ["movzx   eax, [rbp+printable]", "xor     eax, 1", "test    al, al", "jz      loc_92E0"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 10, 7, 0.36952211489578035, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_12A58", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_12A58", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 281, 1, 0, 8, 0, 1, 9, 8, 0.5461616675139807, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "movzx   eax, [rbp+c]", "cmp     eax, 7Eh ; '~'; switch 127 cases", "ja      loc_8EAB; jumptable 0000000000008A1D default case"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 13, 4, 0.0002846975088967971, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.0671631926792069, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_9604"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 12, 3, 0.017329689883070664, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_9633"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.00028469750889679714, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.0002846975088967971, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.0008185053380782919, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 14, 4, 0.000800711743772242, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 21, 4, 0.0007117437722419928, ["nop; jumptable 0000000000009037 cases 91,92,94,96,124", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 17, 4, 0.0049377224199288255, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 15, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9435"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 15, 13, 0.015696492119979664, ["movzx   eax, [rbp+escaping]", "xor     eax, 1", "test    al, al", "jz      short loc_9461"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 6, 0.09025673614641584, ["cmp     [rbp+backslash_escapes], 0; jumptable 0000000000008A1D case 0", "jz      loc_8B7A"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 3, 0, 0, 15, 15, 0.0, ["mov     rax, [rbp+buffersize]", "mov     [rbp+orig_buffersize], rax", "mov     [rbp+buffersize], 0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 5, 0.0038891713268937467, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_960A"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 13, 3, 0.003355363497712252, ["cmp     [rbp+backslash_escapes], 0", "jz      short loc_9633"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 14, 3, 0.0, ["mov     [rbp+quoting_style], 4"], ["mov~[rbp+0],0"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 8, 0.004971614980511778, ["cmp     [rbp+quote_these_too], 0", "jz      short loc_933B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 9, 0.0031456532791052363, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_92FF"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 13, 8, 0.3245721064226402, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jnz     short loc_933B"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 17, 10, 0.03453228266395526, ["cmp     [rbp+pending_shell_escape_end], 0", "jz      short loc_9286"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 11, 0.1770017793594306, ["mov     rax, [rbp+i]", "add     rax, 1", "cmp     [rbp+ilim], rax", "jbe     loc_92CA"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 5, 0.1183019827147941, ["cmp     [rbp+buffersize], 0", "jnz     short loc_958D"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 3, 0.1212061514997458, ["cmp     [rbp+all_c_and_shell_quote_compat], 0", "jz      short loc_9564"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 20, 5, 0.0038002033553634976, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_12CCC", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_12CCC", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 281, 1, 0, 2, 0, 0, 20, 8, 0.006875953228266395, ["nop; jumptable 0000000000009037 default case", "add     [rbp+j], 1"], ["nop", "add~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 0, 14, 14, 0.032498729028978136, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8E4E"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 17, 6, 0.03468479918657855, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_12C54", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_12C54", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [2, 0, 281, 0, 0, 3, 0, 1, 13, 14, 0.06406964921199797, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_8AB8"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 2, 10, 0, 2, 4, 13, 0.0, ["mov     eax, [rbp+quoting_style]", "mov     esi, eax; s", "lea     rdi, asc_12A29; \"`\"", "call    gettext_quote", "mov     [rbp+left_quote], rax", "mov     eax, [rbp+quoting_style]", "mov     esi, eax; s", "lea     rdi, asc_12A27; \"'\"", "call    gettext_quote", "mov     [rbp+right_quote], rax"], ["mov~eax,[rbp+0]", "mov~esi,eax", "lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~esi,eax", "lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 281, 0, 0, 4, 2, 1, 12, 9, 0.32878749364514487, ["movzx   eax, [rbp+backslash_escapes]", "xor     eax, 1", "test    al, al", "jnz     short loc_92F4"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 14, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9458"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 17, 8, 0.015899847483477374, ["mov     [rbp+j], 1", "jmp     short loc_903F"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 14, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_8AB8"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 4, 0.12095195729537365, ["cmp     [rbp+encountered_single_quote], 0", "jz      short loc_958D"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 10, 5, 0.12071682765632943, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      loc_958D"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 4, 12, 0.025648195221148955, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_8898"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 1, 5, 1, 2, 16, 12, 0.033032536858159635, ["mov     eax, [rbp+w]", "mov     edi, eax; wc", "call    _iswprint", "test    eax, eax", "jnz     short loc_905B"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 10, 0.034265378749364514, ["cmp     [rbp+elide_outer_quotes], 0", "jz      short loc_9049"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 9, 0.018912048805287237, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_9049"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 15, 17, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8A69"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 17, 12, 0.0, ["mov     [rbp+printable], 0"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 1, 5, 13, 0.012506354855109304, ["mov     rax, [rbp+left_quote]", "mov     [rbp+quote_string], rax", "jmp     short loc_888D"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 13, 0.03326131164209456, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8E71"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 10, 2, 0, 2, 0, 0, 15, 5, 0.00019064565327910524, ["add     [rbp+len], 1", "add     [rbp+quote_string], 1"], ["add~[rbp+0],0", "add~[rbp+0],0"]], [0, 0, 10, 1, 0, 6, 0, 0, 15, 6, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~<TAG>,al"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 15, 0.05282155566853076, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9179"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 7, 14, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8883"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 4, 1, 1, 6, 12, 0.023525673614641585, ["mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_885F"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 15, 12, 0.5514616166751398, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9482"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 18, 13, 0.014107778342653787, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 2, 0, 10, 0, 0, 19, 17, 0.02830452465683782, ["mov     rax, [rbp+i]", "lea     rdx, [rax+2]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "add     [rbp+i], 2", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8C83"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 1, 1, 7, 1, 2, 17, 11, 0.03379511947127605, ["mov     rax, [rbp+bytes]", "add     [rbp+m], rax", "lea     rax, [rbp+mbstate]", "mov     rdi, rax; ps", "call    _mbsinit", "test    eax, eax", "jz      loc_8F25"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 5, 0.15413701067615657, ["cmp     [rbp+quoting_style], 2", "jnz     loc_958D"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 8, 6, 0.1599517031011693, ["cmp     [rbp+len], 0", "jnz     short loc_94ED"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 6, 0.009938993390950685, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_94ED"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 10, 0.03216827656329436, ["jmp     short loc_907D"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 16, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8A8C"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.00979918657854601, ["nop", "jmp     short loc_907D"], ["nop", "jmp~FOO"]], [1, 0, 281, 3, 1, 20, 0, 2, 12, 11, 0.07458057956278596, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+argsize]", "sub     rax, rdx", "mov     rdi, rax", "mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+arg]", "lea     rsi, [rdx+rax]; s", "lea     rdx, [rbp+mbstate]", "lea     rax, [rbp+w]", "mov     rcx, rdx; ps", "mov     rdx, rdi; n", "mov     rdi, rax; pwc", "call    rpl_mbrtowc", "mov     [rbp+bytes], rax", "cmp     [rbp+bytes], 0", "jz      loc_9079"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,rdx", "mov~rdi,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "lea~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,rdi", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 17, 10, 0.020754956786985256, ["nop"], ["nop"]], [0, 0, 281, 1, 0, 5, 0, 0, 16, 11, 0.022801220132180985, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rax, rdx", "cmp     [rbp+argsize], rax", "jbe     loc_907C"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 11, 0.0035205897305541434, ["jmp     loc_907C"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 11, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_927D"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 17, 12, 0.007079308591764108, ["add     [rbp+len], 1", "mov     [rbp+is_right_quote], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 3Fh ; '?'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 1, 0, 6, 0, 0, 8, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~<TAG>,al"]], [2, 0, 281, 1, 0, 2, 0, 0, 21, 10, 0.014107778342653787, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 11, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 4, 2, 1, 16, 16, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_93DA"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 281, 0, 0, 3, 0, 1, 15, 16, 0.06278596847991866, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_93DA"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 2, 0, 2, 0, 0, 8, 13, 0.007079308591764108, ["add     [rbp+len], 1", "add     [rbp+quote_string], 1"], ["add~[rbp+0],0", "add~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 16, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.04452846975088968, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_92E0"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 5, 2, 1, 16, 11, 0.5522241992882562, ["add     [rbp+len], 1", "movzx   eax, [rbp+c_and_shell_quote_compat]", "xor     eax, 1", "test    al, al", "jz      short loc_9496"], ["add~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 1, 0, 5, 0, 0, 16, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "movzx   eax, [rbp+c]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "movzx~eax,[rbp+0]", "mov~<TAG>,al"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 12, 0.034023894255210976, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8E94"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 17, 11, 0.0, ["mov     [rbp+all_c_and_shell_quote_compat], 0"], ["mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 16, 0.029067107269954245, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8CA6"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 14, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 13, 1, 0.0070665988815455, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_9699"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [3, 0, 281, 1, 0, 15, 3, 1, 15, 7, 0.00023301135400779526, ["movzx   eax, [rbp+c]", "shr     al, 5", "movzx   eax, al", "lea     rdx, ds:0[rax*4]", "mov     rax, [rbp+quote_these_too]", "add     rax, rdx", "mov     edx, [rax]", "movzx   eax, [rbp+c]", "and     eax, 1Fh", "mov     ecx, eax", "shr     edx, cl", "mov     eax, edx", "and     eax, 1", "test    eax, eax", "jnz     short loc_934A"], ["movzx~eax,[rbp+0]", "shr~al,0", "movzx~eax,al", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,<TAG>", "movzx~eax,[rbp+0]", "and~eax,0", "mov~ecx,eax", "shr~edx,cl", "mov~eax,edx", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8AAF"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 3, 0, 1, 17, 11, 0.0347864768683274, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0", "jmp     loc_92DF"], ["add~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 281, 3, 0, 8, 0, 1, 19, 8, 0.03796390442297915, ["add     [rbp+len], 1", "add     [rbp+i], 1", "mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "jmp     loc_90B3"], ["add~[rbp+0],0", "add~[rbp+0],0", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "jmp~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 9, 0.037201321809862735, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_92A7"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 1, 0, 5, 0, 0, 19, 9, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "movzx   eax, [rbp+c]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "movzx~eax,[rbp+0]", "mov~<TAG>,al"]], [1, 0, 281, 0, 0, 4, 0, 1, 15, 14, 0.11860701576004067, ["mov     rax, [rbp+orig_buffersize]", "mov     [rbp+buffersize], rax", "mov     [rbp+len], 0", "jmp     process_input"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 5, 0.11839095068632435, ["cmp     [rbp+orig_buffersize], 0", "jz      short loc_958D"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 16, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 4, 2, 1, 15, 6, 0.05999618708693442, ["movzx   eax, [rbp+printable]", "xor     eax, 1", "test    al, al", "jz      loc_91EC"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 7, 0.17635993899339095, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_91EC"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 10, 0.012874936451448906, ["mov     [rbp+c_and_shell_quote_compat], 1; jumptable 0000000000008A1D cases 37,43-58,65-90,93,95,97-122", "jmp     loc_92E0"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 18, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 18, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_93AE"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 11, 0.17469496695475342, ["cmp     [rbp+unibyte_locale], 0; jumptable 0000000000008A1D default case", "jz      short loc_8EE3"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 18, 14, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [0, 0, 281, 0, 1, 4, 0, 1, 12, 12, 0.0, ["mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+argsize], rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [5, 0, 281, 0, 1, 9, 0, 2, 11, 12, 0.07180986273512964, ["lea     rax, [rbp+mbstate]", "mov     edx, 8; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     [rbp+m], 0", "mov     [rbp+printable], 1", "cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_8F25"], ["lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 15, 0.029829689883070665, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8CC9"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 1, 8, 0, 2, 5, 11, 0.02793594306049822, ["mov     [rbp+backslash_escapes], 1", "mov     rax, [rbp+right_quote]", "mov     [rbp+quote_string], rax", "mov     rax, [rbp+quote_string]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+quote_string_len], rax", "jmp     short loc_8928"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 3, 15, 0.0, ["mov     [rbp+backslash_escapes], 1; jumptable 00000000000087A1 case 3"], ["mov~[rbp+0],0"]], [0, 0, 281, 1, 0, 7, 1, 1, 6, 8, 0.35229410269445854, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "setnz   al", "jmp     short loc_94CB"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "setnz~al", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 5, 9, 0.7073843416370107, ["cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_94BD"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 3, 14, 0.003546009150991357, ["mov     [rbp+elide_outer_quotes], 1; jumptable 00000000000087A1 case 1"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 0, 14, 13, 0.06750127097102186, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8AD6"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 13, 8, 0.021822572445348246, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 6, 0.025050838840874428, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_8D76"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 6, 8, 0.35229410269445854, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+argsize]", "setnz   al"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "setnz~al"]], [1, 0, 281, 0, 0, 4, 2, 1, 3, 13, 0.01021860701576004, ["movzx   eax, [rbp+elide_outer_quotes]; jumptable 00000000000087A1 case 4", "xor     eax, 1", "test    al, al", "jz      short loc_88D0; jumptable 00000000000087A1 case 2"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 4, 13, 0.0, ["mov     [rbp+backslash_escapes], 1"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 2, 1, 1, 7, 7, 0.7085282155566853, ["test    al, al", "jnz     loc_8935"], ["test~al,al", "jnz~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 14, 10, 0.5733985765124555, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 281, 0, 0, 1, 0, 1, 13, 11, 0.016853075749872902, ["jmp     loc_9496"], ["jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 5, 0.05713650228774784, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_9613"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.07590238942552109, ["nop", "jmp     short loc_92E0"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 11, 0.07169547534316217, ["mov     [rbp+c], 30h ; '0'", "jmp     loc_92D0"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 12, 11, 0.020297407219115403, ["mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      loc_92D0"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.020411794611082865, ["nop", "jmp     short loc_92E0"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 7, 0.06609049313675648, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_92D3"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 17, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_93D1"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 14, 10, 0.013408744280630401, ["nop", "jmp     short loc_92E0"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 0, 2, 1, 1, 13, 9, 0.013739196746314183, ["test    al, al", "jnz     loc_92D6"], ["test~al,al", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 14, 0.030592272496187085, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8CEC"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 12, 10, 0.003393492628368073, ["nop", "jmp     short loc_92E0"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.0037747839349262834, ["cmp     [rbp+i], 0; jumptable 0000000000008A1D cases 35,126", "jnz     loc_92D9"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 1, 281, 2, 1, 13, 2, 2, 11, 10, 0.10008896797153025, ["mov     [rbp+m], 1", "call    ___ctype_b_loc", "mov     rax, [rax]", "movzx   edx, [rbp+c]", "add     rdx, rdx", "add     rax, rdx", "movzx   eax, word ptr [rax]", "movzx   eax, ax", "and     eax, 4000h", "test    eax, eax", "setnz   al", "mov     [rbp+printable], al", "jmp     loc_907D"], ["mov~[rbp+0],0", "call~FOO", "mov~rax,<TAG>", "movzx~edx,[rbp+0]", "add~rdx,rdx", "add~rax,rdx", "movzx~eax,<TAG>", "movzx~eax,ax", "and~eax,<STR>", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 12, 0.11680859176410777, ["cmp     [rbp+is_right_quote], 0", "jz      short loc_9219"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 0, 0, 3, 0, 1, 17, 16, 0.04938993390950686, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_915B"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 1, 0, 3, 0, 1, 15, 12, 0.06826385358413828, ["add     [rbp+len], 1", "cmp     [rbp+quoting_style], 2", "jz      loc_8B71"], ["add~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 0, 0, 5, 2, 1, 3, 12, 0.02648703609557702, ["mov     [rbp+quoting_style], 2; jumptable 00000000000087A1 case 2", "movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_8908"], ["mov~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 23, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 3Fh ; '?'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 4, 2, 1, 18, 16, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_915B"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 4, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8903"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 2, 0, 1, 23, 13, 0.031354855109303505, ["add     [rbp+len], 1", "jmp     short loc_8CF4"], ["add~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 17, 13, 0.009633960345704117, ["nop; jumptable 0000000000008C3C default case"], ["nop"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 12, 0.0449288256227758, ["jmp     short loc_8CFC"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 12, 0.02188612099644128, ["mov     rax, [rbp+i]", "add     rax, 1", "cmp     [rbp+argsize], rax", "jbe     short loc_8B71"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 19, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_910C"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 14, 11, 0.058070665988815454, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 4, 2, 1, 13, 10, 0.05540162684290798, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      loc_8CFC"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 14, 9, 0.04956786985256736, ["mov     rax, [rbp+i]", "add     rax, 2", "cmp     [rbp+argsize], rax", "jbe     loc_8CFC"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 14, 10, 0.06814946619217081, ["jmp     loc_92E0"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 13, 11, 0.0061387900355871884, ["jmp     loc_8CFD"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 5, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 1, 0, 0, 5, 12, 0.007079308591764108, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [2, 0, 281, 1, 0, 2, 0, 0, 20, 16, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 61h ; 'a'; jumptable 0000000000008A1D case 7", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 19, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 5, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 4, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_87DA"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 62h ; 'b'; jumptable 0000000000008A1D case 8", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 17, 12, 0.018797661413319774, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_8B71"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 66h ; 'f'; jumptable 0000000000008A1D case 12", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 6Eh ; 'n'; jumptable 0000000000008A1D case 10", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 0, 1, 4, 11, 0.02801220132180986, ["lea     rax, asc_12A27; \"'\"", "mov     [rbp+quote_string], rax", "mov     [rbp+quote_string_len], 1", "jmp     short loc_8928"], ["lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 18, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_912F"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 72h ; 'r'; jumptable 0000000000008A1D case 13", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 3, 11, 0.020939247585155057, ["mov     [rbp+elide_outer_quotes], 0; jumptable 00000000000087A1 case 0", "jmp     short loc_8928"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    _abort; jumptable 00000000000087A1 default case"], ["call~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 1, 13, 0.12255973563802745, ["cmp     [rbp+quoting_style], 0Ah; switch 11 cases", "ja      loc_8923; jumptable 00000000000087A1 default case"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 74h ; 't'; jumptable 0000000000008A1D case 9", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 8, 0.009278088459583122, ["cmp     [rbp+quote_string_len], 0", "jnz     loc_9402"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 18, 12, 0.015696492119979664, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      short loc_8B71"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 76h ; 'v'; jumptable 0000000000008A1D case 11", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 18, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 2, 0, 1, 12, 10, 0.010294865277071682, ["nop", "jmp     short loc_92E0"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 6, 0.013540925266903914, ["cmp     [rbp+quoting_style], 2; jumptable 0000000000008A1D cases 33,34,36,38,40-42,59-62,91,94,96,124", "jnz     loc_92DC"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.003906964921199796, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_92DC"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 4, 10, 0.13004575495678697, ["mov     [rbp+i], 0", "jmp     loc_949B"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 281, 0, 0, 5, 0, 1, 4, 11, 0.017602948652770716, ["mov     [rbp+backslash_escapes], 1", "lea     rax, unk_12A25", "mov     [rbp+quote_string], rax", "mov     [rbp+quote_string_len], 1", "jmp     loc_8928"], ["mov~[rbp+0],0", "lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 19, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 17, 19, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_938B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 14, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8B49"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 10, 0.00327910523640061, ["mov     [rbp+printable], 0", "jmp     loc_907D"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 0, 1, 11, 6, 0.03424504321301475, ["movzx   eax, [rbp+c]; jumptable 0000000000008A1D case 92", "mov     [rbp+esc], al", "cmp     [rbp+quoting_style], 2", "jnz     short loc_8D4B"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 12, 10, 0.04150991357397051, ["nop"], ["nop"]], [1, 0, 4, 1, 0, 4, 0, 0, 12, 3, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 0"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 5, 0, 0, 3, 0, 0, 11, 3, 0.009456024402643618, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_95F8"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 17, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_9152"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [4, 0, 281, 0, 0, 5, 0, 1, 8, 9, 0.5457803762074225, ["mov     [rbp+is_right_quote], 0", "mov     [rbp+escaping], 0", "mov     [rbp+c_and_shell_quote_compat], 0", "cmp     [rbp+backslash_escapes], 0", "jz      loc_89DB"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 1, 0, 0, 15, 6, 0.024955516014234874, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 8, 0.012963904422979155, ["cmp     [rbp+backslash_escapes], 0", "jz      short loc_8D62"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 9, 0.031113370615149974, ["cmp     [rbp+quoting_style], 2", "jz      loc_89DB"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 8, 0.009367056431113371, ["cmp     [rbp+elide_outer_quotes], 0", "jz      short loc_8D62"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 22, 16, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 13, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_8B6C"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 9, 0.02806304016268429, ["cmp     [rbp+quote_string_len], 0", "jz      short loc_89DB"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 1, 3, 2, 1, 17, 1, 1, 13, 2, 0.007416115912557193, ["mov     eax, [rbp+flags]", "and     eax, 0FFFFFFFDh", "mov     r8d, eax", "mov     edi, [rbp+quoting_style]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    [rbp+right_quote]; right_quote", "push    [rbp+left_quote]; left_quote", "push    0; quote_these_too", "mov     r9d, r8d; flags", "mov     r8d, edi; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h"], ["mov~eax,[rbp+0]", "and~eax,0", "mov~r8d,eax", "mov~edi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~0", "mov~r9d,r8d", "mov~r8d,edi", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.006596339603457041, ["nop", "jmp     loc_92E0"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.009689883070665989, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_8CF6"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 13, 7, 0.001741230299949161, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 4, 2, 1, 18, 10, 0.015696492119979664, ["movzx   eax, [rbp+escaping]", "xor     eax, 1", "test    al, al", "jz      short loc_9286"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [11, 0, 281, 1, 1, 36, 3, 1, 0, 14, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0B8h", "mov     [rbp+buffer], rdi", "mov     [rbp+buffersize], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     [rbp+quoting_style], r8d", "mov     [rbp+flags], r9d", "mov     rax, [rbp+arg_0]", "mov     [rbp+quote_these_too], rax", "mov     rax, [rbp+arg_8]", "mov     [rbp+left_quote], rax", "mov     rax, [rbp+arg_10]", "mov     [rbp+right_quote], rax", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+len], 0", "mov     [rbp+orig_buffersize], 0", "mov     [rbp+quote_string], 0", "mov     [rbp+quote_string_len], 0", "mov     [rbp+backslash_escapes], 0", "call    ___ctype_get_mb_cur_max", "cmp     rax, 1", "setz    al", "mov     [rbp+unibyte_locale], al", "mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "setnz   al", "mov     [rbp+elide_outer_quotes], al", "mov     [rbp+pending_shell_escape_end], 0", "mov     [rbp+encountered_single_quote], 0", "mov     [rbp+all_c_and_shell_quote_compat], 1"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8d", "mov~[rbp+0],r9d", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "call~FOO", "cmp~rax,0", "setz~al", "mov~[rbp+0],al", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 1, 0, 0, 21, 12, 0.014107778342653787, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [2, 1, 3, 2, 1, 15, 0, 2, 13, 2, 9.532282663955262e-05, ["mov     edi, [rbp+flags]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+orig_buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    [rbp+right_quote]; right_quote", "push    [rbp+left_quote]; left_quote", "push    [rbp+quote_these_too]; quote_these_too", "mov     r9d, edi; flags", "mov     r8d, 5; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "jmp     loc_9685"], ["mov~edi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "mov~r9d,edi", "mov~r8d,0", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 12, 2, 0.0029740721911540417, ["mov     rax, [rbp+len]", "jmp     loc_9685"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 281, 0, 0, 5, 0, 1, 11, 9, 0.024999999999999998, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+quote_string_len]", "lea     rbx, [rdx+rax]", "cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_899B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rbx,<TAG>", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 0, 12, 9, 0.0031647178444331467, ["cmp     [rbp+quote_string_len], 1", "jbe     short loc_899B"], ["cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 11, 0.06198525673614641, ["cmp     [rbp+bytes], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_8F88"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 18, 12, 1.2709710218607015e-05, ["add     [rbp+m], 1"], ["add~[rbp+0],0"]], [0, 0, 281, 2, 0, 8, 1, 1, 17, 12, 0.0063294356888662934, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_8F95"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 1, 13, 6, 0.04288256227758007, ["movzx   eax, [rbp+esc]", "mov     [rbp+c], al", "jmp     store_escape"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 14, 0.053584138281647174, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_91A7"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 15, 0.06621759023894255, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_93F8"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 11, 0.05591001525165226, ["cmp     [rbp+bytes], 0FFFFFFFFFFFFFFFEh", "jnz     short loc_8FD3"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 12, 0, 0, 2, 0, 1, 10, 4, 0.0313421453990849, ["cmp     [rbp+quote_string], 0", "jz      short loc_95DA"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 12, 0.018848500254194205, ["mov     [rbp+printable], 0", "jmp     short loc_8F9A"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 11, 0.012595322826639553, ["cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh; jumptable 0000000000008A1D cases 123,125", "jnz     short loc_8DAC"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 1, 6, 0, 2, 13, 8, 0.001766649720386375, ["mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+argsize], rax", "mov     rax, [rbp+argsize]", "jmp     short loc_89A2"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 281, 0, 0, 3, 0, 1, 11, 6, 0.07682257244534822, ["mov     eax, [rbp+quoting_style]; jumptable 0000000000008A1D case 63", "cmp     eax, 2", "jz      short loc_8BA5"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 12, 8, 0.020818505338078292, ["mov     rax, [rbp+argsize]"], ["mov~rax,[rbp+0]"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 11, 0, 0, 4, 2, 1, 11, 4, 0.01601423487544484, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_95DA"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 11, 0.06433655312658872, ["cmp     eax, 5", "jz      short loc_8BB4"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 10, 0, 0, 1, 0, 1, 12, 5, 0.012862226741230299, ["jmp     short loc_95CF"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 0, 13, 7, 0.02652516522623284, ["cmp     rax, rbx", "jb      short loc_89DB"], ["cmp~rax,rbx", "jb~FOO"]], [1, 0, 281, 1, 0, 6, 1, 1, 12, 10, 0.004899593289273005, ["mov     rax, [rbp+arg]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "test    al, al", "setnz   al", "jmp     short loc_8DB7"], ["mov~rax,[rbp+0]", "add~rax,0", "movzx~eax,<TAG>", "test~al,al", "setnz~al", "jmp~FOO"]], [2, 0, 281, 0, 0, 2, 0, 0, 3, 13, 0.0, ["mov     [rbp+quoting_style], 5; jumptable 00000000000087A1 case 6", "mov     [rbp+elide_outer_quotes], 1"], ["mov~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 0, 0, 2, 0, 0, 12, 10, 0.004899593289273005, ["cmp     [rbp+argsize], 1", "setnz   al"], ["cmp~[rbp+0],0", "setnz~al"]], [0, 0, 0, 0, 0, 3, 0, 0, 14, 0, 0.0, ["mov     rbx, [rbp+var_8]", "leave", "retn"], ["mov~rbx,[rbp+0]", "leave", "retn"]], [1, 0, 281, 1, 0, 8, 0, 0, 20, 14, 0.0, ["movzx   eax, [rbp+c]", "shr     al, 6", "lea     ecx, [rax+30h]", "mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     edx, ecx", "mov     [rax], dl"], ["movzx~eax,[rbp+0]", "shr~al,0", "lea~ecx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,ecx", "mov~<TAG>,dl"]], [1, 0, 281, 0, 0, 4, 2, 1, 3, 12, 0.016077783426537873, ["movzx   eax, [rbp+elide_outer_quotes]; jumptable 00000000000087A1 case 5", "xor     eax, 1", "test    al, al", "jz      short loc_87DF"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 5, 12, 0.007079308591764108, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [1, 0, 281, 0, 0, 1, 0, 0, 11, 7, 0.0006990340620233858, ["mov     [rbp+c_and_shell_quote_compat], 1; jumptable 0000000000008A1D case 32"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 1, 10, 1, 2, 14, 6, 0.00992628368073208, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+quote_string_len]; n", "mov     rax, [rbp+quote_string]", "mov     rsi, rax; s2", "mov     rdi, rcx; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_89DB"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 16, 9, 0.0034443314692425013, ["mov     [rbp+is_right_quote], 1"], ["mov~[rbp+0],0"]]], "func_feature": [16, 60, 177, 2, 282, 444, 7, 994, 0.05056, 8, 114], "succs": [[15], [0, 46], [62], [2, 4], [2], [44], [281, 5], [220], [181, 273, 7, 209, 277, 152, 25, 158, 149], [15], [9, 233], [44], [97, 11], [88, 87], [13, 229], [52, 94], [15], [15], [15], [109], [19, 109], [110], [21, 110], [44], [26, 23], [79, 71], [34, 68], [24, 227], [66, 67], [80, 28], [186, 69], [190, 30], [44], [32, 116], [68, 54], [44], [99, 35], [138], [37, 119], [72, 37], [176, 226, 198, 263, 265, 202, 139, 204, 205, 143, 208, 212, 53, 279, 218, 27, 215], [40, 143], [44], [42, 70], [56, 241], [44], [44], [44], [44], [44], [44], [73, 63], [51, 94], [43, 166], [68], [48, 154], [57, 241], [241], [128, 10], [58, 60], [58, 10], [132, 245], [16, 61], [73], [261, 135], [64, 249], [49, 67], [29], [76, 86], [186, 12], [153, 75], [79], [59, 60], [260, 95], [29], [153, 83], [86], [65, 261], [77, 261], [148, 85], [98, 84], [80, 82], [80, 74], [91, 103], [98], [93], [96, 123], [14], [87], [257], [89, 257], [103], [112, 117], [148, 92], [120, 121], [94], [123], [125, 111], [105, 102], [261, 78], [99, 101], [99, 36], [38], [129, 118], [38], [104, 253], [38], [106, 255], [106], [113, 114], [62], [125], [117], [132], [113], [258, 223], [258, 115], [93], [129], [72, 39], [161, 124], [120], [130], [122, 130], [161], [136, 147], [], [275, 126], [233, 10], [144, 140], [227], [138], [131, 133], [131], [211], [261, 134], [147], [178, 163], [137, 178], [72], [144], [171], [171, 141], [177, 146], [153], [105], [145, 105], [156, 174], [220], [152], [160], [157, 150], [158], [180, 167], [169], [154, 55], [174], [160], [181, 159], [181], [100, 231], [151], [161], [50, 179], [72], [164], [162, 164], [180], [72], [168, 256], [197], [170, 197], [72], [176, 172], [185, 182], [72], [279, 175], [38], [22, 62], [90, 183], [188, 165], [184, 206], [185], [90, 189], [195, 196], [187], [187], [190], [203, 165], [207, 199], [193], [192, 190], [190, 31], [72], [193], [196], [206], [258], [169], [207], [278], [200, 278], [169], [165, 214], [169], [155], [220], [216, 230], [155], [220], [], [8, 210], [155], [18, 244], [224, 165], [169], [230], [72], [217, 219], [217, 47], [151], [220], [142], [142, 222], [232, 239], [38], [1, 234], [72], [250], [250, 228], [237, 238], [41, 235], [239], [33], [244, 236], [240, 41], [244, 213], [90], [237], [248, 246], [41, 251], [127], [72], [242, 45], [155], [20, 132], [248], [211], [165], [127], [127], [266, 252], [264, 266], [225, 259], [107], [108, 254], [33], [3, 276], [17, 267], [81, 262], [95], [268, 229], [107], [272, 274], [271], [243, 269], [271], [17], [229, 270], [194, 191], [14], [280, 41], [173], [277], [173], [], [3], [201, 221], [221], [218], [41, 6], [41]], "fname": "quotearg_buffer_restyled", "n_num": 282}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 3, 1, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+buffer], rdi", "mov     [rbp+buffersize], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     [rbp+o], r8", "cmp     [rbp+o], 0", "jz      short loc_96C8"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [1, 1, 0, 2, 3, 34, 0, 3, 0, 0, 0.0, ["mov     [rbp+p], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+p]", "mov     r8, [rax+30h]", "mov     rax, [rbp+p]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+p]", "lea     r11, [rax+8]", "mov     rax, [rbp+p]", "mov     r9d, [rax+4]; flags", "mov     rax, [rbp+p]", "mov     r10d, [rax]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "mov     [rbp+r], rax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+r]", "leave", "retn"], ["mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r9d,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "mov~[rbp+0],rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_96CF"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [3, 0, 5, 0, 4, 4, 0, 47, 0.04167, 1, 3], "succs": [[1, 3], [2], [], [2]], "fname": "quotearg_buffer", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     [rbp+o], rdx", "mov     rdx, [rbp+o]", "mov     rsi, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rcx, rdx; o", "mov     edx, 0; size", "mov     rdi, rax; arg", "call    quotearg_alloc_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 15, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_alloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+buf]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [7, 2, 2, 5, 5, 67, 1, 6, 2, 0, 0.30000000000000004, ["mov     [rbp+p], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+p]", "mov     edx, [rax+4]", "cmp     [rbp+size], 0", "setz    al", "movzx   eax, al", "or      eax, edx", "mov     [rbp+flags], eax", "mov     rax, [rbp+p]", "mov     rsi, [rax+30h]", "mov     rax, [rbp+p]", "mov     rcx, [rax+28h]", "mov     rax, [rbp+p]", "lea     r9, [rax+8]", "mov     rax, [rbp+p]", "mov     edi, [rax]", "mov     r8d, [rbp+flags]", "mov     rdx, [rbp+argsize]", "mov     rax, [rbp+arg]", "sub     rsp, 8", "push    rsi; right_quote", "push    rcx; left_quote", "push    r9; quote_these_too", "mov     r9d, r8d; flags", "mov     r8d, edi; quoting_style", "mov     rcx, rdx; argsize", "mov     rdx, rax; arg", "mov     esi, 0; buffersize", "mov     edi, 0; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "add     rax, 1", "mov     [rbp+bufsize], rax", "mov     rax, [rbp+bufsize]", "mov     rdi, rax; n", "call    xcharalloc", "mov     [rbp+buf], rax", "mov     rax, [rbp+p]", "mov     r8, [rax+30h]", "mov     rax, [rbp+p]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+p]", "lea     r11, [rax+8]", "mov     rax, [rbp+p]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+bufsize]; buffersize", "mov     rax, [rbp+buf]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "cmp     [rbp+size], 0", "jz      short loc_989D"], ["mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,[rax+0]", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "or~eax,edx", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "lea~r9,[rax+0]", "mov~rax,[rbp+0]", "mov~edi,<TAG>", "mov~r8d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~rsi", "push~rcx", "push~r9", "mov~r9d,r8d", "mov~r8d,edi", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "add~rsp,<STR>", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 4, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+bufsize]", "lea     rdx, [rax-1]", "mov     rax, [rbp+size]", "mov     [rax], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx"]], [0, 0, 3, 0, 0, 2, 0, 1, 1, 0, 0.07500000000000001, ["mov     rax, [rbp+o]", "jmp     short loc_97A1"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0.07500000000000001, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [2, 0, 5, 1, 0, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     [rbp+size], rdx", "mov     [rbp+o], rcx", "cmp     [rbp+o], 0", "jz      short loc_979A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [5, 1, 8, 0, 6, 7, 1, 86, 0.075, 1, 6], "succs": [[], [0, 2], [0], [1], [1], [3, 4]], "fname": "quotearg_alloc_mem", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 1, 7, 0, 1, 0, 0, 0.0, ["mov     rax, [rbp+sv]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free", "mov     cs:slotvec0.size, 100h", "lea     rax, slot0", "mov     cs:slotvec0.val, rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,0", "lea~rax,<TAG>", "mov~<TAG>,rax"]], [0, 0, 4, 0, 0, 5, 0, 1, 2, 2, 0.2857142857142857, ["mov     rax, [rbp+sv]", "mov     rdx, [rax+8]", "lea     rax, slot0", "cmp     rdx, rax", "jz      short loc_992A"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "lea~rax,<TAG>", "cmp~rdx,rax", "jz~FOO"]], [0, 0, 1, 0, 1, 5, 0, 1, 4, 1, 0.0, ["mov     rax, [rbp+sv]", "mov     rdi, rax; ptr", "call    _free", "lea     rax, slotvec0", "mov     cs:slotvec_0, rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rax,<TAG>", "mov~<TAG>,rax"]], [0, 0, 2, 0, 0, 3, 0, 1, 3, 1, 0.23809523809523808, ["lea     rax, slotvec0", "cmp     [rbp+sv], rax", "jz      short loc_9951"], ["lea~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 7, 0, 0, 3, 0, 1, 1, 3, 0.26190476190476186, ["mov     eax, cs:nslots", "cmp     [rbp+i], eax", "jl      short loc_98BF"], ["mov~eax,<TAG>", "cmp~[rbp+0],eax", "jl~FOO"]], [2, 0, 7, 1, 0, 7, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     rax, cs:slotvec_0", "mov     [rbp+sv], rax", "mov     [rbp+i], 1", "jmp     short loc_98E2"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 7, 3, 1, 10, 0, 1, 2, 4, 0.0, ["mov     eax, [rbp+i]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "add~[rbp+0],0"]], [1, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0.0, ["mov     cs:nslots, 1", "nop", "leave", "retn"], ["mov~<TAG>,0", "nop", "leave", "retn"]]], "func_feature": [3, 0, 7, 0, 8, 10, 0, 44, 0.09821, 5, 4], "succs": [[3], [0, 3], [7], [2, 7], [1, 6], [4], [4], []], "fname": "quotearg_free", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 7, 0, 1, 0, 0, 0.0, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+val]", "leave", "retn"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [4, 1, 4, 6, 1, 45, 1, 2, 2, 0, 0.17142857142857143, ["mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax]", "mov     [rbp+size], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax+8]", "mov     [rbp+val], rax", "mov     rax, [rbp+options]", "mov     eax, [rax+4]", "or      eax, 1", "mov     [rbp+flags], eax", "mov     rax, [rbp+options]", "mov     r8, [rax+30h]", "mov     rax, [rbp+options]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+options]", "lea     r11, [rax+8]", "mov     rax, [rbp+options]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+size]; buffersize", "mov     rax, [rbp+val]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "mov     [rbp+qsize], rax", "mov     rax, [rbp+size]", "cmp     rax, [rbp+qsize]", "ja      loc_9BBE"], ["mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [2, 1, 1, 4, 2, 33, 0, 2, 4, 0, 0.009523809523809525, ["mov     rax, [rbp+size]", "mov     rdi, rax; n", "call    xcharalloc", "mov     [rbp+val], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rdx, rax", "mov     rax, [rbp+val]", "mov     [rdx+8], rax", "mov     rax, [rbp+options]", "mov     r8, [rax+30h]", "mov     rax, [rbp+options]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+options]", "lea     r11, [rax+8]", "mov     rax, [rbp+options]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+size]; buffersize", "mov     rax, [rbp+val]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rdx+0],rax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>"]], [1, 0, 12, 0, 0, 8, 0, 1, 2, 0, 0.06666666666666668, ["lea     rax, slotvec0", "cmp     [rbp+sv], rax", "setz    al", "mov     [rbp+preallocated], al", "mov     [rbp+nmax], 7FFFFFFEh", "mov     eax, [rbp+nmax]", "cmp     eax, [rbp+n]", "jge     short loc_99C9"], ["lea~rax,<TAG>", "cmp~[rbp+0],rax", "setz~al", "mov~[rbp+0],al", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jge~FOO"]], [0, 0, 13, 0, 0, 3, 0, 1, 1, 0, 0.06190476190476191, ["mov     eax, cs:nslots", "cmp     [rbp+n], eax", "jl      loc_9A6A"], ["mov~eax,<TAG>", "cmp~[rbp+0],eax", "jl~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 4, 0, 0.05238095238095239, ["mov     eax, 0", "jmp     short loc_99E9"], ["mov~eax,0", "jmp~FOO"]], [3, 0, 10, 2, 0, 7, 0, 1, 3, 0, 0.09523809523809525, ["mov     eax, [rbp+n]", "add     eax, 1", "cdqe", "shl     rax, 4", "mov     rdx, rax", "cmp     [rbp+preallocated], 0", "jz      short loc_99E5"], ["mov~eax,[rbp+0]", "add~eax,0", "cdqe~", "shl~rax,0", "mov~rdx,rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, 0, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 8, 0, 0, 1, 0, 0, 4, 0, 0.05238095238095239, ["mov     rax, [rbp+sv]"], ["mov~rax,[rbp+0]"]], [1, 0, 7, 0, 1, 8, 0, 2, 5, 0, 0.1523809523809524, ["mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "mov     [rbp+sv], rax", "mov     rax, [rbp+sv]", "mov     cs:slotvec_0, rax", "cmp     [rbp+preallocated], 0", "jz      short loc_9A22"], ["mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 1, 3, 0, 1, 4, 0, 0.0, ["mov     rax, [rbp+val]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [2, 0, 3, 3, 0, 14, 0, 1, 3, 0, 0.09523809523809525, ["mov     rax, [rbp+qsize]", "add     rax, 1", "mov     [rbp+size], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rdx, rax", "mov     rax, [rbp+size]", "mov     [rdx], rax", "lea     rax, slot0", "cmp     [rbp+val], rax", "jz      short loc_9B48"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "lea~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [1, 1, 15, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     [rbp+options], rcx", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, cs:slotvec_0", "mov     [rbp+sv], rax", "cmp     [rbp+n], 0", "jns     short loc_9995"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    _abort"], ["call~FOO"]], [4, 0, 5, 5, 1, 20, 0, 1, 6, 0, 0.14285714285714288, ["mov     eax, [rbp+n]", "lea     edx, [rax+1]", "mov     eax, cs:nslots", "sub     edx, eax", "mov     eax, edx", "cdqe", "shl     rax, 4", "mov     rdx, rax; n", "mov     eax, cs:nslots", "cdqe", "shl     rax, 4", "mov     rcx, rax", "mov     rax, [rbp+sv]", "add     rax, rcx", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     eax, [rbp+n]", "add     eax, 1", "mov     cs:nslots, eax"], ["mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~eax,<TAG>", "sub~edx,eax", "mov~eax,edx", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~eax,<TAG>", "cdqe~", "shl~rax,0", "mov~rcx,rax", "mov~rax,[rbp+0]", "add~rax,rcx", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]", "add~eax,0", "mov~<TAG>,eax"]], [0, 0, 6, 0, 0, 5, 0, 0, 6, 0, 0.0, ["mov     rcx, [rbp+sv]", "mov     rax, cs:slotvec0.size", "mov     rdx, cs:slotvec0.val", "mov     [rcx], rax", "mov     [rcx+8], rdx"], ["mov~rcx,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~<TAG>,rax", "mov~[rcx+0],rdx"]]], "func_feature": [10, 1, 17, 0, 16, 20, 8, 172, 0.05625, 5, 21], "succs": [[], [0, 11], [0], [6, 7], [1, 3], [9], [8, 5], [], [9], [14, 15], [2], [10, 2], [4, 13], [], [1], [14]], "fname": "quotearg_n_options", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, default_quoting_options; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 1, 1], "succs": [[]], "fname": "quotearg_n", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, default_quoting_options; options", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 14, 0.0, 1, 1], "succs": [[]], "fname": "quotearg_n_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "quotearg", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 12, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 1, 2, 1, 2, 24, 2, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+o]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "lea     rdx, [rbp+o]", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     rcx, rdx; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_9CD4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,0", "mov~edi,eax", "call~FOO", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 27, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 2, 1, 2, 24, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 60h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+o]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "lea     rcx, [rbp+o]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_9D36"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 27, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], edi", "mov     [rbp+arg], rsi", "mov     rdx, [rbp+arg]; arg", "mov     eax, [rbp+s]", "mov     esi, eax; s", "mov     edi, 0; n", "call    quotearg_n_style", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,eax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 19, 12, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_style", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+s], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     eax, [rbp+s]", "mov     esi, eax; s", "mov     edi, 0; n", "call    quotearg_n_style_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,eax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_style_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [3, 0, 2, 1, 2, 39, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 60h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     eax, edx", "mov     [rbp+ch_0], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, qword ptr cs:default_quoting_options.style", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too", "mov     qword ptr [rbp+options.style], rax", "mov     qword ptr [rbp+options.quote_these_too], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+8", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too+10h", "mov     qword ptr [rbp+options.quote_these_too+8], rax", "mov     qword ptr [rbp+options.quote_these_too+10h], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+18h", "mov     rdx, cs:default_quoting_options.left_quote", "mov     qword ptr [rbp+options.quote_these_too+18h], rax", "mov     [rbp+options.left_quote], rdx", "mov     rax, cs:default_quoting_options.right_quote", "mov     [rbp+options.right_quote], rax", "movsx   ecx, [rbp+ch_0]", "lea     rax, [rbp+options]", "mov     edx, 1; i", "mov     esi, ecx; c", "mov     rdi, rax; o", "call    set_char_quoting", "lea     rcx, [rbp+options]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n_options", "mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_9E3D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "movsx~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 42, 0.0, 8, 1], "succs": [[], [0, 2], []], "fname": "quotearg_char_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     eax, esi", "mov     [rbp+ch_0], al", "movsx   edx, [rbp+ch_0]; ch_0", "mov     rax, [rbp+arg]", "mov     rsi, 0FFFFFFFFFFFFFFFFh; argsize", "mov     rdi, rax; arg", "call    quotearg_char_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~eax,esi", "mov~[rbp+0],al", "movsx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_char", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     esi, 3Ah ; ':'; ch_0", "mov     rdi, rax; arg", "call    quotearg_char", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 10, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_colon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rcx, [rbp+argsize]", "mov     rax, [rbp+arg]", "mov     edx, 3Ah ; ':'; ch_0", "mov     rsi, rcx; argsize", "mov     rdi, rax; arg", "call    quotearg_char_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,<STR>", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_colon_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [2, 2, 2, 1, 3, 43, 2, 4, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 90h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+var_90]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "mov     rax, qword ptr [rbp+var_90.style]", "mov     rdx, qword ptr [rbp+var_90.quote_these_too]", "mov     qword ptr [rbp+options.style], rax", "mov     qword ptr [rbp+options.quote_these_too], rdx", "mov     rax, qword ptr [rbp+var_90.quote_these_too+8]", "mov     rdx, qword ptr [rbp+var_90.quote_these_too+10h]", "mov     qword ptr [rbp+options.quote_these_too+8], rax", "mov     qword ptr [rbp+options.quote_these_too+10h], rdx", "mov     rax, qword ptr [rbp+var_90.quote_these_too+18h]", "mov     rdx, [rbp+var_90.left_quote]", "mov     qword ptr [rbp+options.quote_these_too+18h], rax", "mov     [rbp+options.left_quote], rdx", "mov     rax, [rbp+var_90.right_quote]", "mov     [rbp+options.right_quote], rax", "lea     rax, [rbp+options]", "mov     edx, 1; i", "mov     esi, 3Ah ; ':'; c", "mov     rdi, rax; o", "call    set_char_quoting", "lea     rdx, [rbp+options]", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     rcx, rdx; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_9F6E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,0", "mov~edi,eax", "call~FOO", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 2, 5, 2, 3, 2, 8, 46, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style_colon", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "mov     [rbp+arg], rcx", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rsi, [rbp+left_quote]; left_quote", "mov     eax, [rbp+n]", "mov     r8, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_custom_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 16, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_n_custom", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 2, 1, 2, 40, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+n], edi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "mov     [rbp+arg], rcx", "mov     [rbp+argsize], r8", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, qword ptr cs:default_quoting_options.style", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too", "mov     qword ptr [rbp+o.style], rax", "mov     qword ptr [rbp+o.quote_these_too], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+8", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too+10h", "mov     qword ptr [rbp+o.quote_these_too+8], rax", "mov     qword ptr [rbp+o.quote_these_too+10h], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+18h", "mov     rdx, cs:default_quoting_options.left_quote", "mov     qword ptr [rbp+o.quote_these_too+18h], rax", "mov     [rbp+o.left_quote], rdx", "mov     rax, cs:default_quoting_options.right_quote", "mov     [rbp+o.right_quote], rax", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rcx, [rbp+left_quote]", "lea     rax, [rbp+o]", "mov     rsi, rcx; left_quote", "mov     rdi, rax; o", "call    set_custom_quoting", "lea     rcx, [rbp+o]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_A05E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 43, 0.0, 8, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_custom_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+left_quote], rdi", "mov     [rbp+right_quote], rsi", "mov     [rbp+arg], rdx", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rax, [rbp+left_quote]", "mov     rsi, rax; left_quote", "mov     edi, 0; n", "call    quotearg_n_custom", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_custom", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 0, 1, 1, 17, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+left_quote], rdi", "mov     [rbp+right_quote], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     rsi, [rbp+argsize]", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rax, [rbp+left_quote]", "mov     r8, rsi; argsize", "mov     rsi, rax; left_quote", "mov     edi, 0; n", "call    quotearg_n_custom_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 17, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_custom_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, quote_quoting_options; options", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 14, 0.0, 1, 1], "succs": [[]], "fname": "quote_n_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quote_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 12, 0.0, 0, 1], "succs": [[]], "fname": "quote_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     rcx, [rbp+arg]", "mov     eax, [rbp+n]", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     rsi, rcx; arg", "mov     edi, eax; n", "call    quote_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rdx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 4, 13, 0.0, 0, 1], "succs": [[]], "fname": "quote_n", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quote_n", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 8, 10, 0.0, 0, 1], "succs": [[]], "fname": "quote", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 1, 0, 1, 1, 20, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+status], edi", "mov     [rbp+errnum], esi", "mov     [rbp+format], rdx", "mov     [rbp+args], rcx", "mov     rcx, [rbp+args]", "mov     rdx, [rbp+format]", "mov     esi, [rbp+errnum]; errnum", "mov     eax, [rbp+status]", "mov     r9, rcx; args", "mov     r8, rdx; format", "mov     ecx, 0; line_number", "mov     edx, 0; file", "mov     edi, eax; status", "call    verror_at_line", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r9,rcx", "mov~r8,rdx", "mov~ecx,0", "mov~edx,0", "mov~edi,eax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 20, 0.0, 0, 1], "succs": [[]], "fname": "verror", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.15000000000000002, ["cmp     [rbp+file], 0", "jz      short loc_A210"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 5, 1, 1, 18, 0, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 48h", "mov     [rbp+status], edi", "mov     [rbp+errnum], esi", "mov     [rbp+file], rdx", "mov     [rbp+line_number], ecx", "mov     [rbp+format], r8", "mov     [rbp+args], r9", "mov     rdx, [rbp+args]", "mov     rax, [rbp+format]", "mov     rsi, rdx; args", "mov     rdi, rax; format", "call    xvasprintf", "mov     [rbp+message], rax", "cmp     [rbp+message], 0", "jz      short loc_A232"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 1, 0, 1, 11, 0, 2, 2, 1, 0.05, ["mov     rdi, [rbp+message]", "mov     ecx, [rbp+line_number]; lineno", "mov     rdx, [rbp+file]; fname", "mov     esi, [rbp+errnum]; errnum", "mov     eax, [rbp+status]", "mov     r9, rdi", "lea     r8, off_12D58; format", "mov     edi, eax; status", "mov     eax, 0", "call    _error_at_line", "jmp     short loc_A261"], ["mov~rdi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r9,rdi", "lea~r8,<TAG>", "mov~edi,eax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 1, 0, 1, 9, 0, 2, 2, 1, 0.05, ["mov     rdx, [rbp+message]", "mov     esi, [rbp+errnum]; errnum", "mov     eax, [rbp+status]", "mov     rcx, rdx", "lea     rdx, off_12D58; format", "mov     edi, eax; status", "mov     eax, 0", "call    _error", "jmp     short loc_A261"], ["mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~edi,eax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 1, 0, 1, 1, 8, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+message]", "mov     rdi, rax; ptr", "call    _free", "nop", "add     rsp, 48h", "pop     rbx", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [2, 0, 0, 0, 4, 11, 0, 4, 1, -1, 0.0, ["lea     rdi, aUnableToDispla; \"unable to display error message\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "call    _abort"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "call~FOO"]]], "func_feature": [8, 0, 12, 0, 6, 6, 1, 59, 0.04167, 2, 2], "succs": [[2, 3], [0, 5], [4], [4], [], []], "fname": "verror_at_line", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[5, 2, 1, 6, 2, 33, 0, 3, 0, 0, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 6", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS; \"Written by %s, %s, %s,\\n%s, %s, and %s.\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "push    r14", "push    r13", "mov     r9, [rbp+var_68]", "mov     r8, r15", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 10h", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,r15", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [0, 0, 11, 1, 0, 8, 0, 1, 3, 2, 0.16666666666666666, ["mov     rax, [rbp+n_authors]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_12FEC", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_12FEC", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.0004166666666666667, ["nop; jumptable 000000000000A366 case 0"], ["nop"]], [1, 1, 16, 1, 0, 16, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r15", "push    r14", "push    r13", "push    r12", "push    rbx", "sub     rsp, 58h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     [rbp+n_authors], r9", "cmp     [rbp+command_name], 0", "jz      short loc_A2CE"], ["push~rbp", "mov~rbp,rsp", "push~r15", "push~r14", "push~r13", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "cmp~[rbp+0],0", "jz~FOO"]], [6, 1, 1, 6, 2, 29, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 5", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSA; \"Written by %s, %s, %s,\\n%s, and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    r13", "mov     r9, r15", "mov     r8, r14", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 10h", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r13", "mov~r9,r15", "mov~r8,r14", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [3, 0, 13, 0, 4, 18, 0, 5, 2, 2, 0.1625, ["lea     rdi, aC; \"(C)\"", "call    _gettext", "mov     rdx, rax", "mov     rax, [rbp+stream]", "mov     ecx, 7E3h", "lea     rsi, version_etc_copyright; \"Copyright %s %d Free Software Foundatio\"...", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "lea     rdi, aLicenseGplv3Gn; \"\\nLicense GPLv3+: GNU GPL version 3 or \"...", "call    _gettext", "mov     rdx, rax", "mov     rax, [rbp+stream]", "mov     rsi, rax; stream", "mov     rdi, rdx; s", "call    _fputs_unlocked", "cmp     [rbp+n_authors], 9; switch 10 cases", "ja      loc_A74D; jumptable 000000000000A366 default case"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~ecx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "cmp~[rbp+0],0", "ja~FOO"]], [9, 2, 1, 10, 2, 49, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 9", "add     rax, 40h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 38h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rdx, [rax]", "mov     [rbp+var_80], rdx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_2; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    [rbp+var_68]", "push    [rbp+var_70]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_78]", "mov     r8, [rbp+var_80]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 30h", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rdx,<TAG>", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [1, 0, 14, 0, 1, 7, 0, 1, 1, 3, 0.029166666666666667, ["mov     rcx, [rbp+version]", "mov     rdx, [rbp+package]", "mov     rax, [rbp+stream]", "lea     rsi, aSS_1; \"%s %s\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [1, 0, 14, 0, 1, 10, 0, 2, 1, 3, 0.029166666666666667, ["mov     rsi, [rbp+version]", "mov     rcx, [rbp+package]", "mov     rdx, [rbp+command_name]", "mov     rax, [rbp+stream]", "mov     r8, rsi", "lea     rsi, aSSS; \"%s (%s) %s\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     short loc_A2EE"], ["mov~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [6, 3, 1, 8, 2, 39, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 7", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rcx, [rax]", "mov     [rbp+var_70], rcx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_0; \"Written by %s, %s, %s,\\n%s, %s, %s, and\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_68]", "mov     r8, [rbp+var_70]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 20h", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [3, 0, 1, 2, 2, 19, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 3", "add     rax, 10h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSAnd; \"Written by %s, %s, and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 0, 9, 0, 0, 4, 0, 0.0, ["nop", "lea     rsp, [rbp-28h]", "pop     rbx", "pop     r12", "pop     r13", "pop     r14", "pop     r15", "pop     rbp", "retn"], ["nop", "lea~rsp,[rbp-28h]+0]", "pop~rbx", "pop~r12", "pop~r13", "pop~r14", "pop~r15", "pop~rbp", "retn"]], [1, 0, 1, 0, 2, 12, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 1", "mov     rbx, [rax]", "lea     rdi, aWrittenByS; \"Written by %s.\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+stream]", "mov     rdx, rbx", "mov     rsi, rcx; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rbx", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 1, 1, 2, 15, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 2", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySAndS; \"Written by %s and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [4, 0, 1, 3, 2, 23, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 4", "add     rax, 18h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSAn; \"Written by %s, %s, %s,\\nand %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     r9, r14", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~r9,r14", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [6, 3, 1, 8, 2, 43, 0, 3, 4, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 case 8", "add     rax, 38h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_1; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "push    [rbp+var_68]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_70]", "mov     r8, [rbp+var_78]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 20h", "jmp     loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [9, 2, 1, 10, 2, 49, 0, 3, 3, 1, 0.016666666666666666, ["mov     rax, [rbp+authors]; jumptable 000000000000A366 default case", "add     rax, 40h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 38h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rdi, [rax]", "mov     [rbp+var_80], rdi", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_3; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    [rbp+var_68]", "push    [rbp+var_70]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_78]", "mov     r8, [rbp+var_80]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 30h", "jmp     short loc_A801"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,<TAG>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]]], "func_feature": [26, 0, 40, 4, 17, 27, 2, 380, 0.02402, 16, 56], "succs": [[11], [0, 2, 4, 6, 9, 10, 12, 13, 14, 15], [11], [8, 7], [11], [16, 1], [11], [5], [5], [11], [11], [], [11], [11], [11], [11], [11]], "fname": "version_etc_arn", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 1, 13, 0, 1, 0, 0, 0.0, ["mov     r8, [rbp+n_authors]", "mov     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r9, r8; n_authors", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_arn", "nop", "leave", "retn"], ["mov~r8,[rbp+0]", "mov~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]], [0, 0, 3, 1, 0, 7, 1, 1, 1, 0, 0.5, ["mov     rax, [rbp+n_authors]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+authors]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_A837"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 0, 3, 1, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     [rbp+n_authors], 0", "jmp     short loc_A83C"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 1, 0, 1, 0, 0, 2, 0, 0.0, ["add     [rbp+n_authors], 1"], ["add~[rbp+0],0"]]], "func_feature": [1, 1, 3, 0, 4, 4, 0, 31, 0.125, 0, 3], "succs": [[], [0, 3], [1], [1]], "fname": "version_etc_ar", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 9, 1, 0, 1, 0, 0, 0, 0, 0.15277777777777776, ["add     [rbp+n_authors], 1"], ["add~[rbp+0],0"]], [0, 0, 9, 0, 0, 7, 1, 1, 4, 2, 0.29166666666666663, ["mov     rdx, [rax]", "mov     rax, [rbp+n_authors]", "mov     [rbp+rax*8+authtab], rdx", "mov     rax, [rbp+n_authors]", "mov     rax, [rbp+rax*8+authtab]", "test    rax, rax", "jnz     short loc_A8C1"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 9, 0, 0, 5, 0, 0, 3, 3, 0.07638888888888888, ["mov     rax, [rbp+authors]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+authors]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 9, 0, 0, 4, 0, 1, 2, 4, 0.20833333333333331, ["mov     rax, [rbp+authors]", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_A90B"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 9, 1, 0, 12, 0, 1, 3, 3, 0.07638888888888888, ["mov     rax, [rbp+authors]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+authors]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+authors]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+authors]", "mov     [rdx], ecx", "jmp     short loc_A925"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 1, 2, 0.3055555555555555, ["cmp     [rbp+n_authors], 9", "ja      short loc_A93F"], ["cmp~[rbp+0],0", "ja~FOO"]], [2, 0, 9, 1, 0, 13, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0A0h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+n_authors], 0", "jmp     short loc_A8C6"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 1, 14, 1, 2, 2, 1, 0.19444444444444442, ["mov     r8, [rbp+n_authors]", "lea     rdi, [rbp+authtab]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r9, r8; n_authors", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_arn", "nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_A980"], ["mov~r8,[rbp+0]", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 3, 8, 1, 10, 12, 3, 61, 0.13056, 1, 3], "succs": [[5], [0, 8], [1], [2, 4], [1], [8, 3], [5], [], [9, 7], []], "fname": "version_etc_va", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 1, 2, 0, 1, 21, 2, 2, 1, 0, 0.3333333333333333, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+authors.gp_offset], 20h ; ' '", "mov     [rbp+authors.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+authors.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+authors.reg_save_area], rax", "lea     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_va", "nop", "mov     rax, [rbp+var_B8]", "xor     rax, fs:28h", "jz      short locret_AA60"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],<STR>", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 1, 4, 1, 0, 11, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0F0h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_A9DB"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 3, 0, 0, 8, 0, 0, 1, 0, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]]], "func_feature": [2, 3, 4, 12, 5, 5, 0, 43, 0.06667, 1, 1], "succs": [[], [0, 3], [1, 4], [], [1]], "fname": "version_etc", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[4, 0, 0, 2, 6, 28, 0, 6, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 8", "lea     rdi, aReportBugsToS; \"\\nReport bugs to: %s\\n\"", "call    _gettext", "lea     rsi, aBugCoreutilsGn; \"bug-coreutils@gnu.org\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "lea     rdi, aSHomePageS; \"%s home page: <%s>\\n\"", "call    _gettext", "lea     rdx, aHttpsWwwGnuOrg_0; \"https://www.gnu.org/software/coreutils/\"", "lea     rsi, aGnuCoreutils_0; \"GNU coreutils\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aGeneralHelpUsi; \"General help using GNU software: <https\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "nop", "add     rsp, 8", "pop     rbx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "lea~rdi,<TAG>", "call~FOO", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [6, 0, 6, 0, 1, 0, 0, 28, 0.0, 7, 2], "succs": [[]], "fname": "emit_bug_reporting_address", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 4, 0, 0, 2, 1, 0, 1, 2, 0.26666666666666666, ["test    rax, rax", "jns     short loc_AB06"], ["test~rax,rax", "jns~FOO"]], [0, 0, 0, 1, 1, 6, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "leave", "retn"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "leave", "retn"]], [1, 0, 2, 0, 0, 4, 2, 1, 2, 1, 0.26666666666666666, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_AB15"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [2, 0, 6, 2, 0, 9, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], rdi", "mov     [rbp+s], rsi", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_AAFC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 1, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [2, 3, 3, 0, 7, 8, 0, 24, 0.07619, 0, 3], "succs": [[3], [0, 3], [], [2, 4], [], [1, 6], [1]], "fname": "xnmalloc", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0.26666666666666666, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_AB69"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 0, 2, 1, 0, 1, 2, 0.26666666666666666, ["test    rax, rax", "jns     short loc_AB5A"], ["test~rax,rax", "jns~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 1, 1, 9, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdx, rax", "mov     rax, [rbp+p]", "mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "leave", "retn"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]], [1, 1, 6, 2, 0, 10, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+p], rdi", "mov     [rbp+n], rsi", "mov     [rbp+s], rdx", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_AB50"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 1, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [2, 3, 3, 0, 7, 8, 0, 28, 0.07619, 0, 3], "succs": [[3, 4], [0, 2], [0], [], [], [1, 6], [1]], "fname": "xnrealloc", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 6, 1, 0, 4, 0, 0, 0, 0, 0.12878787878787878, ["mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_ABE8"], ["mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 1, 4, 0.05303030303030303, ["cmp     [rbp+n], 0", "jnz     short loc_ABD4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 1, 7, 2, 0, 8, 0, 0, 2, 4, 0.0, ["mov     eax, 80h", "mov     edx, 0", "div     [rbp+s]", "mov     [rbp+n], rax", "cmp     [rbp+n], 0", "setz    al", "movzx   eax, al", "add     [rbp+n], rax"], ["mov~eax,<STR>", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "add~[rbp+0],rax"]], [1, 0, 5, 0, 0, 1, 0, 0, 3, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 12, 1, 0, 11, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+p], rdi", "mov     [rbp+pn], rsi", "mov     [rbp+s], rdx", "mov     rax, [rbp+pn]", "mov     rax, [rax]", "mov     [rbp+n], rax", "cmp     [rbp+p], 0", "jnz     short loc_AC01"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 4, 0, 0, 2, 1, 0, 3, 2, 0.14393939393939395, ["test    rax, rax", "jns     short loc_ABF2"], ["test~rax,rax", "jns~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 4, 2, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 1, 2, 0, 7, 0, 0, 2, 1, 0.015151515151515152, ["mov     rax, [rbp+n]", "shr     rax, 1", "mov     rdx, rax", "mov     rax, [rbp+n]", "add     rax, rdx", "add     rax, 1", "mov     [rbp+n], rax"], ["mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~[rbp+0],rax"]], [2, 0, 3, 1, 0, 5, 0, 0, 1, 2, 0.022727272727272728, ["mov     rax, 5555555555555554h", "mov     edx, 0", "div     [rbp+s]", "cmp     [rbp+n], rax", "jb      short loc_AC1F"], ["mov~rax,0", "mov~edx,0", "div~,[rbp+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 2, 0, 0, 4, 2, 1, 4, 1, 0.09848484848484848, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_AC38"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 1, 1, 12, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+pn]", "mov     rdx, [rbp+n]", "mov     [rax], rdx", "mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdx, rax", "mov     rax, [rbp+p]", "mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [3, 3, 6, 0, 13, 16, 1, 59, 0.03555, 0, 8], "succs": [[3, 5], [0, 2], [0], [5], [8, 1], [9, 6], [9], [12], [11, 7], [10, 12], [], [], []], "fname": "x2nrealloc", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], rdi", "mov     rax, [rbp+n]", "mov     rdi, rax; n", "call    xmalloc", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 9, 0.0, 0, 1], "succs": [[]], "fname": "xcharalloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0.16666666666666666, ["cmp     [rbp+n], 0", "jz      short loc_ACA9"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 3, 1, 1, 10, 0, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], rdi", "mov     rax, [rbp+n]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_ACA9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 0, 4, 0, 4, 4, 5, 16, 0.04167, 0, 1], "succs": [[2, 3], [0, 3], [], []], "fname": "xmalloc", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.07142857142857142, ["cmp     [rbp+n], 0", "jz      short loc_AD0A"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 4, 0, 1, 8, 0, 2, 1, 2, 0.15476190476190477, ["mov     rdx, [rbp+n]", "mov     rax, [rbp+p]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_AD0A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 7, 1, 0, 7, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+n], rsi", "cmp     [rbp+n], 0", "jnz     short loc_ACE0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.05952380952380952, ["mov     rax, [rbp+p]"], ["mov~rax,[rbp+0]"]], [1, 0, 6, 0, 0, 2, 0, 1, 1, 2, 0.03571428571428571, ["cmp     [rbp+p], 0", "jz      short loc_ACE0"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 1, 5, 0, 2, 2, 1, 0.03571428571428571, ["mov     rax, [rbp+p]", "mov     rdi, rax; ptr", "call    _free", "mov     eax, 0", "jmp     short locret_AD0E"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]]], "func_feature": [3, 0, 8, 0, 8, 10, 3, 28, 0.04464, 0, 1], "succs": [[3, 4], [0, 4], [1, 5], [], [6], [1, 7], [], [6]], "fname": "xrealloc", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+pn], rsi", "mov     rcx, [rbp+pn]", "mov     rax, [rbp+p]", "mov     edx, 1; s", "mov     rsi, rcx; pn", "mov     rdi, rax; p", "call    x2nrealloc", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "x2realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 1, 2, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "mov     rcx, rax", "mov     rax, [rbp+s]", "mov     rdx, rax; n", "mov     esi, 0; c", "mov     rdi, rcx; s", "call    _memset", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~rdi,rcx", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 0, 15, 0.0, 0, 1], "succs": [[]], "fname": "xzalloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 4, 2, 1, 0, 0, 0.2857142857142857, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jnz     short loc_ADC1"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 5, 0, 0, 2, 1, 0, 1, 3, 0.23809523809523808, ["test    rax, rax", "jns     short loc_AD99"], ["test~rax,rax", "jns~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 2, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [1, 0, 2, 0, 1, 8, 0, 2, 3, 1, 0.11904761904761904, ["mov     rdx, [rbp+s]", "mov     rax, [rbp+n]", "mov     rsi, rdx; size", "mov     rdi, rax; nmemb", "call    _calloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_ADC6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 1, 7, 2, 0, 9, 0, 0, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], rdi", "mov     [rbp+s], rsi", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_AD8F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 1, 4, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0.0, ["mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 3, 4, 0, 8, 10, 0, 29, 0.08036, 0, 2], "succs": [[3, 4], [0, 2], [0], [], [3, 7], [1, 6], [1], []], "fname": "xcalloc", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 2, 16, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+s], rsi", "mov     rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "mov     rcx, rax", "mov     rdx, [rbp+s]; n", "mov     rax, [rbp+p]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 2, 16, 0.0, 0, 1], "succs": [[]], "fname": "xmemdup", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 2, 14, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+string], rdi", "mov     rax, [rbp+string]", "mov     rdi, rax; s", "call    _strlen", "lea     rdx, [rax+1]", "mov     rax, [rbp+string]", "mov     rsi, rdx; s", "mov     rdi, rax; p", "call    xmemdup", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "xstrdup", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 0, 3, 13, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "lea     rdi, aMemoryExhauste_1; \"memory exhausted\"", "call    _gettext", "mov     rdx, rax", "mov     eax, cs:exit_failure", "mov     rcx, rdx", "lea     rdx, off_13120; format", "mov     esi, 0; errnum", "mov     edi, eax; status", "mov     eax, 0", "call    _error", "call    _abort"], ["push~rbp", "mov~rbp,rsp", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,<TAG>", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "call~FOO"]]], "func_feature": [3, 0, 3, 0, 1, 0, 9, 13, 0.0, 3, 0], "succs": [[]], "fname": "xalloc_die", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [2, 0, 1, 0, 0, 4, 0, 1, 2, 0, 0.07500000000000001, ["mov     rax, [rbp+x]", "mov     qword ptr [rax], 0FFFFFFFFFFFFFFFFh", "mov     eax, 1", "jmp     short loc_AEC3"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 1, 0, 8, 0, 0, 2, 0, 0.07500000000000001, ["mov     rax, [rbp+x]", "mov     rdx, [rax]", "mov     eax, [rbp+scale_factor]", "cdqe", "imul    rdx, rax", "mov     rax, [rbp+x]", "mov     [rax], rdx", "mov     eax, 0"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~eax,[rbp+0]", "cdqe~", "imul~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,0"]], [0, 0, 3, 0, 0, 3, 1, 1, 1, 0, 0.30000000000000004, ["mov     rax, rcx", "test    rax, rax", "jz      short loc_AEA7"], ["mov~rax,rcx", "test~rax,rax", "jz~FOO"]], [1, 0, 5, 1, 0, 11, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+scale_factor], esi", "mov     rax, [rbp+x]", "mov     rax, [rax]", "mov     edx, [rbp+scale_factor]", "movsxd  rdx, edx", "mov     ecx, 0", "mul     rdx", "jno     short loc_AE8D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~edx,[rbp+0]", "movsxd~rdx,edx", "mov~ecx,0", "mul~,rdx", "jno~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [0, 1, 2, 0, 6, 7, 4, 29, 0.075, 0, 2], "succs": [[], [0], [0], [1, 2], [3, 5], [3]], "fname": "bkm_scale", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 3, 0, 1, 6, 1, 1, 0, 0, 0.0, ["mov     edx, [rbp+base]", "mov     rax, [rbp+x]", "mov     esi, edx; scale_factor", "mov     rdi, rax; x", "call    bkm_scale", "or      [rbp+err], eax"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "or~[rbp+0],eax"]], [0, 0, 3, 0, 0, 5, 1, 1, 1, 1, 0.5, ["mov     eax, [rbp+power]", "lea     edx, [rax-1]", "mov     [rbp+power], edx", "test    eax, eax", "jnz     short loc_AEE0"], ["mov~eax,[rbp+0]", "lea~edx,[rax-1]+0]", "mov~[rbp+0],edx", "test~eax,eax", "jnz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     eax, [rbp+err]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]], [1, 1, 3, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     [rbp+base], esi", "mov     [rbp+power], edx", "mov     [rbp+err], 0", "jmp     short loc_AEF4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~[rbp+0],0", "jmp~FOO"]]], "func_feature": [1, 2, 3, 0, 4, 4, 8, 22, 0.125, 0, 1], "succs": [[1], [0, 2], [], [1]], "fname": "bkm_scale_by_power", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 8, 0, 0.03383458646616541, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_B34F"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [1, 0, 41, 0, 0, 2, 0, 1, 8, 0, 0.013471177944862155, ["cmp     [rbp+valid_suffixes], 0", "jz      short loc_B03C"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 46, 0, 1, 11, 0, 2, 7, 0, 0.1212406015037594, ["mov     edx, [rbp+strtol_base]; base", "mov     rcx, [rbp+p]", "mov     rax, [rbp+s]", "mov     rsi, rcx; endptr", "mov     rdi, rax; nptr", "call    _strtoumax", "mov     [rbp+tmp], rax", "mov     rax, [rbp+p]", "mov     rax, [rax]", "cmp     [rbp+s], rax", "jnz     short loc_B046"], ["mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 3, 0, 0, 5, 0, 1, 10, 0, 0.003289473684210526, ["mov     rdx, [rbp+tmp]", "mov     rax, [rbp+val]", "mov     [rax], rdx", "mov     eax, [rbp+err]", "jmp     loc_B33B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 36, 0, 0, 2, 0, 1, 9, 0, 0.17810150375939848, ["cmp     [rbp+valid_suffixes], 0", "jnz     short loc_B088"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 0, 0.0037593984962406013, ["mov     eax, 4", "jmp     loc_B33B"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 40, 0, 0, 5, 1, 1, 9, 0, 0.017543859649122806, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_B03C"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 39, 0, 1, 10, 1, 2, 10, 0, 0.02506265664160401, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "movsx   edx, al", "mov     rax, [rbp+valid_suffixes]", "mov     esi, edx; c", "mov     rdi, rax; s", "call    _strchr", "test    rax, rax", "jz      short loc_B03C"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "movsx~edx,al", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jz~FOO"]], [1, 0, 4, 0, 0, 1, 1, 0, 17, 0, 0.0, ["or      [rbp+err], 2"], ["or~[rbp+0],0"]], [0, 0, 5, 1, 0, 14, 2, 1, 16, 0, 0.03352130325814536, ["mov     eax, [rbp+overflow]", "or      [rbp+err], eax", "mov     rax, [rbp+p]", "mov     rdx, [rax]", "mov     eax, [rbp+suffixes]", "cdqe", "add     rdx, rax", "mov     rax, [rbp+p]", "mov     [rax], rdx", "mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_B32D"], ["mov~eax,[rbp+0]", "or~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~eax,[rbp+0]", "cdqe~", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [2, 0, 20, 1, 0, 7, 0, 1, 13, 0, 0.1694862155388471, ["mov     rax, [rbp+p]; jumptable 000000000000B118 default case", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 42h ; 'B'; switch 54 cases", "cmp     eax, 35h ; '5'", "ja      loc_B2EC; jumptable 000000000000B1B2 default case"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [2, 0, 31, 1, 0, 7, 0, 1, 12, 0, 0.1694862155388471, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 45h ; 'E'; switch 48 cases", "cmp     eax, 2Fh ; '/'", "ja      loc_B178; jumptable 000000000000B118 default case"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 0, 30, 1, 0, 8, 0, 1, 13, 0, 0.05921052631578947, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_13160", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_13160", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 29, 0, 1, 6, 1, 2, 14, 0, 0.05513784461152882, ["mov     rax, [rbp+valid_suffixes]; jumptable 000000000000B118 cases 69,71,75,77,80,84,89,90,103,107,109,116", "mov     esi, 30h ; '0'; c", "mov     rdi, rax; s", "call    _strchr", "test    rax, rax", "jz      short loc_B178; jumptable 000000000000B118 default case"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jz~FOO"]], [0, 0, 21, 0, 0, 1, 0, 1, 18, 0, 0.005482456140350877, ["jmp     short loc_B178; jumptable 000000000000B118 default case"], ["jmp~FOO"]], [2, 0, 21, 1, 0, 3, 0, 1, 16, 0, 0.01206140350877193, ["mov     [rbp+base], 3E8h", "add     [rbp+suffixes], 1", "jmp     short loc_B178; jumptable 000000000000B118 default case"], ["mov~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [0, 0, 21, 0, 0, 1, 0, 0, 18, 0, 0.015350877192982455, ["nop"], ["nop"]], [1, 0, 6, 0, 0, 2, 0, 1, 15, 0, 0.002088554720133668, ["mov     [rbp+overflow], 0; jumptable 000000000000B1B2 case 99", "jmp     loc_B2FF"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 19, 1, 0, 8, 0, 1, 14, 0, 0.1444235588972431, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_13220", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_13220", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 case 80", "lea     rax, [rbp+tmp]", "mov     edx, 5; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     short loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 51, 0, 1, 9, 0, 2, 4, 0, 0.07988721804511278, ["mov     [rbp+p], rax", "call    ___errno_location", "mov     dword ptr [rax], 0", "mov     rax, [rbp+s]", "mov     [rbp+q], rax", "mov     rax, [rbp+q]", "movzx   eax, byte ptr [rax]", "mov     [rbp+ch_0], al", "jmp     short loc_AFA5"], ["mov~[rbp+0],rax", "call~FOO", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "jmp~FOO"]], [0, 0, 52, 0, 0, 2, 0, 1, 3, 0, 0.02443609022556391, ["lea     rax, [rbp+t_ptr]", "jmp     short loc_AF73"], ["lea~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 52, 0, 0, 1, 0, 0, 3, 0, 0.02443609022556391, ["mov     rax, [rbp+ptr]"], ["mov~rax,[rbp+0]"]], [2, 0, 28, 1, 0, 7, 0, 1, 15, 0, 0.05043859649122807, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "cmp     eax, 44h ; 'D'", "jz      short loc_B16A"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "add~rax,0", "movzx~eax,<TAG>", "movsx~eax,al", "cmp~eax,0", "jz~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 cases 84,116", "lea     rax, [rbp+tmp]", "mov     edx, 4; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     short loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 51, 1, 0, 4, 0, 0, 6, 0, 0.0, ["add     [rbp+q], 1", "mov     rax, [rbp+q]", "movzx   eax, byte ptr [rax]", "mov     [rbp+ch_0], al"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al"]], [1, 0, 51, 2, 1, 10, 2, 2, 5, 0, 0.10933583959899748, ["call    ___ctype_b_loc", "mov     rax, [rax]", "movzx   edx, [rbp+ch_0]", "add     rdx, rdx", "add     rax, rdx", "movzx   eax, word ptr [rax]", "movzx   eax, ax", "and     eax, 2000h", "test    eax, eax", "jnz     short loc_AF96"], ["call~FOO", "mov~rax,<TAG>", "movzx~edx,[rbp+0]", "add~rdx,rdx", "add~rax,rdx", "movzx~eax,<TAG>", "movzx~eax,ax", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [0, 1, 6, 0, 1, 6, 0, 2, 15, 0, 0.002088554720133668, ["lea     rax, [rbp+tmp]; jumptable 000000000000B1B2 case 98", "mov     esi, 200h; scale_factor", "mov     rdi, rax; x", "call    bkm_scale", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["lea~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 1, 6, 0, 1, 6, 0, 2, 15, 0, 0.002088554720133668, ["lea     rax, [rbp+tmp]; jumptable 000000000000B1B2 case 66", "mov     esi, 400h; scale_factor", "mov     rdi, rax; x", "call    bkm_scale", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["lea~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 case 69", "lea     rax, [rbp+tmp]", "mov     edx, 6; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 cases 71,103", "lea     rax, [rbp+tmp]", "mov     edx, 3; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 cases 75,107", "lea     rax, [rbp+tmp]", "mov     edx, 1; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 cases 77,109", "lea     rax, [rbp+tmp]", "mov     edx, 2; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 6, 0, 2, 15, 0, 0.002088554720133668, ["lea     rax, [rbp+tmp]; jumptable 000000000000B1B2 case 119", "mov     esi, 2; scale_factor", "mov     rdi, rax; x", "call    bkm_scale", "mov     [rbp+overflow], eax", "jmp     short loc_B2FF"], ["lea~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 case 89", "lea     rax, [rbp+tmp]", "mov     edx, 8; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     short loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 1, 8, 0, 2, 15, 0, 0.002088554720133668, ["mov     ecx, [rbp+base]; jumptable 000000000000B1B2 case 90", "lea     rax, [rbp+tmp]", "mov     edx, 7; power", "mov     esi, ecx; base", "mov     rdi, rax; x", "call    bkm_scale_by_power", "mov     [rbp+overflow], eax", "jmp     short loc_B2FF"], ["mov~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 7, 0, 0.008458646616541353, ["mov     eax, 4", "jmp     loc_B33B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 10, 0, 0.0014097744360902255, ["mov     eax, 4", "jmp     loc_B33B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 6, 1, 1, 12, 0, 0.0009398496240601503, ["mov     rdx, [rbp+tmp]", "mov     rax, [rbp+val]", "mov     [rax], rdx", "mov     eax, [rbp+err]", "or      eax, 2", "jmp     loc_B33B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,[rbp+0]", "or~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 6, 1, 1, 14, 0, 0.012218045112781954, ["mov     rdx, [rbp+tmp]; jumptable 000000000000B1B2 default case", "mov     rax, [rbp+val]", "mov     [rax], rdx", "mov     eax, [rbp+err]", "or      eax, 2", "jmp     short loc_B33B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,[rbp+0]", "or~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 4, 0, 0, 11, 0, 0.014097744360902255, ["mov     rdx, [rbp+tmp]", "mov     rax, [rbp+val]", "mov     [rax], rdx", "mov     eax, [rbp+err]"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,[rbp+0]"]], [0, 0, 34, 0, 0, 5, 1, 1, 10, 0, 0.17481203007518797, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      loc_B32D"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 37, 0, 0, 2, 0, 1, 11, 0, 0.03195488721804511, ["mov     [rbp+tmp], 1", "jmp     short loc_B06E"], ["mov~[rbp+0],0", "jmp~FOO"]], [3, 0, 57, 1, 0, 14, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+s], rdi", "mov     [rbp+ptr], rsi", "mov     [rbp+strtol_base], edx", "mov     [rbp+val], rcx", "mov     [rbp+valid_suffixes], r8", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+err], 0", "cmp     [rbp+strtol_base], 0", "js      short loc_AF43"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 9, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 56, 0, 0, 2, 0, 1, 1, 0, 0.017230576441102756, ["cmp     [rbp+strtol_base], 24h ; '$'", "jle     short loc_AF62"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 1, 33, 0, 1, 12, 1, 2, 11, 0, 0.17261904761904762, ["mov     [rbp+base], 400h", "mov     [rbp+suffixes], 1", "mov     rax, [rbp+p]", "mov     rax, [rax]", "movzx   eax, byte ptr [rax]", "movsx   edx, al", "mov     rax, [rbp+valid_suffixes]", "mov     esi, edx; c", "mov     rdi, rax; s", "call    _strchr", "test    rax, rax", "jnz     short loc_B0DE"], ["mov~[rbp+0],<STR>", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "movzx~eax,<TAG>", "movsx~edx,al", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jnz~FOO"]], [1, 0, 27, 0, 0, 2, 0, 1, 16, 0, 0.03759398496240601, ["cmp     eax, 69h ; 'i'", "jz      short loc_B152"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 48, 0, 0, 2, 0, 1, 6, 0, 0.12030075187969924, ["cmp     [rbp+ch_0], 2Dh ; '-'", "jnz     short loc_AFD6"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 23, 1, 0, 6, 0, 1, 17, 0, 0.017857142857142856, ["mov     rax, [rbp+p]", "mov     rax, [rax]", "add     rax, 2", "movzx   eax, byte ptr [rax]", "cmp     al, 42h ; 'B'", "jnz     short loc_B177"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "add~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 23, 0, 0, 2, 0, 1, 17, 0, 0.012531328320802004, ["cmp     eax, 42h ; 'B'", "jz      short loc_B16A"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 40, 0, 1, 4, 1, 2, 8, 0, 0.11591478696741854, ["call    ___errno_location", "mov     eax, [rax]", "test    eax, eax", "jz      short loc_B06E"], ["call~FOO", "mov~eax,<TAG>", "test~eax,eax", "jz~FOO"]], [1, 0, 39, 0, 1, 4, 0, 2, 9, 0, 0.0073621553884711775, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 22h ; '\"'", "jz      short loc_B067"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 1, 0, 0.0, ["lea     rcx, __PRETTY_FUNCTION___3655; \"xstrtoumax\"", "mov     edx, 54h ; 'T'; line", "lea     rsi, file; \"lib/xstrtol.c\"", "lea     rdi, assertion; \"0 <= strtol_base && strtol_base <= 36\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 54, 0, 0, 2, 0, 1, 2, 0, 0.03383458646616541, ["cmp     [rbp+ptr], 0", "jnz     short loc_AF6F"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 22, 1, 0, 2, 0, 1, 18, 0, 0.0, ["add     [rbp+suffixes], 2", "jmp     short loc_B177"], ["add~[rbp+0],0", "jmp~FOO"]], [1, 0, 37, 0, 0, 1, 0, 0, 10, 0, 0.010651629072681704, ["mov     [rbp+err], 1"], ["mov~[rbp+0],0"]]], "func_feature": [21, 15, 70, 1, 58, 91, 2, 301, 0.03731, 6, 13], "succs": [[], [0, 45], [6, 7], [2, 52], [1], [42, 4], [1], [8, 6], [43, 6], [41], [9, 41], [40, 19], [11, 13], [11, 14], [24, 11], [11], [11], [11], [10], [32, 33, 34, 35, 36, 40, 18, 20, 25, 28, 29, 30, 31], [10], [27], [21], [21], [48, 16], [10], [27], [49, 26], [10], [10], [10], [10], [10], [10], [10], [10], [10], [1], [1], [1], [1], [1], [41, 47], [5], [54, 46], [], [54, 55], [12, 39], [50, 51], [3, 37], [56, 17], [16, 15], [53, 5], [57, 38], [], [22, 23], [17], [5]], "fname": "xstrtoumax", "n_num": 58}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 0, 1, 4, 0, 2, 0, 0, 0.0784313725490196, ["call    ___errno_location", "mov     dword ptr [rax], 4Bh ; 'K'", "mov     eax, 0", "jmp     loc_B4E0"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 2, 3, 0.23529411764705882, ["cmp     [rbp+totalsize], 0FFFFFFFFFFFFFFFFh", "jz      short loc_B411"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 11, 0, 0, 2, 0, 0, 3, 3, 0.16013071895424838, ["cmp     [rbp+totalsize], 7FFFFFFFh", "jbe     short loc_B426"], ["cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 9, 2, 2, 15, 0, 2, 8, 4, 0.06209150326797386, ["mov     rax, [rax]", "mov     [rbp+next_0], rax", "mov     rax, [rbp+next_0]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+len], rax", "mov     rdx, [rbp+len]; n", "mov     rcx, [rbp+next_0]", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rax, [rbp+len]", "add     [rbp+p], rax", "sub     [rbp+i], 1"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "sub~[rbp+0],0"]], [0, 0, 9, 1, 0, 12, 0, 1, 7, 5, 0.026143790849673203, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_B48F"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 9, 0, 0, 5, 0, 0, 7, 5, 0.026143790849673203, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.10457516339869281, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_B4F4"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 1, 4, 0.24836601307189543, ["cmp     [rbp+i], 0", "jnz     short loc_B3A0"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 18, 0, 0, 3, 0, 1, 2, 7, 0.032679738562091505, ["mov     eax, [rbp+ap.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B3BF"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [0, 0, 18, 0, 0, 3, 0, 0, 3, 6, 0.02777777777777778, ["mov     rax, [rbp+ap.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+ap.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 9, 1, 1, 10, 0, 2, 4, 4, 0.1568627450980392, ["mov     rax, [rbp+totalsize]", "add     rax, 1", "mov     rdi, rax; n", "call    xmalloc", "mov     [rbp+result], rax", "mov     rax, [rbp+result]", "mov     [rbp+p], rax", "mov     rax, [rbp+argcount]", "mov     [rbp+i], rax", "jmp     short loc_B4CA"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 6, 6, 0.11111111111111112, ["mov     rax, [rbp+args]", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B47B"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 3, 0, 0, 3, 0, 0, 6, 2, 0.058823529411764705, ["mov     rax, [rbp+p]", "mov     byte ptr [rax], 0", "mov     rax, [rbp+result]"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]"]], [1, 0, 18, 1, 2, 12, 0, 2, 4, 5, 0.1503267973856209, ["mov     rax, [rax]", "mov     [rbp+next], rax", "mov     rax, [rbp+next]", "mov     rdi, rax; s", "call    _strlen", "mov     rdx, rax", "mov     rax, [rbp+totalsize]", "mov     rsi, rdx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+totalsize], rax", "sub     [rbp+i], 1"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "sub~[rbp+0],0"]], [1, 0, 18, 2, 0, 8, 0, 1, 3, 6, 0.02777777777777778, ["mov     rax, [rbp+ap.reg_save_area]", "mov     edx, [rbp+ap.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+ap.gp_offset]", "add     edx, 8", "mov     [rbp+ap.gp_offset], edx", "jmp     short loc_B3CB"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [2, 0, 18, 1, 0, 20, 1, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+argcount], rdi", "mov     [rbp+args], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+totalsize], 0", "lea     rcx, [rbp+ap]", "mov     rsi, [rbp+args]", "mov     rax, [rsi]", "mov     rdx, [rsi+8]", "mov     [rcx], rax", "mov     [rcx+8], rdx", "mov     rax, [rsi+10h]", "mov     [rcx+10h], rax", "mov     rax, [rbp+argcount]", "mov     [rbp+i], rax", "jmp     short loc_B3F9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "lea~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,[rsi+0]", "mov~<TAG>,rax", "mov~[rcx+0],rdx", "mov~rax,[rsi+0]", "mov~[rcx+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 5, 3, 0.23202614379084968, ["cmp     [rbp+i], 0", "jnz     loc_B44C"], ["cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [7, 2, 18, 1, 19, 24, 1, 113, 0.0915, 1, 8], "succs": [[7], [0, 2], [0, 11], [18], [3], [3], [], [17, 6], [1, 9], [10, 15], [14], [18], [4, 5], [7], [8], [14], [8], [], [12, 13]], "fname": "xstrcat", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 15, 1, 0, 11, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+format], rdi", "mov     [rbp+args], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+argcount], 0", "mov     rax, [rbp+format]", "mov     [rbp+f], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 3, 0, 1, 6, 0, 2, 0, 2, 0.05, ["mov     rdx, [rbp+args]", "mov     rax, [rbp+argcount]", "mov     rsi, rdx; args", "mov     rdi, rax; argcount", "call    xstrcat", "jmp     short loc_B5A7"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 15, 0, 0, 4, 1, 1, 0, 3, 0.15476190476190477, ["mov     rax, [rbp+f]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_B545"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.014285714285714287, ["mov     eax, 0", "jmp     short loc_B5A7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 5, 0, 1, 4, 0, 2, 0, 3, 0.0761904761904762, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 0Ch", "jnz     short loc_B59C"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 7, 0, 1, 8, 1, 1, 0, 3, 0.18333333333333335, ["mov     rdx, [rbp+args]; args", "mov     rcx, [rbp+format]", "lea     rax, [rbp+result]", "mov     rsi, rcx; format", "mov     rdi, rax; resultp", "call    rpl_vasprintf", "test    eax, eax", "jns     short loc_B5A3"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 8, 0, 0, 2, 0, 1, 0, 4, 0.10952380952380954, ["nop", "jmp     short loc_B570"], ["nop", "jmp~FOO"]], [0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0.030952380952380953, ["nop"], ["nop"]], [2, 0, 15, 2, 0, 3, 0, 1, 0, 4, 0.03571428571428572, ["add     [rbp+f], 1", "add     [rbp+argcount], 1", "jmp     short loc_B525"], ["add~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 15, 1, 0, 5, 0, 1, 0, 5, 0.04285714285714286, ["add     [rbp+f], 1", "mov     rax, [rbp+f]", "movzx   eax, byte ptr [rax]", "cmp     al, 73h ; 's'", "jnz     short loc_B56F"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 15, 0, 0, 4, 0, 1, 0, 5, 0.1285714285714286, ["mov     rax, [rbp+f]", "movzx   eax, byte ptr [rax]", "cmp     al, 25h ; '%'", "jnz     short loc_B56C"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 0, 2, 0.0642857142857143, ["mov     rax, [rbp+result]"], ["mov~rax,[rbp+0]"]], [0, 0, 2, 0, 0, 3, 1, 1, 0, 1, 0.1142857142857143, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_B5BB"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 4, 14, 1, 16, 19, 1, 58, 0.0628, 1, 4], "succs": [[2], [12], [1, 10], [12], [3, 14], [11, 4], [5], [5], [2], [8, 7], [9, 6], [12], [13, 15], [], [], []], "fname": "xvasprintf", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 4, 0, 1, 3, 0, 1, 0, 0, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax"]], [0, 0, 5, 0, 1, 5, 1, 2, 2, 3, 0.09027777777777778, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    rpl_fflush", "test    eax, eax", "jz      short loc_B647"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 7, 0, 1, 5, 1, 2, 1, 4, 0.08333333333333333, ["mov     rax, [rbp+fp]", "mov     rdi, rax; fp", "call    ___freading", "test    eax, eax", "jz      short loc_B62D"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 1, 9, 1, 1, 12, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fp], rdi", "mov     [rbp+saved_errno], 0", "mov     [rbp+result], 0", "mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "jns     short loc_B5FA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 2, 0, 1, 5, 0, 1, 4, 2, 0.0, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     [rbp+result], 0FFFFFFFFh"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~[rbp+0],0"]], [1, 0, 3, 0, 1, 6, 0, 2, 3, 2, 0.19444444444444442, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fclose", "mov     [rbp+result], eax", "cmp     [rbp+saved_errno], 0", "jz      short loc_B670"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 6, 0, 2, 9, 0, 3, 2, 3, 0.048611111111111105, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, eax; fd", "call    _lseek", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_B647"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "call~FOO", "cmp~rax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.08333333333333333, ["mov     eax, [rbp+result]"], ["mov~eax,[rbp+0]"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 4, 0, 2, 1, 1, 0.013888888888888888, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fclose", "jmp     short locret_B673"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]]], "func_feature": [9, 2, 14, 0, 10, 14, 1, 52, 0.05139, 0, 1], "succs": [[5], [0, 5], [1, 6], [9, 2], [7], [4, 7], [1, 5], [8], [], [8]], "fname": "rpl_fclose", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 1, 13, 0, 0, 2, 0, 1, 0, 0, 0.00977891156462585, ["cmp     eax, 400h", "jz      short loc_B8C5"], ["cmp~eax,<STR>", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 9, 6, 0.013605442176870748, ["cmp     eax, 402h", "jz      short loc_B8C5"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 4, 1, 1, 5, 1, 0.03996598639455782, ["mov     eax, [rbp+result]", "mov     rcx, [rbp+var_B8]", "xor     rcx, fs:28h", "jz      short locret_B9C5"], ["mov~eax,[rbp+0]", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_B935"], ["jmp~FOO"]], [1, 0, 36, 0, 0, 3, 0, 1, 4, 4, 0.07142857142857142, ["mov     eax, [rbp+action]", "cmp     eax, 0Bh", "jz      loc_B8A0"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 37, 0, 0, 1, 0, 1, 3, 5, 0.057823129251700675, ["jmp     loc_B7FB"], ["jmp~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 7, 5, 0.028273809523809524, ["cmp     eax, 409h", "jz      short loc_B8C5"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 21, 0, 0, 2, 0, 1, 6, 6, 0.047619047619047616, ["cmp     eax, 407h", "jg      short loc_B887"], ["cmp~eax,0", "jg~FOO"]], [1, 0, 35, 0, 0, 2, 0, 1, 5, 5, 0.07653061224489796, ["cmp     eax, 0Bh", "jg      short loc_B85F"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 3, 0, 1, 9, 0, 2, 4, 2, 0.007653061224489796, ["mov     eax, [rax]", "mov     [rbp+target], eax", "mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax", "jmp     loc_B9A8"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 2, 0, 8, 0, 1, 3, 3, 0.003401360544217687, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_B76B"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.003401360544217687, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 25, 0, 0, 2, 0, 1, 6, 4, 0.03784013605442177, ["cmp     eax, 3", "jz      loc_B8A0"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 8, 4, 0.022321428571428572, ["cmp     eax, 409h", "jl      short loc_B8A0"], ["cmp~eax,0", "jl~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 9, 4, 0.017006802721088433, ["cmp     eax, 40Ah", "jnz     loc_B935"], ["cmp~eax,0", "jnz~FOO"]], [1, 0, 24, 0, 0, 2, 0, 1, 7, 5, 0.04081632653061224, ["cmp     eax, 3", "jg      short loc_B838"], ["cmp~eax,0", "jg~FOO"]], [1, 0, 6, 0, 0, 3, 0, 1, 3, 4, 0.006377551020408163, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B7C1"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 42, 0, 0, 2, 0, 1, 2, 5, 0.04974489795918367, ["cmp     eax, 406h", "jz      short loc_B793"], ["cmp~eax,0", "jz~FOO"]], [3, 0, 47, 0, 0, 13, 2, 1, 1, 5, 0.03996598639455782, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+result], 0FFFFFFFFh", "mov     [rbp+arg.gp_offset], 10h", "mov     [rbp+arg.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+arg.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+arg.reg_save_area], rax", "mov     eax, [rbp+action]", "test    eax, eax", "jz      short loc_B72B"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [1, 0, 49, 1, 0, 11, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 100h", "mov     [rbp+fd], edi", "mov     [rbp+action], esi", "mov     [rbp+var_A0], rdx", "mov     [rbp+var_98], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_B6CC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 48, 0, 0, 8, 0, 0, 1, 6, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [1, 0, 16, 0, 0, 2, 0, 1, 8, 4, 0.015306122448979591, ["cmp     eax, 1", "jz      short loc_B8A0"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 9, 6, 0.013605442176870748, ["cmp     eax, 1", "jg      loc_B8C5"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 6, 2, 0.04336734693877551, ["nop"], ["nop"]], [1, 0, 4, 0, 1, 8, 0, 2, 5, 3, 0.026077097505668934, ["mov     edx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, edx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "jmp     loc_B9A7"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 0, 1, 11, 0, 2, 10, 3, 0.016439909297052156, ["mov     eax, [rax]", "mov     [rbp+x], eax", "mov     edx, [rbp+x]", "mov     ecx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, ecx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "jmp     short loc_B9A7"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,ecx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 0, 1, 11, 0, 1, 12, 3, 0.011904761904761904, ["mov     rax, [rax]", "mov     [rbp+p], rax", "mov     rdx, [rbp+p]", "mov     ecx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, ecx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "nop"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,ecx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "nop"]], [0, 0, 13, 0, 0, 2, 1, 1, 10, 6, 0.00977891156462585, ["test    eax, eax", "jz      loc_B8C5"], ["test~eax,eax", "jz~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_B935"], ["jmp~FOO"]], [1, 0, 6, 0, 0, 3, 0, 1, 2, 4, 0.007653061224489796, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B759"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 19, 0, 0, 2, 0, 1, 8, 6, 0.02806122448979592, ["cmp     eax, 8", "jz      loc_B8C5"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 7, 0, 0, 3, 0, 1, 10, 5, 0.04379251700680272, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B963"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_B935"], ["jmp~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 12, 6, 0.003401360544217687, ["jmp     loc_B935"], ["jmp~FOO"]], [1, 0, 4, 2, 0, 8, 0, 1, 4, 3, 0.00233843537414966, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_B7D3"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 10, 4, 0.012471655328798185, ["cmp     eax, 9", "jz      short loc_B8A0"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 16, 0, 0, 2, 0, 1, 8, 4, 0.01636904761904762, ["cmp     eax, 401h", "jz      short loc_B8A0"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 9, 5, 0.02565192743764172, ["cmp     eax, 8", "jg      short loc_B850"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 5, 2, 0, 8, 0, 1, 9, 4, 0.011621315192743764, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_B905"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 5, 0, 0, 3, 0, 0, 9, 4, 0.011621315192743764, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 13, 0, 0, 2, 0, 1, 10, 6, 0.011479591836734693, ["cmp     eax, 4", "jz      short loc_B8C5"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 4, 3, 0.00233843537414966, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 7, 0, 0, 3, 0, 1, 8, 5, 0.040674603174603176, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_B8F3"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 13, 0, 0, 2, 0, 1, 11, 6, 0.008503401360544217, ["cmp     eax, 0Ah", "jz      short loc_B8C5"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 17, 0, 0, 2, 0, 1, 7, 5, 0.02147108843537415, ["cmp     eax, 406h", "jge     short loc_B8C5"], ["cmp~eax,0", "jge~FOO"]], [1, 0, 5, 2, 0, 8, 0, 1, 11, 4, 0.010629251700680272, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_B975"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 5, 0, 0, 3, 0, 0, 11, 4, 0.010629251700680272, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [0, 0, 3, 0, 1, 9, 0, 2, 5, 2, 0.00510204081632653, ["mov     eax, [rax]", "mov     [rbp+target_0], eax", "mov     edx, [rbp+target_0]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD_CLOEXEC", "mov     [rbp+result], eax", "jmp     loc_B9A8"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]]], "func_feature": [6, 5, 47, 14, 50, 76, 4, 192, 0.02009, 1, 9], "succs": [[44, 4], [0, 44], [], [2, 39], [32], [9, 25], [5], [44, 14], [46, 7], [8, 13], [3], [10], [10], [16, 25], [25, 15], [32, 25], [22, 31], [43, 35], [17, 6], [18, 30], [19, 21], [19], [25, 23], [44, 28], [3], [24], [24], [24], [44, 29], [32], [11, 12], [44, 38], [48, 47], [32], [32], [49], [25, 45], [25, 1], [42, 36], [], [26], [26], [33, 44], [49], [40, 41], [34, 44], [44, 37], [27], [27], [3]], "fname": "rpl_fcntl", "n_num": 50}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 1, 0, 1, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+target], esi", "mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, 0; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "mov     eax, [rbp+result]", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 3, 15, 0.0, 0, 1], "succs": [[]], "fname": "rpl_fcntl_DUPFD", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 6, 0, 0, 2, 0, 1, 0, 0, 0.06818181818181818, ["mov     cs:have_dupfd_cloexec_3019, 1", "jmp     short loc_BA7A"], ["mov~<TAG>,0", "jmp~FOO"]], [3, 0, 10, 0, 1, 9, 0, 1, 1, 3, 0.030303030303030304, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, 406h; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "jns     short loc_BA38"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 9, 0, 1, 4, 0, 2, 2, 3, 0.030303030303030304, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jz      short loc_BA44"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 3, 0, 1, 8, 0, 2, 4, 2, 0.13636363636363635, ["mov     eax, [rbp+result]", "mov     esi, 1; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+flags], eax", "cmp     [rbp+flags], 0", "js      short loc_BAC9"], ["mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 4, 0, 0, 3, 0, 1, 3, 1, 0.18181818181818182, ["mov     eax, cs:have_dupfd_cloexec_3019", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_BAF1"], ["mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 4, 2, 0.0, ["mov     cs:have_dupfd_cloexec_3019, 0FFFFFFFFh", "jmp     short loc_BA7A"], ["mov~<TAG>,0", "jmp~FOO"]], [1, 0, 7, 0, 1, 8, 0, 2, 3, 2, 0.045454545454545456, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "js      short loc_BA7A"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [4, 0, 2, 0, 1, 10, 1, 2, 5, 1, 0.003787878787878788, ["mov     eax, [rbp+flags]", "or      eax, 1", "mov     edx, eax", "mov     eax, [rbp+result]", "mov     esi, 2; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_BAF1"], ["mov~eax,[rbp+0]", "or~eax,0", "mov~edx,eax", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "cmp~eax,0", "jnz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 2, 1, 0.26515151515151514, ["cmp     [rbp+result], 0", "js      short loc_BAF1"], ["cmp~[rbp+0],0", "js~FOO"]], [0, 1, 12, 1, 0, 8, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+target], esi", "mov     eax, cs:have_dupfd_cloexec_3019", "test    eax, eax", "js      short loc_BA68"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~eax,<TAG>", "test~eax,eax", "js~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     eax, [rbp+result]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]], [1, 0, 1, 0, 3, 11, 0, 3, 5, 1, 0.003787878787878788, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     eax, [rbp+result]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     [rbp+result], 0FFFFFFFFh"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~[rbp+0],0"]], [0, 0, 6, 0, 1, 6, 0, 1, 1, 2, 0.045454545454545456, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax"]]], "func_feature": [9, 2, 18, 0, 13, 20, 1, 76, 0.06235, 1, 1], "succs": [[8], [0, 2], [0, 6], [11, 7], [10, 3], [8], [8, 5], [10, 11], [10, 4], [1, 12], [], [10], [8]], "fname": "rpl_fcntl_DUPFD_CLOEXEC", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [2, 0, 2, 1, 0, 9, 2, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fp], rdi", "mov     rax, [rbp+fp]", "mov     eax, [rax]", "and     eax, 100h", "test    eax, eax", "jz      short loc_BB27"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 1, 0, 1, 5, 0, 1, 1, 0, 0.0, ["mov     rax, [rbp+fp]", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     rdi, rax; fp", "call    rpl_fseeko"], ["mov~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO"]]], "func_feature": [1, 2, 2, 0, 3, 3, 1, 17, 0.0, 0, 1], "succs": [[], [0, 2], [0]], "fname": "clear_ungetc_buffer_preserving_position", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 1, 4, 0, 2, 0, 0, 0.125, ["mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _fflush", "jmp     short locret_BB73"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [2, 0, 4, 1, 0, 6, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+stream], rdi", "cmp     [rbp+stream], 0", "jz      short loc_BB4D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 3, 0, 1, 5, 1, 2, 1, 2, 0.08333333333333333, ["mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    ___freading", "test    eax, eax", "jnz     short loc_BB5B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 2, 6, 0, 2, 2, 1, 0.041666666666666664, ["mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    clear_ungetc_buffer_preserving_position", "mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _fflush"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]]], "func_feature": [4, 1, 7, 0, 5, 6, 1, 23, 0.05, 0, 1], "succs": [[3], [0, 2], [0, 4], [], [3]], "fname": "rpl_fflush", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 2, 12, 0, 3, 0, 0, 0.14285714285714285, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     ecx, eax", "mov     edx, [rbp+whence]; whence", "mov     rax, [rbp+offset]", "mov     rsi, rax; offset", "mov     edi, ecx; fd", "call    _lseek", "mov     [rbp+pos], rax", "cmp     [rbp+pos], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_BBF0"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~ecx,eax", "mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,ecx", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 2, 2, 0.14285714285714285, ["mov     rax, [rbp+fp]", "mov     rax, [rax+48h]", "test    rax, rax", "jnz     short loc_BC17"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 1, 0, 1, 6, 0, 1, 1, 1, 0.07142857142857142, ["mov     edx, [rbp+whence]; whence", "mov     rcx, [rbp+offset]", "mov     rax, [rbp+fp]", "mov     rsi, rcx; off", "mov     rdi, rax; stream", "call    _fseeko"], ["mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 7, 1, 0, 12, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fp], rdi", "mov     [rbp+offset], rsi", "mov     [rbp+whence], edx", "mov     rax, [rbp+fp]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+fp]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_BC17"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 6, 0, 0, 6, 0, 1, 1, 2, 0.09523809523809523, ["mov     rax, [rbp+fp]", "mov     rdx, [rax+28h]", "mov     rax, [rbp+fp]", "mov     rax, [rax+20h]", "cmp     rdx, rax", "jnz     short loc_BC17"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.011904761904761904, ["mov     eax, 0FFFFFFFFh", "jmp     short locret_BC2D"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 1, 0, 0, 11, 1, 1, 4, 1, 0.011904761904761904, ["mov     rax, [rbp+fp]", "mov     eax, [rax]", "and     eax, 0FFFFFFEFh", "mov     edx, eax", "mov     rax, [rbp+fp]", "mov     [rax], edx", "mov     rax, [rbp+fp]", "mov     rdx, [rbp+pos]", "mov     [rax+90h], rdx", "mov     eax, 0", "jmp     short locret_BC2D"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0", "jmp~FOO"]]], "func_feature": [3, 2, 9, 0, 8, 11, 1, 55, 0.05952, 0, 1], "succs": [[6, 7], [0, 2], [5], [2, 4], [1, 2], [], [5], [5]], "fname": "rpl_fseeko", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0.0, ["lea     rax, [rbp+wc]", "mov     [rbp+pwc], rax"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax"]], [2, 0, 9, 1, 0, 12, 1, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+pwc], rdi", "mov     [rbp+s], rsi", "mov     [rbp+n], rdx", "mov     [rbp+ps], rcx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+pwc], 0", "jnz     short loc_BC65"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.1875, ["mov     rax, [rbp+ret]"], ["mov~rax,[rbp+0]"]], [1, 0, 7, 0, 1, 9, 0, 1, 1, 3, 0.19444444444444442, ["mov     rcx, [rbp+ps]; p", "mov     rdx, [rbp+n]; n", "mov     rsi, [rbp+s]; s", "mov     rax, [rbp+pwc]", "mov     rdi, rax; pwc", "call    _mbrtowc", "mov     [rbp+ret], rax", "cmp     [rbp+ret], 0FFFFFFFFFFFFFFFDh", "jbe     short loc_BCBB"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 3, 0.08333333333333333, ["cmp     [rbp+n], 0", "jz      short loc_BCBB"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 5, 0, 1, 5, 2, 2, 3, 3, 0.05555555555555555, ["mov     edi, 0; category", "call    hard_locale", "xor     eax, 1", "test    al, al", "jz      short loc_BCBB"], ["mov~edi,0", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.19444444444444442, ["mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_BCD3"], ["mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 8, 0, 1, 4, 2, 0.020833333333333332, ["mov     rax, [rbp+s]", "movzx   eax, byte ptr [rax]", "mov     [rbp+uc], al", "movzx   edx, [rbp+uc]", "mov     rax, [rbp+pwc]", "mov     [rax], edx", "mov     eax, 1", "jmp     short loc_BCBF"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 4, 8, 1, 10, 13, 1, 45, 0.07361, 1, 1], "succs": [[3], [0, 3], [6], [2, 4], [2, 5], [2, 7], [8, 9], [6], [], []], "fname": "rpl_mbrtowc", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.07142857142857142, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_BD5C"], ["mov~eax,0", "jmp~FOO"]], [3, 0, 7, 1, 1, 18, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+resultp], rdi", "mov     [rbp+format], rsi", "mov     [rbp+args], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rcx, [rbp+args]; args", "mov     rdx, [rbp+format]; format", "lea     rax, [rbp+length]", "mov     rsi, rax; lengthp", "mov     edi, 0; resultbuf", "call    vasnprintf", "mov     [rbp+result], rax", "cmp     [rbp+result], 0", "jnz     short loc_BD23"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.23809523809523808, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_BD70"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [2, 0, 3, 0, 2, 7, 0, 3, 2, 2, 0.03571428571428571, ["mov     rax, [rbp+result]", "mov     rdi, rax; ptr", "call    _free", "call    ___errno_location", "mov     dword ptr [rax], 4Bh ; 'K'", "mov     eax, 0FFFFFFFFh", "jmp     short loc_BD5C"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 4, 0, 0, 2, 2, 0.03571428571428571, ["mov     rax, [rbp+resultp]", "mov     rdx, [rbp+result]", "mov     [rax], rdx", "mov     rax, [rbp+length]"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]"]], [1, 0, 5, 0, 0, 3, 0, 0, 1, 3, 0.047619047619047616, ["mov     rax, [rbp+length]", "cmp     rax, 7FFFFFFFh", "jbe     short loc_BD4D"], ["mov~rax,[rbp+0]", "cmp~rax,0", "jbe~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 2, 8, 1, 8, 9, 1, 40, 0.05357, 1, 1], "succs": [[3], [0, 6], [], [2, 7], [3], [3], [4, 5], []], "fname": "rpl_vasprintf", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     edi, 1; status", "call    usage"], ["push~rbp", "mov~rbp,rsp", "mov~edi,0", "call~FOO"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 4, 0.0, 0, 0], "succs": [[]], "fname": "__argmatch_die", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.15384615384615385, ["cmp     [rbp+ambiguous], 0", "jz      short loc_BEAC"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 1, 0, 7, 1, 1, 1, 3, 0.4395604395604396, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_BDC4"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 4, 6, 0.19230769230769232, ["cmp     [rbp+matchind], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_BE33"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 14, 1, 1, 9, 0, 2, 3, 2, 0.23626373626373628, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; s", "call    _strlen", "cmp     [rbp+arglen], rax", "jnz     short loc_BE22"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.024725274725274728, ["mov     rax, 0FFFFFFFFFFFFFFFEh", "jmp     short locret_BEB0"], ["mov~rax,0", "jmp~FOO"]], [4, 0, 14, 1, 1, 15, 0, 2, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+arg], rdi", "mov     [rbp+arglist], rsi", "mov     [rbp+vallist], rdx", "mov     [rbp+valsize], rcx", "mov     [rbp+matchind], 0FFFFFFFFFFFFFFFFh", "mov     [rbp+ambiguous], 0", "mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+arglen], rax", "mov     [rbp+i], 0", "jmp     loc_BE7E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 14, 1, 0, 1, 0, 0, 3, 4, 0.34065934065934067, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 1, 0, 0, 1, 0, 0, 3, 1, 0.024725274725274728, ["mov     rax, [rbp+matchind]"], ["mov~rax,[rbp+0]"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.01098901098901099, ["mov     rax, [rbp+i]", "jmp     locret_BEB0"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 14, 1, 1, 12, 1, 2, 2, 3, 0.2527472527472528, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdx, [rbp+arglen]; n", "mov     rcx, [rbp+arg]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     loc_BE79"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 14, 0, 0, 3, 0, 1, 5, 5, 0.08241758241758243, ["mov     rax, [rbp+i]", "mov     [rbp+matchind], rax", "jmp     short loc_BE79"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 14, 2, 1, 16, 1, 2, 6, 5, 0.030219780219780223, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rsi, [rdx+rax]; s2", "mov     rax, [rbp+matchind]", "imul    rax, [rbp+valsize]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rax, [rbp+valsize]", "mov     rdx, rax; n", "mov     rdi, rcx; s1", "call    _memcmp", "test    eax, eax", "jz      short loc_BE79"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rdi,rcx", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 5, 6, 0.08241758241758243, ["cmp     [rbp+vallist], 0", "jz      short loc_BE75"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 14, 0, 0, 1, 0, 0, 6, 5, 0.030219780219780223, ["mov     [rbp+ambiguous], 1"], ["mov~[rbp+0],0"]]], "func_feature": [4, 3, 15, 0, 15, 21, 2, 77, 0.12674, 0, 7], "succs": [[4, 7], [0, 10], [11, 13], [9, 2], [8], [1], [1], [8], [], [8], [3, 6], [6], [6, 14], [12, 14], [6]], "fname": "argmatch", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[7, 0, 0, 1, 3, 25, 0, 3, 0, 0, 0.0, ["mov     [rbp+format], rax", "mov     rax, [rbp+context]", "mov     rsi, rax; arg", "mov     edi, 1; n", "call    quote_n", "mov     rbx, rax", "mov     rax, [rbp+value]", "mov     rdx, rax; arg", "mov     esi, 8; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rdx, rax", "mov     rax, [rbp+format]", "mov     r8, rbx", "mov     rcx, rdx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "nop", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 1, 0, 1, 3, 0, 2, 1, 0, 0.08333333333333333, ["lea     rdi, aInvalidArgumen; \"invalid argument %s for %s\"", "call    _gettext", "jmp     short loc_BEE8"], ["lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [0, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0.08333333333333333, ["lea     rdi, aAmbiguousArgum; \"ambiguous argument %s for %s\"", "call    _gettext"], ["lea~rdi,<TAG>", "call~FOO"]], [2, 0, 3, 1, 0, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+context], rdi", "mov     [rbp+value], rsi", "mov     [rbp+problem], rdx", "cmp     [rbp+problem], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_BEDC"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [5, 0, 7, 0, 4, 4, 1, 39, 0.04167, 2, 2], "succs": [[], [0], [0], [1, 2]], "fname": "argmatch_invalid", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[3, 0, 7, 1, 2, 16, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+arglist], rdi", "mov     [rbp+vallist], rsi", "mov     [rbp+valsize], rdx", "mov     [rbp+last_val], 0", "mov     rbx, cs:stderr@@GLIBC_2_2_5", "lea     rdi, aValidArguments; \"Valid arguments are:\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     [rbp+i], 0", "jmp     loc_C052"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 7, 1, 2, 13, 0, 2, 0, 3, 0.047619047619047616, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; arg", "call    quote", "mov     rdx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rsi, aS_1; \", %s\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 7, 1, 1, 12, 1, 2, 0, 4, 0.11904761904761904, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+valsize]; n", "mov     rax, [rbp+last_val]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jz      short loc_C011"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 7, 1, 0, 7, 1, 1, 0, 1, 0.5238095238095237, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_BF8A"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 7, 1, 0, 1, 0, 0, 0, 2, 0.3571428571428571, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [2, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Ah; c", "call    _putc_unlocked", "nop", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 7, 3, 2, 20, 0, 3, 0, 3, 0.16666666666666666, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; arg", "call    quote", "mov     rdx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rsi, aS_0; \"\\n  - %s\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "add     rax, rdx", "mov     [rbp+last_val], rax", "jmp     short loc_C04D"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 0, 4, 0.3571428571428571, ["cmp     [rbp+i], 0", "jz      short loc_BFBC"], ["cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [8, 2, 13, 0, 8, 10, 1, 80, 0.19643, 4, 9], "succs": [[3], [4], [1, 6], [5, 7], [3], [], [4], [2, 6]], "fname": "argmatch_valid", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 3, 15, 0, 3, 0, 0, 0.08333333333333333, ["mov     rdx, [rbp+res]; problem", "mov     rcx, [rbp+arg]", "mov     rax, [rbp+context]", "mov     rsi, rcx; value", "mov     rdi, rax; context", "call    argmatch_invalid", "mov     rdx, [rbp+valsize]; valsize", "mov     rcx, [rbp+vallist]", "mov     rax, [rbp+arglist]", "mov     rsi, rcx; vallist", "mov     rdi, rax; arglist", "call    argmatch_valid", "mov     rax, [rbp+exit_fn]", "call    rax", "mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "call~rax", "mov~rax,0"]], [2, 0, 3, 1, 1, 18, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+context], rdi", "mov     [rbp+arg], rsi", "mov     [rbp+arglist], rdx", "mov     [rbp+vallist], rcx", "mov     [rbp+valsize], r8", "mov     [rbp+exit_fn], r9", "mov     rcx, [rbp+valsize]; valsize", "mov     rdx, [rbp+vallist]; vallist", "mov     rsi, [rbp+arglist]; arglist", "mov     rax, [rbp+arg]", "mov     rdi, rax; arg", "call    argmatch", "mov     [rbp+res], rax", "cmp     [rbp+res], 0", "js      short loc_C0D6"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+res]", "jmp     short locret_C111"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 0, 6, 0, 4, 4, 0, 37, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "__xargmatch_internal", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 6, 1, 0, 7, 1, 1, 0, 0, 0.3333333333333333, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_C135"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 0, 6, 1, 0, 9, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+value], rdi", "mov     [rbp+arglist], rsi", "mov     [rbp+vallist], rdx", "mov     [rbp+valsize], rcx", "mov     [rbp+i], 0", "jmp     short loc_C17D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 6, 1, 0, 1, 0, 0, 3, 3, 0.06666666666666667, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.1, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 1, 0, 6, 0, 1, 3, 1, 0.03333333333333333, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "jmp     short locret_C19D"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "jmp~FOO"]], [0, 0, 6, 1, 1, 12, 1, 2, 2, 2, 0.16666666666666666, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+valsize]; n", "mov     rax, [rbp+value]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_C178"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]]], "func_feature": [1, 2, 5, 0, 7, 8, 0, 38, 0.1, 0, 5], "succs": [[3, 6], [0], [0], [4], [], [4], [2, 5]], "fname": "argmatch_to_argument", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0.07142857142857142, ["nop"], ["nop"]], [1, 0, 6, 0, 2, 12, 0, 3, 1, 3, 0.11904761904761904, ["movzx   eax, byte ptr [p1]", "movzx   eax, al", "mov     edi, eax; c", "call    c_tolower", "mov     [rbp+c1], al", "movzx   eax, byte ptr [p2]", "movzx   eax, al", "mov     edi, eax; c", "call    c_tolower", "mov     [rbp+c2], al", "cmp     [rbp+c1], 0", "jz      short loc_C201"], ["movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.023809523809523808, ["mov     eax, 0", "jmp     short loc_C20E"], ["mov~eax,0", "jmp~FOO"]], [0, 1, 7, 1, 0, 11, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    p1", "push    p2", "sub     rsp, 20h", "mov     [rbp+s1], rdi", "mov     [rbp+s2], rsi", "mov     p1, [rbp+s1]", "mov     p2, [rbp+s2]", "cmp     p1, p2", "jnz     short loc_C1C6"], ["push~rbp", "mov~rbp,rsp", "push~p1", "push~p2", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~p1,[rbp+0]", "mov~p2,[rbp+0]", "cmp~p1,p2", "jnz~FOO"]], [0, 0, 1, 1, 0, 4, 0, 0, 3, 1, 0.09523809523809523, ["movzx   edx, [rbp+c1]", "movzx   eax, [rbp+c2]", "sub     edx, eax", "mov     eax, edx"], ["movzx~edx,[rbp+0]", "movzx~eax,[rbp+0]", "sub~edx,eax", "mov~eax,edx"]], [0, 0, 2, 0, 0, 1, 0, 1, 3, 2, 0.047619047619047616, ["jmp     short loc_C202"], ["jmp~FOO"]], [2, 0, 6, 2, 0, 5, 0, 1, 2, 3, 0.047619047619047616, ["add     p1, 1", "add     p2, 1", "movzx   eax, [rbp+c1]", "cmp     al, [rbp+c2]", "jz      short loc_C1C6"], ["add~p1,0", "add~p2,0", "movzx~eax,[rbp+0]", "cmp~al,[rbp+0]", "jz~FOO"]], [0, 1, 0, 1, 0, 5, 0, 0, 2, 0, 0.0, ["add     rsp, 20h", "pop     p2", "pop     p1", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~p2", "pop~p1", "pop~rbp", "retn"]]], "func_feature": [2, 0, 7, 0, 8, 10, 2, 41, 0.0506, 0, 5], "succs": [[4], [0, 6], [7], [1, 2], [7], [4], [1, 5], []], "fname": "c_strcasecmp", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.041666666666666664, ["mov     [rbp+hard], 0"], ["mov~[rbp+0],0"]], [0, 0, 3, 0, 1, 6, 1, 2, 1, 2, 0.16666666666666666, ["mov     rax, [rbp+p]", "lea     rsi, aC_0; \"C\"", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jz      short loc_C26E"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 2, 0, 1, 6, 1, 2, 2, 1, 0.041666666666666664, ["mov     rax, [rbp+p]", "lea     rsi, aPosix; \"POSIX\"", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_C272"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [3, 1, 4, 1, 1, 12, 0, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+category], edi", "mov     [rbp+hard], 1", "mov     eax, [rbp+category]", "mov     esi, 0; locale", "mov     edi, eax; category", "call    _setlocale", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jz      short loc_C272"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["movzx   eax, [rbp+hard]", "leave", "retn"], ["movzx~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [3, 2, 6, 0, 5, 7, 1, 28, 0.05, 2, 1], "succs": [[4], [0, 2], [0, 4], [1, 4], []], "fname": "hard_locale", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 2, 0, 0, 4, 1, 1, 0, 0, 0.3333333333333333, ["mov     rax, [rbp+codeset]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_C2B6"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [3, 0, 4, 1, 1, 8, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     edi, 0Eh; item", "call    _nl_langinfo", "mov     [rbp+codeset], rax", "cmp     [rbp+codeset], 0", "jnz     short loc_C2A0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 0, 1, 2, 0.0, ["lea     rax, unk_13365", "mov     [rbp+codeset], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 1, 0, 0, 2, 0, 0, 2, 1, 0.0, ["lea     rax, aAscii; \"ASCII\"", "mov     [rbp+codeset], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     rax, [rbp+codeset]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 1, 3, 0, 5, 6, 1, 19, 0.06667, 2, 1], "succs": [[3, 4], [0, 2], [0], [4], []], "fname": "locale_charset", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.08333333333333333, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 3, 1, 0, 11, 0, 0, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+size1], rdi", "mov     [rbp+size2], rsi", "mov     rdx, [rbp+size1]", "mov     rax, [rbp+size2]", "add     rax, rdx", "mov     [rbp+sum], rax", "mov     rax, [rbp+sum]", "cmp     rax, [rbp+size1]", "jb      short loc_C2E7"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+sum]", "jmp     short loc_C2EE"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [0, 0, 1, 0, 4, 4, 21, 16, 0.04167, 0, 1], "succs": [[2], [0, 3], [], [2]], "fname": "xsum", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 0, 1, 2, 18, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 18h", "mov     [rbp+size1], rdi", "mov     [rbp+size2], rsi", "mov     [rbp+size3], rdx", "mov     rdx, [rbp+size2]", "mov     rax, [rbp+size1]", "mov     rsi, rdx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     rdx, rax", "mov     rax, [rbp+size3]", "mov     rsi, rax; size2", "mov     rdi, rdx; size1", "call    xsum", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 0, 18, 0.0, 0, 1], "succs": [[]], "fname": "xsum3", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 1, 0, 1, 3, 24, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+size1], rdi", "mov     [rbp+size2], rsi", "mov     [rbp+size3], rdx", "mov     [rbp+size4], rcx", "mov     rdx, [rbp+size2]", "mov     rax, [rbp+size1]", "mov     rsi, rdx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     rdx, rax", "mov     rax, [rbp+size3]", "mov     rsi, rax; size2", "mov     rdi, rdx; size1", "call    xsum", "mov     rdx, rax", "mov     rax, [rbp+size4]", "mov     rsi, rax; size2", "mov     rdi, rdx; size1", "call    xsum", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "leave", "retn"]]], "func_feature": [3, 0, 3, 0, 1, 0, 1, 24, 0.0, 0, 1], "succs": [[]], "fname": "xsum4", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+size1], rdi", "mov     [rbp+size2], rsi", "mov     rax, [rbp+size2]", "cmp     [rbp+size1], rax", "cmovnb  rax, [rbp+size1]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovnb~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 9, 0.0, 0, 0], "succs": [[]], "fname": "xmax", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 10, 0, 0, 2, 0, 1, 0, 0, 0.01523420604025138, ["cmp     [rbp+buf_malloced], 0", "jz      short loc_EC19"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 13, 0, 0, 3, 0, 1, 14, 7, 0.020672722184057198, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_EBF8"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 15, 7, 0.0018828079281479786, ["cmp     [rbp+result], 0", "jz      short loc_EBF8"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 11, 0, 1, 3, 0, 1, 16, 7, 0.0, ["mov     rax, [rbp+result]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 1, 0, 3, 0, 1, 14, 11, 0.00119583746787777, ["mov     rax, [rbp+allocated]", "add     rax, rax", "jmp     short loc_C817"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [0, 0, 379, 0, 0, 3, 1, 1, 13, 12, 0.003422130626160853, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_C809"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 379, 1, 0, 8, 0, 1, 29, 15, 0.378329898481032, ["mov     eax, [rbp+type]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_133A8", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_133A8", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [2, 0, 379, 0, 1, 4, 0, 2, 28, 16, 0.3793603541714373, ["call    ___errno_location", "mov     dword ptr [rax], 0", "cmp     [rbp+type], 11h; switch 18 cases", "ja      loc_E531; jumptable 000000000000D00B default case"], ["call~FOO", "mov~<TAG>,0", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 14, 11, 0.00119583746787777, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_C817"], ["mov~rax,0", "jmp~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 13, 11, 0.025716866396967155, ["mov     eax, 0Ch"], ["mov~eax,0"]], [1, 0, 379, 0, 0, 2, 0, 1, 12, 12, 0.03016945271353332, ["cmp     [rbp+allocated], 0", "jz      short loc_C812"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 48, 10, 0.0011958374678777699, ["mov     rdx, [rbp+memory_size_2]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory_2], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 379, 0, 0, 2, 0, 1, 47, 11, 0.0017110653130804265, ["cmp     [rbp+result], 0", "jnz     short loc_E7FF"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 48, 9, 0.0357669897972165, ["cmp     [rbp+memory_2], 0", "jz      loc_EBC8"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 1, 5, 0, 2, 47, 10, 0.03147978525812279, ["mov     rax, [rbp+memory_size_2]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+memory_2], rax", "jmp     short loc_E81F"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 379, 0, 0, 4, 0, 0, 14, 10, 0.03360430501488436, ["mov     [rbp+allocated], rax", "mov     rax, [rbp+augmented_length_0]", "cmp     rax, [rbp+allocated]", "jbe     short loc_C83C"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 15, 10, 0.0, ["mov     rax, [rbp+augmented_length_0]", "mov     [rbp+allocated], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_11]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_E03F"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_DFE1"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_E03A"], ["jmp~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 49, 21, 0.03428491463755948, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jnz     short loc_E867"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [2, 0, 379, 2, 0, 11, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 1", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "movzx   eax, byte ptr [rax+10h]", "movsx   eax, al", "mov     [rbp+arg], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D099"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "movzx~eax,[yte ptr [rax+0]", "movsx~eax,al", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897632, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_11]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_E03F"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_11]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_E03F"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D051"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 50, 21, 0.0017110653130804265, ["cmp     [rbp+length], 0", "jz      short loc_E867"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D0E7"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_5]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D8A9"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 7", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_5], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D7FC"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D140"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 15, 9, 0.03497824593542478, ["mov     rax, [rbp+allocated]", "mov     [rbp+memory_size_0], rax", "cmp     [rbp+memory_size_0], 0FFFFFFFFFFFFFFFFh", "jz      loc_EBB9"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 51, 21, 0.0, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+result]", "mov     rax, [rbp+memory_2]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 16, 11, 0.03301910795613566, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_C872"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 14", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax+10h]", "mov     [rbp+arg_12], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_E0CC"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 17, 11, 0.0017110653130804265, ["cmp     [rbp+result], 0", "jnz     short loc_C88A"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_E084"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 50, 20, 0.0363458260183701, ["mov     rax, [rbp+memory_2]", "mov     [rbp+result], rax", "jmp     short loc_E898"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_E11A"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_E173"], ["jmp~FOO"]], [0, 0, 379, 0, 1, 5, 0, 2, 17, 10, 0.03147978525812279, ["mov     rax, [rbp+memory_size_0]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+memory_0], rax", "jmp     short loc_C8AA"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 8, 0, 0, 2, 0, 1, 5, 5, 5.088670076075618e-05, ["nop", "jmp     short out_of_memory_1"], ["nop", "jmp~FOO"]], [1, 0, 385, 0, 1, 6, 0, 2, 4, 6, 0.0024362007989212017, ["mov     rax, [rbp+buf_memsize]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+buf], rax", "cmp     [rbp+buf], 0", "jz      loc_EC16"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D145"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 1, 1, 8, 0, 2, 38, 11, 0.18306278570762233, ["mov     eax, [rbp+count]", "cdqe", "add     [rbp+length], rax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+orig_errno]", "mov     [rdx], eax", "jmp     short loc_E89E"], ["mov~eax,[rbp+0]", "cdqe~", "add~[rbp+0],rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 379, 1, 0, 5, 0, 1, 37, 8, 0.25611912576648094, ["mov     eax, [rbp+count]", "add     eax, 1", "mov     eax, eax", "cmp     [rbp+maxlen], rax", "ja      loc_E877"], ["mov~eax,[rbp+0]", "add~eax,0", "mov~eax,eax", "cmp~[rbp+0],rax", "ja~FOO"]], [0, 0, 379, 0, 0, 1, 0, 0, 42, 19, 0.05806808640561789, ["nop"], ["nop"]], [1, 0, 379, 1, 2, 14, 0, 2, 41, 13, 0.05749773130125769, ["mov     eax, [rbp+count]", "add     eax, 2", "mov     edx, eax", "mov     rax, [rbp+length]", "mov     rsi, rdx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     rsi, rbx; size2", "mov     rdi, rax; size1", "call    xmax", "mov     [rbp+n_2], rax", "mov     rax, [rbp+n_2]", "cmp     rax, [rbp+allocated]", "jbe     loc_E898"], ["mov~eax,[rbp+0]", "add~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 36, 18, 0.18132839732335954, ["jmp     loc_CF8D"], ["jmp~FOO"]], [2, 0, 379, 1, 0, 4, 0, 1, 35, 19, 0.12016894384652571, ["mov     rax, [rbp+fbp]", "add     rax, 1", "mov     byte ptr [rax], 0", "jmp     loc_E899"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,0", "jmp~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_5]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D8A9"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D84B"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 18, 10, 0.00119583746787777, ["mov     rdx, [rbp+memory_size_0]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory_0], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D8A4"], ["jmp~FOO"]], [2, 1, 379, 3, 0, 9, 0, 1, 12, 13, 0.013147851309060378, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax]", "sub     eax, 12h; switch 5 cases", "cmp     eax, 4", "ja      loc_CA74; jumptable 000000000000C998 default case"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,<TAG>", "sub~eax,<STR>", "cmp~eax,0", "ja~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 11, 14, 0.18558379767447777, ["mov     rax, [rbp+dp]", "movzx   eax, byte ptr [rax+48h]", "cmp     al, 6Eh ; 'n'", "jnz     loc_CA79"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "cmp~al,0", "jnz~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289766, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_5]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D8A9"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 18, 9, 0.0357669897972165, ["cmp     [rbp+memory_0], 0", "jz      loc_EBBC"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 25, -1, 0.0, ["call    _abort"], ["call~FOO"]], [2, 0, 379, 2, 0, 8, 0, 1, 24, 16, 0.0034284914637559474, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax]", "cmp     eax, 5", "jz      short loc_CD78"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 1, 379, 2, 0, 6, 0, 1, 13, 10, 0.24919641418382, ["mov     rax, [rbp+dp]", "mov     rax, [rax+8]", "mov     [rbp+cp], rax", "add     [rbp+i], 1", "add     [rbp+dp], 58h", "jmp     loc_C5BD"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "add~[rbp+0],0", "add~[rbp+0],<STR>", "jmp~FOO"]], [1, 0, 379, 1, 0, 7, 0, 1, 12, 11, 0.04509197771162506, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "add     rax, rdx", "mov     byte ptr [rax], 25h ; '%'", "mov     rax, [rbp+augmented_length_0]", "mov     [rbp+length], rax", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 379, 2, 0, 9, 0, 1, 14, 11, 0.0011856601277256188, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000C998 case 18", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, [rbp+length]", "mov     [rax], dl", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,dl", "jmp~FOO"]], [1, 0, 379, 2, 0, 9, 0, 1, 14, 11, 0.0011856601277256188, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000C998 case 19", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, [rbp+length]", "mov     [rax], dx", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,dx", "jmp~FOO"]], [1, 0, 379, 2, 0, 9, 0, 1, 14, 11, 0.0011856601277256188, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000C998 case 20", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, [rbp+length]", "mov     [rax], edx", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,edx", "jmp~FOO"]], [1, 0, 379, 2, 0, 9, 0, 1, 14, 11, 0.0011856601277256188, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000C998 case 21", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, [rbp+length]", "mov     [rax], rdx", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "jmp~FOO"]], [1, 0, 379, 2, 0, 9, 0, 1, 14, 11, 0.0011856601277256188, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000C998 case 22", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, [rbp+length]", "mov     [rax], rdx", "jmp     loc_E89E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "jmp~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 19, 13, 0.03428491463755947, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jnz     short loc_C8F2"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_12]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_E178"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 20, 13, 0.0017110653130804265, ["cmp     [rbp+length], 0", "jz      short loc_C8F2"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 8", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_6], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D939"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D8F0"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 44, 0, 1, 7, 0, 1, 9, 7, 0.05276314785130906, ["nop", "mov     rax, [rbp+length]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "cmp     [rbp+allocated], rax", "jnb     loc_EA1A"], ["nop", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnb~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 8, 8, 0.28002951428644124, ["mov     rax, [rbp+d.count]", "cmp     [rbp+i], rax", "jz      loc_E8C5"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D988"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D9E1"], ["jmp~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 21, 13, 0.0, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+result]", "mov     rax, [rbp+memory_0]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 43, 0, 0, 2, 0, 1, 10, 12, 0.03163244536040506, ["cmp     [rbp+allocated], 0", "jz      short loc_E912"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 20, 12, 0.036345826018370095, ["mov     rax, [rbp+memory_0]", "mov     [rbp+result], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 41, 0, 0, 3, 1, 1, 11, 12, 0.0034730173269216093, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_E909"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 39, 1, 0, 3, 0, 1, 12, 11, 0.00012403633310434318, ["mov     rax, [rbp+allocated]", "add     rax, rax", "jmp     short loc_E917"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 39, 0, 0, 2, 0, 1, 12, 11, 0.00012403633310434318, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_E917"], ["mov~rax,0", "jmp~FOO"]], [1, 0, 39, 0, 0, 1, 0, 0, 11, 11, 0.024959926723150904, ["mov     eax, 0Ch"], ["mov~eax,0"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_E4D1"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_E439"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_12]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_E178"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 1, 8, 0, 1, 11, 12, 0.03754166348624787, ["mov     rax, [rbp+length]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+augmented_length_0], rax", "mov     rax, [rbp+augmented_length_0]", "cmp     rax, [rbp+allocated]", "jbe     loc_C900"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_6]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D9E6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 10, 15, 0.18662061420247816, ["mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jnz     short loc_C93D"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 9, 14, 0.2262295499071318, ["mov     rax, [rbp+dp]", "movzx   eax, byte ptr [rax+48h]", "cmp     al, 25h ; '%'", "jnz     loc_C927"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "cmp~al,0", "jnz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D27D"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D224"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 11, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 38, 0, 1, 7, 0, 1, 12, 10, 0.024190265374144468, ["mov     [rbp+allocated], rax", "mov     rax, [rbp+length]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "cmp     [rbp+allocated], rax", "jnb     short loc_E956"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnb~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D145"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289764, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D145"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 37, 0, 1, 5, 0, 1, 13, 10, 0.0, ["mov     rax, [rbp+length]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+allocated], rax"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 36, 0, 0, 4, 0, 1, 13, 9, 0.02112434165330891, ["mov     rax, [rbp+allocated]", "mov     [rbp+memory_size_3], rax", "cmp     [rbp+memory_size_3], 0FFFFFFFFFFFFFFFFh", "jz      loc_EBCB"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_12]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_E178"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897646, ["jmp     loc_E536"], ["jmp~FOO"]], [2, 0, 379, 2, 0, 11, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 2", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "movzx   eax, byte ptr [rax+10h]", "movzx   eax, al", "mov     [rbp+arg_0], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D1D6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "movzx~eax,[yte ptr [rax+0]", "movzx~eax,al", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D18E"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 34, 0, 0, 3, 0, 1, 14, 11, 0.016589064448006514, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_E98C"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_6]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D9E6"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 13, 26, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [3, 0, 379, 2, 0, 20, 2, 1, 12, 26, 0.1714054906750121, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax]", "mov     [rbp+type], eax", "mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "mov     [rbp+flags], eax", "mov     rax, [rbp+buf]", "mov     [rbp+fbp], rax", "mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 25h ; '%'", "mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      short loc_CAEF"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 33, 0, 0, 2, 0, 1, 15, 11, 0.0017873953642215607, ["cmp     [rbp+result], 0", "jnz     short loc_E9A4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 379, 1, 0, 8, 0, 1, 13, 12, 0.01211103478105997, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1336C", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1336C", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 31, 0, 1, 5, 0, 2, 15, 10, 0.011541739816299012, ["mov     rax, [rbp+memory_size_3]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+memory_3], rax", "jmp     short loc_E9C4"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 15", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_13], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_E208"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 380, 0, 0, 6, 0, 1, 5, 11, 0.009541256392641782, ["mov     rax, [rbp+resultbuf]", "mov     [rbp+result], rax", "mov     rax, [rbp+lengthp]", "mov     rax, [rax]", "mov     [rbp+allocated], rax", "jmp     short loc_C58B"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 382, 0, 0, 2, 0, 1, 4, 12, 0.016754446225478968, ["cmp     [rbp+resultbuf], 0", "jz      short loc_C575"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_E1BF"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_E257"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 1, 5, 0, 2, 31, 10, 0.03147978525812279, ["mov     rax, [rbp+memory_size_1]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+memory_1], rax", "jmp     short loc_CF16"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 30, 11, 0.03301910795613566, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_CEDE"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 31, 11, 0.0017110653130804265, ["cmp     [rbp+result], 0", "jnz     short loc_CEF6"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_E2B0"], ["jmp~FOO"]], [0, 0, 31, 0, 1, 6, 0, 1, 16, 10, 9.859298272396509e-05, ["mov     rdx, [rbp+memory_size_3]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory_3], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 30, 0, 0, 2, 0, 1, 16, 9, 0.010228226852911993, ["cmp     [rbp+memory_3], 0", "jz      loc_EBCE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_0]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D282"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_6]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D9E6"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 17, 0, 0, 3, 0, 1, 17, 8, 0.006379920107879806, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jnz     short loc_EA0C"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 379, 1, 0, 5, 1, 1, 34, 10, 0.25927092079485026, ["mov     rax, [rbp+fbp]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_E5BB"], ["mov~rax,[rbp+0]", "add~rax,0", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 379, 0, 0, 3, 1, 1, 33, 11, 0.402151235274661, ["mov     eax, [rbp+count]", "test    eax, eax", "js      short loc_E596"], ["mov~eax,[rbp+0]", "test~eax,eax", "js~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897636, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 16, 0, 0, 2, 0, 1, 18, 8, 0.0018191995521970334, ["cmp     [rbp+length], 0", "jz      short loc_EA0C"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_13]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_E2B5"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 15, 0, 1, 6, 0, 1, 19, 8, 0.0, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+result]", "mov     rax, [rbp+memory_3]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 14, 0, 0, 2, 0, 0, 18, 7, 0.0012085591430679593, ["mov     rax, [rbp+memory_3]", "mov     [rbp+result], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 9", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_7], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_DA76"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_DA2D"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_0]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D282"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_DB1E"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_DAC5"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 13, 1, 0, 7, 0, 1, 10, 6, 0.019139760323639416, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_EA8E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 4, 3, 0.0, ["mov     rax, [rbp+a.arg]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 5, 1, 0, 5, 0, 1, 3, 3, 0.00010813423911660688, ["mov     rax, [rbp+a.arg]", "lea     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_C465"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [2, 0, 379, 0, 0, 6, 0, 0, 6, 10, 0.023853140981604456, ["mov     [rbp+length], 0", "mov     rax, [rbp+format]", "mov     [rbp+cp], rax", "mov     [rbp+i], 0", "mov     rax, [rbp+d.dir]", "mov     [rbp+dp], rax"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [2, 0, 380, 0, 0, 2, 0, 0, 5, 11, 0.009541256392641782, ["mov     [rbp+result], 0", "mov     [rbp+allocated], 0"], ["mov~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 12, 1, 0, 4, 0, 0, 11, 6, 0.003689285805154823, ["mov     rax, [rbp+length]", "add     rax, 1", "cmp     [rbp+allocated], rax", "jbe     short loc_EA8E"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605222, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_13]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_E2B5"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 40, 14, 0.02720318211502088, ["mov     rbx, 0FFFFFFFFFFFFFFFFh"], ["mov~rbx,0"]], [0, 0, 379, 0, 0, 3, 1, 1, 39, 15, 0.0554368199204471, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_E712"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_7]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_DB23"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 13, -1, 0.0, ["call    _abort; jumptable 000000000000C998 default case"], ["call~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_0]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D282"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 11, 0, 1, 9, 0, 2, 12, 6, 0.001851003740172506, ["mov     rax, [rbp+length]", "lea     rdx, [rax+1]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory_4], rax", "cmp     [rbp+memory_4], 0", "jz      short loc_EA8E"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897632, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 10, 0, 0, 2, 0, 0, 13, 6, 0.0, ["mov     rax, [rbp+memory_4]", "mov     [rbp+result], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 9, 0, 0, 2, 0, 1, 11, 5, 0.012015622217133553, ["cmp     [rbp+buf_malloced], 0", "jz      short loc_EAA7"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 8, 0, 1, 3, 0, 1, 12, 5, 0.0, ["mov     rax, [rbp+buf_malloced]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 4, 2, 1, 14, 24, 0.17415337251609292, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      short loc_CB33"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 2, 1, 13, 25, 0.1727794315955525, ["mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "jz      short loc_CB11"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 14, 25, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 2Dh ; '-'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_13]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_E2B5"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [2, 0, 379, 2, 0, 11, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 3", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "movzx   eax, word ptr [rax+10h]", "cwde", "mov     [rbp+arg_1], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D311"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "movzx~eax,[ord ptr [rax+0]", "cwde~", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289763, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D2C9"], ["cmp~eax,0", "jb~FOO"]], [0, 1, 7, 1, 0, 5, 0, 1, 12, 4, 0.008377223112739486, ["mov     rax, [rbp+d.dir]", "lea     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_EACD"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D35F"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_7]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_DB23"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D3B8"], ["jmp~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 13, 4, 0.0, ["mov     rax, [rbp+d.dir]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 5, 1, 0, 5, 0, 1, 13, 3, 0.004687937307584663, ["mov     rax, [rbp+a.arg]", "lea     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_EAF3"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 16", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_14], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_E345"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_E2FC"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 14, 3, 0.0, ["mov     rax, [rbp+a.arg]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_E394"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_E3ED"], ["jmp~FOO"]], [0, 0, 3, 0, 0, 5, 0, 1, 14, 2, 0.0009477648016690838, ["mov     rax, [rbp+lengthp]", "mov     rdx, [rbp+length]", "mov     [rax], rdx", "mov     rax, [rbp+result]", "jmp     loc_EC76"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_1]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D3BD"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_7]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_DB23"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897632, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 11, 0, 0, 2, 0, 1, 40, 6, 0.00173014782586571, ["cmp     [rbp+result], 0", "jz      short loc_EB39"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 12, 0, 0, 3, 0, 1, 39, 6, 0.015552247920006108, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_EB39"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 15, 24, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 2Bh ; '+'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [0, 0, 10, 0, 1, 3, 0, 1, 41, 6, 0.0, ["mov     rax, [rbp+result]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 4, 2, 1, 15, 23, 0.17552731343663333, ["mov     eax, [rbp+flags]", "and     eax, 8", "test    eax, eax", "jz      short loc_CB55"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_14]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_E3F2"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 40, 5, 0.010552629570261813, ["cmp     [rbp+buf_malloced], 0", "jz      short loc_EB52"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 8, 0, 1, 3, 0, 1, 41, 5, 0.0, ["mov     rax, [rbp+buf_malloced]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 1, 379, 0, 0, 4, 0, 0, 16, 23, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 20h ; ' '"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,<STR>"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 10", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_8], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_DBB3"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_DB6A"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_1]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D3BD"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_DC02"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 2, 1, 16, 22, 0.17690125435717377, ["mov     eax, [rbp+flags]", "and     eax, 10h", "test    eax, eax", "jz      short loc_CB77"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_DF4B"], ["cmp~eax,0", "jb~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 13", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax+10h]", "mov     [rbp+arg_11], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_DF93"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_DC5B"], ["jmp~FOO"]], [0, 1, 7, 1, 0, 5, 0, 1, 41, 4, 0.007155942294481338, ["mov     rax, [rbp+d.dir]", "lea     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_EB78"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 42, 4, 0.0, ["mov     rax, [rbp+d.dir]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 17, 22, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 23h ; '#'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [1, 0, 379, 0, 0, 4, 2, 1, 17, 21, 0.17827519527771418, ["mov     eax, [rbp+flags]", "and     eax, 40h", "test    eax, eax", "jz      short loc_CB99"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 5, 1, 0, 5, 0, 1, 42, 3, 0.0037083683179401066, ["mov     rax, [rbp+a.arg]", "lea     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_EB9E"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_14]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_E3F2"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 18, 21, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 49h ; 'I'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [0, 0, 4, 0, 1, 3, 0, 1, 43, 3, 0.0, ["mov     rax, [rbp+a.arg]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_2]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D4FA"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [2, 0, 379, 2, 0, 11, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 4", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "movzx   eax, word ptr [rax+10h]", "movzx   eax, ax", "mov     [rbp+arg_2], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D44E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "movzx~eax,[ord ptr [rax+0]", "movzx~eax,ax", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 1, 379, 0, 0, 4, 2, 1, 18, 20, 0.1796491361982546, ["mov     eax, [rbp+flags]", "and     eax, 20h", "test    eax, eax", "jz      short loc_CBBB"], ["mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_8]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_DC60"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 13, 8, 0.005964345385000286, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 12, 9, 0.04002026986913636, ["mov     rax, [rbp+allocated]", "mov     [rbp+memory_size], rax", "cmp     [rbp+memory_size], 0FFFFFFFFFFFFFFFFh", "jz      loc_EBB3"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_1]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D3BD"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 16, 8, 0.0004452586316566166, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 15, 9, 0.0357669897972165, ["cmp     [rbp+memory], 0", "jz      loc_EBB6"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 16, 8, 0.0009223214512887058, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289763, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 30, 8, 0.0034730173269216093, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 29, 9, 0.03752894181105768, ["mov     rax, [rbp+allocated]", "mov     [rbp+memory_size_1], rax", "cmp     [rbp+memory_size_1], 0FFFFFFFFFFFFFFFFh", "jz      loc_EBBF"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 33, 8, 0.0004452586316566166, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 9, 0.0357669897972165, ["cmp     [rbp+memory_1], 0", "jz      loc_EBC2"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 46, 8, 0.007902280572305766, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 45, 9, 0.04195820505644187, ["mov     rax, [rbp+allocated]", "mov     [rbp+memory_size_2], rax", "cmp     [rbp+memory_size_2], 0FFFFFFFFFFFFFFFFh", "jz      loc_EBC5"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 49, 8, 0.0004452586316566166, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 14, 8, 0.0012021983054728647, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 14, 0, 0, 1, 0, 0, 17, 8, 0.00041345444368114396, ["nop"], ["nop"]], [0, 0, 379, 0, 0, 6, 0, 1, 19, 19, 0.181023077118795, ["mov     rax, [rbp+dp]", "mov     rdx, [rax+18h]", "mov     rax, [rbp+dp]", "mov     rax, [rax+20h]", "cmp     rdx, rax", "jz      short loc_CC2E"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 19, 20, 0.0, ["mov     rax, [rbp+fbp]", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [0, 0, 14, 0, 0, 2, 0, 1, 19, 8, 0.0004452586316566166, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_14]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_E3F2"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 397, 1, 1, 19, 2, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 548h", "mov     [rbp+resultbuf], rdi", "mov     [rbp+lengthp], rsi", "mov     [rbp+format], rdx", "mov     [rbp+args], rcx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "lea     rdx, [rbp+a]; a", "lea     rcx, [rbp+d]", "mov     rax, [rbp+format]", "mov     rsi, rcx; d", "mov     rdi, rax; format", "call    printf_parse", "test    eax, eax", "jns     short loc_C3FC"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897632, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D406"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 1.9082512785283566e-05, ["mov     eax, 0", "jmp     loc_EC76"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D49C"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_8]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_DC60"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D4F5"], ["jmp~FOO"]], [0, 0, 8, 0, 1, 4, 0, 2, 16, 5, 0.005747016767167901, ["mov     rax, [rbp+buf_malloced]", "mov     rdi, rax; ptr", "call    _free", "jmp     short out_of_memory_1"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 8, 0, 0, 2, 0, 1, 4, 5, 0.00016538177747245757, ["nop", "jmp     short out_of_memory_1"], ["nop", "jmp~FOO"]], [1, 0, 387, 0, 0, 4, 0, 1, 3, 6, 0.00019082512785283568, ["mov     rax, [rbp+buf_neededlength]", "mov     [rbp+buf_memsize], rax", "cmp     [rbp+buf_memsize], 0FFFFFFFFFFFFFFFFh", "jz      loc_EC13"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 395, 0, 1, 7, 1, 1, 1, 5, 0.0024934483372770523, ["lea     rdx, [rbp+a]", "mov     rax, [rbp+args]", "mov     rsi, rdx; a", "mov     rdi, rax; args", "call    printf_fetchargs", "test    eax, eax", "jns     short loc_C47A"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 8, 0, 0, 1, 0, 0, 16, 5, 0.005747016767167901, ["nop"], ["nop"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 17", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     [rbp+arg_15], rax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_E482"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 379, 2, 1, 17, 0, 1, 20, 19, 0.0, ["mov     rax, [rbp+dp]", "mov     rax, [rax+20h]", "mov     rdx, rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+18h]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+n_0], rax", "mov     rax, [rbp+dp]", "mov     rcx, [rax+18h]", "mov     rdx, [rbp+n_0]; n", "mov     rax, [rbp+fbp]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rax, [rbp+n_0]", "add     [rbp+fbp], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "add~[rbp+0],rax"]], [0, 1, 7, 1, 0, 5, 0, 1, 2, 4, 6.996921354603975e-05, ["mov     rax, [rbp+d.dir]", "lea     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_C43F"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [0, 1, 7, 1, 0, 5, 0, 1, 5, 4, 0.0099865150242984, ["mov     rax, [rbp+d.dir]", "lea     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_EC40"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_E52A"], ["jmp~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 3, 4, 0.0, ["mov     rax, [rbp+d.dir]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 6, 4, 0.0, ["mov     rax, [rbp+d.dir]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 0, 0, 6, 0, 1, 20, 18, 0.18239701803933542, ["mov     rax, [rbp+dp]", "mov     rdx, [rax+30h]", "mov     rax, [rbp+dp]", "mov     rax, [rax+38h]", "cmp     rdx, rax", "jz      short loc_CCA1"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_2]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D4FA"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 5, 1, 0, 5, 0, 1, 6, 3, 0.0061954558176220646, ["mov     rax, [rbp+a.arg]", "lea     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_EC66"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_8]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_DC60"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 34, 19, 0.0363458260183701, ["mov     rax, [rbp+memory_1]", "mov     [rbp+result], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 379, 0, 0, 3, 0, 1, 33, 20, 0.03428491463755948, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jnz     short loc_CF5E"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 34, 20, 0.0017110653130804265, ["cmp     [rbp+length], 0", "jz      short loc_CF5E"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 35, 20, 0.0, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+result]", "mov     rax, [rbp+memory_1]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897625, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 7, 3, 0.0, ["mov     rax, [rbp+a.arg]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [2, 0, 3, 0, 1, 3, 0, 1, 7, 2, 0.002353509910184973, ["call    ___errno_location", "mov     dword ptr [rax], 0Ch", "mov     eax, 0"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0"]], [2, 0, 3, 0, 1, 4, 0, 2, 4, 2, 9.541256392641784e-05, ["call    ___errno_location", "mov     dword ptr [rax], 16h", "mov     eax, 0", "jmp     loc_EC76"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rcx, [rbp+arg_15]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_E52F"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.004503473017326922, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_EC8A"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 1, 6, 0, 2, 42, 2, 0.0030150370200748037, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     eax, 0", "jmp     loc_EC76"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 1, 4, 0, 2, 43, 2, 0.00020990764063811925, ["call    ___errno_location", "mov     dword ptr [rax], 4Bh ; 'K'", "mov     eax, 0", "jmp     loc_EC76"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     rbx, [rbp+var_8]", "leave", "retn"], ["mov~rbx,[rbp+0]", "leave", "retn"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 11", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "movsd   xmm0, qword ptr [rax+10h]", "movsd   [rbp+arg_9], xmm0", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_DCFE"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "movsd~xmm0,[word ptr [rax+0]", "movsd~[rbp+0],xmm0", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_DCA9"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 379, 2, 1, 17, 0, 1, 21, 18, 0.0, ["mov     rax, [rbp+dp]", "mov     rax, [rax+38h]", "mov     rdx, rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+30h]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+n_1], rax", "mov     rax, [rbp+dp]", "mov     rcx, [rax+30h]", "mov     rdx, [rbp+n_1]; n", "mov     rax, [rbp+fbp]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rax, [rbp+n_1]", "add     [rbp+fbp], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "add~[rbp+0],rax"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_DD56"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_DDB5"], ["jmp~FOO"]], [3, 0, 389, 0, 1, 9, 0, 2, 2, 7, 0.0049105666234129704, ["mov     rdx, [rbp+d.max_precision_length]; size3", "mov     rax, [rbp+d.max_width_length]", "mov     ecx, 6; size4", "mov     rsi, rax; size2", "mov     edi, 7; size1", "call    xsum4", "mov     [rbp+buf_neededlength], rax", "cmp     [rbp+buf_neededlength], 0F9Fh", "ja      short loc_C4FC"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "ja~FOO"]], [2, 0, 379, 1, 0, 4, 0, 1, 21, 17, 0.18377095895987586, ["mov     eax, [rbp+type]", "sub     eax, 7; switch 10 cases", "cmp     eax, 9", "ja      short loc_CD15; jumptable 000000000000CCD0 default case"], ["mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_15]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_E52F"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 1, 0, 8, 0, 1, 22, 17, 0.005126835101646185, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_13380", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_13380", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 379, 0, 0, 2, 0, 1, 38, 7, 0.07202588436845363, ["cmp     [rbp+maxlen], 7FFFFFFFh", "jz      overflow"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 379, 0, 0, 4, 0, 0, 23, 17, 0.0, ["mov     rax, [rbp+fbp]; jumptable 000000000000CCD0 cases 9,10", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 6Ch ; 'l'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_2]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D4FA"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 379, 0, 1, 14, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rcx, [rbp+count]", "mov     rsi, [rbp+arg_9]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     [rbp+var_548], rsi", "movsd   xmm0, [rbp+var_548]", "mov     rsi, rax; maxlen", "mov     eax, 1", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_DDBA"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rbp+0],rsi", "movsd~xmm0,[rbp+0]", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897625, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 0, 5, 0, 1, 23, 16, 0.0031910201935390855, ["mov     rax, [rbp+fbp]; jumptable 000000000000CCD0 cases 7,8,14,16", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 6Ch ; 'l'", "jmp     short loc_CD16"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 379, 0, 0, 5, 0, 1, 23, 16, 0.0007929844201884506, ["mov     rax, [rbp+fbp]; jumptable 000000000000CCD0 case 12", "lea     rdx, [rax+1]", "mov     [rbp+fbp], rdx", "mov     byte ptr [rax], 4Ch ; 'L'", "jmp     short loc_CD16"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 0, 22, 16, 0.1784130134256079, ["nop; jumptable 000000000000CCD0 default case"], ["nop"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9, [rbp+arg_15]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_E52F"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 379, 1, 1, 7, 0, 1, 26, 18, 0.1935666488563214, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "add     rax, rdx", "mov     byte ptr [rax], 0", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+orig_errno], eax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax"]], [1, 0, 379, 0, 1, 6, 0, 1, 25, 13, 0.1885670305065771, ["mov     rax, [rbp+length]", "mov     esi, 2; size2", "mov     rdi, rax; size1", "call    xsum", "cmp     [rbp+allocated], rax", "jnb     loc_CF6C"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnb~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897615, ["jmp     short loc_E536"], ["jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 29, -1, 0.0, ["call    _abort; jumptable 000000000000D00B default case"], ["call~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.021352583472897615, ["jmp     loc_E536"], ["jmp~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_3]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D633"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.011098913269605219, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_3]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D633"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_3]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D633"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D5D5"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D53F"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D62E"], ["jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.0213525834728976, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289762, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 379, 0, 0, 1, 0, 1, 32, 12, 0.02135258347289761, ["jmp     loc_E536"], ["jmp~FOO"]], [0, 0, 383, 0, 0, 2, 0, 0, 5, 13, 0.004770628196320891, ["mov     rax, [rbp+buf]", "mov     [rbp+buf_malloced], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 379, 0, 0, 4, 0, 0, 34, 10, 0.1418498587894054, ["mov     eax, [rbp+count]", "mov     eax, eax", "cmp     [rbp+maxlen], rax", "jbe     short loc_E57A"], ["mov~eax,[rbp+0]", "mov~eax,eax", "cmp~[rbp+0],rax", "jbe~FOO"]], [4, 0, 379, 1, 0, 12, 0, 1, 23, 15, 0.1878927817214971, ["mov     rax, [rbp+dp]", "movzx   edx, byte ptr [rax+48h]", "mov     rax, [rbp+fbp]", "mov     [rax], dl", "mov     rax, [rbp+fbp]", "add     rax, 1", "mov     byte ptr [rax], 0", "mov     [rbp+prefix_count], 0", "mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_CDAD"], ["mov~rax,[rbp+0]", "movzx~edx,[yte ptr [rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [9, 0, 383, 7, 0, 17, 0, 1, 3, 13, 0.007155942294481336, ["mov     rax, [rbp+buf_neededlength]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+buf], rax", "mov     [rbp+buf_malloced], 0", "jmp     short loc_C54A"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rsi, [rbp+arg_9]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     [rbp+var_548], rsi", "movsd   xmm0, [rbp+var_548]", "mov     rsi, rax; maxlen", "mov     eax, 1", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_DDBA"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rbp+0],rsi", "movsd~xmm0,[rbp+0]", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 2, 0, 9, 1, 1, 35, 10, 0.001717426150675521, ["mov     eax, [rbp+count]", "movsxd  rdx, eax", "mov     rax, [rbp+length]", "add     rdx, rax", "mov     rax, [rbp+result]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_E57A"], ["mov~eax,[rbp+0]", "movsxd~rdx,eax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 36, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 35, 9, 0.1415000127216752, ["mov     eax, [rbp+count]", "cmp     [rbp+retcount], eax", "jle     short loc_E5D0"], ["mov~eax,[rbp+0]", "cmp~[rbp+0],eax", "jle~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 36, 9, 0.0, ["mov     eax, [rbp+retcount]", "mov     [rbp+count], eax", "jmp     short loc_E5D0"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 1, 0, 11, 0, 0, 25, 15, 0.00239167493575554, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "shl     rax, 5", "lea     rcx, [rdx+rax]", "mov     eax, [rbp+prefix_count]", "lea     edx, [rax+1]", "mov     [rbp+prefix_count], edx", "mov     edx, [rcx+10h]", "mov     eax, eax", "mov     [rbp+rax*4+prefixes], edx"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "lea~rcx,<TAG>", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~[rbp+0],edx", "mov~edx,[rcx+0]", "mov~eax,eax", "mov~[rbp+0],edx"]], [1, 0, 379, 0, 1, 16, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r9, [rbp+count]", "mov     rsi, [rbp+arg_9]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     [rbp+var_548], rsi", "movsd   xmm0, [rbp+var_548]", "mov     rsi, rax; maxlen", "mov     eax, 1", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_DDBA"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r9,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rbp+0],rsi", "movsd~xmm0,[rbp+0]", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [2, 0, 379, 1, 1, 14, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rcx, [rbp+count]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "push    qword ptr [rbp+arg_10.value+8]", "push    qword ptr [rbp+arg_10.value]", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     loc_DF06"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_DDFF"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 0, 4, 0, 1, 24, 14, 0.18822990611403712, ["mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_CE18"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 35, 9, 0.13807152125791924, ["cmp     [rbp+retcount], 0", "js      short loc_E5D0"], ["cmp~[rbp+0],0", "js~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 36, 9, 0.0, ["mov     eax, [rbp+retcount]", "mov     [rbp+count], eax"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax"]], [0, 0, 379, 0, 0, 4, 0, 1, 7, 9, 0.2761472830742351, ["mov     rax, [rbp+dp]", "mov     rax, [rax]", "cmp     [rbp+cp], rax", "jz      loc_C77B"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 5", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax+10h]", "mov     [rbp+arg_3], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D587"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 0, 3, 1, 0, 36, 8, 0.2840368419713508, ["mov     eax, [rbp+count]", "test    eax, eax", "jns     loc_E6D0"], ["mov~eax,[rbp+0]", "test~eax,eax", "jns~FOO"]], [2, 0, 379, 1, 1, 16, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "push    qword ptr [rbp+arg_10.value+8]", "push    qword ptr [rbp+arg_10.value]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_DF06"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 12", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "fld     tbyte ptr [rax+10h]", "fstp    [rbp+arg_10.value]", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_DE4E"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "fld~<TAG>,[byte ptr [rax+0]", "fstp~<TAG>,[rbp+0]", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [2, 0, 379, 2, 0, 8, 0, 1, 25, 15, 0.0034284914637559474, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax]", "cmp     eax, 5", "jz      short loc_CDE3"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 26, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 17, 0, 1, 5, 0, 2, 37, 7, 0.026880899676869453, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "cmp     [rbp+saved_errno], 0", "jnz     short loc_E628"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_DEA3"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_DF01"], ["jmp~FOO"]], [1, 0, 16, 0, 0, 4, 0, 1, 38, 8, 0.0051904434775971306, ["mov     rax, [rbp+dp]", "movzx   eax, byte ptr [rax+48h]", "cmp     al, 63h ; 'c'", "jz      short loc_E612"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "cmp~al,0", "jz~FOO"]], [1, 0, 15, 0, 0, 4, 0, 1, 39, 8, 0.0017365086634608046, ["mov     rax, [rbp+dp]", "movzx   eax, byte ptr [rax+48h]", "cmp     al, 73h ; 's'", "jnz     short loc_E61E"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "cmp~al,0", "jnz~FOO"]], [1, 0, 379, 1, 0, 11, 0, 0, 26, 14, 0.0023916749357555398, ["mov     rdx, [rbp+a.arg]", "mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "shl     rax, 5", "lea     rcx, [rdx+rax]", "mov     eax, [rbp+prefix_count]", "lea     edx, [rax+1]", "mov     [rbp+prefix_count], edx", "mov     edx, [rcx+10h]", "mov     eax, eax", "mov     [rbp+rax*4+prefixes], edx"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "lea~rcx,<TAG>", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~[rbp+0],edx", "mov~edx,[rcx+0]", "mov~eax,eax", "mov~[rbp+0],edx"]], [1, 0, 9, 0, 0, 2, 0, 1, 39, 5, 0.013548584077551332, ["cmp     [rbp+buf_malloced], 0", "jz      short loc_E66A"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 12, 0, 0, 3, 0, 1, 38, 6, 0.018643614991222045, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_E651"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [1, 0, 11, 0, 0, 2, 0, 1, 39, 6, 0.0017619520138411828, ["cmp     [rbp+result], 0", "jz      short loc_E651"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 10, 0, 1, 3, 0, 1, 40, 6, 0.0, ["mov     rax, [rbp+result]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 13, 0, 0, 2, 0, 1, 39, 7, 0.00012403633310434318, ["mov     [rbp+saved_errno], 54h ; 'T'", "jmp     short loc_E628"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 13, 0, 0, 1, 0, 0, 40, 7, 4.134544436811439e-05, ["mov     [rbp+saved_errno], 16h"], ["mov~[rbp+0],0"]], [0, 0, 379, 1, 1, 16, 0, 1, 8, 10, 0.03834100874403145, ["mov     rax, [rbp+dp]", "mov     rax, [rax]", "mov     rdx, rax", "mov     rax, [rbp+cp]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+n], rax", "mov     rdx, [rbp+n]", "mov     rax, [rbp+length]", "mov     rsi, rdx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+augmented_length], rax", "mov     rax, [rbp+augmented_length]", "cmp     rax, [rbp+allocated]", "jbe     loc_C742"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 9, 12, 0.03521147664724492, ["cmp     [rbp+allocated], 0", "jz      short loc_C654"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 0, 3, 1, 1, 10, 12, 0.003422130626160853, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_C64B"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 26, 12, 0.03272014858916622, ["cmp     [rbp+allocated], 0", "jz      short loc_CE64"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 1, 0, 3, 0, 1, 11, 11, 0.00119583746787777, ["mov     rax, [rbp+allocated]", "add     rax, rax", "jmp     short loc_C659"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [0, 0, 379, 0, 0, 3, 1, 1, 27, 12, 0.003422130626160853, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_CE5B"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 11, 11, 0.00119583746787777, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_C659"], ["mov~rax,0", "jmp~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 10, 11, 0.030758890330678707, ["mov     eax, 0Ch"], ["mov~eax,0"]], [0, 0, 379, 1, 0, 3, 0, 1, 28, 11, 0.0011958374678777703, ["mov     rax, [rbp+allocated]", "add     rax, rax", "jmp     short loc_CE69"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 28, 11, 0.0011958374678777703, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_CE69"], ["mov~rax,0", "jmp~FOO"]], [2, 0, 379, 2, 0, 10, 0, 1, 30, 14, 0.020678334687817598, ["mov     rdx, [rbp+a.arg]; jumptable 000000000000D00B case 6", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "shl     rax, 5", "add     rax, rdx", "mov     eax, [rax+10h]", "mov     [rbp+arg_4], eax", "mov     eax, [rbp+prefix_count]", "cmp     eax, 1", "jz      short loc_D6C0"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rax,rdx", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 27, 11, 0.028267562272600057, ["mov     eax, 0Ch"], ["mov~eax,0"]], [0, 0, 8, 0, 1, 3, 0, 1, 40, 5, 0.0, ["mov     rax, [rbp+buf_malloced]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D678"], ["cmp~eax,0", "jb~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 32, 14, 0.005145917614431468, ["cmp     eax, 2", "jz      loc_D70E"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 379, 0, 0, 4, 0, 0, 11, 10, 0.03864632894859592, ["mov     [rbp+allocated], rax", "mov     rax, [rbp+augmented_length]", "cmp     rax, [rbp+allocated]", "jbe     short loc_C67E"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 33, -1, 0.0017237869882706155, ["jmp     loc_D767"], ["jmp~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 12, 10, 0.0, ["mov     rax, [rbp+augmented_length]", "mov     [rbp+allocated], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 1, 7, 1, 0, 5, 0, 1, 40, 4, 0.010088288425819913, ["mov     rax, [rbp+d.dir]", "lea     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_E690"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 379, 0, 1, 7, 0, 1, 28, 10, 0.036155000890517264, ["mov     [rbp+allocated], rax", "mov     rax, [rbp+length]", "mov     esi, 2; size2", "mov     rdi, rax; size1", "call    xsum", "cmp     [rbp+allocated], rax", "jnb     short loc_CEA8"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnb~FOO"]], [1, 0, 379, 0, 1, 5, 0, 1, 29, 10, 0.0, ["mov     rax, [rbp+length]", "mov     esi, 2; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+allocated], rax"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 5, 1, 0, 5, 0, 1, 41, 3, 0.006577106073327736, ["mov     rax, [rbp+a.arg]", "lea     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_E6B6"], ["mov~rax,[rbp+0]", "lea~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 41, 4, 0.0, ["mov     rax, [rbp+d.dir]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 13, 11, 0.03301910795613566, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_C6B4"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 42, 3, 0.0, ["mov     rax, [rbp+a.arg]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 14, 11, 0.0017110653130804265, ["cmp     [rbp+result], 0", "jnz     short loc_C6CC"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 379, 0, 1, 13, 0, 2, 32, 13, 0.0023725924229702567, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     rsi, [rbp+count]", "mov     ecx, [rbp+arg_4]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r8, rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     loc_D76C"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 0, 1, 5, 0, 2, 14, 10, 0.03147978525812279, ["mov     rax, [rbp+memory_size]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+memory], rax", "jmp     short loc_C6EC"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 15, 10, 0.00119583746787777, ["mov     rdx, [rbp+memory_size]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [2, 0, 379, 1, 1, 18, 0, 2, 33, 13, 0.002385314098160446, ["mov     esi, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "push    qword ptr [rbp+arg_10.value+8]", "push    qword ptr [rbp+arg_10.value]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_DF06"], ["mov~esi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 3, 0, 1, 16, 11, 0.03428491463755948, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jnz     short loc_C734"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [1, 0, 379, 0, 1, 15, 0, 2, 31, 13, 0.01109891326960522, ["mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "lea     r8, [rbp+count]", "mov     esi, [rbp+arg_4]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "mov     r9, r8", "mov     r8d, esi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "mov     [rbp+retcount], eax", "jmp     short loc_D76C"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "lea~r8,[rbp+0]", "mov~esi,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,esi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 32, 10, 0.00119583746787777, ["mov     rdx, [rbp+memory_size_1]", "mov     rax, [rbp+result]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+memory_1], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 379, 0, 0, 3, 0, 1, 40, 14, 0.02720318211502088, ["mov     rax, [rbp+allocated]", "lea     rbx, [rax+rax]", "jmp     short loc_E719"], ["mov~rax,[rbp+0]", "lea~rbx,<TAG>", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 17, 11, 0.0017110653130804265, ["cmp     [rbp+length], 0", "jz      short loc_C734"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 379, 0, 1, 6, 0, 1, 18, 11, 0.0, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+result]", "mov     rax, [rbp+memory]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 17, 10, 0.036345826018370095, ["mov     rax, [rbp+memory]", "mov     [rbp+result], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 379, 0, 0, 2, 0, 1, 42, 12, 0.037149411834550346, ["cmp     [rbp+allocated], 0", "jz      short loc_E787"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 379, 2, 1, 17, 0, 2, 33, 13, 0.002385314098160446, ["mov     r8d, [rbp+prefixes+4]", "mov     ecx, [rbp+prefixes]", "mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rdi, [rdx+rax]; s", "mov     r9d, [rbp+arg_4]", "mov     rdx, [rbp+buf]; format", "mov     rax, [rbp+maxlen]", "sub     rsp, 8", "lea     rsi, [rbp+count]", "push    rsi", "mov     rsi, rax; maxlen", "mov     eax, 0", "call    _snprintf", "add     rsp, 10h", "mov     [rbp+retcount], eax", "jmp     short loc_D76C"], ["mov~r8d,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rdi,<TAG>", "mov~r9d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rsi,[rbp+0]", "push~rsi", "mov~rsi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 34, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 379, 0, 0, 3, 1, 1, 43, 12, 0.003422130626160853, ["mov     rax, [rbp+allocated]", "test    rax, rax", "js      short loc_E77E"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 379, 0, 1, 10, 0, 1, 9, 9, 0.04084929903569701, ["mov     rdx, [rbp+result]", "mov     rax, [rbp+length]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+n]; n", "mov     rax, [rbp+cp]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rax, [rbp+augmented_length]", "mov     [rbp+length], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 379, 1, 0, 3, 0, 1, 44, 11, 0.00119583746787777, ["mov     rax, [rbp+allocated]", "add     rax, rax", "jmp     short loc_E78C"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 379, 0, 0, 2, 0, 1, 44, 11, 0.00119583746787777, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_E78C"], ["mov~rax,0", "jmp~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 43, 11, 0.032696825517984245, ["mov     eax, 0Ch"], ["mov~eax,0"]], [0, 0, 379, 0, 0, 4, 0, 0, 44, 10, 0.04058426413590146, ["mov     [rbp+allocated], rax", "mov     rax, [rbp+n_2]", "cmp     rax, [rbp+allocated]", "jbe     short loc_E7B1"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [1, 0, 379, 0, 0, 2, 0, 0, 31, 14, 0.008548965727807037, ["cmp     eax, 1", "jb      short loc_D7B3"], ["cmp~eax,0", "jb~FOO"]], [0, 0, 379, 0, 0, 2, 0, 0, 45, 10, 0.0, ["mov     rax, [rbp+n_2]", "mov     [rbp+allocated], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 379, 0, 0, 4, 0, 1, 10, 13, 0.03857848001424828, ["mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_C7B8"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 11, -1, 0.0, ["call    _abort"], ["call~FOO"]], [3, 0, 379, 1, 0, 7, 0, 0, 27, 17, 0.3779864132508969, ["mov     [rbp+count], 0FFFFFFFFh", "mov     [rbp+retcount], 0", "mov     rax, [rbp+allocated]", "sub     rax, [rbp+length]", "mov     [rbp+maxlen], rax", "cmp     [rbp+maxlen], 7FFFFFFFh", "jbe     short loc_CFCE"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 379, 0, 0, 1, 0, 0, 28, 17, 0.0, ["mov     [rbp+maxlen], 7FFFFFFFh"], ["mov~[rbp+0],0"]], [0, 0, 379, 0, 0, 3, 0, 1, 46, 11, 0.03301910795613566, ["mov     rax, [rbp+result]", "cmp     rax, [rbp+resultbuf]", "jz      short loc_E7E7"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]]], "func_feature": [134, 28, 406, 3, 398, 563, 1, 2086, 0.02764, 4, 135], "succs": [[242, 246], [0, 2], [0, 3], [0], [15], [8, 4], [193, 354, 35, 165, 325, 199, 328, 73, 106, 174, 273, 210, 115, 22, 247, 137, 30, 296], [296, 6], [15], [15], [9, 5], [13], [11, 14], [227, 21], [13], [16, 32], [32], [23], [17, 20], [], [19], [27, 38], [26, 100], [131], [23], [23], [44, 28], [33, 38], [97, 31], [58], [29, 391], [98], [34, 219], [38], [41, 36], [88, 37], [41, 53], [71, 39], [47], [40, 103], [104], [60], [250], [42, 307], [99], [63], [282, 45], [49], [382, 47], [395], [49], [58], [51, 55], [60], [], [54], [152, 113], [56, 111], [131], [58], [232, 70], [], [316, 61], [324], [63], [63], [63], [63], [63], [63], [72, 81], [105], [81, 79], [74, 109], [90, 77], [80, 142], [75, 92], [78, 127], [129], [81], [82, 85], [64], [83, 84], [96], [96], [96], [291, 251], [267, 86], [105], [64, 10], [132], [57, 95], [393, 91], [154], [153, 93], [], [101, 102], [99], [], [131], [99], [102], [228, 108], [105], [], [131], [107, 139], [126, 94], [112, 114], [132], [161], [161, 110], [114, 124], [65, 66, 67, 68, 69], [125], [148, 118], [145], [146, 116], [134, 119], [123, 163], [224], [120, 122], [120, 377], [164], [125], [128, 229], [156], [132], [136, 133], [], [50, 322], [130, 308], [131], [136, 135], [166], [136], [142], [138, 170], [141, 151], [156], [182], [140, 181], [147, 158], [266], [266, 143], [324], [145], [155, 158], [166], [48], [378, 149], [183], [], [156], [], [157, 158], [131], [158], [168, 159], [168], [186, 188], [160, 162], [160], [166], [], [195, 167], [131], [169, 180], [172, 173], [171, 215], [183], [218], [173], [176, 179], [206, 175], [177, 189], [179], [233, 178], [234], [268], [220], [183], [], [131], [187, 190], [184, 190], [188], [190], [192, 197], [236], [201, 191], [201], [197], [240, 194], [212, 196], [220], [200, 257], [203, 204], [24, 18], [25, 198], [258], [202, 205], [205], [204], [211, 207], [208, 270], [236], [211], [270], [287], [209, 237], [230, 231], [263], [1], [213, 367], [220], [1], [216, 375], [], [1], [131], [1], [121, 221], [1], [260, 223], [1], [225, 397], [1], [1], [1], [248, 254], [230], [1], [236], [], [245, 238], [131], [255, 239], [268], [241, 284], [263], [285], [250], [250], [43, 243], [249, 278], [250], [280, 87], [254], [144, 252], [256, 253], [292], [144], [256], [275, 279], [287], [264, 265], [263], [], [293], [259, 261], [259, 262], [259], [131], [265], [268], [268], [295], [272, 271], [268], [268], [], [], [274, 311], [276, 286], [279], [277, 317], [318], [244, 310], [281, 290], [295], [288, 289, 290, 283], [185, 150], [288], [287], [], [305], [131], [309], [309], [309], [295], [], [395], [347, 293], [131], [], [131], [297], [297], [297], [300, 303], [298, 301], [344], [131], [131], [131], [117], [312, 314], [321, 62], [117], [305], [313, 314], [], [315, 326], [326], [321], [305], [], [306], [332, 319], [329, 294], [323, 326], [326], [76, 343], [299, 302], [331, 46], [306], [320, 327], [336, 330], [], [338, 334], [333, 373], [374], [341, 335], [341, 342], [294], [362, 356], [337, 339], [337, 340], [337], [338], [338], [345, 386], [], [346, 351], [348, 350], [355, 349], [359], [352, 353], [359], [359], [363], [363], [376, 357], [363], [362], [370, 358], [360, 383], [361, 214], [384], [214], [365, 366], [364, 222], [222], [368, 269], [365], [369, 371], [269], [371, 372], [304], [217], [217], [306], [], [379, 381], [304], [224], [48], [380, 381], [381], [386], [385, 389], [304], [], [387, 388], [76], [390], [390], [390], [392, 226], [59, 52], [226], [89, 394], [], [396, 7], [7], [12, 14]], "fname": "vasnprintf", "n_num": 398}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 5, 0, 0, 2, 0, 1, 0, 0, 0.06746031746031744, ["cmp     eax, 41h ; 'A'", "jge     short loc_ECB6"], ["cmp~eax,0", "jge~FOO"]], [1, 0, 7, 0, 0, 6, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 5Ah ; 'Z'", "jg      short loc_ECAE"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jg~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.07539682539682539, ["mov     eax, 1", "jmp     short loc_ECC2"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.04365079365079365, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 4, 1, 0, 3, 0, 1, 2, 2, 0.07142857142857142, ["sub     eax, 30h ; '0'", "cmp     eax, 9", "ja      short loc_ECBD"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 0, 2, 0, 0, 1, 0, 1, 3, 2, 0.023809523809523808, ["jmp     short loc_ECB6"], ["jmp~FOO"]], [2, 0, 3, 1, 0, 3, 0, 1, 1, 2, 0.05158730158730158, ["sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_ECBD"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 6, 0, 8, 11, 0, 20, 0.04167, 0, 2], "succs": [[3, 5], [0, 7], [], [2], [2], [4, 6], [3], [3, 4]], "fname": "c_isalnum", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_ECEC"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 1, 2, 0.1, ["cmp     eax, 5Ah ; 'Z'", "jle     short loc_ECE0"], ["cmp~eax,0", "jle~FOO"]], [2, 0, 3, 1, 0, 3, 0, 1, 2, 2, 0.05, ["sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_ECE7"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 5, 0, 0, 6, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 41h ; 'A'", "jl      short loc_ECE7"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jl~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 4, 0, 6, 8, 0, 16, 0.05, 0, 1], "succs": [[5], [0, 2], [0, 3], [5], [1, 3], []], "fname": "c_isalpha", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_ED0C"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "add     eax, 0", "cmp     eax, 7Fh", "ja      short loc_ED07"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "add~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[], [0], [0], [1, 2]], "fname": "c_isascii", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.08333333333333333, ["cmp     [rbp+c], 9", "jnz     short loc_ED28"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 1, 4, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "cmp     [rbp+c], 20h ; ' '", "jz      short loc_ED21"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],<STR>", "jz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.125, ["mov     eax, 1", "jmp     short loc_ED2D"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 1, 3, 0, 5, 6, 0, 13, 0.05, 0, 0], "succs": [[3], [0, 4], [1, 4], [], [3]], "fname": "c_isblank", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 4, 0, 0, 2, 0, 1, 0, 0, 0.1, ["cmp     eax, 1Fh", "jle     short loc_ED4A"], ["cmp~eax,0", "jle~FOO"]], [0, 0, 5, 0, 0, 6, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "test    eax, eax", "js      short loc_ED51"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "test~eax,eax", "js~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 2, 2, 0.05, ["cmp     eax, 7Fh", "jnz     short loc_ED51"], ["cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_ED56"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 1, 4, 0, 6, 8, 0, 15, 0.05, 0, 0], "succs": [[2, 3], [0, 4], [3, 4], [5], [5], []], "fname": "c_iscntrl", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 30h ; '0'", "cmp     eax, 9", "ja      short loc_ED71"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_ED76"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[1, 3], [2], [], [2]], "fname": "c_isdigit", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 21h ; '!'", "cmp     eax, 5Dh ; ']'", "ja      short loc_ED91"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_ED96"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[1, 3], [2], [], [2]], "fname": "c_isgraph", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_EDB1"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_EDB6"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[1, 3], [2], [], [2]], "fname": "c_islower", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 1, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 20h ; ' '", "cmp     eax, 5Eh ; '^'", "ja      short loc_EDD1"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,<STR>", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_EDD6"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[1, 3], [2], [], [2]], "fname": "c_isprint", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 9, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 40h ; '@'", "jg      short loc_EDF6"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jg~FOO"]], [2, 0, 3, 1, 0, 3, 0, 1, 0, 2, 0.013888888888888888, ["sub     eax, 7Bh ; '{'", "cmp     eax, 3", "ja      short loc_EE0F"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 2, 0.041666666666666664, ["cmp     eax, 60h ; '`'", "jle     short loc_EE08"], ["cmp~eax,0", "jle~FOO"]], [0, 1, 5, 0, 0, 2, 0, 1, 0, 2, 0.048611111111111105, ["cmp     eax, 3Ah ; ':'", "jge     short loc_EE08"], ["cmp~eax,<STR>", "jge~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.05555555555555555, ["mov     eax, 1", "jmp     short loc_EE14"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 2, 0, 0, 1, 0, 1, 0, 2, 0.013888888888888888, ["jmp     short loc_EE08"], ["jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 4, 1, 0, 3, 0, 1, 0, 2, 0.041666666666666664, ["sub     eax, 21h ; '!'", "cmp     eax, 0Eh", "ja      short loc_EE0F"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 0, 2, 0.048611111111111105, ["cmp     eax, 5Bh ; '['", "jl      short loc_EE0F"], ["cmp~eax,0", "jl~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 8, 0, 10, 15, 0, 24, 0.03056, 0, 2], "succs": [[8, 3], [4, 6], [1, 4], [4, 7], [9], [4], [9], [5, 6], [2, 6], []], "fname": "c_ispunct", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 5, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 9", "jl      short loc_EE36"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jl~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 2, 0.1, ["cmp     eax, 0Dh", "jle     short loc_EE2F"], ["cmp~eax,0", "jle~FOO"]], [0, 1, 3, 0, 0, 2, 0, 1, 0, 2, 0.05, ["cmp     eax, 20h ; ' '", "jnz     short loc_EE36"], ["cmp~eax,<STR>", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_EE3B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 4, 0, 6, 8, 0, 15, 0.05, 0, 0], "succs": [[1, 4], [2, 3], [3, 4], [5], [5], []], "fname": "c_isspace", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_EE5B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 41h ; 'A'", "cmp     eax, 19h", "ja      short loc_EE56"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[], [0], [0], [1, 2]], "fname": "c_isupper", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 3, 1, 0, 8, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_133F0", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_133F0", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 1, 4, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 30h ; '0'; switch 55 cases", "cmp     eax, 36h ; '6'", "ja      short loc_EE99; jumptable 000000000000EE90 default case"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.125, ["mov     eax, 0; jumptable 000000000000EE90 default case"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.041666666666666664, ["mov     eax, 1; jumptable 000000000000EE90 cases 48-57,65-70,97-102", "jmp     short loc_EE9E"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 3, 0, 5, 6, 0, 20, 0.05, 1, 2], "succs": [[2, 4], [0, 2], [3], [], [3]], "fname": "c_isxdigit", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 41h ; 'A'", "cmp     eax, 19h", "ja      short loc_EEBA"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 1, 1, 1, 0, 3, 0, 1, 0, 1, 0.08333333333333333, ["mov     eax, [rbp+c]", "add     eax, 20h ; ' '", "jmp     short loc_EEBD"], ["mov~eax,[rbp+0]", "add~eax,<STR>", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, [rbp+c]"], ["mov~eax,[rbp+0]"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 2, 13, 0.04167, 0, 2], "succs": [[1, 2], [3], [3], []], "fname": "c_tolower", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.08333333333333333, ["mov     eax, [rbp+c]"], ["mov~eax,[rbp+0]"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_EED9"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 1, 1, 1, 0, 3, 0, 1, 1, 1, 0.08333333333333333, ["mov     eax, [rbp+c]", "sub     eax, 20h ; ' '", "jmp     short loc_EEDC"], ["mov~eax,[rbp+0]", "sub~eax,<STR>", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 13, 0.04167, 0, 2], "succs": [[3], [0, 2], [3], []], "fname": "c_toupper", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 96, 0, 0, 4, 0, 1, 0, 0, 0.0, ["mov     rax, [rbp+ap]", "lea     rdx, aNull; \"(NULL)\"", "mov     [rax+10h], rdx", "jmp     loc_F671"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 7, 1, 1, 6, 5, 0.05010964912280702, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "mov     rax, [rbp+ap]", "mov     rax, [rax+10h]", "test    rax, rax", "jnz     loc_F671"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F01E"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 3", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F00A"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 21", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F5F9"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 9", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F1FA"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 7, 0.04945175438596491, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 16", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F43A"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 8, 0, 1, 3, 2, 0.8848684210526316, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_134D8", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_134D8", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     short loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F60D"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F20E"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 22", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F649"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 10", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F24D"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 1, 6, 4, 0.030701754385964914, ["mov     eax, [rax]", "mov     edx, eax", "mov     rax, [rbp+ap]", "mov     [rax+10h], dx", "jmp     loc_F675"], ["mov~eax,<TAG>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],dx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 4", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F05E"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F65D"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 6, 0.019736842105263157, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F261"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F072"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 7, 1, 1, 6, 5, 0.05010964912280702, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "mov     rax, [rbp+ap]", "mov     rax, [rax+10h]", "test    rax, rax", "jnz     loc_F674"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 6, 0.019736842105263157, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F44E"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     short loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.0002192982456140351, ["mov     eax, 0FFFFFFFFh; jumptable 000000000000EF33 default case", "jmp     short loc_F695"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 2, 2, 0.8949561403508772, ["mov     rax, [rbp+ap]", "mov     eax, [rax]", "cmp     eax, 16h; switch 23 cases", "ja      loc_F66A; jumptable 000000000000EF33 default case"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 2, 0, 1, 7, 4, 0.050548245614035085, ["nop", "jmp     short loc_F675"], ["nop", "jmp~FOO"]], [0, 0, 96, 0, 0, 1, 0, 0, 7, 4, 0.050548245614035085, ["nop"], ["nop"]], [0, 0, 96, 0, 0, 4, 0, 1, 7, 5, 0.0, ["mov     rax, [rbp+ap]", "lea     rdx, wide_null_string_2303", "mov     [rax+10h], rdx", "jmp     loc_F674"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 1, 96, 2, 0, 2, 0, 0, 5, 3, 0.9043859649122807, ["add     [rbp+i], 1", "add     [rbp+ap], 20h"], ["add~[rbp+0],0", "add~[rbp+0],<STR>"]], [0, 0, 96, 0, 0, 5, 0, 1, 6, 4, 0.030701754385964914, ["mov     eax, [rax]", "mov     edx, eax", "mov     rax, [rbp+ap]", "mov     [rax+10h], dl", "jmp     loc_F675"], ["mov~eax,<TAG>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 1, 6, 4, 0.030701754385964914, ["mov     eax, [rax]", "mov     edx, eax", "mov     rax, [rbp+ap]", "mov     [rax+10h], dl", "jmp     loc_F675"], ["mov~eax,<TAG>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 1, 6, 4, 0.030701754385964914, ["mov     eax, [rax]", "mov     edx, eax", "mov     rax, [rbp+ap]", "mov     [rax+10h], dx", "jmp     loc_F675"], ["mov~eax,<TAG>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],dx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     edx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], edx", "jmp     loc_F675"], ["mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     edx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], edx", "jmp     loc_F675"], ["mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["movsd   xmm0, qword ptr [rax]", "mov     rax, [rbp+ap]", "movsd   qword ptr [rax+10h], xmm0", "jmp     loc_F675"], ["movsd~xmm0,<TAG>", "mov~rax,[rbp+0]", "movsd~[word ptr [rax+0],xmm0", "jmp~FOO"]], [2, 0, 96, 1, 0, 11, 1, 1, 4, 4, 0.000986842105263158, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 12", "mov     rax, [rax+8]", "add     rax, 0Fh", "and     rax, 0FFFFFFFFFFFFFFF0h", "lea     rcx, [rax+10h]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx", "fld     tbyte ptr [rax]", "mov     rax, [rbp+ap]", "fstp    tbyte ptr [rax+10h]", "jmp     loc_F675"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rax,0", "and~rax,0", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx", "fld~<TAG>,<TAG>", "mov~rax,[rbp+0]", "fstp~<TAG>,[byte ptr [rax+0]", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     edx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], edx", "jmp     loc_F675"], ["mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     edx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], edx", "jmp     loc_F675"], ["mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 96, 0, 0, 4, 0, 1, 6, 4, 0.030701754385964914, ["mov     rdx, [rax]", "mov     rax, [rbp+ap]", "mov     [rax+10h], rdx", "jmp     loc_F675"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 11", "mov     eax, [rax+4]", "cmp     eax, 0AFh", "ja      short loc_F2A6"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 17", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F4AD"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 4, 0, 0, 1, 2, 0.9151315789473684, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "cmp     [rbp+i], rax", "jb      loc_EF03"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 96, 0, 0, 9, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+args], rdi", "mov     [rbp+a], rsi", "mov     [rbp+i], 0", "mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     [rbp+ap], rax", "jmp     loc_F67F"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 5", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F0B2"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.010087719298245614, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 6, 0.019736842105263157, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F3DB"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 7, 0.04945175438596491, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 15", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F3C7"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax+4]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx+4]", "lea     ecx, [rdx+10h]", "mov     rdx, [rbp+args]", "mov     [rdx+4], ecx", "jmp     short loc_F2BA"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,[rdx+0]", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F4C1"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F0C6"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 1", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_EF64"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 18", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F500"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 6", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F103"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F514"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 13", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F325"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F117"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F339"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 19", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F553"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 7", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F154"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 14", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F376"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F168"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_EF78"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F567"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F38A"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 20", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F5A6"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 8", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_F1A7"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 96, 0, 0, 4, 0, 1, 4, 6, 0.030043859649122807, ["mov     rax, [rbp+args]; jumptable 000000000000EF33 case 2", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_EFB7"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F5BA"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_F1BB"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 1, 0, 12, 0, 1, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+args]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+args]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+args]", "mov     [rdx], ecx", "jmp     short loc_EFCB"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 5, 0.010032894736842105, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [0, 0, 96, 0, 0, 5, 0, 0, 5, 6, 0.019736842105263157, ["mov     rax, [rbp+args]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+args]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]]], "func_feature": [0, 3, 71, 0, 97, 143, 1, 589, 0.05696, 3, 25], "succs": [[32], [0, 32], [17], [2, 14], [10], [11, 4], [12], [13, 6], [26, 20], [3, 5, 7, 8, 15, 16, 18, 30, 44, 51, 52, 55, 59, 65, 68, 69, 71, 76, 77, 79, 86, 87, 89], [35], [10], [35], [12], [17], [19, 22], [24, 21], [35], [29, 23], [27], [25], [28], [27], [38], [28], [33, 34], [25], [35], [35], [38], [57], [9, 30], [35], [35], [33], [53], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [35], [60, 63], [66, 61], [56, 31], [53], [67, 62], [57], [], [1], [96, 58], [43], [47], [39], [43], [36], [64, 81], [47], [39], [73, 70], [72, 74], [48], [75, 78], [40], [48], [40], [45], [82, 84], [80, 83], [45], [88, 85], [41], [36], [49], [41], [49], [46], [90, 93], [91, 94], [46], [92, 95], [50], [42], [37], [50], [42], [37], [1]], "fname": "printf_fetchargs", "n_num": 97}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 270, 2, 0, 10, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+a]", "mov     rsi, [rax+8]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "lea     rcx, [rax+1]", "mov     rdx, [rbp+a]", "mov     [rdx], rcx", "shl     rax, 5", "add     rax, rsi", "mov     dword ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rcx", "shl~rax,0", "add~rax,rsi", "mov~<TAG>,0"]], [0, 0, 270, 0, 0, 4, 0, 0, 19, 7, 0.14155307724080957, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "cmp     [rbp+n_3], rax", "jnb     short loc_101D6"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnb~FOO"]], [0, 0, 270, 0, 0, 4, 0, 0, 28, 6, 0.08446922759190417, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "cmp     [rbp+n_4], rax", "jnb     short loc_10815"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnb~FOO"]], [0, 0, 270, 0, 0, 6, 0, 0, 27, 7, 0.08110973426958556, ["mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "mov     [rbp+n_4], rax", "mov     rax, [rbp+n_4]", "cmp     rax, [rbp+a_allocated]", "jb      loc_10845"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 38, 7, 0.05256780944513286, ["mov     rax, [rbp+a]", "mov     rdx, [rbp+memory_1]", "mov     [rax+8], rdx", "jmp     short loc_10845"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [2, 0, 270, 2, 0, 10, 0, 0, 29, 7, 0.0, ["mov     rax, [rbp+a]", "mov     rsi, [rax+8]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "lea     rcx, [rax+1]", "mov     rdx, [rbp+a]", "mov     [rdx], rcx", "shl     rax, 5", "add     rax, rsi", "mov     dword ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rcx", "shl~rax,0", "add~rax,rsi", "mov~<TAG>,0"]], [0, 0, 270, 0, 1, 3, 0, 1, 33, 6, 0.021960622332369544, ["mov     rax, [rbp+memory_size_2]", "mov     rdi, rax; size", "call    _malloc"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 1, 270, 1, 0, 6, 0, 1, 32, 7, 0.04674376979209693, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_109A4"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 270, 1, 1, 5, 0, 1, 26, 7, 0.011056037450089495, ["mov     rsi, rcx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+n_2], rax", "add     [rbp+np_1], 1"], ["mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "add~[rbp+0],0"]], [1, 0, 270, 3, 0, 6, 0, 1, 25, 8, 0.0034558722291064296, ["mov     rdx, [rbp+n_2]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "jmp     short loc_FFF6"], ["mov~rdx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 25, 8, 0.0034558722291064296, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 1, 3, 1, 0, 6, 0, 1, 13, 2, 0.008921933085501859, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_10B16"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 5, 1, 0, 6, 0, 1, 12, 3, 0.015751067052182294, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_10AE8"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 4, 0, 1, 4, 0, 1, 13, 3, 0.0, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 8, 17, 8.261049153242462e-05, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 8", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [0, 1, 270, 0, 0, 4, 0, 1, 7, 13, 0.4540823351232273, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 20h ; ' '", "jnz     short loc_FA0D"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,<STR>", "jnz~FOO"]], [2, 0, 270, 1, 0, 10, 0, 1, 22, 5, 0.43711964752856947, ["nop", "mov     rax, [rbp+cp]", "lea     rdx, [rax+1]", "mov     [rbp+cp], rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "movsx   eax, [rbp+c]", "sub     eax, 25h ; '%'; switch 84 cases", "cmp     eax, 53h ; 'S'", "ja      loc_10AB3; jumptable 0000000000010431 default case"], ["nop", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movsx~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 21, 6, 0.44010739363899215, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 74h ; 't'", "jnz     short loc_103E1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 25, 6, 0.02258020101886273, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      short loc_1061A"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.02896874569737023, ["cmp     [rbp+flags], 0Fh; jumptable 0000000000010431 case 110", "jg      short loc_1060E"], ["cmp~[rbp+0],0", "jg~FOO"]], [2, 0, 270, 5, 1, 15, 0, 1, 36, 4, 0.0, ["mov     rax, [rbp+d]", "mov     rdx, [rax]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "mov     rdx, rax; n", "mov     rax, [rbp+d]", "mov     rcx, [rax+8]", "mov     rax, [rbp+memory_2]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 1, 270, 1, 0, 6, 0, 1, 35, 4, 0.044926338978383586, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jnz     short loc_10A15"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 22, 6, 0.050061957868649316, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_10020"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 21, 7, 0.03486162742668319, ["mov     [rbp+n_2], 0", "mov     rax, [rbp+cp]", "mov     [rbp+np_1], rax", "jmp     short loc_1000A"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 270, 0, 0, 6, 0, 0, 18, 8, 0.14074074074074075, ["mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "mov     [rbp+n_3], rax", "mov     rax, [rbp+n_3]", "cmp     rax, [rbp+a_allocated]", "jb      loc_10206"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 29, 8, 0.05256780944513286, ["mov     rax, [rbp+a]", "mov     rdx, [rbp+memory_0]", "mov     [rax+8], rdx", "jmp     short loc_10206"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.007173344348065537, ["mov     [rbp+type], 16h", "jmp     short loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 8, 12, 0.45117719950433705, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 23h ; '#'", "jnz     short loc_FA3B"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 2, 0, 8, 0, 1, 30, 4, 0.04173206663912984, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_4]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "cmp     [rbp+type], eax", "jnz     loc_10AB9"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "cmp~[rbp+0],eax", "jnz~FOO"]], [1, 0, 270, 2, 0, 8, 1, 1, 29, 5, 0.08164670246454633, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_4]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_10891"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 270, 2, 0, 7, 0, 1, 18, 11, 0.06558584606911744, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_1]", "shl     rdx, 5", "add     rax, rdx", "mov     dword ptr [rax], 5", "jmp     loc_FEE1"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 270, 2, 0, 8, 1, 1, 17, 6, 0.13873055211345173, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_1]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_FE22"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 23, 6, 0.012928541924824453, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_FFBC"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [0, 0, 270, 0, 0, 3, 0, 0, 36, 3, 0.04580751755472945, ["mov     rax, [rbp+d]", "mov     rdx, [rbp+memory_2]", "mov     [rax+8], rdx"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx"]], [1, 0, 270, 0, 0, 2, 0, 1, 26, 6, 0.019413465510119784, ["cmp     [rbp+flags], 7", "jle     short loc_1062F"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 23, 5, 0.037945752443893706, ["cmp     [rbp+n_2], 0", "jz      loc_10AAA"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 1, 1, 10, 0, 1, 38, 8, 0.0, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "shl     rax, 5", "mov     rdx, rax; n", "mov     rax, [rbp+a]", "mov     rcx, [rax+8]", "mov     rax, [rbp+memory_1]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 37, 8, 0.051686630868787, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jnz     short loc_10804"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jnz~FOO"]], [12, 0, 270, 6, 0, 37, 0, 1, 3, 12, 0.4378218367065951, ["mov     [rbp+arg_index], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+d]", "mov     rcx, [rax+8]", "mov     rax, [rbp+d]", "mov     rdx, [rax]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     [rbp+dp], rax", "mov     rax, [rbp+cp]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dp]", "mov     [rax], rdx", "mov     rax, [rbp+dp]", "mov     dword ptr [rax+10h], 0", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+20h], 0", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+28h], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+30h], 0", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+38h], 0", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+40h], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+dp]", "mov     qword ptr [rax+50h], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     loc_F95B"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 7, 0, 1, 2, 3, 0.43742255266418834, ["mov     rax, [rbp+cp]", "lea     rdx, [rax+1]", "mov     [rbp+cp], rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "cmp     [rbp+c], 25h ; '%'", "jnz     loc_10A24"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 270, 0, 0, 2, 0, 0, 24, 5, 0.07343728486851163, ["mov     [rbp+type], 0; jumptable 0000000000010431 case 37", "nop"], ["mov~[rbp+0],0", "nop"]], [0, 0, 270, 1, 0, 8, 0, 1, 23, 5, 0.43239708109596586, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1355C", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1355C", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 270, 0, 0, 2, 0, 1, 27, 5, 0.003621093212171279, ["mov     [rbp+type], 15h", "jmp     short loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 14, 6, 0.14682638028362935, ["mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jnz     short loc_FC5E"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 13, 7, 0.14663362247005368, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     loc_FC24"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 14, 7, 0.05320115654688145, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      loc_FC24"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 7, 0.05193446234338427, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "cmp     al, 24h ; '$'", "jnz     loc_FC24"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 1, 0, 7, 0, 0, 22, 7, 0.031529670934875395, ["mov     rax, [rbp+n_0]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dp]", "mov     [rax+28h], rdx", "mov     rax, [rbp+np_0]", "add     rax, 1", "mov     [rbp+cp], rax"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax"]], [0, 0, 2, 0, 1, 4, 0, 1, 25, 2, 0.0, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO"]], [0, 1, 3, 1, 0, 6, 0, 1, 24, 2, 0.007627702051493873, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdx, [rbp+d]", "add     rdx, 20h", "cmp     rax, rdx", "jz      short loc_10B9D"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,<STR>", "cmp~rax,rdx", "jz~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 9, 17, 0.00011014732204323282, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 10h", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.02896874569737023, ["cmp     [rbp+flags], 0Fh; jumptable 0000000000010431 cases 100,105", "jg      short loc_10449"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 4, 11, 0.054591766487677267, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      loc_F95B"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [2, 0, 270, 2, 0, 8, 0, 1, 18, 5, 0.07032218091697645, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_1]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "cmp     eax, 5", "jz      loc_FEE1"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 6, 0, 0, 1, 0, 1, 19, 4, 0.0015558309238606636, ["jmp     error"], ["jmp~FOO"]], [0, 1, 270, 0, 0, 2, 0, 1, 28, 5, 0.0036486300426820874, ["mov     [rbp+type], 12h", "jmp     short loc_10678"], ["mov~[rbp+0],<STR>", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 27, 6, 0.012969847170590664, ["mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "jz      short loc_10648"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 9, 11, 0.44824452705493595, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 30h ; '0'", "jnz     short loc_FA69"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 1, 0, 7, 0, 0, 25, 7, 0.031529670934875395, ["mov     rax, [rbp+n_2]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dp]", "mov     [rax+40h], rdx", "mov     rax, [rbp+np_1]", "add     rax, 1", "mov     [rbp+cp], rax"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 5, 0.03444857496902107, ["cmp     [rbp+n_2], 0FFFFFFFFFFFFFFFFh", "jz      loc_10AAD"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 270, 0, 0, 3, 0, 1, 5, 10, 0.05164532562302079, ["mov     rax, [rbp+cp]", "mov     [rbp+np], rax", "jmp     short loc_F859"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 270, 1, 0, 1, 0, 0, 8, 10, 1.3768415255404103e-05, ["add     [rbp+np], 1"], ["add~[rbp+0],0"]], [1, 0, 270, 0, 0, 4, 0, 1, 7, 9, 0.003249346000275368, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_F851"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.007173344348065537, ["mov     [rbp+type], 9", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 25, 6, 0.02258020101886273, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      short loc_10458"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 12, 11, 0.2937216026435357, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     loc_FEE1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 5, 0, 1, 11, 9, 0.4422965716646014, ["nop", "mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Ah ; '*'", "jnz     loc_FE48"], ["nop", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 9, 0, 1, 15, 5, 0.005493597686906237, ["mov     rax, [rbp+arg_posn]", "lea     rdx, [rax+1]", "mov     [rbp+arg_posn], rdx", "mov     rdx, [rbp+dp]", "mov     [rdx+28h], rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      loc_10AA7"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~[rdx+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 26, 6, 0.019413465510119784, ["cmp     [rbp+flags], 7", "jle     short loc_10470"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 6, 0.14503648630042681, ["mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jnz     short loc_1008F"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 16, 7, 0.14484372848685115, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     loc_10055"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 7, 0.05320115654688145, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      loc_10055"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 20, 7, 0.05193446234338427, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "cmp     al, 24h ; '$'", "jnz     loc_10055"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 31, 5, 0.05600991325898389, ["mov     [rbp+memory_size_2], rax", "cmp     [rbp+memory_size_2], 0FFFFFFFFFFFFFFFFh", "jz      loc_10B3D"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 270, 5, 0, 8, 0, 1, 30, 6, 0.025932810133553627, ["mov     rdx, [rbp+d_allocated]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "jmp     short loc_1095E"], ["mov~rdx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "jmp~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 30, 6, 0.025932810133553627, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [1, 1, 270, 1, 0, 8, 1, 1, 10, 17, 0.00013768415255404102, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 20h", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,<STR>", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 6, 9, 0.05580338703015283, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_F875"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 13, 11, 0.019248244527054936, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      short loc_FEE1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 4, 16, 0.4626325209968333, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 27h ; '''", "jnz     short loc_F986"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 7, 8, 0.05340768277571251, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "cmp     al, 24h ; '$'", "jnz     loc_F95B"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 5, 17, 0.0, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 1", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     short loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 6, 17, 2.7536830510808205e-05, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 2", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     short loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 7, 17, 5.507366102161641e-05, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 4", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 1, 0, 8, 1, 1, 11, 17, 0.00016522098306484924, ["mov     rax, [rbp+dp]", "mov     eax, [rax+10h]", "or      eax, 40h", "mov     edx, eax", "mov     rax, [rbp+dp]", "mov     [rax+10h], edx", "add     [rbp+cp], 1", "jmp     loc_F95B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 2, 0, 6, 0, 0, 12, 17, 0.031529670934875395, ["mov     rax, [rbp+n]", "sub     rax, 1", "mov     [rbp+arg_index], rax", "mov     rax, [rbp+np]", "add     rax, 1", "mov     [rbp+cp], rax"], ["mov~rax,[rbp+0]", "sub~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax"]], [2, 0, 270, 2, 0, 8, 0, 1, 21, 5, 0.07032218091697645, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_3]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "cmp     eax, 5", "jz      loc_102F6"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 270, 2, 0, 8, 1, 1, 20, 6, 0.13873055211345173, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_3]", "shl     rdx, 5", "add     rax, rdx", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_10253"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 270, 2, 0, 3, 0, 1, 20, 14, 0.0034558722291064296, ["add     [rbp+flags], 8", "add     [rbp+cp], 1", "jmp     short loc_103DC"], ["add~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 19, 8, 0.44594520170728347, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 7Ah ; 'z'", "jz      short loc_103AE"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 20, 7, 0.43981825691862864, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 5Ah ; 'Z'", "jnz     short loc_103BF"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 6, 0, 0, 1, 0, 1, 22, 4, 0.0015558309238606636, ["jmp     error"], ["jmp~FOO"]], [0, 0, 270, 0, 0, 6, 0, 0, 15, 8, 0.14211758226628116, ["mov     rax, [rbp+dp]", "mov     rax, [rax+28h]", "mov     [rbp+n_1], rax", "mov     rax, [rbp+n_1]", "cmp     rax, [rbp+a_allocated]", "jb      loc_FDD5"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 14, 13, 0.016067740603056588, ["mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+18h], rdx", "jmp     short loc_FE81"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 0, 270, 1, 0, 1, 0, 0, 17, 13, 1.3768415255404103e-05, ["add     [rbp+cp], 1"], ["add~[rbp+0],0"]], [1, 0, 270, 0, 0, 4, 0, 1, 16, 12, 0.003249346000275368, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_FE79"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 1, 5, 0, 1, 19, 8, 0.0, ["mov     rax, [rbp+n_1]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+a_allocated], rax"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 270, 0, 0, 4, 0, 1, 18, 8, 0.059038964615172794, ["mov     [rbp+a_allocated], rax", "mov     rax, [rbp+a_allocated]", "cmp     rax, [rbp+n_1]", "ja      short loc_FCC6"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 26, 5, 0.0018380834365964477, ["mov     [rbp+type], 0Bh", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 25, 6, 0.003249346000275368, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      short loc_10560"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 1, 0, 3, 0, 1, 23, 6, 0.027860388269310202, ["mov     rax, [rbp+a_allocated]", "shl     rax, 5", "jmp     short loc_1011E"], ["mov~rax,[rbp+0]", "shl~rax,0", "jmp~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 22, 7, 0.058543301665978244, ["mov     rax, 7FFFFFFFFFFFFFFh", "cmp     [rbp+a_allocated], rax", "ja      short loc_10117"], ["mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [0, 0, 270, 0, 1, 3, 0, 1, 26, 6, 0.025354536692826654, ["mov     rax, [rbp+memory_size_0]", "mov     rdi, rax; size", "call    _malloc"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 25, 7, 0.053531598513011154, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_10164"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 270, 0, 0, 3, 1, 1, 16, 10, 0.057717196750653996, ["mov     rax, [rbp+a_allocated]", "test    rax, rax", "js      short loc_FC93"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 28, 5, 0.0036486300426820874, ["mov     [rbp+type], 1", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 27, 6, 0.012969847170590664, ["mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "jz      short loc_1048C"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 9, 0, 1, 18, 5, 0.005080545229244114, ["mov     rax, [rbp+arg_posn]", "lea     rdx, [rax+1]", "mov     [rbp+arg_posn], rdx", "mov     rdx, [rbp+dp]", "mov     [rdx+40h], rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+40h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      loc_10AB0"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~[rdx+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 23, 6, 0.027860388269310202, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 270, 0, 0, 5, 0, 1, 15, 16, 0.01886272889990362, ["mov     rax, [rbp+cp]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dp]", "mov     [rax+30h], rdx", "jmp     short loc_10296"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [2, 0, 270, 1, 0, 5, 0, 1, 14, 9, 0.16564780393776676, ["add     [rbp+cp], 1", "mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Ah ; '*'", "jnz     loc_10279"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 15, 12, 0.020225802010188625, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_FE9D"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 1, 0, 1, 0, 0, 18, 16, 1.3768415255404103e-05, ["add     [rbp+cp], 1"], ["add~[rbp+0],0"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 15, 0.003249346000275368, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_1028E"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 2, 0, 8, 0, 1, 30, 4, 0.03709211069805865, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_4]", "shl     rdx, 5", "add     rdx, rax", "mov     eax, [rbp+type]", "mov     [rdx], eax", "jmp     short loc_108B5"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "jmp~FOO"]], [0, 0, 270, 1, 0, 3, 0, 1, 17, 9, 0.02744733581164808, ["mov     rax, [rbp+a_allocated]", "add     rax, rax", "jmp     short loc_FC9A"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 10, 10, 0.4452843177750241, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 49h ; 'I'", "jnz     short loc_FA97"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 17, 9, 0.02744733581164808, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.0018380834365964477, ["mov     [rbp+type], 10h", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.006498692000550736, ["cmp     [rbp+flags], 7; jumptable 0000000000010431 case 115", "jle     short loc_105C4"], ["cmp~[rbp+0],0", "jle~FOO"]], [3, 0, 1, 5, 0, 21, 0, 1, 2, 1, 0.0008674101610904585, ["mov     rax, [rbp+d]", "mov     rcx, [rax+8]", "mov     rax, [rbp+d]", "mov     rdx, [rax]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "lea     rdx, [rcx+rax]", "mov     rax, [rbp+cp]", "mov     [rdx], rax", "mov     rax, [rbp+d]", "mov     rdx, [rbp+max_width_length]", "mov     [rax+10h], rdx", "mov     rax, [rbp+d]", "mov     rdx, [rbp+max_precision_length]", "mov     [rax+18h], rdx", "mov     eax, 0", "jmp     locret_10BAD"], ["mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0", "jmp~FOO"]], [0, 0, 270, 0, 0, 4, 1, 1, 1, 2, 0.44112625636789204, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     loc_F749"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 270, 1, 0, 1, 0, 0, 18, 9, 1.3768415255404103e-05, ["add     [rbp+np_0], 1"], ["add~[rbp+0],0"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 8, 0.003249346000275368, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_FB19"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 29, 9, 0.025485336637752994, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 270, 0, 0, 3, 1, 1, 28, 10, 0.053793198402863826, ["mov     rax, [rbp+a_allocated]", "test    rax, rax", "js      short loc_10703"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 11, 4, 0.002547156822249759, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 10, 5, 0.039832025333884066, ["cmp     [rbp+n], 0", "jz      loc_10A9B"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 12, 4, 8.261049153242462e-05, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 11, 5, 0.03444857496902107, ["cmp     [rbp+n], 0FFFFFFFFFFFFFFFFh", "jz      loc_10A9E"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 8, 7, 0.03674790031667355, ["mov     [rbp+n], 0", "mov     rax, [rbp+cp]", "mov     [rbp+np], rax", "jmp     short loc_F8FF"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 16, 15, 0.02302079030703566, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_102B2"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 3", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 28, 6, 0.006498692000550736, ["mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      short loc_104A8"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 22, 4, 8.261049153242462e-05, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 21, 5, 0.03444857496902107, ["cmp     [rbp+n_0], 0FFFFFFFFFFFFFFFFh", "jz      loc_10AA4"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 16, 4, 0.002313093762907889, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 24, 4, 0.000660883932259397, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 25, 4, 8.261049153242462e-05, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 19, 4, 0.0019000413052457663, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 5", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 27, 5, 0.003621093212171279, ["mov     [rbp+type], 7", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 23, 4, 0.001982651796778191, ["nop; jumptable 0000000000010431 default case", "jmp     short error"], ["nop", "jmp~FOO"]], [0, 0, 270, 0, 0, 3, 1, 1, 19, 10, 0.05634035522511359, ["mov     rax, [rbp+a_allocated]", "test    rax, rax", "js      short loc_100C4"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 28, 4, 0.0032631144155307722, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [1, 0, 270, 0, 0, 9, 0, 1, 27, 5, 0.00644361833952912, ["mov     rax, [rbp+arg_posn]", "lea     rdx, [rax+1]", "mov     [rbp+arg_posn], rdx", "mov     rdx, [rbp+dp]", "mov     [rdx+50h], rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      loc_10AB6"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~[rdx+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [0, 0, 6, 0, 0, 1, 0, 0, 31, 4, 0.0014456836018174309, ["nop"], ["nop"]], [1, 0, 270, 1, 0, 3, 0, 1, 32, 6, 0.02658680985818532, ["mov     rax, [rbp+a_allocated]", "shl     rax, 5", "jmp     short loc_1075D"], ["mov~rax,[rbp+0]", "shl~rax,0", "jmp~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 31, 7, 0.05599614484372849, ["mov     rax, 7FFFFFFFFFFFFFFh", "cmp     [rbp+a_allocated], rax", "ja      short loc_10756"], ["mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.02896874569737023, ["cmp     [rbp+flags], 0Fh; jumptable 0000000000010431 cases 88,111,117,120", "jg      short loc_104CD"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 4", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 28, 6, 0.006498692000550736, ["mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      short loc_1052C"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 270, 1, 0, 3, 0, 1, 20, 9, 0.026758915048877875, ["mov     rax, [rbp+a_allocated]", "add     rax, rax", "jmp     short loc_100CB"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 14h", "jmp     short loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 28, 6, 0.006498692000550736, ["mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      short loc_10661"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 20, 9, 0.026758915048877875, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [2, 0, 270, 1, 0, 8, 0, 1, 11, 9, 0.0097342695855707, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 30h ; '0'", "movsxd  rcx, eax", "mov     rax, 1999999999999999h", "cmp     [rbp+n], rax", "ja      short loc_F8DE"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "movsxd~rcx,eax", "mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 10, 6, 0.012928541924824453, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_F8A2"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 7, 0, 1, 26, 6, 0.08676855293955665, ["mov     rax, [rbp+dp]", "mov     rdx, [rbp+arg_index]", "mov     [rax+50h], rdx", "mov     rax, [rbp+dp]", "mov     rax, [rax+50h]", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jnz     short loc_106CE"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 25, 6, 0.02258020101886273, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      short loc_104DC"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 4, 0, 1, 4, 0, 1, 24, 3, 0.0, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 5, 1, 0, 6, 0, 1, 23, 3, 0.014319151865620267, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_10B6F"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 21, 4, 0.000660883932259397, ["nop", "jmp     short error"], ["nop", "jmp~FOO"]], [0, 0, 270, 1, 0, 14, 0, 0, 16, 11, 0.017830097755748314, ["mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+20h], rdx", "mov     rax, [rbp+dp]", "mov     rax, [rax+20h]", "mov     rdx, rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+18h]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+width_length], rax", "mov     rax, [rbp+max_width_length]", "cmp     rax, [rbp+width_length]", "jnb     short loc_FEE1"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 270, 0, 0, 15, 0, 1, 26, 3, 0.44404516040203773, ["mov     rax, [rbp+dp]", "movzx   edx, [rbp+c]", "mov     [rax+48h], dl", "mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+8], rdx", "mov     rax, [rbp+d]", "mov     rax, [rax]", "lea     rdx, [rax+1]", "mov     rax, [rbp+d]", "mov     [rax], rdx", "mov     rax, [rbp+d]", "mov     rax, [rax]", "cmp     [rbp+d_allocated], rax", "ja      loc_10A24"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 4, 0.45212722015695994, ["cmp     [rbp+type], 0", "jz      loc_108B5"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 19, 7, 0.05992014319151866, ["mov     rax, 7FFFFFFFFFFFFFFh", "cmp     [rbp+a_allocated], rax", "ja      short loc_FCE6"], ["mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [2, 0, 270, 1, 0, 9, 0, 1, 12, 8, 0.14575244389370784, ["mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+18h], rdx", "add     [rbp+cp], 1", "mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+20h], rdx", "cmp     [rbp+max_width_length], 0", "jnz     short loc_FAE5"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "add~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 270, 0, 0, 2, 0, 0, 17, 11, 0.0, ["mov     rax, [rbp+width_length]", "mov     [rbp+max_width_length], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 270, 3, 0, 6, 0, 1, 12, 8, 0.0034558722291064296, ["mov     rdx, [rbp+n]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "jmp     short loc_F8E5"], ["mov~rdx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "jmp~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 21, 8, 0.05766212308963238, ["mov     [rbp+a_allocated], rax", "mov     rax, [rbp+a_allocated]", "cmp     rax, [rbp+n_3]", "ja      short loc_100F7"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 12, 8, 0.0034558722291064296, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [1, 0, 270, 1, 0, 3, 0, 1, 20, 6, 0.028548809032080406, ["mov     rax, [rbp+a_allocated]", "shl     rax, 5", "jmp     short loc_FCED"], ["mov~rax,[rbp+0]", "shl~rax,0", "jmp~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 20, 6, 0.028548809032080406, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 270, 1, 0, 14, 0, 0, 17, 14, 0.020625086052595346, ["mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+38h], rdx", "mov     rax, [rbp+dp]", "mov     rax, [rax+38h]", "mov     rdx, rax", "mov     rax, [rbp+dp]", "mov     rax, [rax+30h]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+precision_length], rax", "mov     rax, [rbp+max_precision_length]", "cmp     rax, [rbp+precision_length]", "jnb     short loc_102F6"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 24, 5, 0.059865069530497035, ["mov     [rbp+memory_size_0], rax", "cmp     [rbp+memory_size_0], 0FFFFFFFFFFFFFFFFh", "jz      loc_10B31"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 22, 4, 0.004874019000413053, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 25, 4, 0.0003304419661296985, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 25, 4, 0.0034971774748726423, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 28, 4, 0.0003304419661296985, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 34, 4, 0.0009500206526228831, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 37, 4, 0.0003304419661296985, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 32, 4, 0.006429849924273716, ["nop", "jmp     short out_of_memory"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 1, 0, 0, 35, 4, 0.00030290513561889026, ["nop"], ["nop"]], [1, 0, 270, 0, 0, 4, 0, 1, 13, 10, 0.43572903758777365, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Eh ; '.'", "jnz     loc_102F6"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 33, 5, 0.05731791270824728, ["mov     [rbp+memory_size_1], rax", "cmp     [rbp+memory_size_1], 0FFFFFFFFFFFFFFFFh", "jz      loc_10B37"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 270, 0, 0, 2, 0, 0, 18, 14, 0.0, ["mov     rax, [rbp+precision_length]", "mov     [rbp+max_precision_length], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 270, 0, 1, 5, 0, 1, 22, 8, 0.0, ["mov     rax, [rbp+n_3]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+a_allocated], rax"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 270, 0, 0, 1, 0, 0, 13, 8, 0.0, ["mov     [rbp+max_width_length], 1"], ["mov~[rbp+0],0"]], [1, 0, 270, 0, 0, 3, 0, 1, 21, 5, 0.06124191105603745, ["mov     [rbp+memory_size], rax", "cmp     [rbp+memory_size], 0FFFFFFFFFFFFFFFFh", "jz      loc_10B2B"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 1, 1, 5, 0, 1, 13, 7, 0.011056037450089495, ["mov     rsi, rcx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+n], rax", "add     [rbp+np], 1"], ["mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "add~[rbp+0],0"]], [2, 0, 270, 2, 0, 2, 0, 0, 22, 14, 0.00016522098306484924, ["add     [rbp+flags], 8", "add     [rbp+cp], 1"], ["add~[rbp+0],0", "add~[rbp+0],0"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.007173344348065537, ["mov     [rbp+type], 0Ah", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 27, 5, 0.003621093212171279, ["mov     [rbp+type], 8", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 28, 5, 0.0036486300426820874, ["mov     [rbp+type], 2", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 6", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.005500481894533939, ["mov     [rbp+type], 0Ch", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.0018380834365964477, ["mov     [rbp+type], 0Eh", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.0018380834365964477, ["mov     [rbp+type], 0Dh", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 0, 0, 3, 0, 1, 24, 5, 0.07343728486851163, ["mov     [rbp+type], 0Eh; jumptable 0000000000010431 case 67", "mov     [rbp+c], 63h ; 'c'", "jmp     loc_10678"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 25, 5, 0.0018380834365964477, ["mov     [rbp+type], 0Fh", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 0, 0, 3, 0, 1, 24, 5, 0.07343728486851163, ["mov     [rbp+type], 10h; jumptable 0000000000010431 case 83", "mov     [rbp+c], 73h ; 's'", "jmp     loc_10678"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 5, 0.07343728486851163, ["mov     [rbp+type], 11h; jumptable 0000000000010431 case 112", "jmp     loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 29, 5, 0.0018380834365964477, ["mov     [rbp+type], 13h", "jmp     short loc_10678"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 2, 1, 27, 6, 0.012969847170590664, ["mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "jz      short loc_10510"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 26, 6, 0.019413465510119784, ["cmp     [rbp+flags], 7", "jle     short loc_104F4"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 270, 1, 0, 3, 0, 1, 28, 8, 0.02527192620129423, ["mov     rax, [rbp+d_allocated]", "add     rax, rax", "jmp     short loc_10920"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [0, 0, 270, 0, 0, 3, 1, 1, 27, 9, 0.0533663775299463, ["mov     rax, [rbp+d_allocated]", "test    rax, rax", "js      short loc_10919"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 270, 1, 0, 3, 0, 1, 29, 9, 0.025485336637752994, ["mov     rax, [rbp+a_allocated]", "add     rax, rax", "jmp     short loc_1070A"], ["mov~rax,[rbp+0]", "add~rax,rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 9, 6, 0.05194823075863968, ["mov     rax, [rbp+np]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_F91B"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 15, 12, 0.4574005231997797, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 68h ; 'h'", "jnz     short loc_10332"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [3, 0, 270, 2, 0, 9, 2, 1, 16, 13, 0.0, ["mov     eax, [rbp+flags]", "and     eax, 1", "mov     edx, 1", "mov     ecx, eax", "shl     edx, cl", "mov     eax, edx", "or      [rbp+flags], eax", "add     [rbp+cp], 1", "jmp     short loc_10300"], ["mov~eax,[rbp+0]", "and~eax,0", "mov~edx,0", "mov~ecx,eax", "shl~edx,cl", "mov~eax,edx", "or~[rbp+0],eax", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 1, 0, 3, 1, 1, 17, 13, 2.7536830510808205e-05, ["or      [rbp+flags], 4", "add     [rbp+cp], 1", "jmp     short loc_10300"], ["or~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 2, 0, 3, 0, 1, 18, 13, 5.507366102161641e-05, ["add     [rbp+flags], 8", "add     [rbp+cp], 1", "jmp     short loc_10300"], ["add~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [2, 0, 270, 2, 0, 3, 0, 1, 19, 13, 8.261049153242462e-05, ["add     [rbp+flags], 8", "add     [rbp+cp], 1", "jmp     loc_10300"], ["add~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [0, 0, 270, 0, 0, 1, 0, 1, 21, 13, 0.007765386204047914, ["jmp     loc_10300"], ["jmp~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 14, 13, 0.4305108082059755, ["mov     [rbp+flags], 0"], ["mov~[rbp+0],0"]], [0, 0, 2, 0, 1, 4, 0, 1, 14, 2, 0.0, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    _free"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 22, 7, 0.053531598513011154, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_FD33"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [0, 0, 270, 0, 0, 3, 0, 1, 15, 9, 0.05017210519069255, ["mov     rax, [rbp+cp]", "mov     [rbp+np_0], rax", "jmp     short loc_FB21"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 30, 8, 0.055114966267382624, ["mov     [rbp+a_allocated], rax", "mov     rax, [rbp+a_allocated]", "cmp     rax, [rbp+n_4]", "ja      short loc_10736"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [2, 0, 1, 0, 1, 4, 0, 2, 14, 1, 0.001982651796778191, ["call    ___errno_location", "mov     dword ptr [rax], 16h", "mov     eax, 0FFFFFFFFh", "jmp     locret_10BAD"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 16, 8, 0.05433016659782459, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_FB3D"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 1, 5, 0, 1, 31, 8, 0.0, ["mov     rax, [rbp+n_4]", "mov     esi, 1; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+a_allocated], rax"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 270, 0, 1, 7, 0, 2, 23, 6, 0.025354536692826654, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+memory_size]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "jmp     short loc_FD3F"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 27, 5, 0.054853366377529945, ["mov     [rbp+memory_0], rax", "cmp     [rbp+memory_0], 0", "jz      loc_10B34"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 29, 7, 0.05468814539446509, ["mov     [rbp+d_allocated], rax", "mov     rax, 2E8BA2E8BA2E8BAh", "cmp     [rbp+d_allocated], rax", "ja      short loc_10957"], ["mov~[rbp+0],rax", "mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 28, 8, 0.02527192620129423, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 270, 0, 1, 3, 0, 1, 23, 6, 0.025354536692826654, ["mov     rax, [rbp+memory_size]", "mov     rdi, rax; size", "call    _malloc"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 16, 11, 0.45457799807242183, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 4Ch ; 'L'", "jnz     short loc_10351"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 0, 270, 1, 0, 10, 0, 1, 15, 8, 0.1439625499105053, ["mov     rax, [rbp+cp]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dp]", "mov     [rax+30h], rdx", "add     [rbp+cp], 1", "mov     rax, [rbp+dp]", "mov     rdx, [rbp+cp]", "mov     [rax+38h], rdx", "cmp     [rbp+max_precision_length], 1", "ja      short loc_FF4C"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "add~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 34, 5, 0.048065537656615726, ["mov     [rbp+memory_2], rax", "cmp     [rbp+memory_2], 0", "jz      loc_10B40"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 16, 8, 0.0, ["mov     [rbp+max_precision_length], 2"], ["mov~[rbp+0],0"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.009720501170315296, ["cmp     [rbp+flags], 0Fh; jumptable 0000000000010431 cases 65,69-71,97,101-103", "jg      short loc_10551"], ["cmp~[rbp+0],0", "jg~FOO"]], [8, 0, 270, 1, 0, 26, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 110h", "mov     [rbp+format], rdi", "mov     [rbp+d], rsi", "mov     [rbp+a], rdx", "mov     rax, [rbp+format]", "mov     [rbp+cp], rax", "mov     [rbp+arg_posn], 0", "mov     [rbp+max_width_length], 0", "mov     [rbp+max_precision_length], 0", "mov     rax, [rbp+d]", "mov     qword ptr [rax], 0", "mov     [rbp+d_allocated], 7", "mov     rax, [rbp+d]", "lea     rdx, [rax+20h]", "mov     rax, [rbp+d]", "mov     [rax+8], rdx", "mov     rax, [rbp+a]", "mov     qword ptr [rax], 0", "mov     [rbp+a_allocated], 7", "mov     rax, [rbp+a]", "lea     rdx, [rax+10h]", "mov     rax, [rbp+a]", "mov     [rax+8], rdx", "jmp     loc_10A24"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 24, 5, 0.054853366377529945, ["mov     [rbp+memory], rax", "cmp     [rbp+memory], 0", "jz      loc_10B2E"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 32, 6, 0.02658680985818532, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [1, 0, 270, 0, 0, 4, 0, 1, 17, 10, 0.4517279361145532, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 6Ch ; 'l'", "jnz     short loc_10370"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 270, 0, 1, 7, 0, 2, 26, 6, 0.025354536692826654, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+memory_size_0]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "jmp     short loc_10170"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 270, 0, 0, 3, 0, 1, 36, 5, 0.054853366377529945, ["mov     [rbp+memory_1], rax", "cmp     [rbp+memory_1], 0", "jz      loc_10B3A"], ["mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 25, 9, 0.051686630868787, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jnz     short loc_FD94"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jnz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 18, 7, 0.03486162742668319, ["mov     [rbp+n_0], 0", "mov     rax, [rbp+cp]", "mov     [rbp+np_0], rax", "jmp     short loc_FBC7"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 24, 6, 0.006498692000550736, ["cmp     [rbp+flags], 7; jumptable 0000000000010431 case 99", "jle     short loc_10587"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 270, 0, 0, 3, 0, 1, 18, 9, 0.05017210519069255, ["mov     rax, [rbp+cp]", "mov     [rbp+np_1], rax", "jmp     short loc_FF82"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 18, 9, 0.44885033732617374, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 6Ah ; 'j'", "jnz     short loc_10392"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 1, 0, 1, 0, 0, 21, 9, 1.3768415255404103e-05, ["add     [rbp+np_1], 1"], ["add~[rbp+0],0"]], [1, 0, 270, 0, 0, 4, 0, 1, 20, 8, 0.003249346000275368, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_FF7D"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 2, 0, 1, 20, 5, 0.037945752443893706, ["cmp     [rbp+n_0], 0", "jz      loc_10AA1"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 19, 6, 0.050061957868649316, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_FBE3"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 20, 6, 0.012928541924824453, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_FB6A"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 34, 7, 0.053531598513011154, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jz      short loc_107A3"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jz~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 19, 8, 0.05433016659782459, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_FF98"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [2, 0, 270, 1, 0, 8, 0, 1, 21, 9, 0.0097342695855707, ["mov     rax, [rbp+np_0]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 30h ; '0'", "movsxd  rcx, eax", "mov     rax, 1999999999999999h", "cmp     [rbp+n_0], rax", "ja      short loc_FBA6"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "movsxd~rcx,eax", "mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 1, 1, 10, 0, 1, 26, 9, 0.0, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "shl     rax, 5", "mov     rdx, rax; n", "mov     rax, [rbp+a]", "mov     rcx, [rax+8]", "mov     rax, [rbp+memory]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [2, 0, 270, 1, 0, 8, 0, 1, 24, 9, 0.0097342695855707, ["mov     rax, [rbp+np_1]", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 30h ; '0'", "movsxd  rcx, eax", "mov     rax, 1999999999999999h", "cmp     [rbp+n_2], rax", "ja      short loc_FFEF"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "movsxd~rcx,eax", "mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 5, 15, 0.4598099958694754, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Dh ; '-'", "jnz     short loc_F9B1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 1, 0, 6, 0, 1, 28, 9, 0.051686630868787, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+a]", "add     rdx, 10h", "cmp     rax, rdx", "jnz     short loc_101C5"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "add~rdx,0", "cmp~rax,rdx", "jnz~FOO"]], [0, 0, 270, 0, 1, 7, 0, 2, 33, 6, 0.021960622332369544, ["mov     rax, [rbp+d]", "mov     rax, [rax+8]", "mov     rdx, [rbp+memory_size_2]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "jmp     short loc_109B0"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 270, 0, 0, 4, 0, 1, 26, 8, 0.05256780944513286, ["mov     rax, [rbp+a]", "mov     rdx, [rbp+memory]", "mov     [rax+8], rdx", "jmp     short loc_FDD5"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [1, 0, 270, 3, 0, 6, 0, 1, 22, 8, 0.0034558722291064296, ["mov     rdx, [rbp+n_0]", "mov     rax, rdx", "shl     rax, 2", "add     rax, rdx", "add     rax, rax", "jmp     short loc_FBAD"], ["mov~rdx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "add~rax,rdx", "add~rax,rax", "jmp~FOO"]], [1, 0, 270, 0, 0, 1, 0, 0, 22, 8, 0.0034558722291064296, ["mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rax,0"]], [0, 0, 270, 0, 1, 3, 0, 1, 35, 6, 0.025354536692826654, ["mov     rax, [rbp+memory_size_1]", "mov     rdi, rax; size", "call    _malloc"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 1, 0, 1, 3, 0, 1, 25, 1, 0.0008261049153242461, ["call    ___errno_location", "mov     dword ptr [rax], 0Ch", "mov     eax, 0FFFFFFFFh"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0"]], [0, 0, 270, 0, 1, 7, 0, 2, 35, 6, 0.025354536692826654, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+memory_size_1]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "jmp     short loc_107AF"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 270, 0, 0, 4, 0, 1, 6, 14, 0.4569599339116068, ["mov     rax, [rbp+cp]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Bh ; '+'", "jnz     short loc_F9DF"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 270, 1, 1, 5, 0, 1, 23, 7, 0.011056037450089495, ["mov     rsi, rcx; size2", "mov     rdi, rax; size1", "call    xsum", "mov     [rbp+n_0], rax", "add     [rbp+np_0], 1"], ["mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "add~[rbp+0],0"]], [1, 0, 270, 1, 1, 10, 0, 1, 29, 9, 0.0, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "shl     rax, 5", "mov     rdx, rax; n", "mov     rax, [rbp+a]", "mov     rcx, [rax+8]", "mov     rax, [rbp+memory_0]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [2, 0, 270, 2, 0, 7, 0, 1, 21, 14, 0.06558584606911744, ["mov     rax, [rbp+a]", "mov     rax, [rax+8]", "mov     rdx, [rbp+n_3]", "shl     rdx, 5", "add     rax, rdx", "mov     dword ptr [rax], 5", "jmp     loc_102F6"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "mov~<TAG>,0", "jmp~FOO"]], [2, 0, 270, 2, 0, 10, 0, 0, 17, 8, 0.0, ["mov     rax, [rbp+a]", "mov     rsi, [rax+8]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "lea     rcx, [rax+1]", "mov     rdx, [rbp+a]", "mov     [rdx], rcx", "shl     rax, 5", "add     rax, rsi", "mov     dword ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rcx", "shl~rax,0", "add~rax,rsi", "mov~<TAG>,0"]], [0, 0, 270, 0, 0, 4, 0, 0, 16, 7, 0.14155307724080957, ["mov     rax, [rbp+a]", "mov     rax, [rax]", "cmp     [rbp+n_1], rax", "jnb     short loc_FDA5"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnb~FOO"]]], "func_feature": [24, 38, 235, 0, 271, 410, 1, 1195, 0.06689, 1, 117], "succs": [[1], [0, 87], [5, 29], [2, 125], [2], [2], [231], [257, 6], [22], [8], [8], [217, 221], [11, 13], [11], [79], [27, 14], [41, 142], [16, 191], [26, 34], [18, 26], [33], [33, 20], [32, 35], [22], [1, 143], [1], [165], [57, 50], [146, 164], [114, 28], [184], [53, 30], [35, 254], [121], [56, 42], [137, 59], [4], [4, 36], [52, 79], [121, 38], [165], [19, 199, 40, 233, 202, 142, 242, 51, 149, 119, 201], [165], [67, 92], [43, 45], [43, 219], [241, 43], [43], [263], [48, 263], [79], [64, 63], [60, 79], [184, 54], [12], [165], [154, 55], [116, 76], [69], [58, 138], [77], [77], [80, 61], [165], [68, 63], [184, 78], [65, 167], [136, 92], [106, 141], [24, 107], [69, 71], [243, 69], [69, 23], [182, 7], [73], [73], [79], [80, 62], [184, 93], [81, 255], [130, 79], [79], [79], [79], [79], [79], [216, 91], [268, 86], [215], [88, 90], [88, 17], [12], [104, 270], [111], [111], [163, 94], [166], [96, 166], [165], [98, 196], [175], [108, 100], [225], [238, 102], [115, 117], [165], [105, 133], [24, 139], [175], [131], [109, 230], [163, 95], [131], [112, 174], [164], [97], [66, 84], [97], [165], [200, 118], [262], [120, 39], [222], [122, 46], [220], [208, 124], [12], [129, 126], [12], [128, 85], [209], [113, 174], [165], [140, 132], [12], [134, 47], [12], [12], [12], [12], [165], [165], [12], [152, 155], [12], [144, 3], [12], [185], [147, 236], [192, 159], [165], [195, 150], [170], [165], [153, 203], [170], [169, 171], [156, 127], [145, 3], [192, 205], [49], [160, 49], [12], [168, 184], [121, 207], [164, 158], [172, 173], [188, 44], [184], [190], [187, 101], [190], [189], [189], [216, 186], [178, 103], [161], [161], [161], [161], [161], [161], [161], [161], [216, 110], [250, 180], [216], [101], [44], [176, 218], [209], [215], [165], [165], [165], [165], [165], [165], [165], [165], [165], [165], [165], [165], [194, 151], [193, 204], [226], [227, 206], [220], [157, 127], [211, 229], [210], [210], [210], [210], [210], [210], [221], [224, 228], [222], [148, 223], [262], [123, 46], [148], [235], [256, 179], [74, 75], [226], [235], [212, 237], [232, 70], [21, 183], [70], [99, 196], [121], [240, 177], [185], [244, 213], [225], [181, 37], [258, 253], [248], [197, 198], [251], [89, 214], [251], [72, 245], [162, 135], [249, 247], [252, 247], [264, 261], [72, 246], [259, 260], [258], [9, 10], [265, 82], [25, 267], [231], [270], [266], [266], [239], [], [262], [239], [83, 15], [248], [25], [216], [270], [269, 31]], "fname": "printf_parse", "n_num": 271}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0.16666666666666666, ["xor     ebx, ebx", "nop     dword ptr [rax+rax+00000000h]"], ["xor~ebx,ebx", "nop~[word ptr [rax+0]"]], [2, 0, 3, 2, 1, 17, 1, 2, 0, 1, 0.0, ["push    r15", "push    r14", "mov     r15, rdx", "push    r13", "push    r12", "lea     r12, __frame_dummy_init_array_entry", "push    rbp", "lea     rbp, __do_global_dtors_aux_fini_array_entry", "push    rbx", "mov     r13d, edi", "mov     r14, rsi", "sub     rbp, r12", "sub     rsp, 8", "sar     rbp, 3", "call    _init_proc", "test    rbp, rbp", "jz      short loc_10C06"], ["push~r15", "push~r14", "mov~r15,rdx", "push~r13", "push~r12", "lea~r12,<TAG>", "push~rbp", "lea~rbp,<TAG>", "push~rbx", "mov~r13d,edi", "mov~r14,rsi", "sub~rbp,r12", "sub~rsp,0", "sar~rbp,0", "call~FOO", "test~rbp,rbp", "jz~FOO"]], [1, 0, 2, 1, 1, 7, 0, 2, 2, 1, 0.16666666666666666, ["mov     rdx, r15", "mov     rsi, r14", "mov     edi, r13d", "call    qword ptr [r12+rbx*8]", "add     rbx, 1", "cmp     rbp, rbx", "jnz     short loc_10BF0"], ["mov~rdx,r15", "mov~rsi,r14", "mov~edi,r13d", "call~<TAG>", "add~rbx,0", "cmp~rbp,rbx", "jnz~FOO"]], [1, 0, 0, 1, 0, 8, 0, 0, 1, 0, 0.0, ["add     rsp, 8", "pop     rbx", "pop     rbp", "pop     r12", "pop     r13", "pop     r14", "pop     r15", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "pop~r12", "pop~r13", "pop~r14", "pop~r15", "retn"]]], "func_feature": [2, 2, 4, 0, 4, 5, 0, 34, 0.08333, 2, 4], "succs": [[2], [0, 3], [2, 3], []], "fname": "__libc_csu_init", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["rep retn"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__libc_csu_fini", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 1, 0, 0, 3, 1, 1, 0, 0, 0.0, ["mov     rdx, cs:__dso_handle", "xor     esi, esi", "jmp     ___cxa_atexit"], ["mov~rdx,<TAG>", "xor~esi,esi", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 1, 1, 0, 2, 1, 1, 3, 0.0, 1, 0], "succs": [[1], []], "fname": "atexit", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[1, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["mov     rdx, rsi; Alternative name is '__fstat'", "mov     esi, edi; fildes", "mov     edi, 1; ver", "jmp     ___fxstat"], ["mov~rdx,rsi", "mov~esi,edi", "mov~edi,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 0, 1, 0, 2, 1, 4, 4, 0.0, 0, 0], "succs": [[1], []], "fname": "fstat", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0.0, ["sub     rsp, 8; _fini", "add     rsp, 8", "retn"], ["sub~rsp,0", "add~rsp,0", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 3, 0.0, 0, 2], "succs": [[]], "fname": "term_proc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getenv:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getenv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sigprocmask:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sigprocmask", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn raise:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "raise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn free:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn abort:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "abort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __errno_location:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__errno_location", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fdatasync:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fdatasync", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn error_at_line:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "error_at_line", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strncmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strncmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn _exit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "_exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __fpending:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__fpending", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn toupper:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "toupper", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sigaction_0:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sigaction_0", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn localeconv:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "localeconv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fcntl:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fcntl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn clock_gettime:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "clock_gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn write:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "write", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn textdomain:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "textdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fclose:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fclose", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn bindtextdomain:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "bindtextdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __ctype_get_mb_cur_max:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__ctype_get_mb_cur_max", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strlen:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strlen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __stack_chk_fail:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__stack_chk_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getopt_long:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getopt_long", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mbrtowc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mbrtowc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn gettext:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "gettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn dup2:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "dup2", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strchr:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn printf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "printf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn snprintf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "snprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strrchr:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strrchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ftruncate:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ftruncate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn lseek:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "lseek", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __assert_fail:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__assert_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memset:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ioctl:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ioctl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn close:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "close", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn posix_fadvise:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "posix_fadvise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn read:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "read", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __libc_start_main:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 1, 0.0, 0, 0], "succs": [[]], "fname": "__libc_start_main", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memcmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fputs_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fputs_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ferror_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ferror_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn calloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "calloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strcmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fputc_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fputc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fprintf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sigemptyset:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sigemptyset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memcpy:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fileno:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fileno", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn tolower:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "tolower", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn putc_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "putc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn malloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "malloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fflush:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fflush", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn nl_langinfo:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "nl_langinfo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __fxstat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__fxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __freading:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__freading", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn realloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn setlocale:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "setlocale", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memmove:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memmove", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn error:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "error", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fsync:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fsync", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn open:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "open", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fseeko:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fseeko", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strtoumax:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strtoumax", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __cxa_atexit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__cxa_atexit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strcat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strcat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getpagesize:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getpagesize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sprintf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sigismember:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sigismember", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn exit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fwrite:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fwrite", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ngettext:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ngettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mbsinit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mbsinit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn iswprint:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "iswprint", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __imp___cxa_finalize:near ; weak"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__imp___cxa_finalize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn sigaddset:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "sigaddset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __ctype_b_loc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__ctype_b_loc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_dd.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __gmon_start__:near ; weak"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 1, 0.0, 0, 0], "succs": [[]], "fname": "__gmon_start__", "n_num": 1}
