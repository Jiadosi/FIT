{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    rax ; __gmon_start__"], ["call~rax"]], [1, 0, 2, 1, 0, 4, 1, 1, 0, 1, 0.0, ["sub     rsp, 8; _init", "mov     rax, cs:__gmon_start___ptr", "test    rax, rax", "jz      short loc_2732"], ["sub~rsp,0", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0.0, ["add     rsp, 8", "retn"], ["add~rsp,0", "retn"]]], "func_feature": [1, 1, 2, 0, 3, 3, 1, 7, 0.0, 1, 2], "succs": [[2], [0, 2], []], "fname": "init_proc", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0.0, ["push    cs:qword_21FC50", "jmp     cs:qword_21FC58"], ["push~<TAG>", "jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 110, 2, 0.0, 2, 0], "succs": [[]], "fname": "sub_2740", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getenv_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "getenv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:utimensat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "utimensat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:abort_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 13, 1, 0.0, 1, 0], "succs": [[]], "fname": "abort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__errno_location_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 199, 1, 0.0, 1, 0], "succs": [[]], "fname": "__errno_location", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:unlink_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "unlink", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strncmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "strncmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:_exit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "_exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strcpy_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__fpending_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__fpending", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mkdir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "mkdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:unlinkat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "unlinkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:qsort_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "qsort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:readlink_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "readlink", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fcntl_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 7, 1, 0.0, 1, 0], "succs": [[]], "fname": "fcntl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:clock_gettime_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "clock_gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:write_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "write", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getpid_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getpid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fread_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fread_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:textdomain_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "textdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:pathconf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "pathconf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fclose_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fclose", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:opendir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "opendir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:bindtextdomain_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "bindtextdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:stpcpy_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "stpcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:rmdir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "rmdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__ctype_get_mb_cur_max_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__ctype_get_mb_cur_max", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strlen_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 27, 1, 0.0, 1, 0], "succs": [[]], "fname": "strlen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__lxstat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__lxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:openat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "openat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__stack_chk_fail_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 54, 1, 0.0, 1, 0], "succs": [[]], "fname": "__stack_chk_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getuid_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getuid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getopt_long_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getopt_long", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mbrtowc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "mbrtowc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:gettext_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 160, 1, 0.0, 1, 0], "succs": [[]], "fname": "gettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strchr_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "strchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:printf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 16, 1, 0.0, 1, 0], "succs": [[]], "fname": "printf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__fxstatat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__fxstatat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strrchr_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strrchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ftruncate_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "ftruncate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:lseek_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "lseek", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:gettimeofday_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "gettimeofday", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__assert_fail_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 11, 1, 0.0, 1, 0], "succs": [[]], "fname": "__assert_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memset_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 7, 1, 0.0, 1, 0], "succs": [[]], "fname": "memset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:geteuid_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "geteuid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ioctl_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "ioctl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:canonicalize_file_name_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "canonicalize_file_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:close_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 8, 1, 0.0, 1, 0], "succs": [[]], "fname": "close", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:rewinddir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "rewinddir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strspn_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "strspn", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:closedir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "closedir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:posix_fadvise_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "posix_fadvise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:read_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "read", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memcmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 9, 1, 0.0, 1, 0], "succs": [[]], "fname": "memcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fallocate_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fallocate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fputs_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 24, 1, 0.0, 1, 0], "succs": [[]], "fname": "fputs_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:utimes_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "utimes", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:ferror_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "ferror_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:calloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "calloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:strcmp_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 10, 1, 0.0, 1, 0], "succs": [[]], "fname": "strcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:dirfd_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "dirfd", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fpathconf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fpathconf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fprintf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 22, 1, 0.0, 1, 0], "succs": [[]], "fname": "fprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:rpmatch_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "rpmatch", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:syscall_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "syscall", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mkfifo_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "mkfifo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:umask_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "umask", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:memcpy_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 20, 1, 0.0, 1, 0], "succs": [[]], "fname": "memcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:putchar_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "putchar_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__xmknod_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__xmknod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fileno_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "fileno", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getgid_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getgid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__xstat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__xstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:readdir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "readdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:putc_unlocked_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "putc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:malloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 9, 1, 0.0, 1, 0], "succs": [[]], "fname": "malloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fflush_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fflush", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:nl_langinfo_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "nl_langinfo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__fxstat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__fxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:lchown_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "lchown", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__freading_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "__freading", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:realloc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fdopen_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fdopen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:linkat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "linkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:setlocale_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "setlocale", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fchmod_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fchmod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:setvbuf_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "setvbuf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:chmod_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 6, 1, 0.0, 1, 0], "succs": [[]], "fname": "chmod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mempcpy_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 4, 1, 0.0, 1, 0], "succs": [[]], "fname": "mempcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:error_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 106, 1, 0.0, 1, 0], "succs": [[]], "fname": "error", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:open_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "open", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fseeko_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fseeko", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fchown_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fchown", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fopen_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fopen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:rename_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "rename", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fdopendir_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "fdopendir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:futimens_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "futimens", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:euidaccess_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "euidaccess", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__cxa_atexit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__cxa_atexit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getline_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getline", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:renameat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 5, 1, 0.0, 1, 0], "succs": [[]], "fname": "renameat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getpagesize_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getpagesize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:explicit_bzero_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "explicit_bzero", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:getppid_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "getppid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:exit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:fwrite_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "fwrite", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:mbsinit_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "mbsinit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:symlinkat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 2, 1, 0.0, 1, 0], "succs": [[]], "fname": "symlinkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:iswprint_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "iswprint", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:futimesat_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 3, 1, 0.0, 1, 0], "succs": [[]], "fname": "futimesat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__ctype_b_loc_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__ctype_b_loc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:data_freer"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 50, 1, 0.0, 1, 0], "succs": [[]], "fname": "free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0.0, ["jmp     cs:__cxa_finalize_ptr"], ["jmp~<TAG>"]]], "func_feature": [0, 0, 1, 0, 1, 0, 1, 1, 0.0, 1, 0], "succs": [[]], "fname": "__cxa_finalize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 1, 12, 2, 1, 0, 0, 0.0, ["xor     ebp, ebp", "mov     r9, rdx; rtld_fini", "pop     rsi; argc", "mov     rdx, rsp; ubp_av", "and     rsp, 0FFFFFFFFFFFFFFF0h", "push    rax", "push    rsp; stack_end", "lea     r8, __libc_csu_fini; fini", "lea     rcx, __libc_csu_init; init", "lea     rdi, main; main", "call    cs:__libc_start_main_ptr", "hlt"], ["xor~ebp,ebp", "mov~r9,rdx", "pop~rsi", "mov~rdx,rsp", "and~rsp,0", "push~rax", "push~rsp", "lea~r8,<TAG>", "lea~rcx,<TAG>", "lea~rdi,<TAG>", "call~<TAG>", "hlt"]]], "func_feature": [1, 2, 1, 0, 1, 0, 0, 12, 0.0, 4, 0], "succs": [[]], "fname": "_start", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0.16666666666666666, ["mov     rax, cs:_ITM_deregisterTMCloneTable_ptr", "test    rax, rax", "jz      short loc_2EA0"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 3, 0, 0, 6, 0, 1, 0, 1, 0.0, ["lea     rdi, __bss_start", "push    rbp", "lea     rax, __bss_start", "cmp     rax, rdi", "mov     rbp, rsp", "jz      short loc_2EA0"], ["lea~rdi,<TAG>", "push~rbp", "lea~rax,<TAG>", "cmp~rax,rdi", "mov~rbp,rsp", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 1, 2, -1, 0.0, ["pop     rbp", "jmp     rax"], ["pop~rbp", "jmp~rax"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 1, 3, 0, 4, 4, 1, 13, 0.04167, 2, 0], "succs": [[2, 3], [0, 3], [], []], "fname": "deregister_tm_clones", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [3, 0, 3, 2, 0, 11, 0, 1, 0, 0, 0.0, ["lea     rdi, __bss_start", "lea     rsi, __bss_start", "push    rbp", "sub     rsi, rdi", "mov     rbp, rsp", "sar     rsi, 3", "mov     rax, rsi", "shr     rax, 3Fh", "add     rsi, rax", "sar     rsi, 1", "jz      short loc_2EF0"], ["lea~rdi,<TAG>", "lea~rsi,<TAG>", "push~rbp", "sub~rsi,rdi", "mov~rbp,rsp", "sar~rsi,0", "mov~rax,rsi", "shr~rax,0", "add~rsi,rax", "sar~rsi,0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 1, 0, 0.16666666666666666, ["mov     rax, cs:_ITM_registerTMCloneTable_ptr", "test    rax, rax", "jz      short loc_2EF0"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0.0, ["pop     rbp", "jmp     rax"], ["pop~rbp", "jmp~rax"]]], "func_feature": [0, 1, 3, 0, 4, 4, 1, 18, 0.04167, 2, 2], "succs": [[], [0, 2], [0, 3], []], "fname": "register_tm_clones", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0.0, ["call    deregister_tm_clones", "mov     cs:completed_7698, 1", "pop     rbp", "retn"], ["call~FOO", "mov~<TAG>,0", "pop~rbp", "retn"]], [1, 0, 2, 0, 0, 4, 0, 1, 1, -1, 0.16666666666666666, ["cmp     cs:__cxa_finalize_ptr, 0", "push    rbp", "mov     rbp, rsp", "jz      short loc_2F23"], ["cmp~<TAG>,0", "push~rbp", "mov~rbp,rsp", "jz~FOO"]], [0, 0, 1, 0, 1, 2, 0, 1, 2, -1, 0.0, ["mov     rdi, cs:__dso_handle", "call    __cxa_finalize"], ["mov~rdi,<TAG>", "call~FOO"]], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0.0, ["rep retn"], ["retn"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 1, 0.0, ["cmp     cs:completed_7698, 0", "jnz     short locret_2F38"], ["cmp~<TAG>,0", "jnz~FOO"]]], "func_feature": [2, 0, 4, 0, 5, 5, 0, 13, 0.03333, 3, 0], "succs": [[], [0, 2], [0], [], [1, 3]], "fname": "__do_global_dtors_aux", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []], [0, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "pop     rbp", "jmp     register_tm_clones"], ["push~rbp", "mov~rbp,rsp", "pop~rbp", "jmp~FOO"]]], "func_feature": [0, 0, 1, 0, 2, 1, 0, 4, 0.0, 0, 0], "succs": [[], [0]], "fname": "frame_dummy", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 2, 2, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 8", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, msgid; \"\\nMandatory arguments to long options a\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "nop", "add     rsp, 8", "pop     rbx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 1, 15, 0.0, 2, 2], "succs": [[]], "fname": "emit_mandatory_arg_note", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 2, 4, 21, 0, 4, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 8", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aTheBackupSuffi; \"\\nThe backup suffix is '~', unless set \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNoneOffNeverMa; \"  none, off       never make backups (e\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "nop", "add     rsp, 8", "pop     rbx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [4, 0, 4, 0, 1, 0, 1, 21, 0.0, 3, 2], "succs": [[]], "fname": "emit_backup_suffix_note", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 14, 1, 0, 1, 0, 0, 0, 0, 0.005494505494505495, ["add     [rbp+map_prog], 10h"], ["add~[rbp+0],0"]], [0, 0, 14, 0, 1, 8, 1, 2, 2, 6, 0.01098901098901099, ["mov     rax, [rbp+map_prog]", "mov     rdx, [rax]", "mov     rax, [rbp+program]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_30A0"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 5, 2, 0.08241758241758243, ["lea     rbx, aInvocation; \" invocation\"", "jmp     short loc_31CA"], ["lea~rbx,<TAG>", "jmp~FOO"]], [1, 0, 5, 0, 2, 12, 0, 3, 4, 3, 0.24725274725274726, ["lea     rdi, aFullDocumentat; \"Full documentation <%s%s>\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+program]", "mov     rdx, rax", "lea     rsi, aHttpsWwwGnuOrg; \"https://www.gnu.org/software/coreutils/\"", "mov     rdi, rcx; format", "mov     eax, 0", "call    _printf", "mov     rax, [rbp+node]", "cmp     rax, [rbp+program]", "jnz     short loc_31C3"], ["lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "lea~rsi,<TAG>", "mov~rdi,rcx", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 5, 2, 0.08241758241758243, ["lea     rbx, locale"], ["lea~rbx,<TAG>"]], [0, 0, 10, 0, 0, 4, 1, 1, 2, 5, 0.2197802197802198, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax+8]", "test    rax, rax", "jz      short loc_30F9"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 14, 0, 0, 4, 1, 1, 1, 6, 0.13736263736263737, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_30D7"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 2, 0, 2, 13, 1, 3, 6, 1, 0.13186813186813187, ["lea     rdi, aOrAvailableLoc; \"or available locally via: info '(coreut\"...", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+node]", "mov     rdx, rbx", "mov     rsi, rax", "mov     rdi, rcx; format", "mov     eax, 0", "call    _printf", "nop", "mov     rax, [rbp+var_18]", "xor     rax, fs:28h", "jz      short loc_3208"], ["lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rbx", "mov~rsi,rax", "mov~rdi,rcx", "mov~eax,0", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 7, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [4, 0, 8, 0, 3, 13, 0, 4, 3, 4, 0.26373626373626374, ["lea     rdi, aSOnlineHelpS; \"\\n%s online help: <%s>\\n\"", "call    _gettext", "lea     rdx, aHttpsWwwGnuOrg; \"https://www.gnu.org/software/coreutils/\"", "lea     rsi, package; \"GNU coreutils\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     esi, 0; locale", "mov     edi, 5; category", "call    _setlocale", "mov     [rbp+lc_messages], rax", "cmp     [rbp+lc_messages], 0", "jz      short loc_317D"], ["lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 1, 7, 1, 2, 4, 4, 0.038461538461538464, ["mov     rax, [rbp+lc_messages]", "mov     edx, 3; n", "lea     rsi, s2; \"en_\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jz      short loc_317D"], ["mov~rax,[rbp+0]", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 6, 0, 2, 6, 0, 2, 5, 4, 0.0, ["mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aReportAnyTrans; \"Report any translation bugs to <https:/\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO"]], [0, 0, 9, 0, 0, 3, 0, 0, 3, 5, 0.0, ["mov     rax, [rbp+map_prog]", "mov     rax, [rax+8]", "mov     [rbp+node], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [1, 0, 0, 1, 0, 4, 0, 0, 7, 0, 0.0, ["add     rsp, 0B8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [3, 0, 14, 1, 0, 39, 1, 1, 0, 7, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0B8h", "mov     [rbp+program], rdi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "lea     rax, asc_1871E; \"[\"", "mov     [rbp+infomap.program], rax", "lea     rax, aTestInvocation; \"test invocation\"", "mov     [rbp+infomap.node], rax", "lea     rax, domainname; \"coreutils\"", "mov     [rbp+infomap.program+10h], rax", "lea     rax, aMultiCallInvoc; \"Multi-call invocation\"", "mov     [rbp+infomap.node+10h], rax", "lea     rax, aSha224sum; \"sha224sum\"", "mov     [rbp+infomap.program+20h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+20h], rax", "lea     rax, aSha256sum; \"sha256sum\"", "mov     [rbp+infomap.program+30h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+30h], rax", "lea     rax, aSha384sum; \"sha384sum\"", "mov     [rbp+infomap.program+40h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+40h], rax", "lea     rax, aSha512sum; \"sha512sum\"", "mov     [rbp+infomap.program+50h], rax", "lea     rax, aSha2Utilities; \"sha2 utilities\"", "mov     [rbp+infomap.node+50h], rax", "mov     [rbp+infomap.program+60h], 0", "mov     [rbp+infomap.node+60h], 0", "mov     rax, [rbp+program]", "mov     [rbp+node], rax", "lea     rax, [rbp+infomap]", "mov     [rbp+map_prog], rax", "jmp     short loc_30A8"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]]], "func_feature": [12, 6, 21, 1, 15, 20, 1, 118, 0.08132, 20, 3], "succs": [[6], [0, 5], [7], [2, 4], [7], [9, 12], [1, 5], [8, 13], [], [10, 3], [11, 3], [3], [9], [], [6]], "fname": "emit_ancillary_info", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sctx], rdi", "mov     rax, [rbp+sctx]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 6, 0.0, 0, 0], "succs": [[]], "fname": "se_const", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 39, 117, 0, 39, 0, 0, 0.08333333333333333, ["mov     r13, cs:program_name", "mov     r12, cs:program_name", "mov     rbx, cs:program_name", "lea     rdi, aUsageSOptionTS; \"Usage: %s [OPTION]... [-T] SOURCE DEST\"...", "call    _gettext", "mov     rcx, r13", "mov     rdx, r12", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aCopySourceToDe; \"Copy SOURCE to DEST, or multiple SOURCE\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "call    emit_mandatory_arg_note", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aAArchiveSameAs; \"  -a, --archive                same as \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aFForceIfAnExis; \"  -f, --force                  if an ex\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aLLinkHardLinkF; \"  -l, --link                   hard lin\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNNoClobberDoNo; \"  -n, --no-clobber             do not o\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aPSameAsPreserv; \"  -p                           same as \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aNoPreserveAttr; \"      --no-preserve=ATTR_LIST  don't pr\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aRRRecursiveCop; \"  -R, -r, --recursive          copy dir\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aSparseWhenCont; \"      --sparse=WHEN            control \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aSSymbolicLinkM; \"  -s, --symbolic-link          make sym\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aUUpdateCopyOnl; \"  -u, --update                 copy onl\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aZSetSelinuxSec; \"  -Z                           set SELi\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aHelpDisplayThi; \"      --help     display this help and \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aVersionOutputV; \"      --version  output version informa\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aByDefaultSpars; \"\\nBy default, sparse SOURCE files are d\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aWhenReflinkAlw; \"\\nWhen --reflink[=always] is specified,\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "call    emit_backup_suffix_note", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aAsASpecialCase; \"\\nAs a special case, cp makes a backup \"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "lea     rdi, command_name; program", "call    emit_ancillary_info"], ["mov~r13,<TAG>", "mov~r12,<TAG>", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,r13", "mov~rdx,r12", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "lea~rdi,<TAG>", "call~FOO"]], [1, 1, 3, 1, 0, 9, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r13", "push    r12", "push    rbx", "sub     rsp, 18h", "mov     [rbp+status], edi", "cmp     [rbp+status], 0", "jz      short loc_326B"], ["push~rbp", "mov~rbp,rsp", "push~r13", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 2, 0, 0.0, ["mov     eax, [rbp+status]", "mov     edi, eax; status", "call    _exit"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]], [1, 0, 1, 0, 2, 11, 0, 3, 1, 1, 0.08333333333333333, ["mov     rbx, cs:program_name", "lea     rdi, aTrySHelpForMor; \"Try '%s --help' for more information.\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdx, rbx", "mov     rsi, rcx; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_34B6"], ["mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,<TAG>", "mov~rdx,rbx", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]]], "func_feature": [42, 0, 44, 0, 4, 4, 9, 140, 0.04167, 23, 1], "succs": [[2], [0, 3], [], [2]], "fname": "usage", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 0, 3, 0, 4, 18, 0, 5, 0, 0, 0.015789473684210527, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToPreser_1; \"failed to preserve permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_37D6"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 20, 0, 1, 8, 1, 2, 6, 3, 0.039473684210526314, ["mov     rax, [rbp+p]", "mov     edx, [rax+18h]", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod", "test    eax, eax", "jz      short loc_37A2"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.09473684210526316, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_37EA"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 20, 1, 0, 8, 0, 0, 6, 4, 0.21842105263157893, ["mov     rax, [rbp+p]", "mov     rdx, [rax+98h]", "mov     rax, [rbp+dst_name]", "add     rax, rdx", "mov     byte ptr [rax], 2Fh ; '/'", "mov     rax, [rbp+p]", "mov     rax, [rax+0A0h]", "mov     [rbp+p], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [2, 0, 20, 0, 1, 11, 1, 2, 5, 3, 0.11842105263157894, ["mov     rax, [rbp+p]", "mov     ecx, [rax+18h]", "mov     rdx, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "mov     r8d, ecx; mode", "mov     ecx, 0FFFFFFFFh; dest_desc", "mov     esi, 0FFFFFFFFh; source_desc", "mov     rdi, rax; src_name", "call    copy_acl", "test    eax, eax", "jz      short loc_37A2"], ["mov~rax,[rbp+0]", "mov~ecx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,ecx", "mov~ecx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 20, 0, 0, 4, 1, 1, 5, 4, 0.125, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax+90h]", "test    al, al", "jz      short loc_37A2"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 20, 0, 0, 2, 0, 1, 1, 3, 0.2894736842105263, ["cmp     [rbp+p], 0", "jnz     loc_3590"], ["cmp~[rbp+0],0", "jnz~FOO"]], [9, 1, 20, 10, 2, 48, 1, 3, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 90h", "mov     [rbp+const_dst_name], rdi", "mov     [rbp+src_offset], rsi", "mov     [rbp+attr_list], rdx", "mov     [rbp+x], rcx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+const_dst_name]", "mov     [rbp+__old], rax", "mov     rax, [rbp+__old]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+__len], rax", "mov     rax, [rbp+__len]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+__new], rax", "mov     rdx, [rbp+__len]; n", "mov     rcx, [rbp+__old]", "mov     rax, [rbp+__new]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+dst_name], rax", "mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_offset]", "add     rax, rdx", "mov     [rbp+src_name], rax", "mov     rax, [rbp+attr_list]", "mov     [rbp+p], rax", "jmp     loc_37C6"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 4, 2, 0.015789473684210527, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToPreser; \"failed to preserve times for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_37D6"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 6, 2, 0.019736842105263157, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToPreser_0; \"failed to preserve ownership for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_37D6"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 6, 2, 0.02763157894736842, ["mov     eax, 0", "jmp     loc_37D6"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.02368421052631579, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 20, 0, 0, 4, 1, 1, 4, 4, 0.2565789473684211, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jz      short loc_3732"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 20, 0, 1, 6, 2, 2, 5, 3, 0.07236842105263158, ["mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    chown_failure_ok", "xor     eax, 1", "test    al, al", "jz      short loc_36D6"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 20, 0, 1, 10, 1, 2, 4, 4, 0.0881578947368421, ["mov     rax, [rbp+p]", "mov     edx, [rax+20h]; group", "mov     rax, [rbp+p]", "mov     ecx, [rax+1Ch]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; owner", "mov     rdi, rax; file", "call    _lchown", "test    eax, eax", "jz      short loc_36F1"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~ecx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 20, 0, 1, 7, 0, 1, 6, 5, 0.03684210526315789, ["mov     rax, [rbp+p]", "mov     edx, [rax+20h]; group", "mov     rax, [rbp+dst_name]", "mov     esi, 0FFFFFFFFh; owner", "mov     rdi, rax; file", "call    _lchown", "mov     [rbp+__x], eax"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax"]], [0, 0, 20, 0, 0, 4, 1, 1, 3, 5, 0.23684210526315788, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "test    al, al", "jz      loc_36F1"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 20, 1, 0, 9, 1, 1, 2, 4, 0.25, ["mov     rax, [rbp+p]", "mov     rdx, [rax+98h]", "mov     rax, [rbp+dst_name]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Fh]", "test    al, al", "jz      loc_3642"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 20, 0, 3, 17, 1, 4, 3, 3, 0.039473684210526314, ["mov     rax, [rbp+p]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     [rbp+timespec.tv_sec], rax", "mov     [rbp+timespec.tv_nsec], rdx", "mov     rax, [rbp+p]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbp+timespec.tv_sec+10h], rax", "mov     [rbp+timespec.tv_nsec+10h], rdx", "lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; timespec", "mov     rdi, rax; file", "call    utimens", "test    eax, eax", "jz      short loc_3642"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]]], "func_feature": [23, 12, 39, 1, 21, 30, 1, 204, 0.09373, 4, 12], "succs": [[3], [0, 4], [], [2, 13], [7], [11, 4], [1, 4], [19, 12], [7], [3], [3], [3], [3], [], [5, 6], [17, 10], [14, 15], [14], [16, 14], [18, 20], [9, 18]], "fname": "re_protect", "n_num": 21}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 59, 0, 1, 12, 1, 2, 0, 0, 0.34941724941724944, ["mov     rax, [rbp+slash]", "mov     byte ptr [rax], 0", "lea     rdx, [rbp+stats]", "mov     rax, [rbp+dir]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "setnz   al", "mov     [rbp+missing_dir], al", "cmp     [rbp+missing_dir], 0", "jnz     short loc_3A33"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 59, 0, 1, 7, 0, 2, 4, 4, 0.3773892773892774, ["mov     rax, [rbp+slash]", "mov     esi, 2Fh ; '/'; c", "mov     rdi, rax; s", "call    _strchr", "mov     [rbp+slash], rax", "cmp     [rbp+slash], 0", "jnz     loc_39CB"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 59, 0, 0, 3, 0, 1, 8, 3, 0.08857808857808858, ["mov     [rbp+src_errno], eax", "cmp     [rbp+src_errno], 0", "jz      short loc_3AD0"], ["mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 59, 0, 1, 3, 0, 2, 7, 4, 0.04685314685314685, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_3A77"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 8, 4, 0.006526806526806527, ["mov     eax, 0", "jmp     short loc_3A77"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 59, 0, 0, 1, 0, 0, 8, 4, 0.006526806526806527, ["mov     eax, 14h"], ["mov~eax,0"]], [0, 0, 59, 0, 0, 3, 0, 1, 10, 4, 0.16923076923076924, ["mov     rax, [rbp+new]", "mov     eax, [rax+18h]", "jmp     short loc_3C0C"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "jmp~FOO"]], [1, 0, 59, 0, 0, 3, 0, 1, 9, 5, 0.3487179487179487, ["movzx   edx, [rbp+missing_dir]", "cmp     [rbp+missing_dir], 0", "jz      short loc_3C07"], ["movzx~edx,[rbp+0]", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 59, 0, 0, 1, 0, 0, 10, 4, 0.16923076923076924, ["mov     eax, 0"], ["mov~eax,0"]], [0, 1, 59, 0, 0, 2, 0, 1, 15, 6, 0.006526806526806527, ["mov     eax, 12h", "jmp     short loc_3C99"], ["mov~eax,<STR>", "jmp~FOO"]], [0, 0, 59, 0, 0, 4, 1, 1, 14, 7, 0.023310023310023312, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jz      short loc_3C8D"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 16, 4, 0.10372960372960373, ["mov     eax, 1FFh", "jmp     short loc_3CC1"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 59, 0, 0, 6, 2, 1, 15, 5, 0.2177156177156177, ["and     eax, [rbp+src_mode]", "mov     [rbp+omitted_permissions], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+20h]", "test    al, al", "jz      short loc_3CBB"], ["and~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 59, 0, 1, 3, 1, 1, 22, 7, 0.0, ["call    cached_umask", "not     eax", "and     [rbp+omitted_permissions], eax"], ["call~FOO", "not~eax", "and~[rbp+0],eax"]], [0, 0, 59, 0, 0, 5, 2, 1, 21, 7, 0.04522144522144522, ["mov     eax, [rbp+stats.st_mode]", "not     eax", "and     eax, [rbp+omitted_permissions]", "test    eax, eax", "jz      short loc_3E14"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [0, 0, 59, 0, 0, 4, 1, 1, 6, 6, 0.265967365967366, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "test    al, al", "jnz     short loc_3A33"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.029836829836829837, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_4097"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [4, 0, 3, 0, 3, 16, 0, 4, 9, 2, 0.006526806526806527, ["mov     rax, [rbp+src]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aFailedToGetAtt; \"failed to get attributes of %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+src_errno]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 2, 0.003962703962703963, ["mov     eax, 0", "jmp     loc_4083"], ["mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 18, 2, 0.006293706293706293, ["mov     rax, [rbp+dir]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotMakeDire; \"cannot make directory %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 20, 2, 0.002097902097902098, ["mov     rax, [rbp+dir]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToGetAtt; \"failed to get attributes of %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 23, 2, 0.005594405594405594, ["mov     rax, [rbp+dir]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aSettingPermiss; \"setting permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [5, 0, 3, 0, 3, 15, 0, 4, 14, 2, 0.0013986013986013986, ["mov     rax, [rbp+dir]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aSExistsButIsNo; \"%s exists but is not a directory\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 19, 2, 0.004195804195804196, ["mov     eax, 0", "jmp     loc_4083"], ["mov~eax,0", "jmp~FOO"]], [5, 0, 3, 0, 3, 15, 0, 4, 2, 2, 0.0013986013986013986, ["mov     rax, [rbp+dst_dir]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aSExistsButIsNo; \"%s exists but is not a directory\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_4083"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 3, 2, 0.006993006993006993, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 59, 0, 0, 4, 1, 1, 17, 5, 0.005944055944055944, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_3FC6"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 59, 0, 0, 4, 1, 1, 16, 5, 0.04685314685314685, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jnz     short loc_3F7A"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 15, 6, 0.006526806526806527, ["mov     eax, 0", "jmp     short loc_3C99"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 59, 0, 1, 7, 1, 2, 19, 3, 0.20909090909090908, ["lea     rdx, [rbp+stats]", "mov     rax, [rbp+dir]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_3DE3"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 18, 4, 0.20582750582750584, ["cmp     [rbp+verbose_fmt_string], 0", "jz      short loc_3D78"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 59, 0, 1, 7, 0, 1, 19, 4, 0.0, ["mov     rdx, [rbp+dir]", "mov     rcx, [rbp+src]", "mov     rax, [rbp+verbose_fmt_string]", "mov     rsi, rcx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [1, 0, 59, 0, 0, 1, 0, 0, 14, 6, 0.175990675990676, ["mov     eax, 3Fh ; '?'"], ["mov~eax,0"]], [2, 0, 59, 0, 0, 10, 2, 1, 13, 7, 0.20955710955710954, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 1", "mov     rax, [rbp+new]", "mov     eax, [rax+18h]", "mov     [rbp+src_mode], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "xor     eax, 1", "test    al, al", "jz      short loc_3C94"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 6, 0, 0, 4, 1, 1, 1, 3, 0.0013986013986013986, ["mov     eax, [rbp+stats.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_4074"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [21, 0, 66, 19, 5, 86, 2, 6, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 1C0h", "mov     [rbp+const_dir], rdi", "mov     [rbp+src_offset], rsi", "mov     [rbp+verbose_fmt_string], rdx", "mov     [rbp+attr_list], rcx", "mov     [rbp+new_dst], r8", "mov     [rbp+x], r9", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+const_dir]", "mov     [rbp+__old], rax", "mov     rax, [rbp+__old]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+__len], rax", "mov     rax, [rbp+__len]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+__new], rax", "mov     rdx, [rbp+__len]; n", "mov     rcx, [rbp+__old]", "mov     rax, [rbp+__new]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+dir], rax", "mov     rdx, [rbp+dir]", "mov     rax, [rbp+src_offset]", "add     rax, rdx", "mov     [rbp+src], rax", "mov     rax, [rbp+dir]", "mov     rdi, rax; file", "call    dir_len", "mov     [rbp+dirlen], rax", "mov     rax, [rbp+dirlen]", "add     rax, 1", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+dst_dir], rax", "mov     rdx, [rbp+dirlen]; n", "mov     rcx, [rbp+dir]", "mov     rax, [rbp+dst_dir]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rdx, [rbp+dst_dir]", "mov     rax, [rbp+dirlen]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+attr_list]", "mov     qword ptr [rax], 0", "lea     rdx, [rbp+stats]", "mov     rax, [rbp+dst_dir]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      loc_401E"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 59, 0, 0, 1, 0, 1, 3, 5, 0.05407925407925408, ["jmp     loc_3FF3"], ["jmp~FOO"]], [1, 0, 59, 0, 0, 4, 0, 1, 17, 5, 0.3198135198135198, ["mov     rax, [rbp+slash]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_3FDD"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [0, 1, 59, 0, 1, 13, 3, 2, 17, 3, 0.22261072261072262, ["mov     [rbp+mkdir_mode], eax", "mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+mkdir_mode]", "and     eax, 0FFFh", "mov     [rbp+mkdir_mode], eax", "mov     edx, [rbp+mkdir_mode]", "mov     rax, [rbp+dir]", "mov     esi, edx; mode", "mov     rdi, rax; path", "call    _mkdir", "test    eax, eax", "jz      short loc_3D49"], ["mov~[rbp+0],eax", "mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "and~eax,<STR>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 59, 0, 0, 1, 0, 0, 16, 4, 0.10372960372960373, ["mov     eax, [rbp+src_mode]"], ["mov~eax,[rbp+0]"]], [0, 0, 4, 0, 0, 1, 0, 1, 5, 3, 0.017482517482517484, ["jmp     short loc_407E"], ["jmp~FOO"]], [0, 0, 59, 0, 0, 4, 1, 1, 7, 6, 0.26503496503496504, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jnz     short loc_3A33"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 59, 0, 0, 5, 2, 1, 20, 5, 0.1965034965034965, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "xor     eax, 1", "test    al, al", "jz      short loc_3E5E"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 59, 0, 0, 5, 2, 1, 22, 6, 0.048484848484848485, ["mov     eax, [rbp+stats.st_mode]", "not     eax", "and     eax, [rbp+omitted_permissions]", "test    eax, eax", "jnz     short loc_3E38"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "test~eax,eax", "jnz~FOO"]], [1, 0, 59, 0, 0, 7, 1, 0, 23, 5, 0.019230769230769232, ["mov     eax, [rbp+stats.st_mode]", "or      eax, [rbp+omitted_permissions]", "mov     edx, eax", "mov     rax, [rbp+new]", "mov     [rax+18h], edx", "mov     rax, [rbp+new]", "mov     byte ptr [rax+90h], 1"], ["mov~eax,[rbp+0]", "or~eax,[rbp+0]", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [2, 0, 59, 0, 0, 4, 1, 1, 23, 5, 0.019230769230769232, ["mov     eax, [rbp+stats.st_mode]", "and     eax, 1C0h", "cmp     eax, 1C0h", "jz      short loc_3E5E"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 59, 0, 1, 12, 2, 2, 17, 4, 0.03205128205128205, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "movzx   esi, al; process_local", "mov     rdx, [rbp+x]", "mov     rax, [rbp+dir]", "mov     rcx, rdx; x", "mov     edx, 0; recurse", "mov     rdi, rax; dst_name", "call    set_file_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_3FC6"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~esi,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 59, 0, 0, 4, 1, 1, 8, 6, 0.2641025641025641, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Fh]", "test    al, al", "jz      loc_3BEB"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 62, 0, 0, 3, 0, 1, 1, 7, 0.01351981351981352, ["mov     rax, [rbp+src]", "mov     [rbp+slash], rax", "jmp     short loc_39B8"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 62, 1, 0, 1, 0, 0, 3, 7, 0.0, ["add     [rbp+slash], 1"], ["add~[rbp+0],0"]], [1, 0, 62, 0, 0, 4, 0, 1, 2, 6, 0.04149184149184149, ["mov     rax, [rbp+slash]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_39B0"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [1, 0, 59, 0, 1, 10, 2, 2, 11, 3, 0.3536130536130536, ["mov     rcx, [rbp+x]", "mov     rsi, [rbp+dir]; dst_name", "mov     rdi, [rbp+src]; src_name", "mov     r8, rcx; x", "mov     ecx, edx; new_dst", "mov     edx, eax; mode", "call    set_process_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_3C3E"], ["mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rdi,[rbp+0]", "mov~r8,rcx", "mov~ecx,edx", "mov~edx,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 59, 0, 0, 4, 1, 1, 18, 3, 0.015384615384615385, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      short loc_3FC6"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 59, 0, 0, 4, 1, 1, 13, 3, 0.11934731934731935, ["mov     eax, [rbp+stats.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_3F41"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 12, 4, 0.33916083916083917, ["cmp     [rbp+missing_dir], 0", "jz      loc_3EE8"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 0, 14, 7, 0.10745920745920746, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 59, 0, 1, 7, 1, 2, 6, 5, 0.08041958041958042, ["lea     rdx, [rbp+src_st]", "mov     rax, [rbp+src]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      short loc_3A59"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 59, 0, 1, 9, 2, 2, 22, 3, 0.016783216783216783, ["mov     eax, [rbp+stats.st_mode]", "or      eax, 1C0h", "mov     edx, eax", "mov     rax, [rbp+dir]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod", "test    eax, eax", "jz      loc_3F4B"], ["mov~eax,[rbp+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 59, 0, 0, 4, 1, 1, 21, 4, 0.2062937062937063, ["mov     eax, [rbp+stats.st_mode]", "and     eax, 1C0h", "cmp     eax, 1C0h", "jz      loc_3F4B"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 59, 0, 0, 5, 2, 1, 15, 6, 0.3128205128205128, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "xor     eax, 1", "test    al, al", "jz      short loc_3FC6"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 59, 0, 0, 5, 0, 1, 16, 6, 0.30466200466200466, ["mov     rax, [rbp+slash]", "lea     rdx, [rax+1]", "mov     [rbp+slash], rdx", "mov     byte ptr [rax], 2Fh ; '/'", "jmp     short loc_3FE5"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 59, 1, 0, 1, 0, 0, 18, 6, 0.0, ["add     [rbp+slash], 1"], ["add~[rbp+0],0"]], [2, 0, 59, 1, 1, 56, 0, 1, 9, 6, 0.07156177156177156, ["mov     edi, 0A8h; n", "call    xmalloc", "mov     [rbp+new], rax", "mov     rax, [rbp+new]", "mov     rdx, [rbp+src_st.st_dev]", "mov     rcx, [rbp+src_st.st_ino]", "mov     [rax], rdx", "mov     [rax+8], rcx", "mov     rdx, [rbp+src_st.st_nlink]", "mov     rcx, qword ptr [rbp+src_st.st_mode]", "mov     [rax+10h], rdx", "mov     [rax+18h], rcx", "mov     rdx, qword ptr [rbp+src_st.st_gid]", "mov     rcx, [rbp+src_st.st_rdev]", "mov     [rax+20h], rdx", "mov     [rax+28h], rcx", "mov     rdx, [rbp+src_st.st_size]", "mov     rcx, [rbp+src_st.st_blksize]", "mov     [rax+30h], rdx", "mov     [rax+38h], rcx", "mov     rdx, [rbp+src_st.st_blocks]", "mov     rcx, [rbp+src_st.st_atim.tv_sec]", "mov     [rax+40h], rdx", "mov     [rax+48h], rcx", "mov     rdx, [rbp+src_st.st_atim.tv_nsec]", "mov     rcx, [rbp+src_st.st_mtim.tv_sec]", "mov     [rax+50h], rdx", "mov     [rax+58h], rcx", "mov     rdx, [rbp+src_st.st_mtim.tv_nsec]", "mov     rcx, [rbp+src_st.st_ctim.tv_sec]", "mov     [rax+60h], rdx", "mov     [rax+68h], rcx", "mov     rdx, [rbp+src_st.st_ctim.tv_nsec]", "mov     rcx, [rbp+src_st.__glibc_reserved]", "mov     [rax+70h], rdx", "mov     [rax+78h], rcx", "mov     rdx, [rbp+src_st.__glibc_reserved+8]", "mov     rcx, [rbp+src_st.__glibc_reserved+10h]", "mov     [rax+80h], rdx", "mov     [rax+88h], rcx", "mov     rdx, [rbp+slash]", "mov     rax, [rbp+dir]", "sub     rdx, rax", "mov     rax, rdx", "mov     rdx, rax", "mov     rax, [rbp+new]", "mov     [rax+98h], rdx", "mov     rax, [rbp+new]", "mov     byte ptr [rax+90h], 0", "mov     rax, [rbp+attr_list]", "mov     rdx, [rax]", "mov     rax, [rbp+new]", "mov     [rax+0A0h], rdx", "mov     rax, [rbp+attr_list]", "mov     rdx, [rbp+new]", "mov     [rax], rdx"], ["mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~<TAG>,rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[word ptr [rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[word ptr [rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~[rax+0],rdx", "mov~[rax+0],rcx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx"]], [2, 0, 59, 0, 0, 4, 1, 1, 7, 5, 0.023310023310023312, ["mov     eax, [rbp+src_st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_3A72"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 4, 0, 0, 2, 0, 0, 2, 3, 0.0004662004662004662, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]]], "func_feature": [39, 41, 91, 1, 67, 99, 1, 486, 0.10034, 5, 22], "succs": [[57, 15], [0, 40], [17, 63], [2], [2], [2], [52], [8, 6], [52], [12], [9, 28], [38], [11, 39], [43], [43, 13], [41, 57], [65, 47], [16], [16], [16], [16], [16], [16], [16], [16], [16], [61, 46], [26, 46], [12], [42, 20], [29, 31], [29], [12], [32, 10], [24, 66], [49, 34], [1], [1, 62], [19, 30], [38], [25], [48, 57], [59, 14], [44, 45], [59], [59, 44], [53, 61], [], [57, 7], [51], [51], [50, 36], [18, 55], [61, 23], [56, 22], [33, 54], [60], [64, 3], [60, 21], [58, 60], [27, 61], [37], [37], [7], [4, 5], [], [25]], "fname": "make_dir_parents_private", "n_num": 67}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 7, 0, 0, 2, 0, 1, 0, 0, 0.022435897435897436, ["mov     eax, 1", "jmp     short loc_4107"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 9, 0, 0, 5, 1, 1, 3, 3, 0.02564102564102564, ["mov     rax, [rbp+st]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_4102"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 3, 0, 1, 6, 1, 0.00641025641025641, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 1", "jmp     short loc_4170"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 5, 2, 0.20512820512820512, ["cmp     [rbp+err], 2", "jnz     short loc_4123"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 3, 2, 0.20192307692307693, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 10, 0, 0, 3, 0, 1, 2, 3, 0.1923076923076923, ["mov     [rbp+err], eax", "cmp     [rbp+err], 0", "jnz     short loc_4102"], ["mov~[rbp+0],eax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 11, 0, 1, 3, 0, 2, 1, 4, 0.035256410256410256, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_40DF"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 11, 0, 0, 1, 0, 0, 1, 4, 0.035256410256410256, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 6, 2, 0.11538461538461538, ["cmp     [rbp+forcing], 0", "jz      short loc_4136"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 1, 0, 3, 14, 0, 3, 7, 1, 0.003205128205128205, ["mov     rax, [rbp+file]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aFailedToAccess; \"failed to access %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+err]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 13, 1, 1, 16, 1, 2, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+file], rdi", "mov     [rbp+st], rsi", "mov     [rbp+new_dst], rdx", "mov     eax, ecx", "mov     [rbp+forcing], al", "mov     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      short loc_40DA"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~eax,ecx", "mov~[rbp+0],al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 6, 0, 0, 4, 1, 1, 4, 1, 0.2692307692307692, ["mov     [rbp+is_a_dir], al", "and     [rbp+is_a_dir], 1", "cmp     [rbp+err], 0", "jz      short loc_4170"], ["mov~[rbp+0],al", "and~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 1, 0, 0, 3, 0, 1, 7, 1, 0.003205128205128205, ["mov     rax, [rbp+st]", "mov     dword ptr [rax+18h], 0", "jmp     short loc_4170"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "jmp~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 5, 0, 0.0, ["movzx   eax, [rbp+is_a_dir]", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["movzx~eax,[rbp+0]", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [5, 3, 15, 0, 14, 19, 2, 64, 0.07967, 1, 2], "succs": [[11], [0, 4], [13], [8, 2], [11], [1, 4], [5], [5], [9, 12], [13], [6, 7], [3, 13], [13], []], "fname": "target_directory_operand", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 25, 0, 0, 3, 0, 1, 0, 0, 0.21727060198714201, ["mov     eax, [rbp+i]", "cmp     eax, [rbp+n_files]", "jl      loc_4484"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jl~FOO"]], [1, 0, 25, 0, 0, 2, 0, 1, 7, 4, 0.1313559322033898, ["mov     [rbp+i], 0", "jmp     loc_4834"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 25, 1, 1, 4, 0, 1, 17, 4, 0.08328462887200468, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; ptr", "call    free", "add     [rbp+i], 1"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~[rbp+0],0"]], [0, 0, 25, 0, 1, 4, 0, 2, 12, 9, 0.02841905318527177, ["mov     rax, [rbp+target_directory]", "mov     rdi, rax; string", "call    xstrdup", "jmp     short loc_470B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [9, 0, 25, 8, 5, 40, 1, 6, 11, 10, 0.07320280537697253, ["mov     rax, [rbp+arg]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+__old_0], rax", "mov     rax, [rbp+__old_0]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+__len_0], rax", "mov     rax, [rbp+__len_0]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+__new_0], rax", "mov     rdx, [rbp+__len_0]; n", "mov     rcx, [rbp+__old_0]", "mov     rax, [rbp+__new_0]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+s1], rax", "mov     rax, [rbp+s1]", "mov     rdi, rax; file", "call    strip_trailing_slashes", "mov     rax, [rbp+s1]", "lea     rsi, off_19C4E; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_46ED"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 25, 0, 1, 6, 0, 1, 12, 9, 0.02841905318527177, ["mov     rcx, [rbp+s1]", "mov     rax, [rbp+target_directory]", "mov     edx, 0; base_in_result", "mov     rsi, rcx; base", "mov     rdi, rax; dir", "call    file_name_concat"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 5, -1, 0.0, ["mov     edi, 1; status", "call    usage"], ["mov~edi,0", "call~FOO"]], [3, 0, 1, 0, 2, 8, 0, 3, 4, -1, 0.0008766803039158386, ["lea     rdi, aMissingFileOpe; \"missing file operand\"", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_4282"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [4, 0, 1, 0, 3, 14, 0, 3, 4, -1, 0.0008766803039158386, ["mov     rax, [rbp+file]", "mov     rax, [rax]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aMissingDestina; \"missing destination file operand after \"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 3, 0, 1, 11, 0, 1, 9, 2, 0.014465225014611338, ["lea     rcx, [rbp+unused]", "mov     rdx, [rbp+x]", "mov     rsi, [rbp+new_dest]; dst_name", "mov     rax, [rbp+source]", "mov     r9d, 0; rename_succeeded", "mov     r8, rcx; copy_into_self", "mov     rcx, rdx; options", "mov     edx, 0; nonexistent_dst", "mov     rdi, rax; src_name", "call    copy", "mov     [rbp+ok], al"], ["lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9d,0", "mov~r8,rcx", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al"]], [2, 0, 4, 0, 1, 32, 0, 2, 12, 3, 0.0005844535359438924, ["mov     rax, [rbp+x]", "mov     edx, [rax]; backup_type", "mov     rax, [rbp+dest]", "mov     rsi, rax; file", "mov     edi, 0FFFFFF9Ch; dir_fd", "call    find_backup_file_name", "mov     [rbp+new_dest], rax", "mov     rax, [rbp+x]", "mov     rdx, [rax]", "mov     rcx, [rax+8]", "mov     qword ptr cs:x_tmp_6509.backup_type, rdx", "mov     qword ptr cs:x_tmp_6509.interactive, rcx", "mov     rdx, [rax+10h]", "mov     rcx, [rax+18h]", "mov     qword ptr cs:x_tmp_6509.mode, rdx", "mov     qword ptr cs:x_tmp_6509.move_mode, rcx", "mov     rdx, [rax+20h]", "mov     rcx, [rax+28h]", "mov     qword ptr cs:x_tmp_6509.explicit_no_preserve_mode, rdx", "mov     qword ptr cs:x_tmp_6509.require_preserve_xattr, rcx", "mov     rdx, [rax+30h]", "mov     rcx, [rax+38h]", "mov     qword ptr cs:x_tmp_6509.open_dangling_dest_symlink, rdx", "mov     qword ptr cs:x_tmp_6509.reflink_mode, rcx", "mov     rdx, [rax+48h]", "mov     rax, [rax+40h]", "mov     cs:x_tmp_6509.dest_info, rax", "mov     cs:x_tmp_6509.src_info, rdx", "mov     cs:x_tmp_6509.backup_type, 0", "lea     rax, x_tmp_6509", "mov     [rbp+x], rax", "jmp     short loc_49D3"], ["mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rcx,[rax+0]", "mov~<TAG>,rdx", "mov~<TAG>,rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~<TAG>,rdx", "mov~<TAG>,rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~<TAG>,rdx", "mov~<TAG>,rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~<TAG>,rdx", "mov~<TAG>,rcx", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~<TAG>,rax", "mov~<TAG>,rdx", "mov~<TAG>,0", "lea~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 4, 0, 0, 2, 0, 0, 8, 3, 0.018848626534190532, ["mov     rax, [rbp+dest]", "mov     [rbp+new_dest], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 25, 0, 0, 1, 0, 0, 13, 8, 0.05917592051431911, ["mov     [rbp+dst_name], rax"], ["mov~[rbp+0],rax"]], [0, 0, 25, 0, 1, 8, 0, 1, 19, 6, 0.0, ["mov     rax, [rbp+attr_list]", "mov     [rbp+p], rax", "mov     rax, [rbp+attr_list]", "mov     rax, [rax+0A0h]", "mov     [rbp+attr_list], rax", "mov     rax, [rbp+p]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 25, 0, 0, 3, 1, 1, 18, 5, 0.024547048509643482, ["mov     rax, [rbp+attr_list]", "test    rax, rax", "jnz     short loc_47E0"], ["mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [2, 0, 55, 0, 0, 7, 1, 1, 2, 9, 0.06428988895382817, ["mov     [rbp+forcing], al", "and     [rbp+forcing], 1", "cmp     [rbp+target_directory], 0", "setz    al", "movzx   eax, al", "cmp     [rbp+n_files], eax", "jg      short loc_428C"], ["mov~[rbp+0],al", "and~[rbp+0],0", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "cmp~[rbp+0],eax", "jg~FOO"]], [1, 0, 56, 0, 0, 2, 0, 1, 1, 10, 0.024547048509643482, ["mov     eax, 1", "jmp     short loc_41F1"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 56, 0, 0, 1, 0, 0, 2, 10, 0.008182349503214495, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 50, 0, 0, 2, 0, 1, 3, 8, 0.07305669199298655, ["cmp     [rbp+no_target_directory], 0", "jz      loc_4362"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 11, 0, 0.0, ["mov     rbx, [rbp+var_8]", "leave", "retn"], ["mov~rbx,[rbp+0]", "leave", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 10, 1, 0.029807130333138514, ["movzx   eax, [rbp+ok]", "mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_4A29"], ["movzx~eax,[rbp+0]", "mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [0, 0, 25, 1, 1, 18, 0, 2, 13, 8, 0.05917592051431911, ["mov     rdx, [rbp+unused]", "mov     rcx, rdx", "mov     rdx, [rbp+dst_name]", "sub     rcx, rdx", "mov     rdx, rcx", "mov     r10, rdx", "mov     rsi, [rbp+x]", "lea     rcx, [rbp+new_dst]", "lea     rdx, [rbp+attr_list]", "mov     rdi, [rbp+dst_name]; const_dir", "mov     r9, rsi; x", "mov     r8, rcx; new_dst", "mov     rcx, rdx; attr_list", "mov     rdx, rax; verbose_fmt_string", "mov     rsi, r10; src_offset", "call    make_dir_parents_private", "mov     [rbp+parent_exists], al", "jmp     loc_4712"], ["mov~rdx,[rbp+0]", "mov~rcx,rdx", "mov~rdx,[rbp+0]", "sub~rcx,rdx", "mov~rdx,rcx", "mov~r10,rdx", "mov~rsi,[rbp+0]", "lea~rcx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~rdi,[rbp+0]", "mov~r9,rsi", "mov~r8,rcx", "mov~rcx,rdx", "mov~rdx,rax", "mov~rsi,r10", "call~FOO", "mov~[rbp+0],al", "jmp~FOO"]], [0, 0, 25, 0, 0, 2, 0, 1, 12, 9, 0.02841905318527177, ["lea     rax, verbose_fmt_string; \"%s -> %s\\n\"", "jmp     short loc_45C6"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 25, 0, 0, 1, 0, 0, 12, 9, 0.02841905318527177, ["mov     eax, 0"], ["mov~eax,0"]], [6, 0, 0, 1, 4, 17, 0, 4, 6, -1, 0.0, ["mov     rax, [rbp+file]", "add     rax, 10h", "mov     rax, [rax]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aExtraOperandS; \"extra operand %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     edi, 1; status", "call    usage"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 41, 0, 0, 2, 0, 1, 5, 8, 0.027469316189362943, ["cmp     [rbp+n_files], 2", "jle     short loc_431D"], ["cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, -1, 0.004383401519579193, ["cmp     [rbp+n_files], 0", "jg      short loc_4242"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 0, 25, 0, 1, 19, 3, 2, 15, 6, 0.05786090005844535, ["movzx   eax, [rbp+new_dst]", "movzx   edx, al; nonexistent_dst", "lea     rdi, [rbp+copy_into_self]", "mov     rcx, [rbp+x]; options", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+arg]", "mov     r9d, 0; rename_succeeded", "mov     r8, rdi; copy_into_self", "mov     rdi, rax; src_name", "call    copy", "movzx   edx, [rbp+ok]", "movzx   eax, al", "and     eax, edx", "test    eax, eax", "setnz   al", "mov     [rbp+ok], al", "movzx   eax, cs:parents_option", "test    al, al", "jz      short loc_47D3"], ["movzx~eax,[rbp+0]", "movzx~edx,al", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9d,0", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "movzx~edx,[rbp+0]", "movzx~eax,al", "and~eax,edx", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 25, 0, 0, 4, 2, 1, 14, 7, 0.12068965517241378, ["movzx   eax, [rbp+parent_exists]", "xor     eax, 1", "test    al, al", "jz      short loc_472C"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 43, 0, 0, 2, 0, 1, 4, 9, 0.007013442431326709, ["cmp     [rbp+target_directory], 0", "jz      short loc_42C6"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 1, 9, 2, 0.028492109877264755, ["jmp     loc_4A0E"], ["jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 11, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 25, 0, 0, 2, 0, 1, 15, 6, 0.046464056107539446, ["mov     [rbp+ok], 0", "jmp     loc_47D3"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 25, 0, 0, 1, 0, 1, 17, 6, 0.022209234365867914, ["jmp     short loc_4812"], ["jmp~FOO"]], [0, 0, 25, 0, 0, 3, 1, 1, 16, 5, 0.10198714202220922, ["movzx   eax, cs:parents_option", "test    al, al", "jz      short loc_481E"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [2, 0, 6, 0, 0, 4, 1, 1, 11, 4, 0.0064289888953828166, ["mov     eax, [rbp+sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     loc_49C5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 25, 0, 0, 3, 1, 1, 10, 11, 0.16277030976037404, ["movzx   eax, cs:parents_option", "test    al, al", "jz      loc_461B"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [2, 0, 25, 1, 0, 12, 1, 1, 9, 12, 0.17212156633547632, ["mov     [rbp+parent_exists], 1", "mov     [rbp+unused], 0", "mov     eax, [rbp+i]", "cdqe", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rax, [rax]", "mov     [rbp+arg], rax", "movzx   eax, cs:remove_trailing_slashes", "test    al, al", "jz      short loc_44D4"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "cdqe~", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 25, 0, 1, 3, 0, 1, 10, 12, 0.0, ["mov     rax, [rbp+arg]", "mov     rdi, rax; file", "call    strip_trailing_slashes"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 10, 0, 0, 4, 1, 1, 7, 4, 0.04514903565166569, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jz      loc_49C5"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 12, 0, 0, 9, 1, 1, 6, 5, 0.052162478082992396, ["mov     rax, [rbp+file]", "mov     rax, [rax]", "mov     [rbp+source], rax", "mov     rax, [rbp+file]", "mov     rax, [rax+8]", "mov     [rbp+dest], rax", "movzx   eax, cs:parents_option", "test    al, al", "jz      short loc_48A6"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 42, 2, 1, 14, 1, 2, 6, 8, 0.0023378141437755697, ["movzx   ecx, [rbp+forcing]; forcing", "mov     eax, [rbp+n_files]", "cdqe", "shl     rax, 3", "lea     rdx, [rax-8]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rax, [rax]", "lea     rdx, [rbp+new_dst]; new_dst", "lea     rsi, [rbp+sb]; st", "mov     rdi, rax; file", "call    target_directory_operand", "test    al, al", "jz      short loc_43E4"], ["movzx~ecx,[rbp+0]", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "lea~rdx,[rax-8]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 43, 0, 0, 2, 0, 1, 5, 8, 0.008182349503214495, ["cmp     [rbp+n_files], 1", "jle     short loc_43E4"], ["cmp~[rbp+0],0", "jle~FOO"]], [9, 0, 25, 8, 4, 43, 1, 5, 11, 10, 0.07320280537697253, ["mov     rax, [rbp+arg]", "mov     [rbp+__old], rax", "mov     rax, [rbp+__old]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+__len], rax", "mov     rax, [rbp+__len]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+__new], rax", "mov     rdx, [rbp+__len]; n", "mov     rcx, [rbp+__old]", "mov     rax, [rbp+__new]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+base], rax", "mov     rax, [rbp+base]", "mov     rdi, rax; file", "call    strip_trailing_slashes", "lea     rdx, [rbp+unused]; base_in_result", "mov     rcx, [rbp+base]", "mov     rax, [rbp+target_directory]", "mov     rsi, rcx; base", "mov     rdi, rax; dir", "call    file_name_concat", "mov     [rbp+dst_name], rax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_45C1"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 7, 0, 0, 4, 2, 1, 10, 4, 0.012273524254821741, ["movzx   eax, [rbp+new_dst]", "xor     eax, 1", "test    al, al", "jz      loc_49C5"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [5, 0, 39, 2, 3, 19, 0, 3, 7, 7, 0.0, ["mov     eax, [rbp+n_files]", "cdqe", "shl     rax, 3", "lea     rdx, [rax-8]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rax, [rax]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aTargetSIsNotAD; \"target %s is not a directory\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "lea~rdx,[rax-8]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 40, 0, 0, 2, 0, 1, 6, 7, 0.01972530683810637, ["cmp     [rbp+n_files], 2", "jle     short loc_4440"], ["cmp~[rbp+0],0", "jle~FOO"]], [3, 0, 42, 0, 2, 7, 0, 2, 5, 9, 0.0, ["lea     rdi, aCannotCombineT; \"cannot combine --target-directory (-t) \"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 9, 0, 0, 4, 1, 1, 8, 4, 0.022209234365867914, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jz      loc_49C5"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jz~FOO"]], [4, 0, 0, 0, 3, 9, 0, 3, 7, -1, 0.0, ["lea     rdi, aWithParentsThe; \"with --parents, the destination must be\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 38, 0, 0, 2, 0, 1, 5, 6, 0.1776738749269433, ["cmp     [rbp+target_directory], 0", "jz      loc_484B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 39, 2, 1, 14, 0, 2, 6, 7, 0.034190531852717705, ["movzx   ecx, [rbp+forcing]; forcing", "mov     eax, [rbp+n_files]", "cdqe", "shl     rax, 3", "lea     rdx, [rax-8]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rax, [rax]", "lea     rdx, [rbp+new_dst]; new_dst", "lea     rsi, [rbp+sb]; st", "mov     rdi, rax; file", "call    target_directory_operand", "mov     [rbp+__x], al", "jmp     loc_4440"], ["movzx~ecx,[rbp+0]", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "lea~rdx,[rax-8]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 4, 7, 0.0771478667445938, ["cmp     [rbp+target_directory], 0", "jnz     loc_4440"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 39, 2, 0, 9, 0, 1, 7, 7, 0.0056984219754529514, ["sub     [rbp+n_files], 1", "mov     eax, [rbp+n_files]", "cdqe", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rax, [rax]", "mov     [rbp+target_directory], rax", "jmp     short loc_4440"], ["sub~[rbp+0],0", "mov~eax,[rbp+0]", "cdqe~", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 25, 1, 1, 17, 2, 1, 16, 6, 0.0, ["mov     rdx, [rbp+attr_list]; attr_list", "mov     rax, [rbp+unused]", "mov     rcx, rax", "mov     rax, [rbp+dst_name]", "sub     rcx, rax", "mov     rax, rcx", "mov     rsi, rax; src_offset", "mov     rcx, [rbp+x]; x", "mov     rax, [rbp+dst_name]", "mov     rdi, rax; const_dst_name", "call    re_protect", "movzx   edx, [rbp+ok]", "movzx   eax, al", "and     eax, edx", "test    eax, eax", "setnz   al", "mov     [rbp+ok], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rax", "mov~rax,[rbp+0]", "sub~rcx,rax", "mov~rax,rcx", "mov~rsi,rax", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~edx,[rbp+0]", "movzx~eax,al", "and~eax,edx", "test~eax,eax", "setnz~al", "mov~[rbp+0],al"]], [0, 0, 8, 0, 1, 7, 1, 2, 9, 4, 0.017533606078316773, ["mov     rdx, [rbp+dest]", "mov     rax, [rbp+source]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     loc_49C5"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [3, 0, 59, 1, 0, 19, 2, 1, 0, 11, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 158h", "mov     [rbp+n_files], edi", "mov     [rbp+file], rsi", "mov     [rbp+target_directory], rdx", "mov     eax, ecx", "mov     [rbp+x], r8", "mov     [rbp+no_target_directory], al", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+new_dst], 0", "mov     [rbp+ok], 1", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jnz     short loc_41E5"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~eax,ecx", "mov~[rbp+0],r8", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 27, 0, 0, 2, 0, 1, 6, 5, 0.12668030391583868, ["cmp     [rbp+n_files], 1", "jle     short loc_4475"], ["cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 58, 0, 0, 4, 1, 1, 1, 11, 0.0002922267679719462, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jz      short loc_41EC"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 26, 0, 2, 6, 0, 2, 7, 5, 0.0, ["mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    dest_info_init", "mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    src_info_init"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]]], "func_feature": [43, 26, 84, 2, 60, 84, 1, 455, 0.04049, 21, 30], "succs": [[37, 30], [0], [0], [12], [3, 5], [12], [], [6], [6], [20], [9], [9], [28], [14], [2, 13], [18, 26], [15], [15], [52, 29], [], [19, 31], [28], [21], [21], [], [24, 51], [8, 7], [34, 54], [32, 27], [25, 47], [20], [], [34], [14], [33, 2], [10, 11], [43, 4], [36, 38], [36], [48, 11], [49, 39], [53, 46], [41, 46], [22, 23], [11, 35], [50], [50, 45], [25], [11, 55], [], [40, 57], [50], [50, 42], [50], [34], [11, 44], [16, 58], [1, 59], [16, 17], [1]], "fname": "do_copy", "n_num": 60}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[34, 0, 0, 1, 2, 82, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    cp_options_default", "mov     rax, [rbp+x]", "mov     byte ptr [rax+14h], 1", "mov     rax, [rbp+x]", "mov     dword ptr [rax+4], 1", "mov     rax, [rbp+x]", "mov     byte ptr [rax+15h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+16h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+17h], 0", "mov     rax, [rbp+x]", "mov     dword ptr [rax+8], 4", "mov     rax, [rbp+x]", "mov     byte ptr [rax+18h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+19h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+1Ch], 0", "mov     rax, [rbp+x]", "mov     dword ptr [rax+38h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+1Dh], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+22h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+1Eh], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+1Fh], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+20h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+25h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+26h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+21h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+27h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+29h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+28h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+23h], 1", "mov     rax, [rbp+x]", "mov     byte ptr [rax+24h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Ah], 0", "mov     rax, [rbp+x]", "mov     dword ptr [rax+0Ch], 2", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Ch], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Bh], 0", "mov     rax, [rbp+x]", "mov     dword ptr [rax+10h], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Fh], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Dh], 0", "mov     rax, [rbp+x]", "mov     byte ptr [rax+2Eh], 0", "lea     rdi, name; \"POSIXLY_CORRECT\"", "call    _getenv", "test    rax, rax", "setnz   dl", "mov     rax, [rbp+x]", "mov     [rax+30h], dl", "mov     rax, [rbp+x]", "mov     qword ptr [rax+40h], 0", "mov     rax, [rbp+x]", "mov     qword ptr [rax+48h], 0", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "lea~rdi,<TAG>", "call~FOO", "test~rax,rax", "setnz~dl", "mov~rax,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "nop", "leave", "retn"]]], "func_feature": [2, 1, 2, 0, 1, 0, 1, 82, 0.0, 1, 1], "succs": [[]], "fname": "cp_option_init", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 19, 0, 0, 12, 3, 1, 0, 0, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 0", "movzx   edx, [rbp+on_off]", "mov     [rax+1Eh], dl", "movzx   eax, [rbp+on_off]", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "mov     rdx, [rbp+x]", "mov     [rdx+20h], al", "jmp     loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "movzx~eax,[rbp+0]", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "mov~rdx,[rbp+0]", "mov~[rdx+0],al", "jmp~FOO"]], [0, 0, 19, 1, 0, 8, 0, 1, 5, 3, 0.5, ["mov     eax, [rbp+val]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_19CB8", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_19CB8", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    _abort; jumptable 0000000000004C5B default case"], ["call~FOO"]], [2, 0, 19, 0, 1, 13, 0, 2, 4, 4, 0.5497076023391813, ["mov     rsi, [rbp+s]; arg", "mov     r9, rdx; exit_fn", "mov     r8d, 4; valsize", "lea     rcx, preserve_vals_6526; vallist", "lea     rdx, preserve_args_6527; arglist", "mov     rdi, rax; context", "call    __xargmatch_internal", "lea     rdx, ds:0[rax*4]", "lea     rax, preserve_vals_6526", "mov     eax, [rdx+rax]", "mov     [rbp+val], eax", "cmp     [rbp+val], 6; switch 7 cases", "ja      loc_4D51; jumptable 0000000000004C5B default case"], ["mov~rsi,[rbp+0]", "mov~r9,rdx", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~rdi,rax", "call~FOO", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 19, 0, 0, 3, 0, 1, 2, 6, 0.5409356725146198, ["mov     rdx, cs:argmatch_die", "cmp     [rbp+on_off], 0", "jz      short loc_4BF0"], ["mov~rdx,<TAG>", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 19, 0, 1, 7, 0, 2, 1, 7, 0.5350877192982456, ["mov     rax, [rbp+s]", "mov     esi, 2Ch ; ','; c", "mov     rdi, rax; s", "call    _strchr", "mov     [rbp+comma], rax", "cmp     [rbp+comma], 0", "jz      short loc_4BDA"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 19, 0, 0, 4, 0, 0, 2, 7, 0.0, ["mov     rax, [rbp+comma]", "lea     rdx, [rax+1]", "mov     [rbp+comma], rdx", "mov     byte ptr [rax], 0"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0"]], [0, 0, 19, 0, 0, 4, 0, 1, 6, 2, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 3", "movzx   edx, [rbp+on_off]", "mov     [rax+22h], dl", "jmp     loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [0, 0, 19, 0, 0, 4, 0, 1, 6, 2, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 2", "movzx   edx, [rbp+on_off]", "mov     [rax+1Dh], dl", "jmp     loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [1, 0, 19, 0, 0, 4, 0, 1, 7, 1, 0.5292397660818713, ["mov     rax, [rbp+comma]", "mov     [rbp+s], rax", "cmp     [rbp+s], 0", "jnz     loc_4BAF"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 19, 1, 1, 13, 0, 1, 0, 8, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+arg], rdi", "mov     [rbp+x], rsi", "mov     eax, edx", "mov     [rbp+on_off], al", "mov     rax, [rbp+arg]", "mov     rdi, rax; string", "call    xstrdup", "mov     [rbp+arg_writable], rax", "mov     rax, [rbp+arg_writable]", "mov     [rbp+s], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 19, 0, 0, 7, 0, 1, 6, 2, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 4", "movzx   edx, [rbp+on_off]", "mov     [rax+26h], dl", "mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+25h], dl", "jmp     loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [0, 0, 19, 0, 0, 2, 0, 1, 3, 5, 0.24707602339181284, ["lea     rax, context; \"--preserve\"", "jmp     short loc_4BF7"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 19, 0, 0, 4, 0, 1, 7, 2, 0.09649122807017543, ["mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+27h], dl", "jmp     short loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [2, 0, 19, 0, 0, 23, 4, 1, 6, 3, 0.09064327485380116, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 6", "movzx   edx, [rbp+on_off]", "mov     [rax+1Eh], dl", "mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+1Fh], dl", "mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+1Dh], dl", "mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+22h], dl", "movzx   eax, [rbp+on_off]", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "mov     rdx, [rbp+x]", "mov     [rdx+20h], al", "movzx   eax, cs:selinux_enabled", "test    al, al", "jz      short loc_4D44"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "movzx~eax,[rbp+0]", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "mov~rdx,[rbp+0]", "mov~[rdx+0],al", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 19, 0, 0, 3, 0, 0, 7, 3, 0.0, ["mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+25h], dl"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl"]], [0, 0, 19, 0, 0, 1, 0, 0, 3, 5, 0.24707602339181284, ["lea     rax, aNoPreserve; \"--no-preserve\""], ["lea~rax,<TAG>"]], [0, 0, 19, 0, 0, 4, 0, 1, 6, 2, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 1", "movzx   edx, [rbp+on_off]", "mov     [rax+1Fh], dl", "jmp     loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]], [0, 0, 0, 0, 1, 6, 0, 1, 8, 0, 0.0, ["mov     rax, [rbp+arg_writable]", "mov     rdi, rax; ptr", "call    free", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]], [0, 0, 19, 0, 0, 7, 0, 1, 6, 2, 0.019005847953216373, ["mov     rax, [rbp+x]; jumptable 0000000000004C5B case 5", "movzx   edx, [rbp+on_off]", "mov     [rax+27h], dl", "mov     rax, [rbp+x]", "movzx   edx, [rbp+on_off]", "mov     [rax+28h], dl", "jmp     short loc_4D56"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~[rax+0],dl", "jmp~FOO"]]], "func_feature": [5, 7, 19, 0, 20, 29, 2, 130, 0.17251, 7, 2], "succs": [[9], [0, 7, 8, 11, 14, 17, 19], [], [1, 2], [16, 12], [4, 6], [4], [9], [9], [18, 5], [5], [9], [3], [9], [13, 15], [13], [3], [9], [], [9]], "fname": "decode_preserve_arg", "n_num": 20}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 92, 0, 0, 2, 0, 1, 0, 0, 0.00041308329351807607, ["mov     [rbp+no_target_directory], 1; jumptable 0000000000004E86 case 215", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 92, 1, 0, 8, 0, 1, 3, 18, 0.27591973244147155, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_19F60", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_19F60", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.dereference], 3; jumptable 0000000000004E86 case 203", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.update], 1; jumptable 0000000000004E86 case 248", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.interactive], 3; jumptable 0000000000004E86 case 236", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.verbose], 1; jumptable 0000000000004E86 case 249", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [4, 0, 0, 0, 3, 9, 0, 3, 7, -1, 0.0, ["lea     rdi, aReflinkCanBeUs; \"--reflink can be used only with --spars\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [1, 0, 30, 0, 0, 3, 0, 1, 6, 12, 0.006808408982322025, ["mov     eax, [rbp+x.sparse_mode]", "cmp     eax, 2", "jz      short loc_542B"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.hard_link], 1; jumptable 0000000000004E86 case 239", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.one_file_system], 1; jumptable 0000000000004E86 case 251", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 6, 11, 0.19397993311036787, ["cmp     [rbp+make_backups], 0", "jz      short loc_5457"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 31, 0, 0, 3, 0, 1, 5, 12, 0.20735785953177258, ["mov     eax, [rbp+x.reflink_mode]", "cmp     eax, 2", "jnz     short loc_542B"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.dereference], 4; jumptable 0000000000004E86 case 207", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 1, 1, 4, 18, 0.028308647873865264, ["movzx   eax, cs:selinux_enabled; jumptable 0000000000004E86 case 221", "test    al, al", "jz      short loc_5265"], ["movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 92, 0, 0, 3, 1, 1, 5, 18, 0.011466794075489728, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "test    rax, rax", "jz      short loc_5259"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.interactive], 2; jumptable 0000000000004E86 case 241", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [9, 1, 92, 1, 6, 37, 1, 7, 0, 17, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 130h", "mov     [rbp+argc], edi", "mov     [rbp+argv], rsi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+make_backups], 0", "mov     [rbp+backup_suffix], 0", "mov     [rbp+version_control_string], 0", "mov     [rbp+copy_contents], 0", "mov     [rbp+target_directory], 0", "mov     [rbp+no_target_directory], 0", "mov     [rbp+scontext], 0", "mov     rax, [rbp+argv]", "mov     rax, [rax]", "mov     rdi, rax; argv0", "call    set_program_name", "lea     rsi, locale; locale", "mov     edi, 6; category", "call    _setlocale", "lea     rsi, dirname; \"/usr/local/share/locale\"", "lea     rdi, domainname; \"coreutils\"", "call    _bindtextdomain", "lea     rdi, domainname; \"coreutils\"", "call    _textdomain", "lea     rax, close_stdin", "mov     rdi, rax", "call    atexit", "mov     cs:selinux_enabled, 0", "lea     rax, [rbp+x]", "mov     rdi, rax; x", "call    cp_option_init", "jmp     loc_5317"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "lea~rsi,<TAG>", "mov~edi,0", "call~FOO", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "lea~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~<TAG>,0", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 0, 1, 6, 17, 0.005315336837075967, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     [rbp+scontext], rax", "jmp     loc_5317"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 26, 0, 2, 8, 0, 3, 7, 10, 0.09161490683229813, ["lea     rdi, aBackupType; \"backup type\"", "call    _gettext", "mov     rdx, rax", "mov     rax, [rbp+version_control_string]", "mov     rsi, rax; version", "mov     rdi, rdx; context", "call    xget_version", "jmp     short loc_545C"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "jmp~FOO"]], [1, 0, 26, 0, 0, 1, 0, 0, 7, 10, 0.09161490683229813, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 92, 1, 0, 4, 0, 1, 2, 19, 0.27675585284280935, ["mov     eax, [rbp+c]", "add     eax, 83h", "cmp     eax, 10Bh; switch 268 cases", "ja      loc_530D; jumptable 0000000000004E86 default case"], ["mov~eax,[rbp+0]", "add~eax,0", "cmp~eax,0", "ja~FOO"]], [2, 0, 92, 0, 1, 10, 0, 2, 1, 16, 0.5106306736741519, ["mov     rsi, [rbp+argv]; argv", "mov     eax, [rbp+argc]", "mov     r8d, 0; longind", "lea     rcx, long_opts; longopts", "lea     rdx, shortopts; \"abdfHilLnprst:uvxPRS:TZ\"", "mov     edi, eax; argc", "call    _getopt_long", "mov     [rbp+c], eax", "cmp     [rbp+c], 0FFFFFFFFh", "jnz     loc_4E4F"], ["mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 6, 17, 0.005315336837075967, ["mov     [rbp+x.set_security_context], 1", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 1, 1, 5, 17, 0.016005733397037744, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "test    rax, rax", "jz      loc_5317"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 2, 1, 2, 24, 2, 3, 16, 1, 0.020066889632107024, ["call    hash_init", "movzx   edx, [rbp+no_target_directory]", "mov     eax, cs:optind@@GLIBC_2_2_5", "cdqe", "lea     rcx, ds:0[rax*8]", "mov     rax, [rbp+argv]", "lea     rsi, [rcx+rax]; file", "mov     eax, cs:optind@@GLIBC_2_2_5", "mov     ecx, [rbp+argc]", "sub     ecx, eax", "mov     edi, ecx; n_files", "lea     rcx, [rbp+x]", "mov     rax, [rbp+target_directory]", "mov     r8, rcx; x", "mov     ecx, edx; no_target_directory", "mov     rdx, rax; target_directory", "call    do_copy", "mov     [rbp+ok], al", "movzx   eax, [rbp+ok]", "xor     eax, 1", "movzx   eax, al", "mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_5677"], ["call~FOO", "movzx~edx,[rbp+0]", "mov~eax,<TAG>", "cdqe~", "lea~rcx,<TAG>", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~eax,<TAG>", "mov~ecx,[rbp+0]", "sub~ecx,eax", "mov~edi,ecx", "lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rcx", "mov~ecx,edx", "mov~rdx,rax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "xor~eax,0", "movzx~eax,al", "mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [0, 0, 4, 0, 0, 3, 1, 1, 15, 2, 0.03917821309125657, ["movzx   eax, [rbp+x.require_preserve_xattr]", "test    al, al", "jz      short loc_55FE"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [3, 0, 3, 0, 2, 7, 0, 2, 16, 2, 0.0, ["lea     rdi, aCannotPreserve_0; \"cannot preserve extended attributes, cp\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 17, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 92, 0, 1, 7, 0, 2, 4, 17, 0.00041308329351807607, ["mov     rax, cs:optarg@@GLIBC_2_2_5; jumptable 0000000000004E86 case 261", "lea     rcx, [rbp+x]", "mov     edx, 0; on_off", "mov     rsi, rcx; x", "mov     rdi, rax; arg", "call    decode_preserve_arg", "jmp     loc_5317"], ["mov~rax,<TAG>", "lea~rcx,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 25, 0, 1, 7, 0, 2, 8, 9, 0.1821548017200191, ["mov     [rbp+x.backup_type], eax", "mov     rax, [rbp+backup_suffix]", "mov     rdi, rax; s", "call    set_simple_backup_suffix", "mov     eax, [rbp+x.dereference]", "cmp     eax, 1", "jnz     short loc_54AB"], ["mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]", "cmp~eax,0", "jnz~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 17, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 24, 0, 0, 3, 1, 1, 9, 10, 0.022216913521261348, ["movzx   eax, [rbp+x.recursive]", "test    al, al", "jz      short loc_54A1"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 23, 0, 0, 4, 2, 1, 10, 10, 0.007525083612040133, ["movzx   eax, [rbp+x.hard_link]", "xor     eax, 1", "test    al, al", "jz      short loc_54A1"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [3, 0, 92, 0, 2, 8, 0, 3, 6, 17, 0.0, ["lea     rdi, aWarningIgnorin; \"warning: ignoring --context; it require\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_5317"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 21, 0, 0, 2, 0, 1, 11, 9, 0.001254180602006689, ["mov     [rbp+x.dereference], 2", "jmp     short loc_54AB"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 21, 0, 0, 1, 0, 0, 10, 9, 0.0037625418060200666, ["mov     [rbp+x.dereference], 4"], ["mov~[rbp+0],0"]], [2, 0, 92, 0, 1, 8, 0, 2, 5, 17, 0.005315336837075967, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "lea     rcx, [rbp+x]", "mov     edx, 1; on_off", "mov     rsi, rcx; x", "mov     rdi, rax; arg", "call    decode_preserve_arg", "mov     [rbp+x.require_preserve], 1", "jmp     loc_5317"], ["mov~rax,<TAG>", "lea~rcx,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 1, 1, 4, 18, 0.005733397037744864, ["mov     rax, cs:optarg@@GLIBC_2_2_5; jumptable 0000000000004E86 case 263", "test    rax, rax", "jz      short loc_50B2; jumptable 0000000000004E86 case 243"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 92, 0, 0, 4, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+make_backups], 1; jumptable 0000000000004E86 case 214", "mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     [rbp+backup_suffix], rax", "jmp     short loc_5317"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 20, 0, 0, 3, 1, 1, 9, 8, 0.15766841853798375, ["movzx   eax, [rbp+x.recursive]", "test    al, al", "jz      short loc_54C3"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 4, -1, 0.0, ["mov     edi, 0; jumptable 0000000000004E86 case 1", "call    usage"], ["mov~edi,0", "call~FOO"]], [0, 0, 19, 0, 0, 2, 0, 0, 10, 8, 0.0, ["movzx   eax, [rbp+copy_contents]", "mov     [rbp+x.copy_as_regular], al"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al"]], [0, 0, 18, 0, 0, 3, 1, 1, 10, 7, 0.14620162446249402, ["movzx   eax, [rbp+x.set_security_context]", "test    al, al", "jnz     short loc_54D8"], ["movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [4, 0, 92, 0, 0, 5, 0, 1, 4, 17, 0.005728420130594044, ["mov     [rbp+x.preserve_ownership], 1; jumptable 0000000000004E86 case 243", "mov     [rbp+x.preserve_mode], 1", "mov     [rbp+x.preserve_timestamps], 1", "mov     [rbp+x.require_preserve], 1", "jmp     loc_5317"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 1, 14, 0, 2, 4, 17, 0.00041308329351807607, ["mov     rdx, cs:argmatch_die; jumptable 0000000000004E86 case 265", "mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     r9, rdx; exit_fn", "mov     r8d, 4; valsize", "lea     rcx, sparse_type; vallist", "lea     rdx, sparse_type_string; arglist", "mov     rsi, rax; arg", "lea     rdi, aSparse; \"--sparse\"", "call    __xargmatch_internal", "lea     rdx, ds:0[rax*4]", "lea     rax, sparse_type", "mov     eax, [rdx+rax]", "mov     [rbp+x.sparse_mode], eax", "jmp     loc_5317"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "mov~r9,rdx", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~rsi,rax", "lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 17, 0, 0, 2, 0, 1, 11, 6, 0.06181318681318681, ["cmp     [rbp+scontext], 0", "jz      short loc_54ED"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     cs:parents_option, 1; jumptable 0000000000004E86 case 262", "jmp     loc_5317"], ["mov~<TAG>,0", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 1, 1, 4, 18, 0.011466794075489728, ["mov     rax, cs:optarg@@GLIBC_2_2_5; jumptable 0000000000004E86 case 264", "test    rax, rax", "jnz     short loc_4EF4"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 16, 0, 0, 4, 2, 1, 11, 6, 0.07017439082656474, ["movzx   eax, [rbp+x.require_preserve_context]", "xor     eax, 1", "test    al, al", "jz      short loc_54ED"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 15, 0, 0, 1, 0, 0, 12, 6, 0.0, ["mov     [rbp+x.preserve_security_context], 0"], ["mov~[rbp+0],0"]], [1, 0, 92, 0, 0, 2, 0, 1, 5, 17, 0.005315336837075967, ["mov     [rbp+x.reflink_mode], 2", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.unlink_dest_before_opening], 1; jumptable 0000000000004E86 case 267", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 14, 0, 0, 3, 1, 1, 12, 5, 0.12040133779264213, ["movzx   eax, [rbp+x.preserve_security_context]", "test    al, al", "jz      short loc_5530"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     cs:remove_trailing_slashes, 1; jumptable 0000000000004E86 case 266", "jmp     loc_5317"], ["mov~<TAG>,0", "jmp~FOO"]], [0, 0, 13, 0, 0, 3, 1, 1, 13, 6, 0.01743908265647396, ["movzx   eax, [rbp+x.set_security_context]", "test    al, al", "jnz     short loc_550D"], ["movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [4, 0, 0, 1, 2, 16, 0, 2, 4, -1, 0.0, ["mov     rdx, cs:Version; jumptable 0000000000004E86 case 0", "mov     rax, cs:stdout@@GLIBC_2_2_5", "push    0", "lea     rcx, aJimMeyering; \"Jim Meyering\"", "push    rcx", "lea     r9, aDavidMackenzie; \"David MacKenzie\"", "lea     r8, aTorbjornGranlu; \"Torbjorn Granlund\"", "mov     rcx, rdx; version", "lea     rdx, package; \"GNU coreutils\"", "lea     rsi, command_name; command_name", "mov     rdi, rax; stream", "mov     eax, 0", "call    version_etc", "add     rsp, 10h", "mov     edi, 0; status", "call    _exit"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "push~0", "lea~rcx,<TAG>", "push~rcx", "lea~r9,<TAG>", "lea~r8,<TAG>", "mov~rcx,rdx", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "mov~edi,0", "call~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.symbolic_link], 1; jumptable 0000000000004E86 case 246", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 14, 5, 0.0006569517439082656, ["cmp     [rbp+scontext], 0", "jz      short loc_5530"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 0, 1, 2, 0, 1, 3, -1, 0.0, ["mov     edi, 1; jumptable 0000000000004E86 default case", "call    usage"], ["mov~edi,0", "call~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 20, 0.03260869565217391, ["cmp     [rbp+target_directory], 0; jumptable 0000000000004E86 case 247", "jz      short loc_513C"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 11, 0, 2, 7, 0, 2, 14, 5, 0.0006569517439082656, ["lea     rdi, aCannotSetTarge; \"cannot set target context and preserve \"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [3, 0, 92, 0, 2, 7, 0, 2, 5, 20, 0.0, ["lea     rdi, aMultipleTarget; \"multiple target directories specified\"", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 10, 0, 0, 3, 1, 1, 13, 4, 0.09077878643096034, ["movzx   eax, [rbp+x.require_preserve_context]", "test    al, al", "jz      short loc_556C"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 92, 0, 1, 14, 0, 2, 5, 17, 0.005315336837075967, ["mov     rdx, cs:argmatch_die", "mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     r9, rdx; exit_fn", "mov     r8d, 4; valsize", "lea     rcx, reflink_type; vallist", "lea     rdx, reflink_type_string; arglist", "mov     rsi, rax; arg", "lea     rdi, aReflink; \"--reflink\"", "call    __xargmatch_internal", "lea     rdx, ds:0[rax*4]", "lea     rax, reflink_type", "mov     eax, [rdx+rax]", "mov     [rbp+x.reflink_mode], eax", "jmp     loc_5317"], ["mov~rdx,<TAG>", "mov~rax,<TAG>", "mov~r9,rdx", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~rsi,rax", "lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 9, 0, 0, 4, 2, 1, 14, 4, 0.009197324414715718, ["movzx   eax, cs:selinux_enabled", "xor     eax, 1", "test    al, al", "jz      short loc_556C"], ["movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [3, 0, 92, 0, 0, 4, 0, 1, 5, 17, 0.021380793119923552, ["mov     [rbp+x.preserve_xattr], 1", "mov     [rbp+x.reduce_diagnostics], 1", "mov     [rbp+x.recursive], 1", "jmp     loc_5317"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 4, 1, 1, 4, 17, 0.006146480331262939, ["mov     [rbp+make_backups], 1; jumptable 0000000000004E86 case 229", "mov     rax, cs:optarg@@GLIBC_2_2_5", "test    rax, rax", "jz      loc_5317"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 92, 0, 0, 3, 0, 1, 5, 17, 0.0, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     [rbp+version_control_string], rax", "jmp     loc_5317"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.data_copy_required], 0; jumptable 0000000000004E86 case 259", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+copy_contents], 1; jumptable 0000000000004E86 case 260", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 92, 0, 0, 3, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.preserve_links], 1; jumptable 0000000000004E86 case 231", "mov     [rbp+x.dereference], 2", "jmp     loc_5317"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.unlink_dest_after_failed_open], 1; jumptable 0000000000004E86 case 233", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.dereference], 2; jumptable 0000000000004E86 case 211", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 92, 0, 0, 2, 0, 1, 4, 17, 0.00041308329351807607, ["mov     [rbp+x.recursive], 1; jumptable 0000000000004E86 cases 213,245", "jmp     loc_5317"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 92, 0, 0, 3, 0, 1, 7, 17, 0.06270903010033445, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     [rbp+target_directory], rax", "jmp     loc_5317"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 92, 0, 1, 7, 1, 2, 5, 19, 0.042642140468227424, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "lea     rdx, [rbp+st]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      short loc_519D"], ["mov~rax,<TAG>", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 39, 0, 0, 3, 1, 1, 2, 15, 0.2329192546583851, ["movzx   eax, [rbp+x.hard_link]", "test    al, al", "jz      short loc_5395"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [0, 0, 38, 0, 0, 3, 1, 1, 3, 15, 0.006091734352603917, ["movzx   eax, [rbp+x.symbolic_link]", "test    al, al", "jz      short loc_5395"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [3, 0, 8, 0, 2, 7, 0, 2, 15, 4, 0.0, ["lea     rdi, aCannotPreserve; \"cannot preserve security context withou\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 14, 3, 0.06605351170568562, ["cmp     [rbp+scontext], 0", "jz      short loc_55D0"], ["cmp~[rbp+0],0", "jz~FOO"]], [6, 0, 92, 0, 0, 9, 1, 1, 4, 18, 0.011347348303870042, ["mov     [rbp+x.dereference], 2; jumptable 0000000000004E86 case 228", "mov     [rbp+x.preserve_links], 1", "mov     [rbp+x.preserve_ownership], 1", "mov     [rbp+x.preserve_mode], 1", "mov     [rbp+x.preserve_timestamps], 1", "mov     [rbp+x.require_preserve], 1", "movzx   eax, cs:selinux_enabled", "test    al, al", "jz      short loc_4F84"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 92, 0, 0, 1, 0, 0, 5, 18, 0.0, ["mov     [rbp+x.preserve_security_context], 1"], ["mov~[rbp+0],0"]], [0, 0, 6, 0, 2, 7, 1, 2, 15, 3, 0.009555661729574772, ["mov     rax, [rbp+scontext]", "mov     rdi, rax; sctx", "call    se_const", "mov     rdi, rax; con", "call    setfscreatecon", "test    eax, eax", "jns     short loc_55D0"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [4, 0, 0, 0, 3, 9, 0, 3, 4, -1, 0.0, ["lea     rdi, aCannotMakeBoth; \"cannot make both hard and symbolic link\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [3, 0, 92, 0, 4, 16, 0, 4, 6, 19, 0.0, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToAccess; \"failed to access %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 36, 0, 0, 3, 0, 1, 3, 14, 0.22360248447204967, ["mov     eax, [rbp+x.interactive]", "cmp     eax, 2", "jnz     short loc_53A7"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 35, 0, 0, 1, 0, 0, 4, 14, 0.0, ["mov     [rbp+x.update], 0"], ["mov~[rbp+0],0"]], [2, 0, 92, 0, 0, 4, 1, 1, 6, 18, 0.052675585284280936, ["mov     eax, [rbp+st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_51EC"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 34, 0, 0, 2, 0, 1, 4, 13, 0.21930243669374103, ["cmp     [rbp+make_backups], 0", "jz      short loc_53E8"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 33, 0, 0, 3, 0, 1, 5, 13, 0.006569517439082656, ["mov     eax, [rbp+x.interactive]", "cmp     eax, 2", "jnz     short loc_53E8"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jnz~FOO"]], [2, 0, 5, 0, 4, 15, 0, 4, 16, 3, 0.0, ["mov     rax, [rbp+scontext]", "mov     rdi, rax; arg", "call    quote", "mov     r12, rax", "lea     rdi, aFailedToSetDef; \"failed to set default file creation con\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [4, 0, 0, 0, 3, 9, 0, 3, 6, -1, 0.0, ["lea     rdi, aOptionsBackupA; \"options --backup and --no-clobber are m\"...", "call    _gettext", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     edi, 1; status", "call    usage"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~edi,0", "call~FOO"]], [4, 0, 92, 0, 3, 13, 0, 3, 7, 18, 0.0, ["mov     rax, cs:optarg@@GLIBC_2_2_5", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aTargetSIsNotAD; \"target %s is not a directory\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO"]]], "func_feature": [54, 28, 125, 1, 93, 152, 0, 457, 0.03993, 39, 5], "succs": [[21], [0, 2, 3, 4, 5, 8, 9, 12, 13, 15, 28, 37, 38, 40, 43, 44, 46, 47, 51, 53, 55, 56, 58, 59, 66, 68, 69, 70, 71, 72, 73, 80], [21], [21], [21], [21], [], [10, 6], [21], [21], [18, 19], [10, 7], [21], [14, 23], [17, 22], [21], [21], [21], [29], [29], [1, 58], [76, 20], [21], [33, 21], [27, 30], [24, 26], [24], [], [21], [39, 31], [], [32, 35], [34, 35], [21], [39], [39], [21], [43, 36], [21], [41, 42], [], [42], [48, 45], [21], [21], [48, 52], [21], [50, 63], [49, 52], [52], [21], [21], [62, 54], [21], [57, 60], [], [21], [60, 62], [], [75, 61], [62], [75], [64, 79], [21], [78, 79], [21], [67, 21], [21], [21], [21], [21], [21], [21], [21], [21], [84, 87], [77, 85], [83, 85], [79], [25, 82], [81, 65], [65], [25, 90], [], [87], [88, 86], [88], [74, 92], [89, 11], [11, 91], [25], [], [74]], "fname": "main", "n_num": 93}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 8, 1, 0, 5, 0, 1, 0, 0, 0.07777777777777778, ["mov     rax, [rbp+file_name]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "cmp     al, 2Eh ; '.'", "jnz     short loc_56A9"], ["mov~rax,[rbp+0]", "add~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 10, 0, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+file_name], rdi", "mov     rax, [rbp+file_name]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Eh ; '.'", "jnz     short loc_56D8"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 4, 3, 0.05555555555555556, ["cmp     [rbp+sep], 2Fh ; '/'", "jnz     short loc_56CE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 5, 1, 0, 6, 0, 1, 3, 3, 0.2111111111111111, ["mov     rax, [rbp+file_name]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+sep], al", "cmp     [rbp+sep], 0", "jz      short loc_56C7"], ["mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 4, 0.061111111111111116, ["mov     edx, 2", "jmp     short loc_56AE"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 2, 4, 0.061111111111111116, ["mov     edx, 1"], ["mov~edx,0"]], [1, 0, 2, 0, 0, 2, 0, 1, 4, 2, 0.11111111111111112, ["mov     eax, 1", "jmp     short loc_56D3"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 2, 0, 0, 1, 0, 0, 5, 2, 0.011111111111111112, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 1, 0, 0, 2, 1, 1, 5, 1, 0.07777777777777778, ["and     eax, 1", "jmp     short loc_56DD"], ["and~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.011111111111111112, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 1, 7, 0, 11, 14, 1, 31, 0.06162, 0, 2], "succs": [[4, 5], [0, 9], [6, 7], [2, 6], [3], [3], [8], [8], [10], [10], []], "fname": "dot_or_dotdot", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 3, 0, 21, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+ptr], rdi", "mov     [rbp+alignment], rsi", "mov     rax, [rbp+ptr]", "mov     [rbp+p0], rax", "mov     rax, [rbp+alignment]", "lea     rdx, [rax-1]", "mov     rax, [rbp+p0]", "add     rax, rdx", "mov     [rbp+p1], rax", "mov     rax, [rbp+p1]", "mov     edx, 0", "div     [rbp+alignment]", "mov     rax, rdx", "neg     rax", "mov     rdx, rax", "mov     rax, [rbp+p1]", "add     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "neg~rax", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 21, 0.0, 0, 3], "succs": [[]], "fname": "ptr_align", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 10, 2, 0, 4, 0, 1, 0, 0, 0.12121212121212122, ["add     [rbp+p], 1", "sub     [rbp+length], 1", "cmp     [rbp+length], 0", "jnz     short loc_578C"], ["add~[rbp+0],0", "sub~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 6, 1, 1, 2, 3, 0.20454545454545456, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "mov     [rbp+word], al", "movzx   eax, [rbp+word]", "test    al, al", "jz      short loc_5774"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.15151515151515152, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_57CB"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.022727272727272728, ["mov     eax, 1", "jmp     short loc_57B7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.06818181818181818, ["mov     eax, 0", "jmp     short loc_57B7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.022727272727272728, ["mov     eax, 1", "jmp     short loc_57B7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 1, 9, 1, 1, 5, 2, 0.022727272727272728, ["nop", "mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+p]", "mov     rax, [rbp+buf]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "setz    al"], ["nop", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setz~al"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 10, 0, 0, 1, 0, 1, 5, 4, 0.045454545454545456, ["jmp     short loc_575B"], ["jmp~FOO"]], [0, 0, 10, 0, 0, 1, 0, 0, 1, 4, 0.05303030303030303, ["nop"], ["nop"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 10, 0, 0, 4, 2, 1, 4, 3, 0.08333333333333334, ["mov     rax, [rbp+length]", "and     eax, 0Fh", "test    rax, rax", "jz      short loc_579A"], ["mov~rax,[rbp+0]", "and~eax,0", "test~rax,rax", "jz~FOO"]], [2, 0, 12, 1, 0, 12, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+buf], rdi", "mov     [rbp+length], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+buf]", "mov     [rbp+p], rax", "cmp     [rbp+length], 0", "jnz     short loc_575A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [2, 6, 11, 1, 13, 16, 1, 49, 0.06119, 1, 3], "succs": [[11, 5], [0, 4], [10, 7], [2], [2], [2], [2], [], [1], [1], [], [8, 6], [9, 3]], "fname": "is_nul", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+err], edi", "cmp     [rbp+err], 5Fh ; '_'", "setz    al", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "setz~al", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "is_ENOTSUP", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+scan], rdi", "mov     rax, [rbp+scan]", "mov     rax, [rax+28h]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+scan]", "mov     qword ptr [rax+28h], 0", "mov     rax, [rbp+scan]", "mov     qword ptr [rax+18h], 0", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 15, 0.0, 0, 1], "succs": [[]], "fname": "extent_scan_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 5, 0, 1, 0, 0, 0.07142857142857142, ["mov     rax, [rbp+sb.st_blksize]", "mov     rdx, rax", "mov     rax, 2000000000000000h", "cmp     rdx, rax", "ja      short loc_5868"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,0", "cmp~rdx,rax", "ja~FOO"]], [0, 0, 4, 0, 0, 3, 1, 1, 3, 2, 0.1607142857142857, ["mov     rax, [rbp+sb.st_blksize]", "test    rax, rax", "jle     short loc_5868"], ["mov~rax,[rbp+0]", "test~rax,rax", "jle~FOO"]], [1, 0, 6, 0, 0, 3, 0, 1, 2, 2, 0.14285714285714285, ["mov     rax, [rbp+sb.st_blksize]", "cmp     rax, 1FFFFh", "jle     short loc_586F"], ["mov~rax,[rbp+0]", "cmp~rax,0", "jle~FOO"]], [1, 0, 7, 0, 0, 5, 0, 1, 1, 2, 0.08928571428571427, ["mov     rax, [rbp+sb.st_blksize]", "mov     rdx, rax", "mov     rax, 2000000000000000h", "cmp     rdx, rax", "ja      short loc_586F"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,0", "cmp~rdx,rax", "ja~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 5, 1, 0.008928571428571428, ["mov     rax, [rbp+sb.st_blksize]", "jmp     short loc_5874"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 1, 1, 0, 0, 2, 0, 1, 4, 1, 0.026785714285714284, ["mov     eax, 200h", "jmp     short loc_5874"], ["mov~eax,<STR>", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.05357142857142857, ["mov     eax, 20000h"], ["mov~eax,0"]], [0, 0, 8, 0, 0, 5, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     rax, [rbp+sb.st_blksize]", "test    rax, rax", "jle     short loc_586F"], ["push~rbp", "mov~rbp,rsp", "mov~rax,[rbp+0]", "test~rax,rax", "jle~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 2, 7, 0, 9, 13, 2, 28, 0.06151, 0, 0], "succs": [[4, 5], [0, 5], [1, 6], [2, 6], [8], [8], [8], [3, 6], []], "fname": "io_blksize", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.08333333333333333, ["cmp     [rbp+err], 3Dh ; '='", "jnz     short loc_5890"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 4, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+err], edi", "cmp     [rbp+err], 5Fh ; '_'", "jz      short loc_5889"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.125, ["mov     eax, 1", "jmp     short loc_5895"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 1, 3, 0, 5, 6, 1, 13, 0.05, 0, 0], "succs": [[3], [0, 4], [1, 4], [], [3]], "fname": "ignorable_ctx_err", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+path], rdi", "mov     ecx, esi", "mov     eax, edx", "mov     edx, ecx", "mov     [rbp+recurse], dl", "mov     [rbp+preserve], al", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~ecx,esi", "mov~eax,edx", "mov~edx,ecx", "mov~[rbp+0],dl", "mov~[rbp+0],al", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 14, 0.0, 0, 1], "succs": [[]], "fname": "restorecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+path], rdi", "mov     [rbp+mode], esi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 10, 0.0, 0, 1], "succs": [[]], "fname": "defaultcon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     eax, [rbp+err]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]], [1, 1, 3, 1, 1, 13, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+file], rdi", "mov     [rbp+timespec], rsi", "mov     rdx, [rbp+timespec]", "mov     rax, [rbp+file]", "mov     rsi, rdx; timespec", "mov     rdi, rax; file", "call    lutimens", "mov     [rbp+err], eax", "cmp     [rbp+err], 0", "jz      short loc_5924"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 2, 0, 1, 4, 0, 2, 1, 0, 0.16666666666666666, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jnz     short loc_5924"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0.0, ["mov     [rbp+err], 0"], ["mov~[rbp+0],0"]]], "func_feature": [2, 0, 4, 0, 4, 5, 1, 21, 0.04167, 0, 1], "succs": [[], [0, 2], [0, 3], [0]], "fname": "utimens_symlink", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.041666666666666664, ["mov     [rbp+ret], 0"], ["mov~[rbp+0],0"]], [0, 0, 3, 0, 2, 6, 1, 3, 1, 2, 0.16666666666666666, ["call    ___errno_location", "mov     eax, [rax]", "mov     edi, eax; err", "call    is_ENOTSUP", "test    al, al", "jnz     short loc_5981"], ["call~FOO", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO", "test~al,al", "jnz~FOO"]], [1, 0, 2, 0, 1, 4, 0, 2, 2, 1, 0.041666666666666664, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jnz     short loc_5988"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [4, 0, 4, 1, 1, 16, 0, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+offset], rsi", "mov     [rbp+length], rdx", "mov     [rbp+ret], 0", "mov     rcx, [rbp+length]; len", "mov     rdx, [rbp+offset]; offset", "mov     eax, [rbp+fd]", "mov     esi, 3; mode", "mov     edi, eax; fd", "call    _fallocate", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jns     short loc_5988"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["mov     eax, [rbp+ret]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [4, 1, 6, 0, 5, 7, 2, 30, 0.05, 0, 1], "succs": [[4], [0, 2], [0, 4], [1, 4], []], "fname": "punch_hole", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 6, 1, 1, 19, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+name], rsi", "mov     eax, edx", "mov     [rbp+size], rcx", "mov     [rbp+punch_holes], al", "mov     rcx, [rbp+size]", "mov     eax, [rbp+fd]", "mov     edx, 1; whence", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    _lseek", "mov     [rbp+file_end], rax", "cmp     [rbp+file_end], 0", "jns     short loc_5A11"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~[rbp+0],al", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0.0, ["add     rsp, 30h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [4, 0, 1, 0, 4, 18, 0, 5, 0, 1, 0.03333333333333333, ["mov     rax, [rbp+name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotLseekS; \"cannot lseek %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_5A84"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 1, 0, 4, 18, 0, 5, 0, 1, 0.016666666666666666, ["mov     rax, [rbp+name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorDeallocat; \"error deallocating %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_5A84"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.05, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 3, 1, 1, 10, 1, 1, 0, 2, 0.06666666666666667, ["mov     rax, [rbp+file_end]", "sub     rax, [rbp+size]", "mov     rcx, rax", "mov     rdx, [rbp+size]; length", "mov     eax, [rbp+fd]", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    punch_hole", "test    eax, eax", "jns     short loc_5A7F"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rcx,rax", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 2, 0.1, ["cmp     [rbp+punch_holes], 0", "jz      short loc_5A7F"], ["cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [10, 1, 13, 0, 7, 9, 3, 73, 0.0381, 2, 3], "succs": [[2, 6], [], [1], [1], [1], [3, 4], [4, 5]], "fname": "create_hole", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 1, 9, 2, 2, 0, 0, 0.017551020408163268, ["movzx   edx, [rbp+punch_holes]; punch_holes", "mov     rcx, [rbp+psize]; size", "mov     rsi, [rbp+dst_name]; name", "mov     eax, [rbp+dest_fd]", "mov     edi, eax; fd", "call    create_hole", "xor     eax, 1", "test    al, al", "jz      short loc_5E0D"], ["movzx~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 3, 2, 0.05612244897959184, ["cmp     [rbp+make_hole], 0", "jz      short loc_5E0D"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 2, 0, 10, 0, 1, 4, 9, 0.14204081632653062, ["mov     rax, [rbp+n_read]", "sub     [rbp+max_n_read], rax", "mov     rax, [rbp+total_n_read]", "mov     rdx, [rax]", "mov     rax, [rbp+n_read]", "add     rdx, rax", "mov     rax, [rbp+total_n_read]", "mov     [rax], rdx", "cmp     [rbp+hole_size], 0", "jz      short loc_5B8D"], ["mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 3, 4, 0.1579591836734694, ["cmp     [rbp+n_read], 0", "jz      loc_5DE2"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 0, 1, 4, 0, 2, 3, 2, 0.03612244897959184, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jnz     short loc_5B10"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 50, 0, 1, 12, 0, 1, 2, 3, 0.20591836734693877, ["mov     rax, [rbp+max_n_read]", "cmp     [rbp+buf_size], rax", "cmovbe  rax, [rbp+buf_size]", "mov     rdx, rax; nbytes", "mov     rcx, [rbp+buf]", "mov     eax, [rbp+src_fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    _read", "mov     [rbp+n_read], rax", "cmp     [rbp+n_read], 0", "jns     short loc_5B58"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovbe~rax,[rbp+0]", "mov~rdx,rax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 50, 0, 0, 2, 0, 1, 5, 8, 0.06510204081632653, ["mov     rax, [rbp+hole_size]", "jmp     short loc_5B91"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 50, 0, 1, 10, 0, 2, 17, 2, 0.0816326530612245, ["mov     rdx, [rbp+psize]; count", "mov     rcx, [rbp+pbuf]", "mov     eax, [rbp+dest_fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    full_write", "mov     rdx, rax", "mov     rax, [rbp+psize]", "cmp     rdx, rax", "jz      short loc_5D00"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 50, 0, 0, 4, 2, 1, 16, 3, 0.17510204081632655, ["movzx   eax, [rbp+prev_hole]", "xor     eax, 1", "test    al, al", "jz      short loc_5CD9"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 50, 0, 0, 1, 0, 0, 5, 8, 0.06510204081632653, ["mov     rax, [rbp+buf_size]"], ["mov~rax,[rbp+0]"]], [1, 0, 50, 0, 0, 5, 1, 1, 11, 7, 0.34285714285714286, ["mov     [rbp+transition], al", "and     [rbp+transition], 1", "mov     rax, [rbp+n_read]", "cmp     [rbp+csize], rax", "jnz     short loc_5C1E"], ["mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 11, 8, 0.009591836734693878, ["mov     eax, 1", "jmp     short loc_5C02"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 50, 0, 0, 1, 0, 0, 10, 8, 0.30918367346938774, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 50, 0, 0, 6, 0, 1, 18, 8, 0.1526530612244898, ["mov     rax, [rbp+cbuf]", "mov     [rbp+pbuf], rax", "mov     rax, [rbp+csize]", "mov     [rbp+psize], rax", "cmp     [rbp+last_chunk], 0", "jz      loc_5DAC"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 0, 1, 9, 2, 2, 17, 2, 0.0816326530612245, ["movzx   edx, [rbp+punch_holes]; punch_holes", "mov     rcx, [rbp+psize]; size", "mov     rsi, [rbp+dst_name]; name", "mov     eax, [rbp+dest_fd]", "mov     edi, eax; fd", "call    create_hole", "xor     eax, 1", "test    al, al", "jz      short loc_5D00"], ["movzx~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 5, 0, 0.0, ["add     rsp, 60h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [4, 0, 1, 0, 4, 17, 0, 5, 4, 1, 0.004285714285714286, ["mov     rsi, [rbp+src_name]; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorReadingS; \"error reading %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_5E12"], ["mov~rsi,[rbp+0]", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 1, 0, 4, 18, 0, 5, 18, 1, 0.0010204081632653062, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorWritingS; \"error writing %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_5E12"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 18, 1, 0.0010204081632653062, ["mov     eax, 0", "jmp     loc_5E12"], ["mov~eax,0", "jmp~FOO"]], [5, 0, 1, 0, 3, 14, 0, 4, 17, 1, 0.006122448979591837, ["mov     rsi, [rbp+src_name]; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aOverflowReadin; \"overflow reading %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_5E12"], ["mov~rsi,[rbp+0]", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 5, 1, 0.00020408163265306123, ["mov     eax, 0", "jmp     short loc_5E12"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.005306122448979592, ["mov     eax, 1"], ["mov~eax,0"]], [1, 0, 50, 0, 0, 4, 2, 1, 12, 6, 0.10795918367346939, ["movzx   eax, [rbp+make_hole]", "xor     eax, 1", "test    al, al", "jnz     short loc_5C25"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 19, 10, 0.060000000000000005, ["cmp     [rbp+csize], 0", "jnz     short loc_5D29"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 50, 0, 0, 1, 0, 0, 20, 10, 0.0, ["mov     [rbp+n_read], 0"], ["mov~[rbp+0],0"]], [1, 0, 50, 0, 0, 2, 0, 1, 12, 6, 0.2238775510204082, ["cmp     [rbp+csize], 0", "jnz     short loc_5C2C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 50, 0, 0, 6, 0, 1, 6, 7, 0.1542857142857143, ["mov     [rbp+csize], rax", "mov     rax, [rbp+buf]", "mov     [rbp+cbuf], rax", "mov     rax, [rbp+buf]", "mov     [rbp+pbuf], rax", "jmp     loc_5DC0"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 13, 5, 0.2291836734693878, ["mov     eax, 1", "jmp     short loc_5C31"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 50, 0, 0, 1, 0, 0, 13, 5, 0.11, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 50, 0, 0, 2, 0, 1, 20, 9, 0.06816326530612245, ["cmp     [rbp+transition], 0", "jz      short loc_5D39"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 21, 8, 0.02816326530612245, ["mov     [rbp+csize], 0", "jmp     short loc_5DAC"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 50, 0, 0, 4, 1, 1, 14, 4, 0.363265306122449, ["mov     [rbp+last_chunk], al", "and     [rbp+last_chunk], 1", "cmp     [rbp+transition], 0", "jnz     short loc_5C48"], ["mov~[rbp+0],al", "and~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 21, 8, 0.02816326530612245, ["mov     [rbp+psize], 0", "jmp     short loc_5DAC"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 15, 3, 0.18979591836734694, ["cmp     [rbp+last_chunk], 0", "jz      loc_5D43"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 50, 0, 0, 1, 0, 1, 4, 5, 0.019591836734693877, ["jmp     loc_5DD5"], ["jmp~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 7, 6, 0.5457142857142857, ["cmp     [rbp+n_read], 0", "jnz     loc_5BAA"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 50, 2, 0, 5, 0, 0, 18, 7, 0.3673469387755102, ["mov     rax, [rbp+n_read]", "sub     rax, [rbp+csize]", "mov     [rbp+n_read], rax", "mov     rax, [rbp+csize]", "add     [rbp+cbuf], rax"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax"]], [1, 0, 50, 0, 0, 8, 0, 1, 8, 10, 0.3142857142857143, ["movzx   eax, [rbp+make_hole]", "mov     [rbp+prev_hole], al", "mov     rax, [rbp+n_read]", "cmp     [rbp+csize], rax", "cmovbe  rax, [rbp+csize]", "mov     [rbp+csize], rax", "cmp     [rbp+hole_size], 0", "jz      short loc_5BE6"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovbe~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [5, 0, 50, 1, 0, 19, 0, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 60h", "mov     [rbp+src_fd], edi", "mov     [rbp+dest_fd], esi", "mov     [rbp+buf], rdx", "mov     [rbp+buf_size], rcx", "mov     [rbp+hole_size], r8", "mov     eax, r9d", "mov     [rbp+punch_holes], al", "mov     rax, [rbp+last_write_made_hole]", "mov     byte ptr [rax], 0", "mov     rax, [rbp+total_n_read]", "mov     qword ptr [rax], 0", "mov     [rbp+make_hole], 0", "mov     [rbp+psize], 0", "jmp     loc_5DD5"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~eax,r9d", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 50, 0, 0, 4, 2, 1, 15, 4, 0.16693877551020408, ["movzx   eax, [rbp+transition]", "xor     eax, 1", "test    al, al", "jz      short loc_5C62"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 9, 10, 0.015510204081632653, ["cmp     [rbp+csize], 0", "jz      short loc_5BE6"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 1, 4, 0.2836734693877551, ["cmp     [rbp+max_n_read], 0", "jnz     loc_5AD3"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 50, 0, 0, 3, 0, 0, 8, 5, 0.21959183673469387, ["mov     rax, [rbp+last_write_made_hole]", "movzx   edx, [rbp+make_hole]", "mov     [rax], dl"], ["mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~<TAG>,dl"]], [1, 0, 50, 1, 0, 6, 0, 0, 16, 2, 0.18857142857142858, ["mov     rax, 7FFFFFFFFFFFFFFFh", "sub     rax, [rbp+csize]", "mov     rdx, rax", "mov     rax, [rbp+psize]", "cmp     rdx, rax", "jb      short loc_5D6E"], ["mov~rax,0", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 50, 1, 0, 4, 0, 0, 16, 4, 0.0, ["mov     rdx, [rbp+psize]", "mov     rax, [rbp+csize]", "add     rax, rdx", "mov     [rbp+psize], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [0, 0, 5, 0, 0, 1, 0, 1, 2, 3, 0.06551020408163266, ["jmp     short loc_5DE3"], ["jmp~FOO"]], [0, 0, 5, 0, 0, 1, 0, 0, 4, 3, 0.0036734693877551023, ["nop"], ["nop"]], [0, 0, 50, 0, 1, 6, 0, 1, 10, 10, 0.0, ["mov     rdx, [rbp+csize]", "mov     rax, [rbp+cbuf]", "mov     rsi, rdx; length", "mov     rdi, rax; buf", "call    is_nul", "mov     [rbp+make_hole], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al"]], [0, 0, 50, 1, 0, 5, 0, 1, 17, 8, 0.17020408163265308, ["mov     rdx, [rbp+psize]", "mov     rax, [rbp+csize]", "add     rax, rdx", "mov     [rbp+psize], rax", "jmp     short loc_5DAC"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 50, 0, 0, 3, 0, 1, 9, 9, 0.326530612244898, ["movzx   eax, [rbp+make_hole]", "cmp     al, [rbp+prev_hole]", "jz      short loc_5BFD"], ["movzx~eax,[rbp+0]", "cmp~al,[rbp+0]", "jz~FOO"]], [1, 0, 50, 0, 0, 2, 0, 1, 10, 9, 0.015510204081632653, ["cmp     [rbp+psize], 0", "jz      short loc_5BFD"], ["cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [17, 12, 55, 0, 51, 75, 2, 242, 0.12122, 3, 9], "succs": [[20, 21], [0, 21], [9, 6], [2, 46], [16, 34], [3, 4], [26], [17, 13], [14, 7], [26], [25, 22], [10], [10], [36, 23], [18, 13], [], [15], [15], [15], [15], [15], [15], [25, 27], [24, 29], [29], [27, 28], [35], [31], [31], [32, 30], [36], [33, 39], [36], [43, 39], [41], [42, 37], [35], [40, 49], [41], [8, 44], [49, 47], [45, 5], [41], [48, 19], [8], [1], [1], [49], [36], [50, 12], [11, 12]], "fname": "sparse_copy", "n_num": 51}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+dest_fd], edi", "mov     [rbp+src_fd], esi", "mov     edx, [rbp+src_fd]", "mov     eax, [rbp+dest_fd]", "mov     esi, 40049409h; request", "mov     edi, eax; fd", "mov     eax, 0", "call    _ioctl", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 0, 1], "succs": [[]], "fname": "clone_file", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 6, 0, 0, 4, 0, 1, 0, 0, 0.0, ["lea     rax, fallback_6728", "mov     cs:zeros_6726, rax", "mov     cs:nz_6727, 400h", "jmp     short loc_5EEA"], ["lea~rax,<TAG>", "mov~<TAG>,rax", "mov~<TAG>,0", "jmp~FOO"]], [1, 0, 7, 0, 1, 8, 1, 2, 1, 3, 0.017857142857142856, ["mov     rax, cs:nz_6727", "mov     esi, 1; size", "mov     rdi, rax; nmemb", "call    _calloc", "mov     cs:zeros_6726, rax", "mov     rax, cs:zeros_6726", "test    rax, rax", "jnz     short loc_5EEA"], ["mov~rax,<TAG>", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 1, 8, 1, 0, 8, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+n_bytes], rsi", "mov     rax, cs:zeros_6726", "test    rax, rax", "jnz     loc_5EEA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 6, 1, 0, 3, 0, 0, 3, 3, 0.03571428571428571, ["mov     rax, [rbp+n_bytes]", "sub     rax, [rbp+n]", "mov     [rbp+n_bytes], rax"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 6, 0, 1, 13, 0, 2, 2, 2, 0.1607142857142857, ["mov     rdx, [rbp+n_bytes]", "mov     rax, cs:nz_6727", "cmp     rdx, rax", "cmovbe  rax, rdx", "mov     [rbp+n], rax", "mov     rcx, cs:zeros_6726", "mov     rdx, [rbp+n]; count", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    full_write", "cmp     [rbp+n], rax", "jz      short loc_5EDE"], ["mov~rdx,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "cmovbe~rax,rdx", "mov~[rbp+0],rax", "mov~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "cmp~[rbp+0],rax", "jz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 1, 2, 0.3571428571428571, ["cmp     [rbp+n_bytes], 0", "jnz     short loc_5EA3"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.08928571428571427, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.017857142857142856, ["mov     eax, 0", "jmp     short locret_5EF6"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [2, 2, 8, 0, 9, 12, 2, 43, 0.0754, 3, 2], "succs": [[5], [0, 5], [1, 5], [5], [8, 3], [4, 6], [7], [], [7]], "fname": "write_zeros", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 7, 0, 0, 2, 0, 1, 0, 0, 0.0537697253068381, ["cmp     [rbp+sparse_mode], 3", "jnz     short loc_6501"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 13, 0, 0, 2, 0, 1, 5, 4, 0.058153126826417295, ["cmp     [rbp+wrote_hole_at_eof], 0", "jz      loc_647D"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 9, 0, 0, 2, 1, 1, 7, 3, 0.01928696668614845, ["test    al, al", "jz      short loc_647D"], ["test~al,al", "jz~FOO"]], [1, 0, 59, 0, 1, 8, 2, 2, 12, 4, 0.058007013442431324, ["mov     rdx, [rbp+nzeros]", "mov     eax, [rbp+dest_fd]", "mov     rsi, rdx; n_bytes", "mov     edi, eax; fd", "call    write_zeros", "xor     eax, 1", "test    al, al", "jz      short loc_62A6"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 59, 0, 0, 4, 0, 1, 11, 5, 0.043395675043834014, ["mov     rax, [rbp+ext_hole_size]", "mov     [rbp+nzeros], rax", "cmp     [rbp+empty_extent], 0", "jz      short loc_623D"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 59, 1, 0, 5, 0, 0, 12, 5, 0.0, ["mov     rax, [rbp+src_total_size]", "sub     rax, [rbp+dest_pos]", "cmp     [rbp+ext_hole_size], rax", "cmovle  rax, [rbp+ext_hole_size]", "mov     [rbp+nzeros], rax"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovle~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 59, 0, 0, 2, 0, 0, 8, 7, 0.0, ["mov     rax, [rbp+src_total_size]", "mov     [rbp+ext_start], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 59, 0, 0, 3, 0, 1, 7, 7, 0.01841028638223261, ["mov     rax, [rbp+src_total_size]", "cmp     rax, [rbp+ext_start]", "jge     short loc_610A"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jge~FOO"]], [1, 0, 59, 1, 0, 1, 0, 0, 13, 9, 0.12624196376388078, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 59, 0, 0, 3, 0, 1, 12, 8, 0.2907656341320865, ["mov     rax, [rbp+dest_pos]", "cmp     rax, [rbp+src_total_size]", "jnz     short loc_6387"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 10, 0, 1, 8, 1, 2, 6, 4, 0.012857977790765633, ["mov     rdx, [rbp+src_total_size]", "mov     eax, [rbp+dest_fd]", "mov     rsi, rdx; length", "mov     edi, eax; fd", "call    _ftruncate", "test    eax, eax", "setnz   al", "jmp     short loc_642B"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 5, 5, 0.04558737580362361, ["cmp     [rbp+sparse_mode], 1", "jz      short loc_640A"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 59, 0, 1, 11, 2, 2, 11, 4, 0.08050847457627118, ["cmp     [rbp+sparse_mode], 3", "setz    al", "movzx   edx, al; punch_holes", "mov     rcx, [rbp+ext_hole_size]; size", "mov     rsi, [rbp+dst_name]; name", "mov     eax, [rbp+dest_fd]", "mov     edi, eax; fd", "call    create_hole", "xor     eax, 1", "test    al, al", "jnz     short loc_61A2"], ["cmp~[rbp+0],0", "setz~al", "movzx~edx,al", "mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 10, 5, 0.05172413793103448, ["cmp     [rbp+sparse_mode], 3", "jz      short loc_61DF"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 11, 5, 0.008036236119228522, ["cmp     [rbp+sparse_mode], 1", "jz      short loc_6214"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 3, 0, 1, 7, 3, 0.025715955581531266, ["mov     rax, [rbp+dest_pos]", "cmp     rax, [rbp+src_total_size]", "jge     short loc_6501"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jge~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 12, 7, 0.07261835184102863, ["mov     [rbp+wrote_hole_at_eof], 1", "jmp     loc_62BA"], ["mov~[rbp+0],0", "jmp~FOO"]], [4, 0, 59, 2, 1, 20, 2, 2, 10, 4, 0.2857977790765634, ["mov     rcx, [rbp+buf_size]; buf_size", "mov     rdx, [rbp+buf]; buf", "mov     esi, [rbp+dest_fd]; dest_fd", "mov     eax, [rbp+src_fd]", "sub     rsp, 8", "lea     r9, [rbp+read_hole]", "push    r9; last_write_made_hole", "lea     r9, [rbp+n_read]", "push    r9; total_n_read", "push    r8; max_n_read", "push    [rbp+dst_name]; dst_name", "push    [rbp+src_name]; src_name", "mov     r9d, 1; punch_holes", "mov     r8, rdi; hole_size", "mov     edi, eax; src_fd", "call    sparse_copy", "add     rsp, 30h", "xor     eax, 1", "test    al, al", "jnz     loc_61A5"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "sub~rsp,0", "lea~r9,[rbp+0]", "push~r9", "lea~r9,[rbp+0]", "push~r9", "push~r8", "push~[rbp+0]", "push~[rbp+0]", "mov~r9d,0", "mov~r8,rdi", "mov~edi,eax", "call~FOO", "add~rsp,0", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 59, 0, 0, 2, 0, 1, 9, 5, 0.13077147866744593, ["mov     rdi, [rbp+hole_size]", "jmp     short loc_62EC"], ["mov~rdi,[rbp+0]", "jmp~FOO"]], [1, 0, 59, 0, 0, 1, 0, 0, 9, 5, 0.13077147866744593, ["mov     edi, 0"], ["mov~edi,0"]], [0, 0, 59, 1, 0, 3, 0, 0, 8, 6, 0.03302162478082992, ["mov     rax, [rbp+src_total_size]", "sub     rax, [rbp+ext_start]", "mov     [rbp+ext_len], rax"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax"]], [5, 1, 59, 1, 1, 31, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 0D0h", "mov     [rbp+src_fd], edi", "mov     [rbp+dest_fd], esi", "mov     [rbp+buf], rdx", "mov     [rbp+buf_size], rcx", "mov     [rbp+hole_size], r8", "mov     [rbp+src_total_size], r9", "mov     rax, [rbp+arg_8]", "mov     [rbp+src_name], rax", "mov     rax, [rbp+arg_10]", "mov     [rbp+dst_name], rax", "mov     rax, [rbp+arg_18]", "mov     [rbp+require_normal_copy], rax", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+last_ext_start], 0", "mov     [rbp+last_ext_len], 0", "mov     [rbp+dest_pos], 0", "lea     rdx, [rbp+scan]", "mov     eax, [rbp+src_fd]", "mov     rsi, rdx; scan", "mov     edi, eax; src_fd", "call    extent_scan_init", "mov     rax, [rbp+require_normal_copy]", "mov     byte ptr [rax], 0", "mov     [rbp+wrote_hole_at_eof], 1"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~[rbp+0],0"]], [0, 0, 59, 0, 0, 4, 0, 0, 3, 8, 0.19257744009351255, ["mov     edx, [rbp+i]", "mov     rax, [rbp+scan.ei_count]", "cmp     rdx, rax", "jb      loc_604F"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jb~FOO"]], [2, 0, 59, 0, 0, 3, 0, 1, 2, 9, 0.04208065458796025, ["mov     [rbp+empty_extent], 0", "mov     [rbp+i], 0", "jmp     loc_638E"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 13, 7, 0.16218585622443016, ["mov     [rbp+scan.hit_final_extent], 1", "jmp     short loc_63AE"], ["mov~[rbp+0],0", "jmp~FOO"]], [3, 0, 4, 0, 4, 17, 0, 5, 9, 3, 0.013734658094681471, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotLseekS; \"cannot lseek %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short fail"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 59, 0, 1, 8, 1, 1, 8, 4, 0.12068965517241378, ["mov     rcx, [rbp+ext_start]", "mov     eax, [rbp+src_fd]", "mov     edx, 0; whence", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    _lseek", "test    rax, rax", "jns     short loc_61BC"], ["mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~rax,rax", "jns~FOO"]], [2, 0, 59, 8, 0, 19, 0, 1, 5, 7, 0.08781414377556984, ["mov     rcx, [rbp+scan.ext_info]", "mov     edx, [rbp+i]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     rax, [rax]", "mov     [rbp+ext_start], rax", "mov     rcx, [rbp+scan.ext_info]", "mov     edx, [rbp+i]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     rax, [rax+8]", "mov     [rbp+ext_len], rax", "jmp     short loc_60DE"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 59, 0, 0, 4, 0, 0, 4, 8, 0.17796610169491525, ["mov     edx, [rbp+i]", "mov     rax, [rbp+scan.ei_count]", "cmp     rdx, rax", "jnb     short loc_60A3"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnb~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 6, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0.03331385154880187, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_651A"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [0, 0, 4, 0, 0, 2, 0, 1, 12, 3, 0.0052600818234950315, ["nop", "jmp     short fail"], ["nop", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 4, 0, 0, 1, 0, 0, 11, 3, 0.007013442431326709, ["nop"], ["nop"]], [1, 0, 59, 0, 0, 2, 0, 1, 4, 7, 0.021917007597895968, ["cmp     [rbp+empty_extent], 0", "jnz     loc_604F"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 59, 0, 0, 8, 0, 1, 8, 6, 0.26388077147866745, ["mov     rax, [rbp+ext_start]", "mov     [rbp+last_ext_start], rax", "mov     [rbp+empty_extent], 0", "mov     rax, [rbp+ext_len]", "mov     [rbp+last_ext_len], rax", "mov     r8, [rbp+ext_len]", "cmp     [rbp+sparse_mode], 3", "jnz     short loc_62E7"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~r8,[rbp+0]", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 59, 2, 0, 7, 0, 1, 7, 5, 0.22910578609000584, ["mov     rax, [rbp+ext_start]", "sub     rax, [rbp+last_ext_start]", "sub     rax, [rbp+last_ext_len]", "mov     [rbp+ext_hole_size], rax", "mov     [rbp+wrote_hole_at_eof], 0", "cmp     [rbp+ext_hole_size], 0", "jz      loc_62BA"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 59, 0, 0, 4, 0, 0, 13, 7, 0.05128579777907656, ["mov     rax, [rbp+src_total_size]", "cmp     [rbp+ext_start], rax", "cmovle  rax, [rbp+ext_start]", "mov     [rbp+dest_pos], rax"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovle~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 10, 1, 1, 8, 1, 1, 6, 4, 0.012857977790765633, ["mov     rax, [rbp+src_total_size]", "sub     rax, [rbp+dest_pos]", "mov     rdx, rax", "mov     eax, [rbp+dest_fd]", "mov     rsi, rdx; n_bytes", "mov     edi, eax; fd", "call    write_zeros", "xor     eax, 1"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "xor~eax,0"]], [0, 0, 15, 0, 0, 1, 0, 1, 6, 6, 0.11221507890122734, ["jmp     short loc_63CC"], ["jmp~FOO"]], [1, 0, 59, 0, 1, 7, 2, 2, 5, 6, 0.19871420222092342, ["lea     rax, [rbp+scan]", "mov     rdi, rax; scan", "call    extent_scan_free", "movzx   eax, [rbp+scan.hit_final_extent]", "xor     eax, 1", "test    al, al", "jnz     loc_5F9E"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [5, 0, 3, 0, 4, 19, 0, 5, 4, 2, 0.0056984219754529514, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aSFailedToGetEx; \"%s: failed to get extents info\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_6506"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 5, 0, 0, 3, 1, 1, 3, 3, 0.0309760374050263, ["movzx   eax, [rbp+scan.initial_scan_failed]", "test    al, al", "jz      short loc_5FE6"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 1, 5, 0, 2, 10, 2, 0.023670368205727644, ["lea     rax, [rbp+scan]", "mov     rdi, rax; scan", "call    extent_scan_free", "mov     eax, 0", "jmp     loc_6506"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 4, 0, 4, 18, 0, 5, 13, 3, 0.004091174751607247, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "lea     rdi, aSWriteFailed; \"%s: write failed\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     fail"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 59, 1, 0, 5, 0, 1, 6, 6, 0.19988310929281122, ["mov     rdx, [rbp+ext_start]", "mov     rax, [rbp+ext_len]", "add     rax, rdx", "cmp     [rbp+src_total_size], rax", "jge     short loc_6119"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~[rbp+0],rax", "jge~FOO"]], [1, 0, 59, 0, 1, 8, 2, 2, 1, 5, 0.1011104617182934, ["lea     rax, [rbp+scan]", "mov     rdi, rax; scan", "call    extent_scan_read", "mov     [rbp+ok], al", "movzx   eax, [rbp+ok]", "xor     eax, 1", "test    al, al", "jz      short loc_6039"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 59, 0, 0, 2, 0, 1, 9, 6, 0.10432495616598479, ["cmp     [rbp+empty_extent], 0", "jz      short loc_61CB"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 19, 0, 0, 3, 1, 1, 2, 4, 0.05639976621858562, ["movzx   eax, [rbp+scan.hit_final_extent]", "test    al, al", "jnz     loc_63CB"], ["movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [0, 0, 15, 0, 0, 1, 0, 0, 3, 6, 0.010520163646990063, ["nop"], ["nop"]], [1, 0, 3, 0, 0, 1, 0, 0, 7, 2, 0.0056984219754529514, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 5, 1, 1, 10, 1, 1, 8, 3, 0.01315020455873758, ["mov     rax, [rbp+src_total_size]", "sub     rax, [rbp+dest_pos]", "mov     rdx, rax; length", "mov     rcx, [rbp+dest_pos]", "mov     eax, [rbp+dest_fd]", "mov     rsi, rcx; offset", "mov     edi, eax; fd", "call    punch_hole", "test    eax, eax", "jns     short loc_6501"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 59, 0, 0, 4, 2, 1, 10, 6, 0.052308591466978374, ["movzx   eax, [rbp+empty_extent]", "xor     eax, 1", "test    al, al", "jz      short loc_6214"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [3, 0, 59, 6, 0, 13, 0, 0, 5, 7, 0.08781414377556984, ["sub     [rbp+i], 1", "mov     rcx, [rbp+scan.ext_info]", "mov     edx, [rbp+i]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     rdx, [rax+8]", "mov     rax, [rbp+last_ext_start]", "add     rax, rdx", "mov     [rbp+ext_start], rax", "mov     [rbp+ext_len], 0"], ["sub~[rbp+0],0", "mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~[rbp+0],0"]], [0, 0, 59, 1, 0, 7, 1, 1, 11, 9, 0.27615429573348915, ["mov     rdx, [rbp+n_read]", "mov     rax, [rbp+ext_start]", "add     rax, rdx", "mov     [rbp+dest_pos], rax", "mov     rax, [rbp+n_read]", "test    rax, rax", "jz      short loc_6374"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 14, 0, 0, 3, 0, 1, 4, 5, 0.12068965517241378, ["mov     rax, [rbp+dest_pos]", "cmp     rax, [rbp+src_total_size]", "jl      short loc_63E6"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jl~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 4, 2, 0.0056984219754529514, ["mov     rax, [rbp+require_normal_copy]", "mov     byte ptr [rax], 1", "mov     eax, 0", "jmp     loc_6506"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [0, 0, 59, 0, 0, 2, 0, 0, 12, 9, 0.0, ["movzx   eax, [rbp+read_hole]", "mov     [rbp+wrote_hole_at_eof], al"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al"]], [4, 0, 3, 0, 4, 18, 0, 5, 8, 2, 0.0035067212156633543, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToExtend; \"failed to extend %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_6506"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 9, 2, 0.0004383401519579193, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aErrorDeallocat; \"error deallocating %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_6506"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]]], "func_feature": [32, 22, 73, 1, 60, 88, 1, 369, 0.073, 6, 26], "succs": [[50, 15], [0, 11], [0, 58], [44, 37], [3, 5], [3], [20], [20, 6], [22], [8, 24], [2], [10, 38], [16, 31], [52, 12], [4, 12], [50, 51], [35], [33, 54], [17], [17], [36], [46], [34, 28], [22], [40], [43], [25, 47], [45], [27, 53], [], [32, 29], [43], [], [43], [40, 28], [18, 19], [26, 35], [35], [2], [55], [46, 39], [30], [56, 41], [30], [43], [36, 7], [48, 23], [52, 13], [49, 42], [55], [30], [50, 59], [4, 14], [45], [57, 9], [1, 11], [30], [9], [30], [30]], "fname": "extent_copy", "n_num": 60}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 7, 0, 0, 6, 0, 1, 0, 0, 0.19047619047619047, ["mov     rax, [rbp+ancestors]", "mov     rdx, [rax+8]", "mov     rax, [rbp+sb]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_6561"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 1, 2, 0.3333333333333333, ["cmp     [rbp+ancestors], 0", "jnz     short loc_6531"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 0, 3, 0, 0, 3, 3, 0.11904761904761904, ["mov     rax, [rbp+ancestors]", "mov     rax, [rax]", "mov     [rbp+ancestors], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 7, 0, 0, 6, 0, 1, 3, 2, 0.11904761904761904, ["mov     rax, [rbp+ancestors]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+sb]", "mov     rax, [rax]", "cmp     rdx, rax", "jnz     short loc_6561"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 7, 0, 0, 5, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sb], rdi", "mov     [rbp+ancestors], rsi", "jmp     short loc_656C"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.07142857142857142, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.047619047619047616, ["mov     eax, 1", "jmp     short loc_6578"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 5, 0, 8, 10, 1, 27, 0.11012, 0, 0], "succs": [[2, 3], [0, 5], [1], [2, 7], [1], [6], [], [6]], "fname": "is_ancestor", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.125, ["mov     eax, 1", "jmp     short loc_6599"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+err], edi", "cmp     [rbp+err], 5Fh ; '_'", "jz      short loc_658D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.08333333333333333, ["cmp     [rbp+err], 3Dh ; '='", "jnz     short loc_6594"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 1, 3, 0, 5, 6, 3, 13, 0.05, 0, 0], "succs": [[4], [0, 2], [0, 3], [4], []], "fname": "errno_unsupported", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+src_path], rdi", "mov     [rbp+src_fd], esi", "mov     [rbp+dst_path], rdx", "mov     [rbp+dst_fd], ecx", "mov     [rbp+x], r8", "mov     eax, 1", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8", "mov~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 10, 0.0, 0, 0], "succs": [[]], "fname": "copy_attr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 0, 3, 0, 4, 18, 0, 5, 0, 0, 0.019230769230769232, ["mov     rax, [rbp+src_name_in]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotAccessS; \"cannot access %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_687C"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [3, 1, 13, 1, 1, 48, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 0D0h", "mov     [rbp+src_name_in], rdi", "mov     [rbp+dst_name_in], rsi", "mov     eax, edx", "mov     [rbp+src_sb], rcx", "mov     [rbp+ancestors], r8", "mov     [rbp+x], r9", "mov     [rbp+new_dst], al", "mov     rax, [rbp+arg_0]", "mov     [rbp+first_dir_created_per_command_line_arg], rax", "mov     rax, [rbp+arg_8]", "mov     [rbp+copy_into_self], rax", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+x]", "mov     rdx, [rax]", "mov     rcx, [rax+8]", "mov     qword ptr [rbp+non_command_line_options.backup_type], rdx", "mov     qword ptr [rbp+non_command_line_options.interactive], rcx", "mov     rdx, [rax+10h]", "mov     rcx, [rax+18h]", "mov     qword ptr [rbp+non_command_line_options.mode], rdx", "mov     qword ptr [rbp+non_command_line_options.move_mode], rcx", "mov     rdx, [rax+20h]", "mov     rcx, [rax+28h]", "mov     qword ptr [rbp+non_command_line_options.explicit_no_preserve_mode], rdx", "mov     qword ptr [rbp+non_command_line_options.require_preserve_xattr], rcx", "mov     rdx, [rax+30h]", "mov     rcx, [rax+38h]", "mov     qword ptr [rbp+non_command_line_options.open_dangling_dest_symlink], rdx", "mov     qword ptr [rbp+non_command_line_options.reflink_mode], rcx", "mov     rdx, [rax+48h]", "mov     rax, [rax+40h]", "mov     [rbp+non_command_line_options.dest_info], rax", "mov     [rbp+non_command_line_options.src_info], rdx", "mov     [rbp+ok], 1", "mov     rax, [rbp+src_name_in]", "mov     esi, 2; option", "mov     rdi, rax; dir", "call    savedir", "mov     [rbp+name_space], rax", "cmp     [rbp+name_space], 0", "jnz     short loc_66E9"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.14102564102564102, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_6890"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 1, 7, 0, 1, 5, 2, 0.15384615384615385, ["mov     rax, [rbp+name_space]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+first_dir_created_per_command_line_arg]", "movzx   edx, [rbp+new_first_dir_created]", "mov     [rax], dl", "movzx   eax, [rbp+ok]"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~<TAG>,dl", "movzx~eax,[rbp+0]"]], [4, 1, 9, 1, 5, 56, 5, 6, 4, 4, 0.07051282051282051, ["mov     rcx, [rbp+namep]", "mov     rax, [rbp+src_name_in]", "mov     edx, 0; base_in_result", "mov     rsi, rcx; base", "mov     rdi, rax; dir", "call    file_name_concat", "mov     [rbp+src_name], rax", "mov     rcx, [rbp+namep]", "mov     rax, [rbp+dst_name_in]", "mov     edx, 0; base_in_result", "mov     rsi, rcx; base", "mov     rdi, rax; dir", "call    file_name_concat", "mov     [rbp+dst_name], rax", "mov     rax, [rbp+first_dir_created_per_command_line_arg]", "movzx   eax, byte ptr [rax]", "mov     [rbp+first_dir_created], al", "movzx   edx, [rbp+new_dst]; new_dst", "lea     r9, [rbp+non_command_line_options]; x", "mov     r8, [rbp+ancestors]; ancestors", "mov     rcx, [rbp+src_sb]; parent", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "push    0; rename_succeeded", "lea     rdi, [rbp+local_copy_into_self]", "push    rdi; copy_into_self", "lea     rdi, [rbp+first_dir_created]", "push    rdi; first_dir_created_per_command_line_arg", "push    0; command_line_arg", "mov     rdi, rax; src_name", "call    copy_internal", "add     rsp, 20h", "movzx   edx, [rbp+ok]", "movzx   eax, al", "and     eax, edx", "test    eax, eax", "setnz   al", "mov     [rbp+ok], al", "mov     rax, [rbp+copy_into_self]", "movzx   edx, byte ptr [rax]", "movzx   eax, [rbp+local_copy_into_self]", "or      eax, edx", "movzx   eax, al", "test    eax, eax", "setnz   dl", "mov     rax, [rbp+copy_into_self]", "mov     [rax], dl", "mov     rax, [rbp+dst_name]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+src_name]", "mov     rdi, rax; ptr", "call    free", "movzx   eax, [rbp+local_copy_into_self]", "test    al, al", "jnz     short loc_6855"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "lea~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "push~0", "lea~rdi,[rbp+0]", "push~rdi", "lea~rdi,[rbp+0]", "push~rdi", "push~0", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "movzx~edx,[rbp+0]", "movzx~eax,al", "and~eax,edx", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "movzx~edx,<TAG>", "movzx~eax,[rbp+0]", "or~eax,edx", "movzx~eax,al", "test~eax,eax", "setnz~dl", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [0, 0, 9, 0, 0, 4, 1, 1, 3, 4, 0.23717948717948717, ["mov     rax, [rbp+namep]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     loc_6719"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 2, 5, 0.15384615384615385, ["mov     [rbp+new_first_dir_created], 0", "mov     rax, [rbp+name_space]", "mov     [rbp+namep], rax", "jmp     loc_6841"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 9, 2, 1, 11, 2, 1, 5, 5, 0.01282051282051282, ["movzx   eax, [rbp+first_dir_created]", "or      al, [rbp+new_first_dir_created]", "movzx   eax, al", "test    eax, eax", "setnz   al", "mov     [rbp+new_first_dir_created], al", "mov     rax, [rbp+namep]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "add     [rbp+namep], rax"], ["movzx~eax,[rbp+0]", "or~al,[rbp+0]", "movzx~eax,al", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "add~[rbp+0],rax"]], [0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 4, 0, 0, 1, 0, 1, 4, 3, 0.1346153846153846, ["jmp     short loc_6856"], ["jmp~FOO"]], [1, 0, 11, 0, 0, 4, 0, 1, 1, 6, 0.05128205128205128, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 3", "jnz     short loc_66FF"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 10, 0, 0, 1, 0, 0, 2, 6, 0.0, ["mov     [rbp+non_command_line_options.dereference], 2"], ["mov~[rbp+0],0"]], [0, 0, 4, 0, 0, 1, 0, 0, 5, 3, 0.02564102564102564, ["nop"], ["nop"]]], "func_feature": [13, 10, 21, 1, 14, 17, 1, 164, 0.07143, 2, 4], "succs": [[2], [0, 11], [9, 6], [2], [8, 13], [10, 4], [], [5], [5], [], [3], [12, 7], [7], [3]], "fname": "copy_dir", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 25, 0, 0, 4, 1, 1, 0, 0, 0.042328042328042326, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Bh]", "test    al, al", "jz      loc_69DD"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 26, 0, 0, 4, 1, 1, 2, 5, 0.023809523809523808, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_6908"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 6, 0, 1, 4, 0, 2, 4, 3, 0.0205026455026455, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     short loc_6AB5"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 7, 0, 1, 4, 0, 2, 3, 4, 0.06613756613756613, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 1", "jz      short loc_6A87"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 3, 0, 1, 6, 2, 2, 6, 2, 0.02998236331569664, ["mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    owner_failure_ok", "xor     eax, 1", "test    al, al", "jz      short loc_69CB"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 19, 0, 1, 8, 1, 2, 5, 3, 0.037918871252204576, ["mov     edx, [rbp+restrictive_temp_mode]; mode", "mov     ecx, [rbp+dest_desc]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    qset_acl", "test    eax, eax", "jz      short loc_69DD"], ["mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 7, 0, 1, 4, 0, 2, 3, 4, 0.06613756613756613, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 1", "jz      short loc_6A1F"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 9, 0, 1, 8, 1, 2, 2, 2, 0.09281305114638448, ["mov     edx, [rbp+gid]; group", "mov     ecx, [rbp+uid]", "mov     eax, [rbp+dest_desc]", "mov     esi, ecx; owner", "mov     edi, eax; fd", "call    _fchown", "test    eax, eax", "jnz     short loc_6A03"], ["mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,ecx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [3, 0, 3, 0, 4, 20, 1, 5, 6, 2, 0.026455026455026454, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToPreser_2; \"failed to preserve ownership for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_6B1C"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 4, 0, 1, 6, 2, 2, 5, 2, 0.08333333333333333, ["mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    chown_failure_ok", "xor     eax, 1", "test    al, al", "jz      short loc_6B1C"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 6, 0, 1, 4, 0, 2, 4, 3, 0.0205026455026455, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     loc_6AB5"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 7, 1, 0.0006613756613756613, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_6B21"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 24, 0, 0, 7, 1, 1, 2, 6, 0.042328042328042326, ["mov     rax, [rbp+dst_sb]", "mov     eax, [rax+18h]", "mov     [rbp+old_mode], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jnz     short loc_692A"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 27, 0, 0, 4, 1, 1, 1, 6, 0.01455026455026455, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jnz     short loc_6908"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 5, 0, 3, 14, 0, 4, 4, 3, 0.0205026455026455, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     edx, [rbp+gid]; group", "mov     eax, [rbp+dest_desc]", "mov     esi, 0FFFFFFFFh; owner", "mov     edi, eax; fd", "call    _fchown", "mov     [rbp+__x], eax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "jmp     short loc_6AB5"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 5, 0, 3, 13, 0, 3, 4, 3, 0.0205026455026455, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno_0], eax", "mov     edx, [rbp+gid]; group", "mov     rax, [rbp+dst_name]", "mov     esi, 0FFFFFFFFh; owner", "mov     rdi, rax; file", "call    _lchown", "mov     [rbp+__x_0], eax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno_0]", "mov     [rdx], eax"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax"]], [0, 0, 23, 0, 0, 4, 1, 1, 3, 6, 0.006613756613756613, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_6933"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 6, 1, 0.00992063492063492, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 1, 0, 5, 0, 0, 4, 0, 0.0, ["add     rsp, 60h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 5, 0, 1, 7, 1, 0.006172839506172839, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "movzx   eax, al", "neg     eax", "jmp     loc_6B21"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~eax,al", "neg~eax", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.0068342151675485005, ["mov     eax, 1", "jmp     loc_6B21"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.0068342151675485005, ["mov     eax, 1", "jmp     loc_6B21"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 21, 0, 0, 3, 0, 1, 3, 5, 0.06812169312169311, ["mov     rax, [rbp+src_sb]", "mov     eax, [rax+18h]", "jmp     short loc_693A"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "jmp~FOO"]], [0, 0, 21, 0, 0, 2, 0, 0, 4, 5, 0.013888888888888888, ["mov     rax, [rbp+x]", "mov     eax, [rax+10h]"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]"]], [3, 0, 2, 0, 4, 16, 0, 4, 7, 2, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aClearingPermis; \"clearing permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 28, 1, 0, 22, 2, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 60h", "mov     [rbp+x], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+dest_desc], edx", "mov     [rbp+src_sb], rcx", "mov     eax, r8d", "mov     [rbp+dst_sb], r9", "mov     [rbp+new_dst], al", "mov     rax, [rbp+src_sb]", "mov     eax, [rax+1Ch]", "mov     [rbp+uid], eax", "mov     rax, [rbp+src_sb]", "mov     eax, [rax+20h]", "mov     [rbp+gid], eax", "movzx   eax, [rbp+new_dst]", "xor     eax, 1", "test    al, al", "jz      loc_69DD"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~eax,r8d", "mov~[rbp+0],r9", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 1, 20, 0, 0, 12, 6, 1, 4, 4, 0.12698412698412698, ["mov     [rbp+new_mode], eax", "mov     eax, [rbp+old_mode]", "and     eax, [rbp+new_mode]", "and     eax, 1C0h", "mov     [rbp+restrictive_temp_mode], eax", "mov     eax, [rbp+new_mode]", "not     eax", "or      ah, 0Eh", "and     eax, [rbp+old_mode]", "and     eax, 0FFFh", "test    eax, eax", "jz      short loc_69DD"], ["mov~[rbp+0],eax", "mov~eax,[rbp+0]", "and~eax,[rbp+0]", "and~eax,0", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "not~eax", "or~ah,0", "and~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 1, 3, 0.1948853615520282, ["cmp     [rbp+dest_desc], 0FFFFFFFFh", "jz      short loc_6A4D"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 9, 0, 1, 8, 1, 2, 2, 2, 0.09281305114638448, ["mov     edx, [rbp+gid]; group", "mov     ecx, [rbp+uid]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; owner", "mov     rdi, rax; file", "call    _lchown", "test    eax, eax", "jnz     short loc_6A6F"], ["mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]]], "func_feature": [23, 21, 47, 0, 29, 46, 2, 196, 0.03936, 2, 2], "succs": [[27, 12], [0, 12], [9, 15], [2, 15], [24, 19], [27, 4], [10, 14], [20, 6], [17, 11], [8, 17], [9, 14], [18], [16, 22], [1, 12], [9], [9], [22, 23], [18], [], [18], [18], [18], [26], [26], [19], [27, 13], [27, 5], [28, 7], [3, 21]], "fname": "set_owner", "n_num": 29}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+dst_name], rdi", "mov     [rbp+dest_desc], esi", "mov     [rbp+src_sb], rdx", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 8, 0.0, 0, 0], "succs": [[]], "fname": "set_author", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 10, 0, 0, 2, 0, 1, 0, 0, 0.055443548387096774, ["cmp     [rbp+all_errors], 0", "jnz     short loc_6C21"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 11, 0, 1, 5, 1, 1, 6, 4, 0.10685483870967742, ["mov     rax, [rbp+con]", "mov     rdi, rax; con", "call    setfscreatecon", "test    eax, eax", "jns     short loc_6C7F"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 26, 0, 0, 5, 2, 1, 1, 9, 0.02217741935483871, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+23h]", "xor     eax, 1", "test    al, al", "jnz     short loc_6B95"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 32, 1, 0, 18, 2, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 40h", "mov     [rbp+src_name], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+mode], edx", "mov     eax, ecx", "mov     [rbp+x], r8", "mov     [rbp+new_dst], al", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      loc_6D0C"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~eax,ecx", "mov~[rbp+0],r8", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.05897177419354838, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 4, 0, 1, 4, 0, 2, 7, 3, 0.04536290322580645, ["mov     rax, [rbp+con]", "mov     rdi, rax; con", "call    freecon", "jmp     loc_6D89"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 8, 3, 0.03024193548387097, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      loc_6D89"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 8, 0, 0, 4, 1, 1, 1, 3, 0.008064516129032258, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jz      short loc_6D89"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 2, 3, 0.006048387096774193, ["cmp     [rbp+new_dst], 0", "jz      short loc_6D89"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 1, 7, 1, 1, 3, 3, 0.006048387096774193, ["mov     edx, [rbp+mode]", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; path", "call    defaultcon", "test    eax, eax", "jns     short loc_6D89"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 5, 0, 2, 7, 2, 3, 4, 3, 0.004032258064516129, ["call    ___errno_location", "mov     eax, [rax]", "mov     edi, eax; err", "call    ignorable_ctx_err", "xor     eax, 1", "test    al, al", "jz      short loc_6D89"], ["call~FOO", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [3, 0, 4, 0, 4, 16, 0, 4, 5, 3, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToSetDef_1; \"failed to set default file creation con\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 8, 4, 0.026713709677419355, ["cmp     [rbp+some_errors], 0", "jz      short loc_6C5D"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 4, 1, 1, 9, 3, 0.035282258064516125, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      short loc_6C7F"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 25, 0, 0, 4, 1, 1, 2, 9, 0.0020161290322580645, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      short loc_6B9C"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 6, 5, 0.05040322580645161, ["cmp     [rbp+all_errors], 0", "jnz     short loc_6CB1"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 18, 0, 1, 9, 2, 2, 5, 5, 0.1592741935483871, ["mov     [rbp+some_errors], al", "and     [rbp+some_errors], 1", "lea     rdx, [rbp+con]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; con", "mov     rdi, rax; file", "call    lgetfilecon", "test    eax, eax", "js      loc_6C90"], ["mov~[rbp+0],al", "and~[rbp+0],0", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "js~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 7, 4, 0.024193548387096774, ["cmp     [rbp+some_errors], 0", "jz      short loc_6CF2"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.06048387096774194, ["mov     rcx, [rbp+var_18]", "xor     rcx, fs:28h", "jz      short loc_6DA2"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 1, 5, 0, 2, 10, 2, 0.015120967741935484, ["mov     rax, [rbp+con]", "mov     rdi, rax; con", "call    freecon", "mov     eax, 0", "jmp     loc_6D8E"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 2, 0.007560483870967742, ["mov     eax, 0", "jmp     loc_6D8E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 23, 0, 0, 1, 0, 0, 3, 8, 0.011592741935483871, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 23, 0, 0, 2, 0, 1, 2, 8, 0.053931451612903226, ["mov     eax, 1", "jmp     short loc_6BA1"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 8, 0, 2, 7, 2, 3, 9, 4, 0.0010080645161290322, ["call    ___errno_location", "mov     eax, [rax]", "mov     edi, eax; err", "call    errno_unsupported", "xor     eax, 1", "test    al, al", "jz      short loc_6C5D"], ["call~FOO", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 4, 0, 0.0, ["add     rsp, 40h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [1, 0, 7, 0, 2, 7, 2, 3, 8, 4, 0.0010080645161290322, ["call    ___errno_location", "mov     eax, [rax]", "mov     edi, eax; err", "call    errno_unsupported", "xor     eax, 1", "test    al, al", "jz      short loc_6CF2"], ["call~FOO", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 22, 0, 0, 6, 3, 1, 3, 7, 0.10685483870967742, ["mov     [rbp+all_errors], al", "and     [rbp+all_errors], 1", "movzx   eax, [rbp+all_errors]", "xor     eax, 1", "test    al, al", "jz      short loc_6BC9"], ["mov~[rbp+0],al", "and~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 21, 0, 0, 5, 2, 1, 4, 7, 0.006048387096774193, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+29h]", "xor     eax, 1", "test    al, al", "jz      short loc_6BC9"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 19, 0, 0, 2, 0, 1, 5, 6, 0.009576612903225807, ["mov     eax, 1", "jmp     short loc_6BCE"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 19, 0, 0, 1, 0, 0, 4, 6, 0.12046370967741934, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [2, 0, 7, 0, 4, 15, 0, 4, 8, 4, 0.014616935483870967, ["mov     rax, [rbp+con]", "mov     rdi, rax; arg", "call    quote", "mov     r12, rax", "lea     rdi, aFailedToSetDef_0; \"failed to set default file creation con\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [3, 0, 6, 0, 4, 16, 0, 4, 7, 4, 0.013104838709677418, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToGetSec; \"failed to get security context of %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]]], "func_feature": [24, 24, 47, 1, 33, 51, 3, 176, 0.0322, 4, 2], "succs": [[12, 31], [0, 5], [22, 14], [2, 7], [18], [4], [20, 4], [8, 4], [9, 4], [10, 4], [11, 4], [4], [13, 23], [19, 5], [21, 22], [32, 17], [1, 15], [25, 6], [24, 30], [18], [18], [26], [26], [13, 31], [], [32, 6], [27, 29], [28, 29], [16], [16], [], [13], [6]], "fname": "set_process_security_ctx", "n_num": 33}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 14, 0, 0, 4, 1, 1, 0, 0, 0.004761904761904762, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      short loc_6DEA"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 15, 1, 0, 16, 2, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 30h", "mov     [rbp+dst_name], rdi", "mov     eax, edx", "mov     [rbp+x], rcx", "mov     edx, esi", "mov     [rbp+process_local], dl", "mov     [rbp+recurse], al", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+23h]", "xor     eax, 1", "test    al, al", "jnz     short loc_6DE3"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~edx,esi", "mov~[rbp+0],dl", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [4, 0, 2, 0, 4, 17, 0, 4, 6, 2, 0.026190476190476195, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     r12, rax", "lea     rdi, aFailedToSetThe; \"failed to set the security context of %\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 5, 3, 0.17142857142857143, ["cmp     [rbp+all_errors], 0", "jnz     short loc_6E61"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 2, 7, 2, 3, 7, 2, 0.004761904761904762, ["call    ___errno_location", "mov     eax, [rax]", "mov     edi, eax; err", "call    errno_unsupported", "xor     eax, 1", "test    al, al", "jz      short loc_6EA7"], ["call~FOO", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 6, 0, 0.0, ["add     rsp, 30h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 7, 1, 0.01904761904761905, ["mov     eax, 0", "jmp     short loc_6EB3"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 5, 1, 0.04285714285714286, ["mov     eax, 1"], ["mov~eax,0"]], [2, 0, 7, 0, 1, 11, 3, 2, 4, 2, 0.2666666666666667, ["mov     [rbp+some_errors], al", "and     [rbp+some_errors], 1", "movzx   edx, [rbp+process_local]; preserve", "movzx   ecx, [rbp+recurse]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; recurse", "mov     rdi, rax; path", "call    restorecon", "xor     eax, 1", "test    al, al", "jz      short loc_6EAE"], ["mov~[rbp+0],al", "and~[rbp+0],0", "movzx~edx,[rbp+0]", "movzx~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 1, 5, 0.08571428571428572, ["mov     eax, 1", "jmp     short loc_6DEF"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 6, 2, 0.07380952380952381, ["cmp     [rbp+some_errors], 0", "jz      short loc_6EA7"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 12, 0, 0, 1, 0, 0, 2, 5, 0.028571428571428574, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 8, 0, 0, 2, 0, 1, 4, 3, 0.01904761904761905, ["mov     eax, 1", "jmp     short loc_6E1C"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 10, 0, 0, 5, 2, 1, 3, 4, 0.02380952380952381, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+29h]", "xor     eax, 1", "test    al, al", "jz      short loc_6E17"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 11, 0, 0, 6, 3, 1, 2, 4, 0.20952380952380956, ["mov     [rbp+all_errors], al", "and     [rbp+all_errors], 1", "movzx   eax, [rbp+all_errors]", "xor     eax, 1", "test    al, al", "jz      short loc_6E17"], ["mov~[rbp+0],al", "and~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 8, 0, 0, 1, 0, 0, 3, 3, 0.20952380952380956, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [7, 13, 18, 0, 16, 23, 5, 84, 0.07411, 1, 2], "succs": [[9, 11], [0, 9], [6], [2, 10], [2, 6], [], [5], [5], [3, 7], [14], [4, 6], [14], [8], [12, 15], [13, 15], [8]], "fname": "set_file_security_ctx", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 5, 0, 1, 0, 0, 0.08333333333333333, ["mov     edx, [rbp+mode]", "mov     rax, [rbp+name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO"]], [2, 0, 3, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+desc], edi", "mov     [rbp+name], rsi", "mov     [rbp+mode], edx", "cmp     [rbp+desc], 0", "js      short loc_6EE5"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 1, 0, 1, 6, 0, 2, 1, 1, 0.08333333333333333, ["mov     edx, [rbp+mode]", "mov     eax, [rbp+desc]", "mov     esi, edx; mode", "mov     edi, eax; fd", "call    _fchmod", "jmp     short locret_6EF6"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [2, 0, 4, 0, 4, 4, 3, 21, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "fchmod_or_lchmod", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 10, 1, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+sb]", "mov     rdx, [rax+40h]", "mov     rax, [rbp+sb]", "mov     rax, [rax+30h]", "lea     rcx, [rax+1FFh]", "test    rax, rax", "cmovs   rax, rcx", "sar     rax, 9", "cmp     rdx, rax", "jge     short loc_6F41"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "test~rax,rax", "cmovs~rax,rcx", "sar~rax,0", "cmp~rdx,rax", "jge~FOO"]], [2, 0, 4, 0, 0, 8, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+sb], rdi", "mov     rax, [rbp+sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     short loc_6F41"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.041666666666666664, ["mov     eax, 1", "jmp     short loc_6F46"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.125, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [0, 3, 3, 0, 5, 6, 1, 24, 0.05, 0, 0], "succs": [[3, 4], [0, 4], [], [2], [2]], "fname": "is_probably_sparse", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 68, 0, 0, 3, 0, 0, 0, 0, 0.003146538807311957, ["mov     rax, [rbp+src_open_sb.st_size]", "cmp     [rbp+buf_size], rax", "jbe     short loc_7914"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [3, 1, 69, 2, 2, 34, 1, 3, 17, 13, 0.015482968734392168, ["mov     rax, 7FFFFFFFFFFFFFFFh", "sub     rax, [rbp+buf_alignment]", "mov     [rbp+blcm_max], rax", "push    [rbp+src_open_sb.__glibc_reserved+10h]", "push    [rbp+src_open_sb.__glibc_reserved+8]", "push    [rbp+src_open_sb.__glibc_reserved]", "push    [rbp+src_open_sb.st_ctim.tv_nsec]", "push    [rbp+src_open_sb.st_ctim.tv_sec]", "push    [rbp+src_open_sb.st_mtim.tv_nsec]", "push    [rbp+src_open_sb.st_mtim.tv_sec]", "push    [rbp+src_open_sb.st_atim.tv_nsec]", "push    [rbp+src_open_sb.st_atim.tv_sec]", "push    [rbp+src_open_sb.st_blocks]", "push    [rbp+src_open_sb.st_blksize]", "push    [rbp+src_open_sb.st_size]", "push    [rbp+src_open_sb.st_rdev]", "push    qword ptr [rbp+src_open_sb.st_gid]", "push    qword ptr [rbp+src_open_sb.st_mode]", "push    [rbp+src_open_sb.st_nlink]", "push    [rbp+src_open_sb.st_ino]", "push    [rbp+src_open_sb.st_dev]; sb", "call    io_blksize", "add     rsp, 90h", "mov     rcx, rax", "mov     rdx, [rbp+blcm_max]; lcm_max", "mov     rax, [rbp+buf_size]", "mov     rsi, rax; b", "mov     rdi, rcx; a", "call    buffer_lcm", "mov     [rbp+blcm], rax", "mov     eax, [rbp+src_open_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     short loc_7914"], ["mov~rax,0", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "call~FOO", "add~rsp,<STR>", "mov~rcx,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [4, 0, 4, 0, 4, 17, 0, 4, 6, 3, 0.0, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToCloseS; \"failed to close %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0"]], [0, 0, 5, 0, 1, 5, 1, 1, 5, 3, 0.033363300369593445, ["mov     eax, [rbp+source_desc]", "mov     edi, eax; fd", "call    _close", "test    eax, eax", "jns     short loc_800E"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jns~FOO"]], [2, 0, 125, 0, 1, 12, 2, 2, 11, 8, 0.0022974727799420637, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "movzx   esi, al; process_local", "mov     rdx, [rbp+x]", "mov     rax, [rbp+dst_name]", "mov     rcx, rdx; x", "mov     edx, 0; recurse", "mov     rdi, rax; dst_name", "call    set_file_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_7225"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~esi,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 126, 0, 0, 2, 0, 1, 10, 8, 0.01648186994306263, ["cmp     [rbp+dest_desc], 0", "js      short loc_7225"], ["cmp~[rbp+0],0", "js~FOO"]], [1, 0, 89, 0, 0, 2, 0, 1, 11, 10, 0.1758066127260014, ["cmp     [rbp+data_copy_required], 0", "jz      loc_76E6"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 91, 0, 1, 7, 1, 2, 10, 7, 0.18135051443412248, ["lea     rdx, [rbp+dangling_link_sb]", "mov     eax, [rbp+dest_desc]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "jz      short loc_7602"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 111, 0, 0, 4, 1, 1, 13, 6, 0.006542802916791529, ["mov     eax, [rbp+dangling_link_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_74A9"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 111, 0, 1, 7, 1, 2, 12, 7, 0.00814104485066427, ["lea     rdx, [rbp+dangling_link_sb]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jnz     loc_74A9"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 20, 7, 0.0, ["mov     [rbp+return_val], 0", "jmp     loc_7F4F"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 11, 0, 0, 4, 1, 1, 19, 7, 0.0051443412246528816, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      loc_7F4F"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 72, 0, 0, 2, 0, 1, 18, 12, 0.0029467585655778643, ["cmp     [rbp+sparse_src], 0", "jz      short loc_781B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 73, 0, 0, 4, 0, 1, 17, 12, 0.012885825591848966, ["mov     rax, [rbp+x]", "mov     eax, [rax+0Ch]", "cmp     eax, 2", "jnz     short loc_781B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 71, 0, 0, 1, 0, 0, 19, 12, 0.0, ["mov     [rbp+make_holes], 1"], ["mov~[rbp+0],0"]], [0, 0, 124, 0, 0, 4, 1, 1, 12, 7, 0.001997802417340925, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jz      short loc_7225"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 26, 0, 0, 4, 1, 1, 18, 8, 0.06557786434921586, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_7E11"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 27, 0, 1, 10, 1, 2, 17, 8, 0.09529517530716212, ["mov     rdx, [rbp+src_sb]; src_sb", "mov     ecx, [rbp+dest_desc]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; dest_desc", "mov     rdi, rax; dst_name", "call    set_author", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jnz     short loc_7DBF"], ["mov~rdx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 0, 139, 0, 1, 8, 0, 1, 2, 3, 0.020827090200779143, ["mov     rax, [rbp+src_name]", "mov     esi, edx; flags", "mov     rdi, rax; file", "mov     eax, 0", "call    open_safer", "mov     [rbp+source_desc], eax", "cmp     [rbp+source_desc], 0", "jns     short loc_706A"], ["mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 140, 0, 0, 2, 0, 1, 1, 4, 0.003496154230346619, ["mov     edx, 20000h", "jmp     short loc_6FF7"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 140, 0, 0, 1, 0, 0, 1, 4, 0.003496154230346619, ["mov     edx, 0"], ["mov~edx,0"]], [0, 0, 88, 0, 0, 4, 1, 1, 12, 9, 0.011687144141444412, ["mov     rax, [rbp+x]", "mov     eax, [rax+38h]", "test    eax, eax", "jz      loc_76E6"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "test~eax,eax", "jz~FOO"]], [0, 0, 111, 0, 0, 4, 1, 1, 14, 5, 0.004894615922485267, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+30h]", "test    al, al", "jz      short loc_7460"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 21, 0, 0, 4, 1, 1, 19, 7, 0.06135750674258316, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Bh]", "test    al, al", "jz      short loc_7E55"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 13, 6, 0.0016981320547397863, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 111, 0, 0, 2, 0, 0, 9, 6, 0.19733293377284986, ["cmp     [rbp+dest_desc], 0", "jns     loc_7597"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 44, 0, 0, 4, 1, 1, 15, 9, 0.146838477674558, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "test    al, al", "jz      loc_7CB1"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 48, 0, 0, 4, 1, 1, 14, 9, 0.15912496254120467, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Fh]", "test    al, al", "jz      loc_7C17"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 47, 0, 3, 18, 1, 4, 15, 8, 0.009989012086704625, ["mov     rax, [rbp+src_sb]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     [rbp+timespec.tv_sec], rax", "mov     [rbp+timespec.tv_nsec], rdx", "mov     rax, [rbp+src_sb]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbp+timespec.tv_sec+10h], rax", "mov     [rbp+timespec.tv_nsec+10h], rdx", "lea     rdx, [rbp+timespec]; timespec", "mov     rcx, [rbp+dst_name]", "mov     eax, [rbp+dest_desc]", "mov     rsi, rcx; file", "mov     edi, eax; fd", "call    fdutimens", "test    eax, eax", "jz      short loc_7C17"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 46, 0, 4, 20, 1, 5, 16, 7, 0.00639296773549096, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aPreservingTime; \"preserving times for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_7C17"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 70, 0, 0, 4, 2, 1, 16, 11, 0.08845270202776946, ["movzx   eax, [rbp+make_holes]", "xor     eax, 1", "test    al, al", "jz      loc_7975"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [6, 0, 76, 0, 2, 16, 1, 3, 15, 12, 0.08395764658875238, ["mov     [rbp+hole_size], rax", "mov     eax, [rbp+source_desc]", "mov     ecx, 2; advice", "mov     edx, 0; len", "mov     esi, 0; offset", "mov     edi, eax; fd", "call    fdadvise", "mov     [rbp+make_holes], 0", "lea     rax, [rbp+src_open_sb]", "mov     rdi, rax; sb", "call    is_probably_sparse", "mov     [rbp+sparse_src], al", "mov     eax, [rbp+dangling_link_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     short loc_781B"], ["mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~ecx,0", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al", "mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 1, 59, 1, 1, 16, 1, 2, 20, 8, 0.051693137548696436, ["mov     r9, [rbp+src_open_sb.st_size]; src_total_size", "mov     r10, [rbp+hole_size]", "mov     rcx, [rbp+buf_size]; buf_size", "mov     rdx, [rbp+buf]; buf", "mov     esi, [rbp+dest_desc]; dest_fd", "mov     edi, [rbp+source_desc]; src_fd", "lea     r8, [rbp+normal_copy_required]", "push    r8; require_normal_copy", "push    [rbp+dst_name]; dst_name", "push    [rbp+src_name]; src_name", "push    rax; sparse_mode", "mov     r8, r10; hole_size", "call    extent_copy", "add     rsp, 20h", "test    al, al", "jnz     preserve_metadata"], ["mov~r9,[rbp+0]", "mov~r10,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~edi,[rbp+0]", "lea~r8,[rbp+0]", "push~r8", "push~[rbp+0]", "push~[rbp+0]", "push~rax", "mov~r8,r10", "call~FOO", "add~rsp,<STR>", "test~al,al", "jnz~FOO"]], [0, 0, 60, 0, 0, 3, 0, 1, 19, 9, 0.024647887323943664, ["mov     rax, [rbp+x]", "mov     eax, [rax+0Ch]", "jmp     short loc_79DC"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "jmp~FOO"]], [1, 0, 60, 0, 0, 1, 0, 0, 19, 9, 0.024647887323943664, ["mov     eax, 1"], ["mov~eax,0"]], [1, 0, 122, 0, 0, 2, 0, 0, 11, 7, 0.050244730796124265, ["cmp     [rbp+dest_desc], 0", "jns     loc_7349"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 127, 0, 0, 4, 1, 1, 10, 8, 0.013784836679652383, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_7225"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 75, 0, 0, 4, 0, 1, 16, 13, 0.01118769353710918, ["mov     rax, [rbp+x]", "mov     eax, [rax+0Ch]", "cmp     eax, 3", "jnz     short loc_77FC"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 74, 0, 0, 1, 0, 0, 17, 13, 0.0, ["mov     [rbp+make_holes], 1"], ["mov~[rbp+0],0"]], [1, 0, 58, 0, 0, 4, 2, 1, 21, 7, 0.007042253521126761, ["movzx   eax, byte ptr [rbp+normal_copy_required]", "xor     eax, 1", "test    al, al", "jz      short loc_7A48"], ["movzx~eax,[yte ptr [rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 43, 0, 0, 5, 0, 1, 16, 8, 0.0259214863649985, ["mov     rax, [rbp+src_sb]", "mov     edx, [rax+1Ch]", "mov     eax, [rbp+dangling_link_sb.st_uid]", "cmp     edx, eax", "jnz     short loc_7C52"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jnz~FOO"]], [0, 0, 121, 0, 0, 4, 1, 1, 12, 6, 0.00814104485066427, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jz      loc_7349"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.013984616921386476, ["mov     rbx, [rbp+var_28]", "xor     rbx, fs:28h", "jz      short loc_8047"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 3, 2, 0.0005993407252022775, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotOpenSFor; \"cannot open %s for reading\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_8033"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 2, 7, 0, 2, 6, 2, 0.020077914294276297, ["mov     rax, [rbp+buf_alloc]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+name_alloc]", "mov     rdi, rax; ptr", "call    free", "movzx   eax, [rbp+return_val]"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 22, 6, 0.0022475277195085405, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 87, 0, 1, 10, 1, 2, 13, 8, 0.010088902207571672, ["mov     edx, [rbp+source_desc]", "mov     eax, [rbp+dest_desc]", "mov     esi, edx; src_fd", "mov     edi, eax; dest_fd", "call    clone_file", "test    eax, eax", "setz    al", "mov     [rbp+clone_ok], al", "cmp     [rbp+clone_ok], 0", "jnz     short loc_765D"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "test~eax,eax", "setz~al", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 42, 0, 0, 5, 0, 1, 17, 8, 0.0013984616921386475, ["mov     rax, [rbp+src_sb]", "mov     edx, [rax+20h]", "mov     eax, [rbp+dangling_link_sb.st_gid]", "cmp     edx, eax", "jz      short loc_7CB1"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jz~FOO"]], [0, 0, 0, 0, 0, 6, 0, 0, 5, 0, 0.0, ["lea     rsp, [rbp-18h]", "pop     rbx", "pop     r12", "pop     r13", "pop     rbp", "retn"], ["lea~rsp,[rbp-18h]+0]", "pop~rbx", "pop~r12", "pop~r13", "pop~rbp", "retn"]], [0, 0, 120, 0, 1, 5, 1, 2, 13, 5, 0.007891319548496653, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; name", "call    _unlink", "test    eax, eax", "jz      short loc_72A8"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 86, 0, 0, 4, 0, 1, 14, 8, 0.0036959344720807114, ["mov     rax, [rbp+x]", "mov     eax, [rax+38h]", "cmp     eax, 2", "jnz     loc_76E6"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 111, 0, 2, 15, 1, 3, 15, 8, 0.005094396164219359, ["mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+dst_mode]", "mov     edx, eax", "mov     ecx, [rbp+open_flags_0]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; flags", "mov     rdi, rax; file", "mov     eax, 0", "call    open_safer", "mov     [rbp+dest_desc], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+dest_errno], eax", "jmp     short loc_74A9"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~edx,eax", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 18, 0, 0, 4, 1, 1, 20, 8, 0.046299071021875936, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+20h]", "test    al, al", "jz      short loc_7EAB"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 56, 0, 0, 7, 0, 1, 18, 9, 0.03596044351213665, ["mov     rax, [rbp+x]", "mov     eax, [rax+0Ch]", "cmp     eax, 3", "setz    al", "movzx   r9d, al; punch_holes", "cmp     [rbp+make_holes], 0", "jz      short loc_7A6E"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "setz~al", "movzx~r9d,al", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 63, 1, 2, 14, 0, 3, 17, 10, 0.08915193287383878, ["mov     rdx, [rbp+buf_size]", "mov     rax, [rbp+buf_alignment]", "add     rax, rdx", "mov     rdi, rax; n", "call    xmalloc", "mov     [rbp+buf_alloc], rax", "mov     rdx, [rbp+buf_alignment]", "mov     rax, [rbp+buf_alloc]", "mov     rsi, rdx; alignment", "mov     rdi, rax; ptr", "call    ptr_align", "mov     [rbp+buf], rax", "cmp     [rbp+sparse_src], 0", "jz      loc_7A48"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 85, 0, 0, 4, 2, 1, 14, 7, 0.006592747977225053, ["movzx   eax, [rbp+clone_ok]", "xor     eax, 1", "test    al, al", "jz      short loc_76DF"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 54, 0, 0, 2, 0, 1, 19, 8, 0.015632803915692738, ["mov     rdi, [rbp+hole_size]", "jmp     short loc_7A73"], ["mov~rdi,[rbp+0]", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 17, 6, 0.0026970332634102486, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 54, 0, 0, 1, 0, 0, 19, 8, 0.015632803915692738, ["mov     edi, 0"], ["mov~edi,0"]], [1, 0, 111, 0, 0, 2, 0, 1, 10, 8, 0.011637199081010888, ["cmp     [rbp+dest_errno], 11h", "jnz     loc_74A9"], ["cmp~[rbp+0],0", "jnz~FOO"]], [3, 1, 111, 0, 2, 19, 2, 2, 9, 8, 0.04455099390670263, ["mov     [rbp+open_flags_0], 41h ; 'A'", "mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+dst_mode]", "mov     edx, eax", "mov     eax, [rbp+open_flags_0]", "or      al, 80h", "mov     ecx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; flags", "mov     rdi, rax; file", "mov     eax, 0", "call    open_safer", "mov     [rbp+dest_desc], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+dest_errno], eax", "cmp     [rbp+dest_desc], 0", "jns     loc_74A9"], ["mov~[rbp+0],0", "mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~edx,eax", "mov~eax,[rbp+0]", "or~al,<STR>", "mov~ecx,eax", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 17, 0, 0, 4, 1, 1, 21, 7, 0.010613325342123664, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_7EAB"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 29, 0, 0, 2, 0, 1, 19, 9, 0.013285386075317152, ["cmp     [rbp+access_changed], 0", "jz      short loc_7D83"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 32, 0, 1, 11, 2, 2, 18, 10, 0.02317450804115473, ["mov     rdi, [rbp+x]", "mov     ecx, [rbp+dest_desc]; dst_fd", "mov     rdx, [rbp+dst_name]; dst_path", "mov     esi, [rbp+source_desc]; src_fd", "mov     rax, [rbp+src_name]", "mov     r8, rdi; x", "mov     rdi, rax; src_path", "call    copy_attr", "xor     eax, 1", "test    al, al", "jz      short loc_7D53"], ["mov~rdi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 31, 0, 0, 4, 1, 1, 19, 10, 0.00479472580161822, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+28h]", "test    al, al", "jz      short loc_7D53"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 30, 0, 0, 1, 0, 0, 20, 10, 0.0, ["mov     [rbp+return_val], 0"], ["mov~[rbp+0],0"]], [0, 0, 137, 0, 1, 7, 1, 2, 3, 5, 0.026770552392368394, ["lea     rdx, [rbp+src_open_sb]", "mov     eax, [rbp+source_desc]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "jz      short loc_70D5"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 37, 0, 0, 2, 1, 0, 19, 10, 0.0016232144640895016, ["and     [rbp+src_mode], 0FFFFF1FFh", "nop"], ["and~[rbp+0],0", "nop"]], [0, 0, 39, 0, 0, 2, 1, 1, 18, 11, 0.010188792328438718, ["test    eax, eax", "jz      short loc_7CA6"], ["test~eax,eax", "jz~FOO"]], [1, 0, 41, 0, 1, 14, 0, 2, 17, 7, 0.018729397662571173, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "movzx   edi, al", "lea     r8, [rbp+dangling_link_sb]", "mov     rcx, [rbp+src_sb]; src_sb", "mov     edx, [rbp+dest_desc]; dest_desc", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+x]", "mov     r9, r8; dst_sb", "mov     r8d, edi; new_dst", "mov     rdi, rax; x", "call    set_owner", "cmp     eax, 0FFFFFFFFh", "jz      short loc_7C9A"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movzx~edi,al", "lea~r8,[rbp+0]", "mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8d,edi", "mov~rdi,rax", "call~FOO", "cmp~eax,0", "jz~FOO"]], [0, 0, 37, 0, 0, 1, 0, 1, 19, 10, 0.0016232144640895016, ["jmp     short loc_7CB1"], ["jmp~FOO"]], [1, 0, 10, 0, 2, 11, 2, 3, 22, 6, 0.0059184896613724905, ["call    cached_umask", "not     eax", "and     eax, 1B6h", "mov     edx, eax; mode", "mov     ecx, [rbp+dest_desc]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    set_acl", "test    eax, eax", "jz      close_src_and_dst_desc"], ["call~FOO", "not~eax", "and~eax,0", "mov~edx,eax", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 18, 6, 0.0017980221756068325, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [4, 0, 6, 0, 4, 18, 0, 5, 14, 4, 0.002796923384277295, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotRemoveS; \"cannot remove %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [5, 0, 6, 0, 3, 15, 0, 4, 15, 4, 0.0010488462691039856, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aNotWritingThro; \"not writing through dangling symlink %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 23, 6, 0.0, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 111, 0, 0, 2, 0, 0, 10, 7, 0.06512835880531416, ["cmp     [rbp+dest_desc], 0", "jns     short loc_7503"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 111, 0, 0, 5, 2, 1, 11, 8, 0.009839176905404055, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      loc_74A9"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 21, 7, 0.026445909499550495, ["cmp     [rbp+omitted_permissions], 0", "jz      loc_7F52"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 118, 0, 0, 4, 1, 1, 14, 7, 0.009189891119768255, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_72EA"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 111, 0, 0, 2, 0, 1, 11, 7, 0.005993407252022775, ["cmp     [rbp+dest_errno], 15h", "jnz     short loc_7503"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 36, 0, 0, 4, 1, 1, 16, 9, 0.12406353011687145, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+27h]", "test    al, al", "jz      loc_7D83"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [4, 0, 53, 2, 1, 19, 2, 2, 20, 7, 0.032813904704824697, ["mov     rcx, [rbp+buf_size]; buf_size", "mov     rdx, [rbp+buf]; buf", "mov     esi, [rbp+dest_desc]; dest_fd", "mov     eax, [rbp+source_desc]", "sub     rsp, 8", "lea     r8, [rbp+wrote_hole_at_eof]", "push    r8; last_write_made_hole", "lea     r8, [rbp+normal_copy_required]", "push    r8; total_n_read", "push    0FFFFFFFFFFFFFFFFh; max_n_read", "push    [rbp+dst_name]; dst_name", "push    [rbp+src_name]; src_name", "mov     r8, rdi; hole_size", "mov     edi, eax; src_fd", "call    sparse_copy", "add     rsp, 30h", "xor     eax, 1", "test    al, al", "jz      short loc_7AD2"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~eax,[rbp+0]", "sub~rsp,0", "lea~r8,[rbp+0]", "push~r8", "lea~r8,[rbp+0]", "push~r8", "push~0", "push~[rbp+0]", "push~[rbp+0]", "mov~r8,rdi", "mov~edi,eax", "call~FOO", "add~rsp,0", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 111, 0, 0, 4, 1, 1, 12, 7, 0.004045549895115373, ["mov     rax, [rbp+dst_name]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_7503"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 13, 0, 1, 5, 1, 2, 22, 7, 0.015882529217860354, ["call    cached_umask", "not     eax", "and     [rbp+omitted_permissions], eax", "cmp     [rbp+omitted_permissions], 0", "jz      loc_7F52"], ["call~FOO", "not~eax", "and~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 21, 6, 0.009889121965837579, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [4, 0, 6, 0, 4, 18, 0, 5, 4, 4, 0.0008990110878034162, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotFstatS; \"cannot fstat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [1, 1, 35, 0, 0, 5, 2, 1, 17, 11, 0.03216461891918889, ["mov     [rbp+access_changed], 0", "mov     eax, [rbp+dangling_link_sb.st_mode]", "and     eax, 80h", "test    eax, eax", "jnz     short loc_7D0A"], ["mov~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jnz~FOO"]], [7, 0, 9, 0, 5, 26, 0, 6, 15, 6, 0.0022475277195085405, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r13, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     r12, rax", "lea     rdi, aFailedToCloneS; \"failed to clone %s from %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r13,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 51, 0, 0, 3, 1, 1, 21, 8, 0.017780441514334232, ["movzx   eax, [rbp+wrote_hole_at_eof]", "test    al, al", "jz      short preserve_metadata"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [1, 0, 83, 0, 0, 1, 0, 0, 15, 12, 0.0036959344720807114, ["mov     [rbp+data_copy_required], 0"], ["mov~[rbp+0],0"]], [0, 0, 34, 0, 1, 3, 1, 2, 18, 11, 0.004644890620317651, ["call    _geteuid", "test    eax, eax", "jz      short loc_7D0A"], ["call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 117, 0, 3, 11, 0, 3, 15, 7, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aRemovedS; \"removed %s\\n\"", "call    _gettext", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 135, 0, 0, 5, 0, 1, 4, 5, 0.03221456397962241, ["mov     rax, [rbp+src_sb]", "mov     rdx, [rax+8]", "mov     rax, [rbp+src_open_sb.st_ino]", "cmp     rdx, rax", "jnz     short loc_7102"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 111, 1, 1, 9, 0, 2, 13, 7, 0.002047747477774448, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; s", "call    _strlen", "lea     rdx, [rax-1]", "mov     rax, [rbp+dst_name]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jnz     short loc_7503"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 82, 0, 0, 2, 0, 1, 12, 11, 0.18274897612626112, ["cmp     [rbp+data_copy_required], 0", "jz      loc_7B48"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 12, 0, 1, 8, 1, 2, 23, 7, 0.010688242932773949, ["mov     edx, [rbp+dst_mode]; mode", "mov     rcx, [rbp+dst_name]", "mov     eax, [rbp+dest_desc]", "mov     rsi, rcx; name", "mov     edi, eax; desc", "call    fchmod_or_lchmod", "test    eax, eax", "jz      short loc_7F52"], ["mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 50, 0, 1, 7, 1, 1, 22, 7, 0.004395165318150035, ["mov     rdx, [rbp+normal_copy_required]", "mov     eax, [rbp+dest_desc]", "mov     rsi, rdx; length", "mov     edi, eax; fd", "call    _ftruncate", "test    eax, eax", "jns     short preserve_metadata"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jns~FOO"]], [1, 0, 111, 0, 0, 2, 0, 1, 14, 7, 0.0, ["mov     [rbp+dest_errno], 14h", "jmp     short loc_7503"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 111, 0, 0, 1, 0, 0, 8, 7, 0.10967935271201679, ["mov     [rbp+omitted_permissions], 0"], ["mov~[rbp+0],0"]], [0, 0, 113, 0, 0, 4, 1, 1, 7, 8, 0.122015782639097, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      loc_74F9"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 128, 0, 2, 15, 1, 3, 9, 9, 0.02477274997502747, ["mov     [rbp+open_flags], eax", "mov     edx, [rbp+open_flags]", "mov     rax, [rbp+dst_name]", "mov     esi, edx; flags", "mov     rdi, rax; file", "mov     eax, 0", "call    open_safer", "mov     [rbp+dest_desc], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+dest_errno], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jnz     short loc_71CE"], ["mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 134, 0, 0, 5, 0, 1, 5, 5, 0.038058136050344624, ["mov     rax, [rbp+src_sb]", "mov     rdx, [rax]", "mov     rax, [rbp+src_open_sb.st_dev]", "cmp     rdx, rax", "jz      short loc_714B"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 116, 0, 0, 6, 1, 1, 15, 6, 0.018879232843871743, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 1", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jz      short loc_7349"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 1, 33, 0, 1, 9, 1, 1, 19, 11, 0.0, ["mov     rcx, [rbp+dst_name]", "mov     eax, [rbp+dest_desc]", "mov     edx, 180h; mode", "mov     rsi, rcx; name", "mov     edi, eax; desc", "call    fchmod_or_lchmod", "test    eax, eax", "setz    al", "mov     [rbp+access_changed], al"], ["mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,<STR>", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "setz~al", "mov~[rbp+0],al"]], [1, 0, 67, 1, 0, 3, 0, 0, 19, 13, 0.0, ["mov     rax, [rbp+src_open_sb.st_size]", "add     rax, 1", "mov     [rbp+buf_size], rax"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax"]], [1, 0, 111, 0, 0, 2, 0, 1, 10, 5, 0.017231045849565477, ["cmp     [rbp+dest_errno], 2", "jnz     short loc_754B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 111, 0, 0, 5, 2, 1, 11, 5, 0.013934671860952952, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "xor     eax, 1", "test    al, al", "jz      short loc_754B"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 111, 0, 0, 5, 2, 1, 12, 5, 0.016981320547397864, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      short loc_754B"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 115, 0, 1, 13, 2, 2, 16, 5, 0.001997802417340925, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "movzx   ecx, al; new_dst", "mov     rdi, [rbp+x]", "mov     edx, [rbp+dst_mode]; mode", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "mov     r8, rdi; x", "mov     rdi, rax; src_name", "call    set_process_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_7349"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movzx~ecx,al", "mov~rdi,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [4, 0, 9, 0, 4, 18, 0, 5, 23, 6, 0.0008990110878034162, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToExtend; \"failed to extend %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 17, 4, 0.001198681450404555, ["mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 111, 0, 0, 3, 0, 1, 13, 9, 0.020027969233842775, ["mov     rax, [rbp+new_dst]", "mov     byte ptr [rax], 1", "jmp     open_with_O_CREAT"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "jmp~FOO"]], [0, 0, 49, 0, 0, 1, 0, 0, 13, 10, 0.1027869343721906, ["nop"], ["nop"]], [1, 0, 9, 0, 0, 2, 0, 1, 25, 6, 0.00022475277195085406, ["mov     [rbp+return_val], 0", "jmp     short close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [3, 0, 11, 0, 4, 20, 1, 5, 24, 7, 0.005394066526820497, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aPreservingPerm; \"preserving permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_7F52"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 9, 0, 0, 2, 0, 1, 19, 6, 0.007416841474378184, ["nop", "jmp     short close_src_and_dst_desc"], ["nop", "jmp~FOO"]], [0, 0, 12, 0, 1, 10, 1, 2, 18, 7, 0.021351513335331137, ["mov     edi, [rbp+src_mode]", "mov     ecx, [rbp+dest_desc]; dest_desc", "mov     rdx, [rbp+dst_name]; dst_name", "mov     esi, [rbp+source_desc]; source_desc", "mov     rax, [rbp+src_name]", "mov     r8d, edi; mode", "mov     rdi, rax; src_name", "call    copy_acl", "test    eax, eax", "jz      loc_7F4F"], ["mov~edi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,edi", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 9, 0, 0, 1, 0, 0, 22, 6, 0.0017980221756068325, ["nop"], ["nop"]], [3, 0, 66, 4, 0, 12, 0, 1, 18, 12, 0.016082309459594445, ["mov     rdx, [rbp+blcm]", "mov     rax, [rbp+buf_size]", "add     rax, rdx", "sub     rax, 1", "mov     [rbp+buf_size], rax", "mov     rax, [rbp+buf_size]", "mov     edx, 0", "div     [rbp+blcm]", "mov     rax, rdx", "sub     [rbp+buf_size], rax", "cmp     [rbp+buf_size], 0", "jz      short loc_7967"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "sub~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "sub~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 132, 0, 0, 5, 2, 1, 6, 9, 0.044051543302367394, ["mov     rax, [rbp+new_dst]", "movzx   eax, byte ptr [rax]", "xor     eax, 1", "test    al, al", "jz      loc_7349"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 111, 0, 0, 1, 0, 0, 8, 9, 0.015582858855259216, ["nop"], ["nop"]], [0, 0, 8, 0, 1, 5, 1, 1, 12, 5, 0.03835780641294576, ["mov     eax, [rbp+dest_desc]", "mov     edi, eax; fd", "call    _close", "test    eax, eax", "jns     short loc_7FB1"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jns~FOO"]], [4, 0, 9, 0, 4, 18, 0, 5, 11, 6, 0.005693736889421637, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotFstatS; \"cannot fstat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 10, 0, 1, 9, 1, 2, 20, 6, 0.005818599540505444, ["mov     rax, [rbp+x]", "mov     edx, [rax+10h]; mode", "mov     ecx, [rbp+dest_desc]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    set_acl", "test    eax, eax", "jz      close_src_and_dst_desc"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 21, 6, 0.0, ["mov     [rbp+return_val], 0", "jmp     close_src_and_dst_desc"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 65, 0, 0, 3, 0, 0, 19, 11, 0.00639296773549096, ["mov     rax, [rbp+blcm_max]", "cmp     rax, [rbp+buf_size]", "jnb     short loc_7975"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 1, 80, 1, 2, 27, 1, 3, 13, 14, 0.07896314054540006, ["call    _getpagesize", "cdqe", "mov     [rbp+buf_alignment], rax", "push    [rbp+dangling_link_sb.__glibc_reserved+10h]", "push    [rbp+dangling_link_sb.__glibc_reserved+8]", "push    [rbp+dangling_link_sb.__glibc_reserved]", "push    [rbp+dangling_link_sb.st_ctim.tv_nsec]", "push    [rbp+dangling_link_sb.st_ctim.tv_sec]", "push    [rbp+dangling_link_sb.st_mtim.tv_nsec]", "push    [rbp+dangling_link_sb.st_mtim.tv_sec]", "push    [rbp+dangling_link_sb.st_atim.tv_nsec]", "push    [rbp+dangling_link_sb.st_atim.tv_sec]", "push    [rbp+dangling_link_sb.st_blocks]", "push    [rbp+dangling_link_sb.st_blksize]", "push    [rbp+dangling_link_sb.st_size]", "push    [rbp+dangling_link_sb.st_rdev]", "push    qword ptr [rbp+dangling_link_sb.st_gid]", "push    qword ptr [rbp+dangling_link_sb.st_mode]", "push    [rbp+dangling_link_sb.st_nlink]", "push    [rbp+dangling_link_sb.st_ino]", "push    [rbp+dangling_link_sb.st_dev]; sb", "call    io_blksize", "add     rsp, 90h", "mov     [rbp+buf_size], rax", "mov     rax, [rbp+dangling_link_sb.st_blksize]", "test    rax, rax", "jle     short loc_7790"], ["call~FOO", "cdqe~", "mov~[rbp+0],rax", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[word ptr [rbp+0]", "push~[word ptr [rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "call~FOO", "add~rsp,<STR>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "test~rax,rax", "jle~FOO"]], [0, 0, 131, 0, 0, 4, 1, 1, 7, 11, 0.006792528218959145, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+23h]", "test    al, al", "jz      short loc_7176"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 64, 0, 0, 2, 0, 0, 19, 11, 0.00639296773549096, ["mov     rax, [rbp+blcm]", "mov     [rbp+buf_size], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 129, 0, 0, 2, 0, 1, 8, 10, 0.006218160023973629, ["mov     eax, 201h", "jmp     short loc_717B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 129, 0, 0, 1, 0, 0, 8, 10, 0.006218160023973629, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 28, 0, 1, 9, 1, 1, 20, 9, 0.0, ["mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+dst_mode]", "mov     edx, eax; mode", "mov     rcx, [rbp+dst_name]", "mov     eax, [rbp+dest_desc]", "mov     rsi, rcx; name", "mov     edi, eax; desc", "call    fchmod_or_lchmod"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~edx,eax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO"]], [1, 0, 79, 0, 0, 5, 0, 1, 14, 14, 0.0025971431425432026, ["mov     rax, [rbp+dangling_link_sb.st_blksize]", "mov     rdx, rax", "mov     rax, 2000000000000000h", "cmp     rdx, rax", "ja      short loc_7790"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,0", "cmp~rdx,rax", "ja~FOO"]], [0, 0, 77, 0, 0, 2, 0, 1, 15, 13, 0.0019228848266906403, ["mov     rax, [rbp+dangling_link_sb.st_blksize]", "jmp     short loc_7795"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 1, 77, 0, 0, 1, 0, 0, 14, 13, 0.07709020077914294, ["mov     eax, 200h"], ["mov~eax,<STR>"]], [4, 0, 6, 0, 3, 16, 0, 4, 11, 4, 0.005244231345519928, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aCannotCreateRe; \"cannot create regular file %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+dest_errno]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [5, 0, 6, 0, 3, 15, 0, 4, 5, 4, 0.0005993407252022775, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aSkippingFileSA; \"skipping file %s, as it was replaced wh\"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [4, 0, 6, 0, 4, 18, 0, 5, 13, 4, 0.012985715712716013, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aFailedToCloseS; \"failed to close %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     [rbp+return_val], 0", "jmp     short close_src_desc"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 6, 0, 0, 1, 0, 0, 13, 4, 0.012985715712716013, ["nop"], ["nop"]], [1, 0, 62, 0, 0, 2, 0, 1, 18, 10, 0.05319148936170213, ["cmp     [rbp+make_holes], 0", "jz      short loc_79D7"], ["cmp~[rbp+0],0", "jz~FOO"]], [5, 0, 142, 1, 0, 30, 1, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r13", "push    r12", "push    rbx", "sub     rsp, 1F8h", "mov     [rbp+src_name], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+x], rdx", "mov     [rbp+dst_mode], ecx", "mov     [rbp+omitted_permissions], r8d", "mov     [rbp+new_dst], r9", "mov     rax, [rbp+arg_0]", "mov     [rbp+src_sb], rax", "mov     rax, fs:28h", "mov     [rbp+var_28], rax", "xor     eax, eax", "mov     [rbp+buf_alloc], 0", "mov     [rbp+name_alloc], 0", "mov     rax, [rbp+src_sb]", "mov     eax, [rax+18h]", "mov     [rbp+src_mode], eax", "mov     [rbp+return_val], 1", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+23h]", "mov     [rbp+data_copy_required], al", "mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jnz     short loc_6FF2"], ["push~rbp", "mov~rbp,rsp", "push~r13", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8d", "mov~[rbp+0],r9", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]]], "func_feature": [99, 78, 208, 1, 143, 230, 1, 954, 0.02534, 13, 14], "succs": [[120, 106], [0, 120], [44], [2, 44], [35, 15], [35, 4], [96, 21], [124, 6], [77, 22], [8, 77], [117], [10, 117], [30, 14], [12, 30], [30], [24, 35], [118, 23], [16, 118], [67, 43], [18], [18], [96, 47], [75, 52], [53, 125], [123], [107, 7], [40, 82], [26, 28], [26, 29], [26, 58], [1, 55], [37, 30], [27, 39], [32], [32], [41, 101], [35, 5], [13, 38], [13], [54, 46], [48, 70], [50, 101], [49, 45], [42], [42], [], [123], [56, 51], [82, 70], [], [80, 74], [56, 96], [77], [62, 79], [57, 59], [141, 54], [89, 91], [83], [123], [83], [77, 78], [60, 77], [72, 79], [17, 133], [65, 63], [66, 63], [63], [94, 87], [82], [68, 71], [73, 69], [82], [123, 76], [123], [3], [3], [123], [81, 25], [9, 77], [85, 119], [104, 93], [25, 84], [88, 17], [90, 86], [25, 95], [97, 119], [123], [3], [64, 92], [123], [98, 27], [96], [64, 105], [104], [138, 103], [25, 99], [128, 114], [116, 119], [27, 111], [25], [25], [122, 100], [36, 5], [121, 138], [101, 110], [64], [120], [137, 108], [137, 109], [113, 137], [112, 101], [123], [3], [61], [27], [123], [115, 119], [123], [11, 117], [123], [130, 127], [129, 101], [61], [139, 140], [123], [123, 126], [123], [130, 55], [136, 134], [131, 132], [55], [102], [102], [17], [136, 135], [31], [31], [3], [3], [3], [3], [33, 34], [19, 20]], "fname": "copy_reg", "n_num": 143}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 0, 0.024991885751379422, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_8867"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [2, 0, 16, 0, 0, 5, 1, 1, 13, 0, 0.0759493670886076, ["mov     rax, [rbp+src_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      loc_86B2"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 17, 0, 0, 4, 0, 1, 12, 0, 0.0869847452125933, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jnz     loc_884E"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [0, 0, 74, 0, 0, 4, 1, 1, 3, 0, 0.0032456994482310936, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jz      short loc_8119"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [3, 0, 75, 0, 0, 6, 1, 1, 2, 0, 0.04868549172346641, ["mov     [rbp+same], al", "and     [rbp+same], 1", "mov     rax, [rbp+return_now]", "mov     byte ptr [rax], 0", "cmp     [rbp+same], 0", "jz      short loc_8119"], ["mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 32, 0, 0, 5, 1, 1, 9, 0, 0.12706913339824732, ["mov     rax, [rbp+src_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_84FF"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 39, 0, 0, 4, 1, 1, 8, 0, 0.10710808179162609, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jz      short loc_8472"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 36, 0, 0, 2, 0, 1, 9, 0, 0.016553067185978577, ["cmp     [rbp+same_link], 0", "jz      short loc_8472"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 35, 0, 0, 4, 0, 0, 10, 0, 0.008601103537812398, ["mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax+10h]", "cmp     rax, 1", "jbe     short loc_8472"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jbe~FOO"]], [1, 0, 34, 0, 1, 8, 2, 2, 11, 0, 0.00519311911716975, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "xor     eax, 1", "test    al, al", "jz      short loc_8472"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 7, 0, 0, 4, 0, 1, 18, 0, 0.016066212268743912, ["mov     rdx, [rbp+tmp_src_sb.st_dev]", "mov     rax, [rbp+tmp_dst_sb.st_dev]", "cmp     rdx, rax", "jz      short loc_8818"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jz~FOO"]], [0, 0, 8, 0, 0, 4, 0, 1, 17, 0, 0.030671859785783837, ["mov     rdx, [rbp+tmp_src_sb.st_ino]", "mov     rax, [rbp+tmp_dst_sb.st_ino]", "cmp     rdx, rax", "jnz     short loc_8811"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 8, 0, 0.0004868549172346641, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 7, 0, 0, 4, 1, 1, 7, 0, 0.00486854917234664, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jz      short loc_81B1"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jz~FOO"]], [2, 0, 38, 0, 0, 5, 1, 1, 8, 0, 0.019636481661798117, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_8417"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 40, 0, 0, 4, 1, 1, 7, 0, 0.12609542356377798, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_83F7"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 25, 0, 0, 4, 1, 1, 10, 0, 0.1142486205777345, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      loc_85AC"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 31, 0, 0, 5, 1, 1, 10, 0, 0.023206751054852322, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_84FF"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 27, 0, 0, 4, 1, 1, 13, 0, 0.012495942875689711, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jz      short loc_84FF"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 52, 0, 0, 5, 1, 1, 10, 0, 0.006085686465433301, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_832A"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [3, 0, 53, 0, 0, 7, 2, 1, 9, 0, 0.062155144433625444, ["mov     [rbp+same_link], al", "and     [rbp+same_link], 1", "mov     rax, [rbp+src_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_832A"], ["mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [2, 0, 5, 0, 0, 5, 1, 1, 11, 0, 0.004057124310288867, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_83A0"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 6, 0, 0, 5, 1, 1, 10, 0, 0.007789678675754625, ["mov     rax, [rbp+src_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_83A0"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 0, 0.0014605647517039922, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 17, 0, 0.0014605647517039922, ["mov     eax, 1", "jmp     short loc_8853"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 10, 0, 1, 7, 1, 2, 16, 0, 0.025722168127231416, ["lea     rdx, [rbp+tmp_dst_sb]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      short loc_87EB"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 4, 0, 0.0029211295034079843, ["mov     rax, [rbp+return_now]", "mov     byte ptr [rax], 1", "mov     eax, 1", "jmp     loc_8853"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 18, 0, 0.0014605647517039922, ["mov     eax, 1", "jmp     short loc_8853"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 8, 0, 1, 10, 2, 2, 6, 0, 0.008276533592989289, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "mov     [rbp+sn], al", "movzx   eax, [rbp+sn]", "xor     eax, 1", "test    al, al", "jz      short loc_81E5"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 57, 0, 0, 5, 1, 1, 5, 0, 0.008276533592989289, ["mov     rax, [rbp+dst_sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_81FF"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 54, 0, 0, 2, 0, 1, 9, 0, 0.004381694255111977, ["mov     eax, 1", "jmp     short loc_82D8"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 56, 0, 0, 6, 0, 1, 8, 0, 0.0017851346965271015, ["mov     rax, [rbp+src_sb_link]", "mov     rdx, [rax]", "mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax]", "cmp     rdx, rax", "jnz     short loc_82D3"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 50, 0, 0, 5, 0, 1, 5, 0, 0.06864654333008763, ["mov     rax, [rbp+src_sb]", "mov     [rbp+src_sb_link], rax", "mov     rax, [rbp+dst_sb]", "mov     [rbp+dst_sb_link], rax", "jmp     loc_832A"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 58, 0, 0, 7, 1, 1, 4, 0, 0.062479714378448556, ["movzx   eax, [rbp+same]", "mov     [rbp+same_link], al", "mov     rax, [rbp+src_sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_81FF"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 19, 0, 0.008925673482635508, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jz      short loc_884E"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 51, 0, 0, 4, 1, 1, 11, 0, 0.004300551768906199, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jz      short loc_832A"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 15, 0, 0.0009737098344693282, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 14, 0, 1, 7, 1, 2, 14, 0, 0.036270691333982474, ["lea     rdx, [rbp+tmp_src_sb]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jz      short loc_86D9"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 0, 0.00024342745861733204, ["mov     eax, 0", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 72, 0, 0, 4, 0, 1, 3, 0, 0.06718597857838364, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jnz     loc_8220"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [2, 0, 3, 0, 2, 17, 3, 3, 14, 0, 0.0011359948068808828, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+abs_src]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "movzx   eax, al", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "mov     [rbp+result], al", "and     [rbp+result], 1", "mov     rax, [rbp+abs_src]", "mov     rdi, rax; ptr", "call    free", "movzx   eax, [rbp+result]", "jmp     loc_8853"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "movzx~eax,al", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 22, 0, 1, 6, 0, 2, 13, 0, 0.006329113924050633, ["mov     rax, [rbp+src_name]", "mov     rdi, rax; name", "call    _canonicalize_file_name", "mov     [rbp+abs_src], rax", "cmp     [rbp+abs_src], 0", "jz      short loc_85AC"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 62, 0, 0, 4, 2, 1, 4, 0, 0.014118792599805257, ["movzx   eax, [rbp+same]", "xor     eax, 1", "test    al, al", "jz      short loc_8238"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 1, 79, 1, 0, 18, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 180h", "mov     [rbp+src_name], rdi", "mov     [rbp+src_sb], rsi", "mov     [rbp+dst_name], rdx", "mov     [rbp+dst_sb], rcx", "mov     [rbp+x], r8", "mov     [rbp+return_now], r9", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+src_sb]", "mov     rdx, [rax+8]", "mov     rax, [rbp+dst_sb]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_80D1"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 13, 0, 0, 38, 0, 1, 14, 0, 0.02929243752028562, ["mov     rax, [rbp+src_sb_link]", "mov     rdx, [rax]", "mov     rcx, [rax+8]", "mov     [rbp+tmp_src_sb.st_dev], rdx", "mov     [rbp+tmp_src_sb.st_ino], rcx", "mov     rdx, [rax+10h]", "mov     rcx, [rax+18h]", "mov     [rbp+tmp_src_sb.st_nlink], rdx", "mov     qword ptr [rbp+tmp_src_sb.st_mode], rcx", "mov     rdx, [rax+20h]", "mov     rcx, [rax+28h]", "mov     qword ptr [rbp+tmp_src_sb.st_gid], rdx", "mov     [rbp+tmp_src_sb.st_rdev], rcx", "mov     rdx, [rax+30h]", "mov     rcx, [rax+38h]", "mov     [rbp+tmp_src_sb.st_size], rdx", "mov     [rbp+tmp_src_sb.st_blksize], rcx", "mov     rdx, [rax+40h]", "mov     rcx, [rax+48h]", "mov     [rbp+tmp_src_sb.st_blocks], rdx", "mov     [rbp+tmp_src_sb.st_atim.tv_sec], rcx", "mov     rdx, [rax+50h]", "mov     rcx, [rax+58h]", "mov     [rbp+tmp_src_sb.st_atim.tv_nsec], rdx", "mov     [rbp+tmp_src_sb.st_mtim.tv_sec], rcx", "mov     rdx, [rax+60h]", "mov     rcx, [rax+68h]", "mov     [rbp+tmp_src_sb.st_mtim.tv_nsec], rdx", "mov     [rbp+tmp_src_sb.st_ctim.tv_sec], rcx", "mov     rdx, [rax+70h]", "mov     rcx, [rax+78h]", "mov     [rbp+tmp_src_sb.st_ctim.tv_nsec], rdx", "mov     [rbp+tmp_src_sb.__glibc_reserved], rcx", "mov     rdx, [rax+88h]", "mov     rax, [rax+80h]", "mov     [rbp+tmp_src_sb.__glibc_reserved+8], rax", "mov     [rbp+tmp_src_sb.__glibc_reserved+10h], rdx", "jmp     short loc_86D9"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "jmp~FOO"]], [0, 0, 57, 0, 0, 10, 0, 1, 7, 0, 0.03424212917883804, ["lea     rax, [rbp+tmp_src_sb]", "mov     [rbp+src_sb_link], rax", "lea     rax, [rbp+tmp_dst_sb]", "mov     [rbp+dst_sb_link], rax", "mov     rax, [rbp+src_sb_link]", "mov     rdx, [rax+8]", "mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_82D3"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 59, 0, 1, 7, 1, 2, 6, 0, 0.02693930542031808, ["lea     rdx, [rbp+tmp_src_sb]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_827C"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 5, 0, 0.0009737098344693282, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 49, 0, 0, 4, 1, 1, 6, 0, 0.15100616682895163, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jz      loc_83D9"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jz~FOO"]], [0, 0, 30, 0, 0, 6, 0, 1, 11, 0, 0.019798766634209673, ["mov     rax, [rbp+src_sb_link]", "mov     rdx, [rax+8]", "mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_84D2"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 8, 0, 0.0019474196689386564, ["cmp     [rbp+same_link], 0", "jz      short loc_81E5"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 20, 0, 0, 4, 1, 1, 11, 0, 0.10012982797792924, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Ch]", "test    al, al", "jz      short loc_85DB"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 24, 0, 0, 5, 1, 1, 11, 0, 0.016066212268743912, ["mov     rax, [rbp+src_sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_85AC"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 23, 0, 0, 4, 0, 0, 12, 0, 0.011197663096397274, ["mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax+10h]", "cmp     rax, 1", "jbe     short loc_85AC"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jbe~FOO"]], [2, 0, 12, 0, 0, 5, 1, 1, 15, 0, 0.055501460564751706, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      loc_87C7"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [3, 0, 3, 0, 0, 11, 3, 1, 9, 0, 0.00024342745861733204, ["mov     rax, [rbp+return_now]", "mov     byte ptr [rax], 1", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "movzx   eax, al", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "jmp     loc_8853"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~eax,al", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 0, 7, 3, 1, 7, 0, 0.0017039922103213243, ["movzx   eax, [rbp+sn]", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "jmp     loc_8853"], ["movzx~eax,[rbp+0]", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 6, 0, 0.0009737098344693282, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 0, 0.0021908471275559884, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 0, 0.0017039922103213243, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 1, 12, 3, 2, 8, 0, 0.002677702044790652, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "movzx   eax, al", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "jmp     loc_8853"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "movzx~eax,al", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 0, 9, 3, 1, 12, 0, 0.0014605647517039922, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "movzx   eax, al", "test    eax, eax", "setnz   al", "xor     eax, 1", "movzx   eax, al", "and     eax, 1", "jmp     loc_8853"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~eax,al", "test~eax,eax", "setnz~al", "xor~eax,0", "movzx~eax,al", "and~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 0, 0.0019474196689386564, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 14, 0, 0.0004868549172346641, ["mov     rax, [rbp+return_now]", "mov     byte ptr [rax], 1", "mov     eax, 1", "jmp     loc_8853"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 13, 0, 0.0011359948068808828, ["mov     eax, 1", "jmp     loc_8853"], ["mov~eax,0", "jmp~FOO"]], [3, 0, 3, 0, 0, 9, 1, 1, 20, 0, 0.00024342745861733204, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "setnz   dl", "mov     rax, [rbp+return_now]", "mov     [rax], dl", "mov     eax, 1", "jmp     short loc_8853"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "setnz~dl", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 13, 0, 0.001379422265498215, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 9, 0, 0, 38, 0, 1, 16, 0, 0.017770204479065237, ["mov     rax, [rbp+dst_sb_link]", "mov     rdx, [rax]", "mov     rcx, [rax+8]", "mov     [rbp+tmp_dst_sb.st_dev], rdx", "mov     [rbp+tmp_dst_sb.st_ino], rcx", "mov     rdx, [rax+10h]", "mov     rcx, [rax+18h]", "mov     [rbp+tmp_dst_sb.st_nlink], rdx", "mov     qword ptr [rbp+tmp_dst_sb.st_mode], rcx", "mov     rdx, [rax+20h]", "mov     rcx, [rax+28h]", "mov     qword ptr [rbp+tmp_dst_sb.st_gid], rdx", "mov     [rbp+tmp_dst_sb.st_rdev], rcx", "mov     rdx, [rax+30h]", "mov     rcx, [rax+38h]", "mov     [rbp+tmp_dst_sb.st_size], rdx", "mov     [rbp+tmp_dst_sb.st_blksize], rcx", "mov     rdx, [rax+40h]", "mov     rcx, [rax+48h]", "mov     [rbp+tmp_dst_sb.st_blocks], rdx", "mov     [rbp+tmp_dst_sb.st_atim.tv_sec], rcx", "mov     rdx, [rax+50h]", "mov     rcx, [rax+58h]", "mov     [rbp+tmp_dst_sb.st_atim.tv_nsec], rdx", "mov     [rbp+tmp_dst_sb.st_mtim.tv_sec], rcx", "mov     rdx, [rax+60h]", "mov     rcx, [rax+68h]", "mov     [rbp+tmp_dst_sb.st_mtim.tv_nsec], rdx", "mov     [rbp+tmp_dst_sb.st_ctim.tv_sec], rcx", "mov     rdx, [rax+70h]", "mov     rcx, [rax+78h]", "mov     [rbp+tmp_dst_sb.st_ctim.tv_nsec], rdx", "mov     [rbp+tmp_dst_sb.__glibc_reserved], rcx", "mov     rdx, [rax+88h]", "mov     rax, [rax+80h]", "mov     [rbp+tmp_dst_sb.__glibc_reserved+8], rax", "mov     [rbp+tmp_dst_sb.__glibc_reserved+10h], rdx", "jmp     short loc_87EB"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[word ptr [rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[word ptr [rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rcx,[rax+0]", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "jmp~FOO"]], [1, 0, 10, 0, 0, 4, 2, 1, 7, 0, 0.02604673807205453, ["movzx   eax, [rbp+same_link]", "xor     eax, 1", "test    al, al", "jz      short loc_83AA"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 78, 0, 0, 6, 0, 1, 1, 0, 0.0001622849724115547, ["mov     rax, [rbp+src_sb]", "mov     rdx, [rax]", "mov     rax, [rbp+dst_sb]", "mov     rax, [rax]", "cmp     rdx, rax", "jnz     short loc_80D1"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 76, 0, 0, 2, 0, 1, 2, 0, 0.006166828951639078, ["mov     eax, 1", "jmp     short loc_80D6"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 29, 0, 0, 6, 0, 1, 12, 0, 0.01346965271015904, ["mov     rax, [rbp+src_sb_link]", "mov     rdx, [rax]", "mov     rax, [rbp+dst_sb_link]", "mov     rax, [rax]", "cmp     rdx, rax", "jz      short loc_84DC"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 76, 0, 0, 1, 0, 0, 1, 0, 0.018500486854917234, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 60, 0, 1, 7, 1, 2, 5, 0, 0.020610191496267444, ["lea     rdx, [rbp+tmp_dst_sb]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jnz     short loc_8272"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [2, 0, 19, 0, 0, 5, 1, 1, 12, 0, 0.0066536838688737426, ["mov     rax, [rbp+dst_sb_link]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_85DB"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 8, 0, 0, 5, 2, 1, 8, 0, 0.017851346965271016, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      short loc_83A0"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 9, 0, 0.011197663096397274, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jz      short loc_83A0"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 54, 0, 0, 1, 0, 0, 8, 0, 0.04251866277182733, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [11, 57, 84, 1, 80, 128, 1, 455, 0.02378, 1, 1], "succs": [[], [0, 78], [45, 38], [2, 67], [40, 27], [40, 4], [17, 18], [6, 15], [9, 6], [10, 6], [62, 6], [35, 28], [11, 28], [1], [51, 13], [24, 8], [7, 15], [52, 53], [17, 50], [64, 17], [49, 36], [49, 20], [60, 39], [60, 22], [1], [1], [25, 12], [1], [1], [57, 14], [33, 29], [21], [79, 31], [49], [33, 30], [66, 67], [49, 59], [1], [37, 55], [1], [34, 43], [1], [41, 52], [48, 74], [73, 70], [55], [32, 79], [58, 46], [1], [16, 69], [72, 63], [56, 57], [75, 3], [52, 54], [42, 52], [26, 68], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [12], [76, 61], [73, 71], [5], [19, 63], [5], [58, 47], [65, 3], [60, 77], [60, 23], [], [21]], "fname": "same_file_ok", "n_num": 80}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 1, 6, 1, 2, 0, 0, 0.1, ["mov     rax, [rbp+file]", "mov     esi, 2; type", "mov     rdi, rax; name", "call    _euidaccess", "test    eax, eax", "jnz     short loc_88AC"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 4, 0, 1, 3, 1, 2, 1, 2, 0.1, ["call    can_write_any_file", "test    al, al", "jnz     short loc_88A5"], ["call~FOO", "test~al,al", "jnz~FOO"]], [3, 0, 5, 1, 0, 9, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+mode], esi", "mov     eax, [rbp+mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_88A5"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.125, ["mov     eax, 1", "jmp     short loc_88B1"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 3, 1, 0.025, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]]], "func_feature": [2, 4, 6, 0, 6, 8, 2, 24, 0.05833, 0, 1], "succs": [[3, 4], [0, 3], [1, 3], [5], [5], []], "fname": "writable_destination", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 4, 0, 1, 3, 0, 1, 0, 0, 0.022222222222222223, ["lea     rdi, aSUnwritableSMo; \"%s: unwritable %s (mode %04lo, %s); try\"...", "call    _gettext", "mov     rsi, rax; format"], ["lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax"]], [0, 0, 6, 0, 0, 4, 1, 1, 3, 4, 0.03333333333333333, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jz      short loc_8978"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 7, 0, 0, 4, 1, 1, 2, 4, 0.044444444444444446, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jnz     short loc_8967"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 2, 0, 1, 4, 1, 2, 2, 1, 0.17777777777777778, ["call    yesno", "mov     rcx, [rbp+var_28]", "xor     rcx, fs:28h", "jz      short loc_8A0E"], ["call~FOO", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [2, 0, 3, 1, 1, 11, 0, 2, 3, 2, 0.16666666666666669, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rdx, [rbp+perms]", "add     rdx, 1", "mov     r9, rdx", "mov     r8, r12", "mov     rcx, r13", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     short loc_89F5"], ["mov~rax,<TAG>", "lea~rdx,[rbp+0]", "add~rdx,0", "mov~r9,rdx", "mov~r8,r12", "mov~rcx,r13", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 3, 0, 3, 15, 0, 3, 1, 2, 0.03333333333333333, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "mov     rbx, cs:program_name", "lea     rdi, aSOverwriteS; \"%s: overwrite %s? \"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [2, 1, 8, 0, 2, 22, 2, 3, 1, 4, 0.05555555555555556, ["mov     rax, [rbp+dst_sb]", "mov     eax, [rax+18h]", "lea     rdx, [rbp+perms]", "mov     rsi, rdx; str", "mov     edi, eax; mode", "call    strmode", "mov     [rbp+perms+0Ah], 0", "mov     rax, [rbp+dst_sb]", "mov     eax, [rax+18h]", "mov     eax, eax", "and     eax, 0FFFh", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r13, rax", "mov     rbx, cs:program_name", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_8967"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~eax,eax", "and~eax,<STR>", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r13,rax", "mov~rbx,<TAG>", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 1, 10, 1, 1, 21, 3, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r13", "push    r12", "push    rbx", "sub     rsp, 48h", "mov     [rbp+x], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+dst_sb], rdx", "mov     rax, fs:28h", "mov     [rbp+var_28], rax", "xor     eax, eax", "mov     rax, [rbp+dst_sb]", "mov     edx, [rax+18h]", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    writable_destination", "xor     eax, 1", "test    al, al", "jz      loc_89B1"], ["push~rbp", "mov~rbp,rsp", "push~r13", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 1, 4, 0, 2, 2, 3, 0.12222222222222223, ["lea     rdi, aSReplaceSOverr; \"%s: replace %s, overriding mode %04lo (\"...", "call    _gettext", "mov     rsi, rax", "jmp     short loc_8987"], ["lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "jmp~FOO"]], [0, 1, 0, 1, 0, 6, 0, 0, 3, 0, 0.0, ["add     rsp, 48h", "pop     rbx", "pop     r12", "pop     r13", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~r12", "pop~r13", "pop~rbp", "retn"]]], "func_feature": [11, 8, 18, 1, 11, 14, 2, 95, 0.0596, 6, 3], "succs": [[4], [0, 9], [1, 9], [10, 6], [3], [3], [], [9, 2], [5, 7], [4], []], "fname": "overwrite_ok", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 19, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "lea     rax, triple_free", "mov     r8, rax; data_freer", "lea     rax, triple_compare", "mov     rcx, rax; comparator", "lea     rax, triple_hash", "mov     rdx, rax; hasher", "mov     esi, 0; tuning", "mov     edi, 3Dh ; '='; candidate", "call    hash_initialize", "mov     rdx, rax", "mov     rax, [rbp+x]", "mov     [rax+40h], rdx", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "lea~rax,<TAG>", "mov~r8,rax", "lea~rax,<TAG>", "mov~rcx,rax", "lea~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 19, 0.0, 3, 1], "succs": [[]], "fname": "dest_info_init", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 19, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "lea     rax, triple_free", "mov     r8, rax; data_freer", "lea     rax, triple_compare", "mov     rcx, rax; comparator", "lea     rax, triple_hash_no_name", "mov     rdx, rax; hasher", "mov     esi, 0; tuning", "mov     edi, 3Dh ; '='; candidate", "call    hash_initialize", "mov     rdx, rax", "mov     rax, [rbp+x]", "mov     [rax+48h], rdx", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "lea~rax,<TAG>", "mov~r8,rax", "lea~rax,<TAG>", "mov~rcx,rax", "lea~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 19, 0.0, 3, 1], "succs": [[]], "fname": "src_info_init", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0.03148148148148148, ["mov     eax, 1", "jmp     short loc_8B5C"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0.046296296296296294, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 1, 5, 0, 1, 1, 0, 0.0, ["lea     rcx, __PRETTY_FUNCTION___6933; \"abandon_move\"", "mov     edx, 6D2h; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, assertion; \"x->move_mode\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [0, 1, 10, 1, 0, 10, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+dst_sb], rdx", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_8AE6"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 6, 0, 0, 4, 0, 1, 3, 0, 0.08703703703703704, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 4", "jnz     short loc_8B57"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 2, 0, 0.11111111111111112, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 3", "jz      short loc_8B32"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 3, 0, 1, 9, 2, 2, 3, 0, 0.06851851851851852, ["mov     rdx, [rbp+dst_sb]; dst_sb", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+x]", "mov     rsi, rcx; dst_name", "mov     rdi, rax; x", "call    overwrite_ok", "xor     eax, 1", "test    al, al", "jz      short loc_8B57"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 4, 0, 1, 9, 2, 2, 5, 0, 0.044444444444444446, ["mov     rax, [rbp+dst_sb]", "mov     edx, [rax+18h]", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    writable_destination", "xor     eax, 1", "test    al, al", "jz      short loc_8B57"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 8, 0, 0, 4, 0, 1, 1, 0, 0.08888888888888889, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 2", "jz      short loc_8B50"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 4, 0, 0.06666666666666667, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Fh]", "test    al, al", "jz      short loc_8B57"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]]], "func_feature": [3, 7, 11, 0, 11, 16, 1, 55, 0.04949, 3, 1], "succs": [[], [0], [0], [], [9, 3], [10, 2], [5, 7], [1, 2], [2, 7], [1, 6], [8, 2]], "fname": "abandon_move", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[7, 0, 2, 1, 3, 25, 0, 4, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 28h", "mov     [rbp+src], rdi", "mov     [rbp+dst], rsi", "mov     [rbp+backup_dst_name], rdx", "mov     rax, [rbp+dst]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     rbx, rax", "mov     rax, [rbp+src]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rdx, rbx", "mov     rsi, rax", "lea     rdi, format; \"%s -> %s\"", "mov     eax, 0", "call    _printf", "cmp     [rbp+backup_dst_name], 0", "jz      short loc_8BF3"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rbx", "mov~rsi,rax", "lea~rdi,<TAG>", "mov~eax,0", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 0, 1, 1, 7, 0, 1, 0, 0, 0.0, ["mov     edi, 0Ah; c", "call    _putchar_unlocked", "nop", "add     rsp, 28h", "pop     rbx", "pop     rbp", "retn"], ["mov~edi,0", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [2, 0, 1, 0, 3, 11, 0, 3, 0, 1, 0.0, ["mov     rax, [rbp+backup_dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aBackupS; \" (backup: %s)\"", "call    _gettext", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]]], "func_feature": [7, 0, 8, 0, 3, 3, 4, 43, 0.0, 2, 2], "succs": [[1, 2], [], [1]], "fname": "emit_verbose", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 1, 0, 3, 10, 0, 3, 0, 0, 0.0, ["lea     rdi, aFailedToRestor; \"failed to restore the default file crea\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 2, 1, 1, 8, 1, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 8", "mov     edi, 0; con", "call    setfscreatecon", "test    eax, eax", "jz      short loc_8C46"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 0, 1, 0, 5, 0, 0, 1, 0, 0.0, ["nop", "add     rsp, 8", "pop     rbx", "pop     rbp", "retn"], ["nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [4, 1, 5, 0, 3, 3, 2, 23, 0.0, 1, 2], "succs": [[2], [0, 2], []], "fname": "restore_default_fscreatecon_or_die", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 7, 0, 0, 2, 0, 1, 0, 0, 0.048611111111111105, ["mov     esi, 400h", "jmp     short loc_8C87"], ["mov~esi,0", "jmp~FOO"]], [2, 0, 9, 1, 0, 16, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 30h", "mov     [rbp+src_name], rdi", "mov     [rbp+dst_name], rsi", "mov     eax, ecx", "mov     ecx, r8d", "mov     [rbp+replace], dl", "mov     [rbp+verbose], al", "mov     eax, ecx", "mov     [rbp+dereference], al", "movzx   ecx, [rbp+replace]", "cmp     [rbp+dereference], 0", "jz      short loc_8C82"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,ecx", "mov~ecx,r8d", "mov~[rbp+0],dl", "mov~[rbp+0],al", "mov~eax,ecx", "mov~[rbp+0],al", "movzx~ecx,[rbp+0]", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 1, 3, 0.048611111111111105, ["mov     esi, 0"], ["mov~esi,0"]], [1, 0, 4, 0, 0, 2, 0, 0, 3, 2, 0.16666666666666666, ["cmp     [rbp+err], 0", "jns     short loc_8D5B"], ["cmp~[rbp+0],0", "jns~FOO"]], [6, 0, 6, 2, 1, 15, 0, 2, 2, 2, 0.25, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "sub     rsp, 8", "push    0FFFFFFFFFFFFFFFFh; linkat_errno", "mov     r9d, ecx; force", "mov     r8d, esi; flags", "mov     rcx, rdx; dstname", "mov     edx, 0FFFFFF9Ch; dstdir", "mov     rsi, rax; srcname", "mov     edi, 0FFFFFF9Ch; srcdir", "call    force_linkat", "add     rsp, 10h", "mov     [rbp+err], eax", "cmp     [rbp+err], 0", "jle     short loc_8D1F"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~0", "mov~r9d,ecx", "mov~r8d,esi", "mov~rcx,rdx", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "add~rsp,0", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0.0, ["lea     rsp, [rbp-10h]", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["lea~rsp,[rbp-10h]+0]", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [7, 0, 1, 0, 4, 24, 0, 5, 3, 1, 0.05555555555555555, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotCreateHa; \"cannot create hard link %s to %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+err]", "mov     r8, r12", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     short loc_8D60"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~r8,r12", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.041666666666666664, ["mov     eax, 1"], ["mov~eax,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.06944444444444445, ["cmp     [rbp+verbose], 0", "jz      short loc_8D5B"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 2, 0, 3, 11, 0, 3, 5, 2, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aRemovedS; \"removed %s\\n\"", "call    _gettext", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]]], "func_feature": [8, 0, 13, 0, 10, 13, 3, 79, 0.06806, 2, 3], "succs": [[4], [0, 2], [4], [8, 7], [3, 6], [], [5], [5], [9, 7], [7]], "fname": "create_hard_link", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 5, 0, 0, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     eax, esi", "mov     [rbp+command_line_arg], al", "mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 4", "jz      short loc_8D94"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~eax,esi", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_8DA0"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 4, 0, 0, 4, 0, 1, 0, 2, 0.1, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 3", "jnz     short loc_8D9B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.05, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_8D9B"], ["cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [0, 1, 4, 0, 6, 8, 1, 21, 0.05, 0, 0], "succs": [[2, 4], [], [1], [1], [3, 5], [2, 3]], "fname": "should_dereference", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 12, 2, 4, 31, 1, 5, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 108h", "mov     [rbp+srcbase], rdi", "mov     [rbp+src_st], rsi", "mov     [rbp+dst_name], rdx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+srcbase]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+srcbaselen], rax", "mov     rax, [rbp+dst_name]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+dstbase], rax", "mov     rax, [rbp+dstbase]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+dstbaselen], rax", "mov     rax, cs:simple_backup_suffix", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+suffixlen], rax", "mov     rdx, [rbp+dstbaselen]", "mov     rax, [rbp+suffixlen]", "add     rax, rdx", "cmp     [rbp+srcbaselen], rax", "jnz     short loc_8E92"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 0, 1, 0.15151515151515152, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_8F8F"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.06818181818181818, ["mov     eax, 0", "jmp     loc_8F7B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 1, 0, 0, 2, 0.11363636363636365, ["and     eax, 1"], ["and~eax,0"]], [0, 0, 11, 0, 1, 8, 1, 2, 0, 3, 0.05303030303030303, ["mov     rdx, [rbp+dstbaselen]; n", "mov     rcx, [rbp+dstbase]", "mov     rax, [rbp+srcbase]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_8E92"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 6, 0, 0, 5, 0, 1, 0, 4, 0.03787878787878788, ["mov     rax, [rbp+src_st]", "mov     rdx, [rax]", "mov     rax, [rbp+dst_back_sb.st_dev]", "cmp     rdx, rax", "jnz     short loc_8F73"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 7, 0, 0, 5, 0, 1, 0, 4, 0.06060606060606061, ["mov     rax, [rbp+src_st]", "mov     rdx, [rax+8]", "mov     rax, [rbp+dst_back_sb.st_ino]", "cmp     rdx, rax", "jnz     short loc_8F73"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 10, 1, 1, 9, 1, 2, 0, 3, 0.09090909090909091, ["mov     rax, cs:simple_backup_suffix", "mov     rcx, [rbp+srcbase]", "mov     rdx, [rbp+dstbaselen]", "add     rdx, rcx", "mov     rsi, rax; s2", "mov     rdi, rdx; s1", "call    _strcmp", "test    eax, eax", "jz      short loc_8E9C"], ["mov~rax,<TAG>", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "add~rdx,rcx", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 0, 3, 0.015151515151515152, ["mov     eax, 1", "jmp     short loc_8F78"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0.0, ["add     rsp, 108h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 4, 0, 0, 1, 0, 0, 0, 3, 0.09848484848484848, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 8, 2, 6, 32, 0, 7, 0, 4, 0.11363636363636365, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+dstlen], rax", "mov     rdx, [rbp+dstlen]", "mov     rax, [rbp+suffixlen]", "add     rax, rdx", "add     rax, 1", "mov     rdi, rax; n", "call    xmalloc", "mov     [rbp+dst_back], rax", "mov     rbx, cs:simple_backup_suffix", "mov     rdx, [rbp+dstlen]; n", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+dst_back]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _mempcpy", "mov     rsi, rbx; src", "mov     rdi, rax; dest", "call    _strcpy", "lea     rdx, [rbp+dst_back_sb]", "mov     rax, [rbp+dst_back]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "mov     [rbp+dst_back_status], eax", "mov     rax, [rbp+dst_back]", "mov     rdi, rax; ptr", "call    free", "cmp     [rbp+dst_back_status], 0", "jnz     short loc_8F73"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rbx,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [13, 5, 22, 1, 13, 18, 1, 104, 0.06177, 2, 6], "succs": [[2, 4], [10, 7], [1], [1], [8, 2], [9, 11], [11, 5], [], [2, 12], [3], [], [3], [11, 6]], "fname": "source_is_dst_backup", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 226, 0, 0, 2, 0, 1, 0, 0, 0.002604805758988733, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_A033"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 237, 0, 0, 4, 1, 1, 10, 8, 0.0024411981245398536, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_A058"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 301, 0, 0, 4, 1, 1, 16, 3, 0.0009945621988866069, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_981F"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 302, 0, 0, 4, 1, 1, 15, 4, 0.0033195127936864674, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     loc_988A"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 9, 0, 0, 7, 2, 1, 37, 4, 0.0019116260446132185, ["mov     eax, [rbp+dst_sb.st_mode]", "mov     [rbp+dst_mode], eax", "mov     eax, [rbp+dst_mode]", "not     eax", "and     eax, [rbp+omitted_permissions]", "test    eax, eax", "jz      short loc_B81D"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [0, 0, 12, 0, 0, 3, 1, 1, 36, 4, 0.007336510765812893, ["movzx   eax, [rbp+new_dst]", "test    al, al", "jz      short loc_B7F8"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [0, 0, 11, 0, 1, 7, 1, 2, 37, 3, 0.0018599604758398885, ["lea     rdx, [rbp+dst_sb]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_B7F8"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 8, 0, 0, 1, 0, 0, 38, 4, 0.0, ["mov     [rbp+restore_dst_mode], 1"], ["mov~[rbp+0],0"]], [0, 0, 249, 0, 0, 3, 0, 1, 11, 6, 0.004530424561811395, ["lea     rax, [rbp+dst_sb]", "mov     [rbp+dst_lstat_sb], rax", "jmp     short loc_9EB7"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 253, 0, 0, 3, 0, 1, 10, 7, 0.005815605585047985, ["mov     [rbp+lstat_ok], 1", "cmp     [rbp+have_dst_lstat], 0", "jz      short loc_9E83"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 300, 0, 0, 4, 1, 1, 17, 3, 0.0019116260446132185, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_988A"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 103, 0, 1, 10, 0, 2, 27, 7, 0.023281796928481938, ["mov     rax, [rbp+src_sb.st_size]", "mov     rdx, rax", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; size", "mov     rdi, rax; file", "call    areadlink_with_size", "mov     [rbp+src_link_val], rax", "mov     [rbp+dest_is_symlink], 1", "cmp     [rbp+src_link_val], 0", "jnz     short loc_B06C"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 105, 0, 0, 4, 1, 1, 26, 7, 0.025127226463104325, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_B275"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 34, 3, 0.0057736273104196534, ["cmp     [rbp+restore_dst_mode], 0", "jz      loc_B8AE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 33, 4, 0.0200139497035688, ["cmp     [rbp+omitted_permissions], 0", "jz      loc_B81D"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 14, 0, 1, 5, 1, 2, 34, 4, 0.010927267795559345, ["call    cached_umask", "not     eax", "and     [rbp+omitted_permissions], eax", "cmp     [rbp+omitted_permissions], 0", "jz      loc_B81D"], ["call~FOO", "not~eax", "and~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 13, 0, 0, 4, 2, 1, 35, 4, 0.009138347476782785, ["movzx   eax, [rbp+restore_dst_mode]", "xor     eax, 1", "test    al, al", "jz      loc_B81D"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 224, 0, 1, 8, 0, 2, 12, 6, 0.0012055299380443723, ["mov     rdx, [rbp+src_sb.st_dev]; dev", "mov     rcx, [rbp+src_sb.st_ino]", "mov     rax, [rbp+dst_name]", "mov     rsi, rcx; ino", "mov     rdi, rax; name", "call    remember_copied", "mov     [rbp+earlier_file], rax", "jmp     loc_A112"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 262, 0, 1, 9, 0, 2, 21, 4, 0.00578977280066132, ["mov     rax, [rbp+x]", "mov     edx, [rax]; backup_type", "mov     rax, [rbp+dst_name]", "mov     rsi, rax; file", "mov     edi, 0FFFFFF9Ch; dir_fd", "call    backup_file_rename", "mov     [rbp+tmp_backup], rax", "cmp     [rbp+tmp_backup], 0", "jz      loc_9C7F"], ["mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 268, 0, 0, 4, 0, 1, 20, 5, 0.00594476950698131, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "cmp     eax, 3", "jz      loc_9BAC"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 267, 0, 1, 8, 1, 2, 21, 5, 0.002376616163573191, ["mov     rdx, [rbp+dst_name]; dst_name", "lea     rcx, [rbp+src_sb]", "mov     rax, [rbp+srcbase]", "mov     rsi, rcx; src_st", "mov     rdi, rax; srcbase", "call    source_is_dst_backup", "test    al, al", "jz      loc_9BAC"], ["mov~rdx,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 6, 0, 1, 9, 2, 2, 35, 3, 0.0037328373438731094, ["mov     eax, [rbp+dst_mode]", "or      eax, [rbp+omitted_permissions]", "mov     edx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod", "test    eax, eax", "jz      short loc_B8AE"], ["mov~eax,[rbp+0]", "or~eax,[rbp+0]", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [9, 0, 107, 7, 0, 25, 1, 1, 19, 8, 0.026749848232391727, ["mov     eax, 10h", "sub     rax, 1", "add     rax, 27h", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+dir], rax", "mov     rax, [rbp+dir]", "mov     rdx, [rbp+ancestors]", "mov     [rax], rdx", "mov     rdx, [rbp+src_sb.st_ino]", "mov     rax, [rbp+dir]", "mov     [rax+8], rdx", "mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+dir]", "mov     [rax+10h], rdx", "movzx   eax, [rbp+new_dst]", "test    al, al", "jnz     short loc_A86A"], ["mov~eax,0", "sub~rax,0", "add~rax,0", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [0, 0, 109, 0, 1, 7, 1, 2, 18, 7, 0.030243732320688187, ["mov     rdx, [rbp+ancestors]", "lea     rax, [rbp+src_sb]", "mov     rsi, rdx; ancestors", "mov     rdi, rax; sb", "call    is_ancestor", "test    al, al", "jz      short loc_A7DD"], ["mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 224, 0, 1, 7, 0, 2, 12, 6, 0.0012055299380443723, ["mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+src_sb.st_ino]", "mov     rsi, rdx; dev", "mov     rdi, rax; ino", "call    src_to_dest_lookup", "mov     [rbp+earlier_file], rax", "jmp     loc_A112"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [8, 0, 394, 1, 0, 38, 2, 1, 0, 11, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r13", "push    r12", "push    rbx", "sub     rsp, 358h", "mov     [rbp+src_name], rdi", "mov     [rbp+dst_name], rsi", "mov     [rbp+parent], rcx", "mov     [rbp+ancestors], r8", "mov     [rbp+x], r9", "mov     eax, [rbp+arg_0]", "mov     [rbp+new_dst], dl", "mov     [rbp+command_line_arg], al", "mov     rax, [rbp+arg_8]", "mov     [rbp+first_dir_created_per_command_line_arg], rax", "mov     rax, [rbp+arg_10]", "mov     [rbp+copy_into_self], rax", "mov     rax, [rbp+arg_18]", "mov     [rbp+rename_succeeded], rax", "mov     rax, fs:28h", "mov     [rbp+var_28], rax", "xor     eax, eax", "mov     [rbp+restore_dst_mode], 0", "mov     [rbp+earlier_file], 0", "mov     [rbp+dst_backup], 0", "mov     [rbp+copied_as_regular], 0", "mov     [rbp+dest_is_symlink], 0", "mov     [rbp+have_dst_lstat], 0", "mov     rax, [rbp+copy_into_self]", "mov     byte ptr [rax], 0", "mov     rax, [rbp+x]", "mov     eax, [rax+34h]", "mov     [rbp+rename_errno], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_90DA"], ["push~rbp", "mov~rbp,rsp", "push~r13", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~eax,[rbp+0]", "mov~[rbp+0],dl", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 233, 0, 0, 4, 1, 1, 10, 7, 0.009310566039360552, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_A096"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 238, 0, 0, 4, 1, 1, 9, 8, 0.01130184316916599, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Ah]", "test    al, al", "jz      short loc_A058"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 28, 6, 8.395654925666163e-05, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotReadSymb; \"cannot read symbolic link %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 393, 0, 0, 2, 0, 0, 1, 12, 3.874917657999767e-05, ["cmp     [rbp+rename_errno], 0", "jns     short loc_90B0"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 232, 0, 0, 3, 0, 1, 11, 7, 0.0008266491003732837, ["mov     rax, [rbp+src_sb.st_nlink]", "cmp     rax, 1", "jnz     short loc_A096"], ["mov~rax,[rbp+0]", "cmp~rax,0", "jnz~FOO"]], [8, 0, 3, 0, 4, 23, 0, 5, 17, 2, 7.749835315999534e-05, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotOverwrit; \"cannot overwrite non-directory %s with \"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 100, 0, 1, 10, 2, 2, 20, 7, 0.014040118314152491, ["mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+dst_mode_bits]", "mov     edx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; path", "call    _mkdir", "test    eax, eax", "jz      short loc_A8D8"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 106, 0, 0, 4, 1, 1, 20, 8, 0.011263093992585991, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_AA83"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 298, 0, 0, 2, 0, 1, 16, 5, 0.007129848490719572, ["cmp     [rbp+command_line_arg], 0", "jz      loc_993C"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 224, 0, 1, 7, 0, 2, 12, 6, 0.0007233179628266232, ["mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+src_sb.st_ino]", "mov     rsi, rdx; dev", "mov     rdi, rax; ino", "call    src_to_dest_lookup", "mov     [rbp+earlier_file], rax", "jmp     short loc_A112"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [3, 0, 392, 0, 1, 10, 1, 2, 2, 14, 3.874917657999767e-05, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     r8d, 1; flags", "mov     rcx, rdx; dst", "mov     edx, 0FFFFFF9Ch; fd2", "mov     rsi, rax; src", "mov     edi, 0FFFFFF9Ch; fd1", "call    renameatu", "test    eax, eax", "jz      short loc_90A5"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "mov~rcx,rdx", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 5, 0, 4, 20, 1, 5, 36, 3, 0.001872876868033221, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aPreservingPerm; \"preserving permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_B8AE"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 230, 0, 0, 4, 1, 1, 11, 6, 0.009097445568170565, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+22h]", "test    al, al", "jz      short loc_A112"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 390, 0, 0, 1, 0, 0, 3, 13, 0.0012658064349465906, ["mov     eax, 0"], ["mov~eax,0"]], [3, 0, 101, 0, 1, 12, 0, 2, 28, 8, 0.02144766923702871, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "movzx   ecx, al; force", "mov     rdx, [rbp+dst_name]; dstname", "mov     rax, [rbp+src_link_val]", "mov     r8d, 0FFFFFFFFh; symlinkat_errno", "mov     esi, 0FFFFFF9Ch; dstdir", "mov     rdi, rax; srcname", "call    force_symlinkat", "mov     [rbp+symlink_err], eax", "cmp     [rbp+symlink_err], 0", "jle     loc_B16A"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~ecx,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 389, 0, 0, 1, 0, 0, 4, 12, 0.007536714844809548, ["mov     [rbp+rename_errno], eax"], ["mov~[rbp+0],eax"]], [0, 0, 390, 0, 1, 3, 0, 2, 3, 13, 0.0012658064349465906, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_90AA"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [0, 0, 4, 0, 0, 2, 0, 1, 31, 3, 0.0018292840443807235, ["nop", "jmp     short loc_B8AE"], ["nop", "jmp~FOO"]], [2, 0, 7, 0, 1, 10, 1, 2, 30, 4, 0.007207346843879568, ["mov     ecx, [rbp+src_mode]", "mov     rdx, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "mov     r8d, ecx; mode", "mov     ecx, 0FFFFFFFFh; dest_desc", "mov     esi, 0FFFFFFFFh; source_desc", "mov     rdi, rax; src_name", "call    copy_acl", "test    eax, eax", "jz      loc_B8AA"], ["mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,ecx", "mov~ecx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 6, 0, 0, 4, 1, 1, 31, 3, 0.0018260549463323904, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      loc_B8AA"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 0, 1, 0, 0, 37, 3, 3.22909804833314e-05, ["nop"], ["nop"]], [1, 0, 6, 0, 2, 12, 2, 3, 36, 3, 0.0037845029126464397, ["mov     [rbp+default_permissions], eax", "call    cached_umask", "not     eax", "mov     edx, eax", "mov     eax, [rbp+default_permissions]", "and     edx, eax; mode", "mov     rax, [rbp+dst_name]", "mov     esi, 0FFFFFFFFh; desc", "mov     rdi, rax; name", "call    set_acl", "test    eax, eax", "jz      loc_B8AD"], ["mov~[rbp+0],eax", "call~FOO", "not~eax", "mov~edx,eax", "mov~eax,[rbp+0]", "and~edx,eax", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 229, 0, 0, 5, 2, 1, 12, 6, 0.004197827462833081, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "xor     eax, 1", "test    al, al", "jz      short loc_A112"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 100, 0, 0, 4, 1, 1, 29, 8, 0.008498986063212824, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Dh]", "test    al, al", "jz      loc_B16A"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 13, 0, 0, 2, 0, 1, 13, 6, 0.004359282365249738, ["nop", "jmp     short un_backup"], ["nop", "jmp~FOO"]], [2, 0, 15, 0, 1, 14, 2, 2, 12, 3, 0.006713294842484598, ["movzx   ecx, [rbp+dereference]", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "movzx   edx, al", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+earlier_file]", "mov     r8d, ecx; dereference", "mov     ecx, edx; verbose", "mov     edx, 1; replace", "mov     rdi, rax; src_name", "call    create_hard_link", "xor     eax, 1", "test    al, al", "jnz     loc_B8BD"], ["movzx~ecx,[rbp+0]", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~edx,al", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,ecx", "mov~ecx,edx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 13, 0, 0, 2, 0, 1, 24, 6, 0.00032290980483331395, ["nop", "jmp     short un_backup"], ["nop", "jmp~FOO"]], [0, 0, 89, 0, 0, 4, 1, 1, 23, 7, 0.001414344945169915, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jnz     loc_B8C0"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 228, 0, 0, 3, 0, 1, 13, 7, 0.00338409475465313, ["mov     rax, [rbp+src_sb.st_nlink]", "cmp     rax, 1", "ja      short loc_A0EB"], ["mov~rax,[rbp+0]", "cmp~rax,0", "ja~FOO"]], [0, 0, 13, 0, 0, 1, 0, 0, 27, 6, 0.0010978933364332675, ["nop"], ["nop"]], [0, 0, 77, 0, 0, 4, 1, 1, 26, 6, 0.002641402203536508, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+26h]", "test    al, al", "jnz     loc_B8C3"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 0, 388, 0, 0, 5, 0, 1, 2, 11, 0.012535358623629247, ["cmp     [rbp+rename_errno], 0", "setz    al", "mov     [rbp+new_dst], al", "cmp     [rbp+rename_succeeded], 0", "jz      short loc_90DA"], ["cmp~[rbp+0],0", "setz~al", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 227, 0, 0, 2, 0, 1, 14, 7, 0.0017049637695198978, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_A0DC"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 99, 0, 0, 4, 2, 1, 30, 8, 0.007323594373619561, ["movzx   eax, [rbp+new_dst]", "xor     eax, 1", "test    al, al", "jz      loc_B16A"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 296, 0, 1, 9, 1, 2, 18, 3, 0.0005424884721199674, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "lea     rdx, [rbp+dst_sb]; stats", "mov     rcx, [rbp+dst_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    seen_file", "test    al, al", "jz      short loc_993C"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 297, 0, 0, 4, 0, 1, 17, 4, 0.0010139367871766058, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "cmp     eax, 3", "jz      loc_993C"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 12, 0, 0, 4, 1, 1, 14, 5, 0.01713101096601697, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_B8D8"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [8, 0, 13, 0, 4, 24, 0, 5, 13, 6, 0.004359282365249738, ["mov     rax, cs:top_level_dst_name", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, cs:top_level_src_name", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotCopyADir; \"cannot copy a directory, %s, into itsel\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+copy_into_self]", "mov     byte ptr [rax], 1", "jmp     un_backup"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "mov~<TAG>,0", "jmp~FOO"]], [7, 0, 13, 0, 4, 22, 0, 5, 16, 6, 0.00028738972630164945, ["mov     rax, [rbp+earlier_file]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aWillNotCreateH; \"will not create hard link %s to directo\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [4, 0, 13, 0, 3, 14, 0, 4, 19, 6, 0.0019116260446132185, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aCannotCopyCycl; \"cannot copy cyclic symbolic link %s\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 21, 6, 0.0002518696477699849, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotCreateDi; \"cannot create directory %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 22, 6, 8.395654925666163e-05, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotStatS; \"cannot stat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 24, 6, 0.00016791309851332326, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aSettingPermiss_0; \"setting permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [5, 0, 13, 0, 3, 15, 0, 4, 23, 6, 0.000671652394053293, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aSCanMakeRelati; \"%s: can make relative symbolic links on\"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [6, 0, 13, 0, 4, 23, 0, 5, 21, 6, 0.00021312047118998722, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotCreateSy; \"cannot create symbolic link %s to %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+err]", "mov     r8, r12", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~r8,r12", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 13, 0, 0, 1, 0, 1, 23, 6, 0.00035520078531664533, ["jmp     un_backup"], ["jmp~FOO"]], [0, 0, 13, 0, 0, 1, 0, 1, 22, 6, 0.00035261750687797883, ["jmp     un_backup"], ["jmp~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 25, 6, 0.00016791309851332326, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotCreateFi; \"cannot create fifo %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 0, 13, 0, 4, 17, 0, 5, 25, 6, 0.0002825460792291497, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotCreateSp; \"cannot create special file %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 0, 13, 0, 3, 15, 0, 4, 30, 6, 0.0008395654925666163, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aCannotCreateSy_0; \"cannot create symbolic link %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+symlink_err]", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 13, 0, 0, 1, 0, 1, 35, 6, 0.000393949961896643, ["jmp     un_backup"], ["jmp~FOO"]], [4, 0, 13, 0, 3, 14, 0, 4, 27, 6, 0.00012109117681249273, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aSHasUnknownFil; \"%s has unknown file type\"", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     un_backup"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 13, 0, 0, 2, 0, 1, 18, 6, 0.0009041474535332791, ["nop", "jmp     short un_backup"], ["nop", "jmp~FOO"]], [0, 0, 387, 0, 0, 3, 0, 0, 3, 11, 0.0, ["movzx   edx, [rbp+new_dst]", "mov     rax, [rbp+rename_succeeded]", "mov     [rax], dl"], ["movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,dl"]], [1, 0, 226, 0, 0, 4, 0, 1, 15, 7, 3.2290980483331396e-06, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 3", "jz      short loc_A0EB"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 15, 4, 0.013708167034783843, ["cmp     [rbp+earlier_file], 0", "jnz     short loc_B8FB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 11, 0, 1, 1, 0, 1, 15, 5, 0.0, ["call    restore_default_fscreatecon_or_die"], ["call~FOO"]], [1, 0, 386, 0, 0, 2, 0, 1, 1, 10, 0.01994290954650547, ["cmp     [rbp+rename_errno], 0", "jnz     short loc_90F3"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 98, 0, 0, 4, 1, 1, 31, 8, 0.006135286291832965, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_B16A"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 225, 0, 0, 4, 0, 1, 15, 6, 0.002173182986528203, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 4", "jnz     short loc_A112"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 380, 0, 0, 4, 1, 1, 2, 9, 0.022087030650598676, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+31h]", "xor     eax, 1", "jmp     short loc_911A"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "jmp~FOO"]], [0, 0, 98, 0, 1, 7, 1, 2, 21, 7, 0.012109117681249273, ["lea     rdx, [rbp+dst_sb]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_A93E"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 9, 0, 1, 5, 0, 1, 16, 4, 0.0, ["mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+src_sb.st_ino]", "mov     rsi, rdx; dev", "mov     rdi, rax; ino", "call    forget_created"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [1, 0, 384, 0, 0, 2, 0, 1, 2, 11, 0.00023249505947998606, ["cmp     [rbp+rename_errno], 11h", "jnz     short loc_910B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 16, 3, 0.010233657534777386, ["cmp     [rbp+dst_backup], 0", "jz      loc_B9D2"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 97, 0, 1, 7, 0, 2, 32, 8, 0.004934061817853037, ["mov     rax, [rbp+dst_sb.st_size]", "mov     rbx, rax", "mov     rax, [rbp+src_link_val]", "mov     rdi, rax; s", "call    _strlen", "cmp     rbx, rax", "jnz     short loc_B16A"], ["mov~rax,[rbp+0]", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "cmp~rbx,rax", "jnz~FOO"]], [1, 0, 383, 0, 0, 4, 0, 1, 3, 11, 6.45819609666628e-05, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 2", "jz      short loc_9112"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 224, 0, 1, 7, 0, 1, 14, 6, 0.0021699538884798696, ["mov     rdx, [rbp+src_sb.st_dev]; dev", "mov     rcx, [rbp+src_sb.st_ino]", "mov     rax, [rbp+dst_name]", "mov     rsi, rcx; ino", "mov     rdi, rax; name", "call    remember_copied", "mov     [rbp+earlier_file], rax"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 381, 0, 0, 2, 0, 1, 3, 10, 0.003748982834114775, ["mov     eax, 1", "jmp     short loc_9117"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 381, 0, 0, 1, 0, 0, 4, 10, 0.0012302863564149261, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 380, 0, 0, 1, 1, 0, 4, 9, 0.009816458066932744, ["and     eax, 1"], ["and~eax,0"]], [1, 0, 223, 0, 0, 2, 0, 1, 10, 5, 0.20022022448689633, ["cmp     [rbp+earlier_file], 0", "jz      loc_A329"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 224, 0, 0, 2, 0, 1, 9, 6, 0.17798465532607433, ["mov     [rbp+earlier_file], 0", "jmp     loc_A112"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 379, 0, 0, 2, 1, 1, 3, 8, 0.0367148448095478, ["test    al, al", "jz      loc_9278"], ["test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 37, 2, 9.687294144999418e-06, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 7, 0, 1, 7, 1, 2, 17, 4, 0.005424884721199674, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+dst_backup]", "mov     rsi, rdx; new", "mov     rdi, rax; old", "call    _rename", "test    eax, eax", "jz      short loc_B96C"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 378, 0, 0, 2, 0, 1, 4, 7, 0.0015912995182185716, ["cmp     [rbp+rename_errno], 0", "jnz     short loc_9134"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 222, 0, 0, 4, 1, 1, 11, 4, 0.021915888454037018, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     loc_A2DF"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 376, 0, 0, 2, 0, 1, 5, 6, 0.0019064594877358859, ["mov     rax, [rbp+dst_name]", "jmp     short loc_913B"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 376, 0, 0, 1, 0, 0, 5, 6, 0.0019064594877358859, ["mov     rax, [rbp+src_name]"], ["mov~rax,[rbp+0]"]], [8, 0, 3, 0, 4, 23, 0, 5, 19, 2, 5.8123764869996514e-05, ["mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aWillNotOverwri; \"will not overwrite just-created %s with\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [2, 0, 294, 0, 0, 4, 1, 1, 15, 5, 0.057245450200849896, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_99C3"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 303, 0, 0, 4, 1, 1, 14, 5, 0.04827501582258044, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_993C"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 96, 0, 0, 4, 1, 1, 22, 8, 0.010320197362472715, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 1C0h", "cmp     eax, 1C0h", "jz      short loc_A9CE"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 95, 0, 1, 7, 1, 2, 34, 9, 0.002492863693313184, ["mov     rdx, [rbp+src_link_val]", "mov     rax, [rbp+dest_link_val]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_B15B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 96, 0, 1, 9, 0, 2, 33, 8, 0.003719920951679777, ["mov     rax, [rbp+dst_sb.st_size]", "mov     rdx, rax", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; size", "mov     rdi, rax; file", "call    areadlink_with_size", "mov     [rbp+dest_link_val], rax", "cmp     [rbp+dest_link_val], 0", "jz      short loc_B16A"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 218, 0, 1, 7, 1, 2, 12, 5, 0.01478926906136578, ["mov     rdx, [rbp+earlier_file]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "test    al, al", "jz      short loc_A1C3"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [2, 0, 293, 0, 0, 4, 1, 1, 16, 4, 0.0015693416514899058, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_99C3"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 93, 0, 1, 3, 0, 1, 35, 8, 0.0012012244739799279, ["mov     rax, [rbp+dest_link_val]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 94, 0, 0, 1, 0, 0, 35, 9, 0.0, ["mov     [rbp+symlink_err], 0"], ["mov~[rbp+0],0"]], [3, 0, 4, 0, 4, 17, 0, 5, 18, 3, 1.2916392193332558e-05, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotUnBackup; \"cannot un-backup %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_B9D2"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 292, 0, 0, 4, 1, 1, 17, 3, 0.0010849769442399348, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_997C"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 373, 0, 1, 8, 1, 2, 7, 4, 0.005355136203355679, ["lea     rdx, [rbp+src_sb]", "mov     rax, [rbp+name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "setnz   al", "jmp     short loc_918F"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [1, 0, 375, 0, 0, 5, 0, 1, 6, 5, 0.008546776714328155, ["mov     [rbp+name], rax", "mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jnz     short loc_9171"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 18, 3, 0.001827669495356557, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_B9D2"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 291, 0, 0, 4, 1, 1, 18, 3, 0.0018535022797432222, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_99C3"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [1, 0, 92, 0, 1, 5, 0, 2, 29, 7, 0.015925911574379045, ["mov     rax, [rbp+src_link_val]", "mov     rdi, rax; ptr", "call    free", "cmp     [rbp+symlink_err], 0", "jle     short loc_B1C7"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],0", "jle~FOO"]], [2, 0, 95, 0, 1, 12, 2, 2, 23, 7, 0.0012593482388499244, ["mov     eax, [rbp+dst_sb.st_mode]", "mov     [rbp+dst_mode], eax", "mov     [rbp+restore_dst_mode], 1", "mov     eax, [rbp+dst_mode]", "or      eax, 1C0h", "mov     edx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod", "test    eax, eax", "jz      short loc_A9CE"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "or~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 373, 0, 1, 7, 1, 1, 7, 4, 0.005355136203355679, ["lea     rdx, [rbp+src_sb]", "mov     rax, [rbp+name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "setnz   al"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al"]], [0, 0, 372, 0, 0, 2, 1, 1, 8, 3, 0.015386006380697745, ["test    al, al", "jz      short loc_91E1"], ["test~al,al", "jz~FOO"]], [0, 0, 40, 0, 0, 1, 0, 1, 31, 5, 0.0002486405497216517, ["jmp     short loc_B58E"], ["jmp~FOO"]], [0, 0, 42, 0, 0, 2, 1, 1, 30, 6, 0.0037134627555831107, ["test    eax, eax", "jz      short loc_B583"], ["test~eax,eax", "jz~FOO"]], [5, 0, 4, 0, 4, 19, 0, 4, 19, 3, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+dst_backup]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aSSUnbackup; \"%s -> %s (unbackup)\\n\"", "call    _gettext", "mov     rdx, r12", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,r12", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 289, 0, 0, 4, 1, 1, 16, 6, 0.06208263907725294, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      loc_9A76"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 17, 2, 0.0013213469213779207, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 90, 0, 0, 4, 1, 1, 30, 8, 0.013135970860619212, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_B1DB"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 89, 0, 1, 1, 0, 1, 31, 8, 0.0, ["call    restore_default_fscreatecon_or_die"], ["call~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 9, 2, 0.00038361684814197693, ["mov     rax, [rbp+name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotStatS; \"cannot stat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 93, 0, 0, 5, 2, 1, 23, 10, 0.00784670825744953, ["mov     rax, [rbp+first_dir_created_per_command_line_arg]", "movzx   eax, byte ptr [rax]", "xor     eax, 1", "test    al, al", "jz      short loc_AA09"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 216, 0, 1, 7, 1, 2, 13, 4, 0.009977912969349401, ["mov     rdx, [rbp+earlier_file]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "test    al, al", "jz      short loc_A24A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 10, 1, 0.005063225739786363, ["mov     rbx, [rbp+var_28]", "xor     rbx, fs:28h", "jz      short loc_B9EB"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [4, 0, 3, 0, 1, 8, 0, 2, 13, 2, 9.687294144999419e-05, ["mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [5, 0, 3, 0, 3, 15, 0, 4, 9, 2, 0.00015887162397799044, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aWarningSourceF; \"warning: source file %s specified more \"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 1", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 15, 2, 0.0003487425892199791, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotStatS; \"cannot stat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [8, 0, 3, 0, 4, 23, 0, 5, 11, 2, 0.00017437129460998955, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aSAndSAreTheSam; \"%s and %s are the same file\"", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 17, 2, 0.00019374588289998839, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 14, 2, 6.296741194249622e-05, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 14, 2, 7.265470608749564e-05, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 14, 2, 7.749835315999534e-05, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [5, 0, 3, 0, 3, 15, 0, 4, 18, 2, 7.749835315999534e-05, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aCannotOverwrit_0; \"cannot overwrite directory %s with non-\"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [8, 0, 3, 0, 4, 23, 0, 5, 20, 2, 7.749835315999534e-05, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     r12, rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 3; s", "mov     edi, 0; n", "call    quotearg_n_style_colon", "mov     rbx, rax", "lea     rdi, aCannotMoveDire; \"cannot move directory onto non-director\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [8, 0, 3, 0, 3, 23, 0, 4, 24, 2, 7.104015706332907e-05, ["mov     [rbp+fmt], rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     rbx, rax", "mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rdx, rax", "mov     rax, [rbp+fmt]", "mov     r8, rbx", "mov     rcx, rdx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 23, 2, 0.00013239301998165873, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotBackupS; \"cannot backup %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 23, 2, 0.00018405858875498895, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotRemoveS; \"cannot remove %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [8, 0, 3, 0, 4, 23, 0, 5, 15, 2, 0.00018405858875498895, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aWillNotCopySTh; \"will not copy %s through just-created s\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 15, 2, 9.687294144999419e-05, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 13, 2, 0.0005909249428449646, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 18, 2, 0.00017437129460998955, ["mov     eax, 1", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [9, 0, 3, 0, 4, 25, 0, 5, 15, 2, 0.00018405858875498895, ["mov     rax, cs:top_level_dst_name", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, cs:top_level_src_name", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotMoveSToA; \"cannot move %s to a subdirectory of its\"...", "call    _gettext", "mov     r8, r12", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+copy_into_self]", "mov     byte ptr [rax], 1", "mov     eax, 1", "jmp     loc_B9D7"], ["mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,<TAG>", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~r8,r12", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [7, 0, 3, 0, 5, 29, 0, 6, 16, 2, 1.9374588289998836e-05, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r12, rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rbx, rax", "lea     rdi, aCannotMoveSToS; \"cannot move %s to %s\"", "call    _gettext", "mov     rdx, rax; format", "mov     eax, [rbp+rename_errno]", "mov     r8, r12", "mov     rcx, rbx", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+src_sb.st_ino]", "mov     rsi, rdx; dev", "mov     rdi, rax; ino", "call    forget_created", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~r8,r12", "mov~rcx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]], [7, 0, 3, 0, 6, 31, 0, 7, 20, 2, 9.687294144999419e-05, ["mov     rax, [rbp+dst_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 1; n", "call    quotearg_n_style", "mov     r13, rax", "mov     rax, [rbp+src_name]", "mov     rdx, rax; arg", "mov     esi, 4; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     r12, rax", "lea     rdi, aInterDeviceMov; \"inter-device move failed: %s to %s; una\"...", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rdx, [rbp+src_sb.st_dev]", "mov     rax, [rbp+src_sb.st_ino]", "mov     rsi, rdx; dev", "mov     rdi, rax; ino", "call    forget_created", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r13,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 17, 2, 0.0002518696477699849, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 25, 2, 0.0004291471306234743, ["movzx   eax, [rbp+delayed_ok]", "jmp     loc_B9D7"], ["movzx~eax,[rbp+0]", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 25, 2, 0.0004291471306234743, ["movzx   eax, [rbp+delayed_ok]", "jmp     loc_B9D7"], ["movzx~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 30, 2, 9.687294144999419e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 30, 2, 8.718564730499477e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 30, 2, 2.9061882434998257e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 29, 2, 0.00015499670631999069, ["movzx   eax, [rbp+delayed_ok]", "jmp     loc_B9D7"], ["movzx~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 32, 2, 4.359282365249739e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 33, 2, 2.4218235362498548e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 37, 2, 9.687294144999419e-05, ["mov     eax, 0", "jmp     loc_B9D7"], ["mov~eax,0", "jmp~FOO"]], [4, 0, 3, 0, 4, 18, 0, 5, 38, 2, 3.874917657999767e-05, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aCannotStatS; \"cannot stat %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     eax, 0", "jmp     loc_B9D7"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 32, 2, 0.0002712442360599837, ["movzx   eax, [rbp+delayed_ok]", "jmp     loc_B9D7"], ["movzx~eax,[rbp+0]", "jmp~FOO"]], [2, 0, 288, 0, 0, 4, 1, 1, 17, 5, 0.0016468400046499012, ["mov     eax, [rbp+src_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     loc_9A76"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 88, 0, 0, 4, 1, 1, 31, 7, 0.011728084111545963, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "test    al, al", "jz      loc_B2B7"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 6, 0, 0, 11, 0, 0.0, ["lea     rsp, [rbp-18h]", "pop     rbx", "pop     r12", "pop     r13", "pop     rbp", "retn"], ["lea~rsp,[rbp-18h]+0]", "pop~rbx", "pop~r12", "pop~r13", "pop~rbp", "retn"]], [2, 0, 287, 0, 0, 4, 1, 1, 18, 4, 0.001136642513013265, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_9A76"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 370, 0, 0, 6, 1, 1, 9, 6, 0.017107761460068975, ["mov     eax, [rbp+src_sb.st_mode]", "mov     [rbp+src_mode], eax", "mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_9278"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 92, 0, 1, 8, 0, 1, 24, 10, 0.0, ["mov     rdx, [rbp+dst_sb.st_dev]; dev", "mov     rcx, [rbp+dst_sb.st_ino]", "mov     rax, [rbp+dst_name]", "mov     rsi, rcx; ino", "mov     rdi, rax; name", "call    remember_copied", "mov     rax, [rbp+first_dir_created_per_command_line_arg]", "mov     byte ptr [rax], 1"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 286, 0, 0, 4, 1, 1, 19, 3, 0.0006135286291832965, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_9A76"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [0, 0, 87, 0, 1, 8, 1, 2, 32, 7, 0.004068663540899756, ["mov     edx, [rbp+src_sb.st_gid]; group", "mov     ecx, [rbp+src_sb.st_uid]", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; owner", "mov     rdi, rax; file", "call    _lchown", "test    eax, eax", "jz      loc_B2B7"], ["mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 369, 0, 0, 5, 2, 1, 10, 5, 0.0006393614135699617, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Ah]", "xor     eax, 1", "test    al, al", "jz      short loc_9278"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 91, 0, 0, 4, 1, 1, 24, 9, 0.006658400175662934, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      loc_AAF1"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 86, 0, 1, 6, 2, 2, 33, 7, 0.0028545226747264956, ["mov     rax, [rbp+x]", "mov     rdi, rax; x", "call    chown_failure_ok", "xor     eax, 1", "test    al, al", "jz      loc_B2B7"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 90, 0, 0, 4, 1, 1, 25, 10, 0.0024024489479598557, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_AA63"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [4, 0, 6, 0, 3, 17, 1, 4, 14, 3, 0.0028480644786298293, ["mov     rax, cs:top_level_src_name", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aWarningSourceD; \"warning: source directory %s specified \"...", "call    _gettext", "mov     rcx, rbx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_A240"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rbx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 36, 4, 2.2603686338331976e-05, ["mov     eax, 1B6h"], ["mov~eax,0"]], [2, 0, 9, 0, 0, 4, 1, 1, 35, 5, 0.0018212112992598906, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 0C000h", "jnz     short loc_B707"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 15, 3, 0.0009428966301132768, ["cmp     [rbp+rename_succeeded], 0", "jz      short loc_A240"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 6, 0, 1, 10, 2, 2, 11, 4, 0.0005231138838299686, ["mov     rax, [rbp+src_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+19h]", "xor     eax, 1", "test    al, al", "jz      short loc_9248"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 0, 16, 3, 0.0, ["mov     rax, [rbp+rename_succeeded]", "mov     byte ptr [rax], 1"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 4, 0, 1, 3, 0, 2, 12, 3, 0.00011301843169165988, ["lea     rdi, aRNotSpecifiedO; \"-r not specified; omitting directory %s\"", "call    _gettext", "jmp     short loc_9254"], ["lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [0, 0, 53, 0, 1, 8, 1, 2, 27, 5, 0.0026704640859715064, ["lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; timespec", "mov     rdi, rax; file", "call    utimens_symlink", "test    eax, eax", "setnz   al", "jmp     short loc_B481"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [1, 0, 55, 0, 2, 12, 0, 3, 26, 6, 0.008331072964699501, ["lea     rax, [rbp+src_sb]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     [rbp+timespec.tv_sec], rax", "mov     [rbp+timespec.tv_nsec], rdx", "lea     rax, [rbp+src_sb]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbp+timespec.tv_sec+10h], rax", "mov     [rbp+timespec.tv_nsec+10h], rdx", "cmp     [rbp+dest_is_symlink], 0", "jz      short loc_B463"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 1, 2, 0, 1, 12, 3, 0.00011301843169165988, ["lea     rdi, aOmittingDirect; \"omitting directory %s\"", "call    _gettext"], ["lea~rdi,<TAG>", "call~FOO"]], [1, 0, 211, 0, 0, 4, 0, 1, 14, 7, 0.006651941979566267, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 4", "jz      loc_A329"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [2, 0, 88, 0, 3, 12, 0, 4, 26, 9, 0.0002841606282533163, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aCreatedDirecto; \"created directory %s\\n\"", "call    _gettext", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "jmp     loc_AAF1"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [1, 0, 210, 0, 0, 2, 0, 1, 15, 7, 0.002014957182159879, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_A279"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 85, 0, 3, 16, 1, 4, 34, 7, 0.0016274654163599023, ["lea     rdi, aFailedToPreser_2; \"failed to preserve ownership for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+dst_name]", "mov     rcx, rdx", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_B2B7"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 364, 0, 0, 2, 0, 1, 4, 7, 0.05834721845494118, ["cmp     [rbp+command_line_arg], 0", "jz      loc_934B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 88, 0, 1, 7, 0, 2, 26, 9, 0.0002841606282533163, ["mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     edx, 0; backup_dst_name", "mov     rsi, rcx; dst", "mov     rdi, rax; src", "call    emit_verbose", "jmp     short loc_AAF1"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 363, 0, 0, 4, 1, 1, 5, 6, 0.0009209387633846112, ["mov     rax, [rbp+x]", "mov     rax, [rax+48h]", "test    rax, rax", "jz      loc_934B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [1, 0, 92, 0, 0, 5, 1, 1, 21, 9, 0.01062373257901603, ["mov     [rbp+omitted_permissions], 0", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jnz     short loc_AAAB"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 0, 362, 0, 0, 4, 1, 1, 6, 5, 0.000798233037547952, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_9327"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 283, 0, 2, 10, 2, 3, 18, 7, 0.007397863628731223, ["mov     rax, [rbp+src_name]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+srcbase], rax", "mov     rax, [rbp+srcbase]", "mov     rdi, rax; file_name", "call    dot_or_dotdot", "xor     eax, 1", "test    al, al", "jz      loc_9CE5"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 284, 0, 0, 4, 1, 1, 17, 8, 0.06666150010978933, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jz      loc_9CE5"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jz~FOO"]], [0, 0, 361, 0, 0, 4, 1, 1, 7, 4, 0.00048178142881130447, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_9327"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [1, 0, 83, 0, 0, 4, 2, 1, 21, 6, 0.11108678523914702, ["movzx   eax, [rbp+new_dst]", "xor     eax, 1", "test    al, al", "jz      loc_B351"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 85, 0, 0, 5, 0, 1, 25, 7, 0.0002712442360599837, ["mov     rax, [rbp+parent]", "mov     rdx, [rax]", "mov     rax, [rbp+src_sb.st_dev]", "cmp     rdx, rax", "jnz     loc_B2B7"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 84, 1, 1, 16, 0, 2, 24, 7, 0.009125431084589453, ["movzx   eax, [rbp+new_dst]", "movzx   edx, al; new_dst", "mov     r8, [rbp+x]", "mov     rdi, [rbp+dir]", "lea     rcx, [rbp+src_sb]; src_sb", "mov     rsi, [rbp+dst_name]; dst_name_in", "mov     rax, [rbp+src_name]", "push    [rbp+copy_into_self]; copy_into_self", "push    [rbp+first_dir_created_per_command_line_arg]; first_dir_created_per_command_line_arg", "mov     r9, r8; x", "mov     r8, rdi; ancestors", "mov     rdi, rax; src_name_in", "call    copy_dir", "add     rsp, 10h", "mov     [rbp+delayed_ok], al", "jmp     loc_B2B7"], ["movzx~eax,[rbp+0]", "movzx~edx,al", "mov~r8,[rbp+0]", "mov~rdi,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "add~rsp,0", "mov~[rbp+0],al", "jmp~FOO"]], [3, 0, 85, 0, 1, 12, 0, 2, 20, 7, 0.08665607522506813, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "movzx   ecx, al; force", "mov     rdx, [rbp+dst_name]; dstname", "mov     rax, [rbp+src_name]", "mov     r8d, 0FFFFFFFFh; symlinkat_errno", "mov     esi, 0FFFFFF9Ch; dstdir", "mov     rdi, rax; srcname", "call    force_symlinkat", "mov     [rbp+err], eax", "cmp     [rbp+err], 0", "jle     loc_B2B7"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~ecx,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [3, 0, 85, 0, 1, 13, 3, 2, 22, 7, 0.0033453455780731328, ["mov     [rbp+replace], al", "and     [rbp+replace], 1", "movzx   ecx, [rbp+dereference]", "movzx   edx, [rbp+replace]; replace", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "mov     r8d, ecx; dereference", "mov     ecx, 0; verbose", "mov     rdi, rax; src_name", "call    create_hard_link", "xor     eax, 1", "test    al, al", "jz      loc_B2B7"], ["mov~[rbp+0],al", "and~[rbp+0],0", "movzx~ecx,[rbp+0]", "movzx~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,ecx", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [5, 0, 85, 2, 1, 19, 3, 2, 21, 7, 0.003101871585228814, ["mov     [rbp+copied_as_regular], 1", "mov     eax, [rbp+dst_mode_bits]", "and     eax, 1FFh", "mov     edi, eax", "lea     r9, [rbp+new_dst]; new_dst", "mov     r8d, [rbp+omitted_permissions]; omitted_permissions", "mov     rdx, [rbp+x]; x", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "sub     rsp, 8", "lea     rcx, [rbp+src_sb]", "push    rcx; src_sb", "mov     ecx, edi; dst_mode", "mov     rdi, rax; src_name", "call    copy_reg", "add     rsp, 10h", "xor     eax, 1", "test    al, al", "jz      loc_B2B7"], ["mov~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,0", "mov~edi,eax", "lea~r9,[rbp+0]", "mov~r8d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "lea~rcx,[rbp+0]", "push~rcx", "mov~ecx,edi", "mov~rdi,rax", "call~FOO", "add~rsp,0", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 86, 0, 1, 11, 2, 2, 23, 7, 0.003097996667570814, ["mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+src_mode]", "mov     ecx, eax", "mov     rax, [rbp+dst_name]", "mov     edx, 0", "mov     esi, ecx; mode", "mov     rdi, rax; path", "call    mknod", "test    eax, eax", "jz      loc_B2B7"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~ecx,eax", "mov~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 85, 0, 1, 11, 3, 2, 24, 7, 0.0012787228271399233, ["mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+src_mode]", "and     ah, 0EFh", "mov     edx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, edx; mode", "mov     rdi, rax; path", "call    _mkfifo", "test    eax, eax", "jz      loc_B2B7"], ["mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "and~ah,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 85, 0, 1, 11, 2, 2, 24, 7, 0.002817388047170664, ["mov     rdx, [rbp+src_sb.st_rdev]", "mov     eax, [rbp+omitted_permissions]", "not     eax", "and     eax, [rbp+src_mode]", "mov     ecx, eax", "mov     rax, [rbp+dst_name]", "mov     esi, ecx; mode", "mov     rdi, rax; path", "call    mknod", "test    eax, eax", "jz      loc_B2B7"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "not~eax", "and~eax,[rbp+0]", "mov~ecx,eax", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 282, 0, 0, 4, 1, 1, 19, 6, 0.006926415313674585, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_9ADC"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 0, 281, 0, 0, 4, 1, 1, 20, 6, 0.0017243383578098965, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_9CE5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 82, 0, 0, 5, 2, 1, 22, 6, 0.010165200656152723, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+14h]", "xor     eax, 1", "test    al, al", "jz      short loc_B351"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 209, 0, 0, 4, 0, 1, 16, 7, 0.0012593482388499244, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 3", "jz      loc_A329"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [2, 0, 90, 0, 1, 12, 2, 2, 22, 8, 0.005734878133839656, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "movzx   esi, al; process_local", "mov     rdx, [rbp+x]", "mov     rax, [rbp+dst_name]", "mov     rcx, rdx; x", "mov     edx, 0; recurse", "mov     rdi, rax; dst_name", "call    set_file_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_AAF1"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~esi,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 91, 0, 0, 4, 1, 1, 22, 9, 0.003242014440526472, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_AAF1"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 360, 0, 1, 9, 1, 2, 8, 3, 0.0003267847224913138, ["mov     rax, [rbp+x]", "mov     rax, [rax+48h]", "lea     rdx, [rbp+src_sb]; stats", "mov     rcx, [rbp+src_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    seen_file", "test    al, al", "jz      short loc_9327"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 80, 0, 0, 4, 1, 1, 24, 7, 0.007194430451686235, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jnz     short loc_B30B"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 0, 81, 0, 0, 4, 1, 1, 23, 6, 0.008686273750016146, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_B351"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 87, 0, 0, 4, 1, 1, 23, 8, 0.012050993916379277, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Ch]", "test    al, al", "jz      short loc_AB24"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 86, 0, 0, 2, 0, 1, 24, 8, 0.0012528900427532582, ["cmp     [rbp+parent], 0", "jz      short loc_AB24"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 79, 0, 0, 4, 1, 1, 25, 6, 0.00021312047118998722, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "test    al, al", "jz      short loc_B351"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 6, 0, 0, 4, 1, 1, 22, 4, 0.0018147531031632244, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_9B33"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 2, 23, 3, 0.00031968070678498083, ["lea     rdi, aBackingUpSMigh; \"backing up %s might destroy source;  %s\"...", "call    _gettext", "jmp     short loc_9B3F"], ["lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [0, 0, 207, 0, 0, 4, 1, 1, 11, 6, 0.1854567882099172, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      loc_A6AC"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 1, 2, 0, 1, 23, 3, 0.00031968070678498083, ["lea     rdi, aBackingUpSMigh_0; \"backing up %s might destroy source;  %s\"...", "call    _gettext"], ["lea~rdi,<TAG>", "call~FOO"]], [2, 0, 78, 0, 1, 12, 2, 2, 25, 6, 0.004385115149636403, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+25h]", "movzx   esi, al; process_local", "mov     rdx, [rbp+x]", "mov     rax, [rbp+dst_name]", "mov     rcx, rdx; x", "mov     edx, 0; recurse", "mov     rdi, rax; dst_name", "call    set_file_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_B351"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~esi,al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 206, 0, 0, 2, 0, 1, 12, 5, 0.02795430180441999, ["cmp     [rbp+rename_errno], 11h", "jnz     short loc_A376"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 358, 0, 1, 7, 0, 1, 7, 9, 0.006877978842949588, ["mov     rax, [rbp+x]", "mov     rax, [rax+48h]", "lea     rdx, [rbp+src_sb]; stats", "mov     rcx, [rbp+src_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    record_file"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 37, 0, 0, 4, 1, 1, 29, 3, 0.0017792330246315599, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+28h]", "test    al, al", "jz      short loc_B5E7"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 65, 0, 0, 2, 0, 1, 22, 5, 0.10082471164154429, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_B3AB"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 205, 0, 1, 7, 1, 2, 13, 7, 0.0029061882434998254, ["mov     rdx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rdx; new", "mov     rdi, rax; old", "call    _rename", "test    eax, eax", "jz      short loc_A36B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 11, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 64, 0, 0, 4, 1, 1, 23, 5, 0.003242014440526472, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "test    rax, rax", "jz      short loc_B3AB"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 203, 0, 1, 3, 0, 2, 14, 6, 0.0011398716110615982, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_A370"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 203, 0, 0, 1, 0, 0, 14, 6, 0.0011398716110615982, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 202, 0, 0, 1, 0, 0, 15, 5, 0.003913666834579765, ["mov     [rbp+rename_errno], eax"], ["mov~[rbp+0],eax"]], [1, 0, 357, 0, 1, 10, 2, 2, 5, 8, 0.07089161855310575, ["movzx   edx, [rbp+command_line_arg]", "mov     rax, [rbp+x]", "mov     esi, edx; command_line_arg", "mov     rdi, rax; x", "call    should_dereference", "mov     [rbp+dereference], al", "movzx   eax, [rbp+new_dst]", "xor     eax, 1", "test    al, al", "jz      loc_9E1B"], ["movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 201, 0, 0, 2, 0, 1, 13, 4, 0.029633432789553223, ["cmp     [rbp+rename_errno], 0", "jnz     loc_A45A"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 356, 0, 0, 2, 0, 1, 6, 7, 0.02029165213572545, ["cmp     [rbp+rename_errno], 11h", "jnz     short loc_9397"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 63, 0, 1, 7, 1, 2, 24, 5, 0.0016274654163599023, ["lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jnz     short loc_B3AB"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 139, 0, 0, 4, 1, 1, 18, 9, 0.1432169566396714, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Ch]", "test    al, al", "jz      loc_AD5B"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 166, 0, 0, 4, 1, 1, 17, 8, 0.1746619134343395, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     loc_AB7A"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 12, 0, 0, 4, 1, 1, 14, 6, 0.00900918355484946, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_A3CB"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 355, 0, 0, 4, 0, 1, 7, 6, 0.017902119579958926, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 2", "jz      loc_9516"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [2, 0, 95, 0, 0, 5, 0, 1, 19, 8, 0.09381821469627104, ["mov     [rbp+dest_is_symlink], 1", "mov     rax, [rbp+src_name]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      loc_ACB0"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [0, 0, 62, 0, 1, 7, 0, 1, 25, 5, 0.0, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "lea     rdx, [rbp+timespec]; stats", "mov     rcx, [rbp+dst_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    record_file"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [2, 0, 354, 0, 0, 4, 1, 1, 7, 10, 0.00439157334573307, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jz      short loc_93DF"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 61, 0, 0, 4, 1, 1, 23, 4, 0.09594231539246457, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jz      short loc_B3D8"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 353, 0, 0, 5, 2, 1, 8, 9, 0.002773795223518167, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+14h]", "xor     eax, 1", "test    al, al", "jnz     short loc_9428"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 11, 0, 3, 11, 0, 3, 15, 6, 0.0, ["lea     rdi, aRenamed; \"renamed \"", "call    _gettext", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rdx, [rbp+dst_backup]; backup_dst_name", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rcx; dst", "mov     rdi, rax; src", "call    emit_verbose"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [2, 0, 60, 0, 0, 4, 1, 1, 24, 3, 0.0020566125469833763, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_B3D8"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 352, 0, 0, 4, 1, 1, 9, 9, 0.0002712442360599837, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_9428"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 94, 0, 2, 10, 1, 3, 20, 9, 0.009196471241652782, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; file", "call    dir_name", "mov     [rbp+dst_parent], rax", "mov     rax, [rbp+dst_parent]", "mov     rsi, rax; s2", "lea     rdi, filename; s1", "call    _strcmp", "test    eax, eax", "jz      short loc_AC33"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "lea~rdi,<TAG>", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 10, 0, 0, 4, 1, 1, 15, 5, 0.007136306686816239, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jz      short loc_A3FD"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 351, 0, 0, 4, 1, 1, 10, 9, 7.749835315999534e-05, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_9428"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 58, 0, 0, 2, 0, 1, 24, 3, 0.09134117358339469, ["cmp     [rbp+copied_as_regular], 0", "jz      short loc_B3ED"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 350, 0, 0, 4, 1, 1, 8, 9, 0.00354877875511812, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jnz     short loc_9428"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 93, 0, 1, 6, 1, 2, 21, 9, 0.004624068405213056, ["lea     rax, [rbp+dot_sb]", "mov     rsi, rax; stat_buf", "lea     rdi, filename; filename", "call    stat_0", "test    eax, eax", "jnz     short loc_AC33"], ["lea~rax,[rbp+0]", "mov~rsi,rax", "lea~rdi,<TAG>", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 88, 0, 0, 2, 0, 1, 21, 8, 0.004288242208186409, ["mov     eax, 1", "jmp     short loc_AC3F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 92, 0, 1, 7, 1, 2, 22, 9, 0.0034874258921997908, ["lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_parent]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "jnz     short loc_AC33"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 90, 0, 0, 4, 0, 1, 24, 9, 6.458196096666279e-06, ["mov     rdx, [rbp+dot_sb.st_dev]", "mov     rax, [rbp+timespec.tv_sec]", "cmp     rdx, rax", "jnz     short loc_AC3A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [2, 0, 9, 0, 1, 7, 0, 1, 16, 5, 0.0, ["mov     rdx, [rbp+x]", "mov     rax, [rbp+dst_name]", "mov     rcx, rdx; x", "mov     edx, 1; recurse", "mov     esi, 0; process_local", "mov     rdi, rax; dst_name", "call    set_file_security_ctx"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO"]], [0, 0, 56, 0, 0, 4, 1, 1, 25, 6, 0.08796708903269139, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Fh]", "test    al, al", "jz      loc_B4E2"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 349, 0, 0, 4, 1, 1, 9, 9, 0.0010074785910799396, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Ch]", "test    al, al", "jnz     short loc_9428"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 16, 4, 0.005211764250009687, ["cmp     [rbp+rename_succeeded], 0", "jz      short loc_A411"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 348, 0, 0, 4, 1, 1, 10, 9, 0.0007749835315999535, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jnz     short loc_9428"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 0, 17, 4, 0.0, ["mov     rax, [rbp+rename_succeeded]", "mov     byte ptr [rax], 1"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 347, 0, 0, 4, 1, 1, 11, 9, 0.0005295720799266349, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_9428"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 17, 3, 0.003235556244429806, ["cmp     [rbp+command_line_arg], 0", "jz      short loc_A450"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 91, 0, 0, 4, 0, 1, 23, 9, 0.002337866986993193, ["mov     rdx, [rbp+dot_sb.st_ino]", "mov     rax, [rbp+timespec.tv_nsec]", "cmp     rdx, rax", "jnz     short loc_AC3A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 346, 0, 0, 4, 1, 1, 12, 9, 0.0002712442360599837, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jz      short loc_942F"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 13, 3, 0.0008896165123157799, ["cmp     [rbp+rename_succeeded], 0", "jz      short loc_9757"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 0, 14, 3, 0.0, ["mov     rax, [rbp+rename_succeeded]", "mov     byte ptr [rax], 1"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [1, 0, 5, 0, 0, 5, 2, 1, 18, 3, 0.0010462277676599372, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+31h]", "xor     eax, 1", "test    al, al", "jz      short loc_A450"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 344, 0, 0, 2, 0, 1, 9, 8, 0.021079552059518735, ["mov     eax, 1", "jmp     short loc_9434"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 344, 0, 0, 1, 0, 0, 13, 8, 0.0011108097286266, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 40, 0, 0, 2, 1, 0, 31, 5, 0.0002486405497216517, ["and     [rbp+src_mode], 0FFFFF1FFh", "nop"], ["and~[rbp+0],0", "nop"]], [1, 0, 88, 0, 0, 1, 0, 0, 24, 8, 0.0008524818847599489, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 5, 0, 1, 8, 1, 2, 32, 3, 0.0018405858875498895, ["mov     rax, [rbp+x]", "mov     edx, [rax+10h]; mode", "mov     rax, [rbp+dst_name]", "mov     esi, 0FFFFFFFFh; desc", "mov     rdi, rax; name", "call    set_acl", "test    eax, eax", "jz      loc_B8AE"], ["mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 343, 0, 0, 4, 1, 1, 10, 7, 0.026342981878301752, ["mov     [rbp+use_lstat], al", "and     [rbp+use_lstat], 1", "cmp     [rbp+use_lstat], 0", "jz      short loc_9451"], ["mov~[rbp+0],al", "and~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 1, 7, 0, 1, 19, 3, 0.0, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "lea     rdx, [rbp+src_sb]; stats", "mov     rcx, [rbp+dst_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    record_file"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 1, 341, 0, 0, 2, 0, 1, 11, 6, 0.013981994549282494, ["mov     eax, 100h", "jmp     short loc_9456"], ["mov~eax,<STR>", "jmp~FOO"]], [1, 0, 341, 0, 0, 1, 0, 0, 11, 6, 0.013981994549282494, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 190, 0, 0, 2, 0, 1, 14, 3, 0.019920305860167138, ["cmp     [rbp+rename_errno], 16h", "jnz     short loc_A4D8"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 15, 0, 1, 14, 2, 2, 17, 3, 0.0012787228271399233, ["movzx   ecx, [rbp+dereference]", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "movzx   edx, al", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+earlier_file]", "mov     r8d, ecx; dereference", "mov     ecx, edx; verbose", "mov     edx, 1; replace", "mov     rdi, rax; src_name", "call    create_hard_link", "xor     eax, 1", "test    al, al", "jnz     loc_B8BA"], ["movzx~ecx,[rbp+0]", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "movzx~edx,al", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,ecx", "mov~ecx,edx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [2, 0, 87, 0, 1, 9, 3, 2, 22, 7, 0.005082600328076362, ["mov     [rbp+in_current_dir], al", "and     [rbp+in_current_dir], 1", "mov     rax, [rbp+dst_parent]", "mov     rdi, rax; ptr", "call    free", "movzx   eax, [rbp+in_current_dir]", "xor     eax, 1", "test    al, al", "jz      short loc_ACB0"], ["mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [9, 0, 259, 8, 3, 33, 0, 4, 22, 11, 0.002773795223518167, ["mov     rax, [rbp+tmp_backup]", "mov     [rbp+__old], rax", "mov     rax, [rbp+__old]", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+__len], rax", "mov     rax, [rbp+__len]", "lea     rdx, [rax+0Fh]", "mov     eax, 10h", "sub     rax, 1", "add     rax, rdx", "mov     ebx, 10h", "mov     edx, 0", "div     rbx", "imul    rax, 10h", "sub     rsp, rax", "mov     rax, rsp", "add     rax, 0Fh", "shr     rax, 4", "shl     rax, 4", "mov     [rbp+__new], rax", "mov     rdx, [rbp+__len]; n", "mov     rcx, [rbp+__old]", "mov     rax, [rbp+__new]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     [rbp+dst_backup], rax", "mov     rax, [rbp+tmp_backup]", "mov     rdi, rax; ptr", "call    free", "jmp     short loc_9CD9"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,0", "add~rax,rdx", "mov~ebx,0", "mov~edx,0", "div~,rbx", "imul~rax,,0", "sub~rsp,rax", "mov~rax,rsp", "add~rax,0", "shr~rax,0", "shl~rax,0", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 53, 0, 1, 7, 1, 1, 27, 5, 0.0026704640859715064, ["lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; timespec", "mov     rdi, rax; file", "call    utimens", "test    eax, eax", "setnz   al"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al"]], [1, 0, 340, 0, 1, 9, 1, 2, 12, 5, 0.03205848542385141, ["mov     [rbp+fstatat_flags], eax", "mov     ecx, [rbp+fstatat_flags]; flag", "lea     rdx, [rbp+dst_sb]; stat_buf", "mov     rax, [rbp+dst_name]", "mov     rsi, rax; filename", "mov     edi, 0FFFFFF9Ch; fildes", "call    fstatat", "test    eax, eax", "jnz     short loc_949A"], ["mov~[rbp+0],eax", "mov~ecx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 52, 0, 0, 2, 1, 1, 28, 4, 0.004339907776959739, ["test    al, al", "jz      short loc_B4E2"], ["test~al,al", "jz~FOO"]], [1, 0, 260, 0, 1, 4, 0, 2, 22, 3, 0.003493884088296457, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jz      short loc_9CD9"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 334, 0, 0, 4, 0, 1, 13, 6, 0.03206494361994808, ["movzx   eax, [rbp+use_lstat]", "mov     [rbp+have_dst_lstat], al", "mov     [rbp+rename_errno], 11h", "jmp     short loc_9516"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 338, 0, 1, 4, 0, 2, 13, 4, 0.0015564252592965733, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 28h ; '('", "jnz     short loc_94B5"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 337, 0, 0, 4, 1, 1, 14, 4, 0.0021376629079965384, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jnz     short loc_9516"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 336, 0, 1, 4, 0, 2, 14, 3, 0.0009881040027899407, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jz      short loc_950F"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 51, 0, 4, 20, 1, 5, 29, 3, 0.0017695457304865605, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     r12, rax", "lea     rdi, aPreservingTime; \"preserving times for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+24h]", "test    al, al", "jz      short loc_B4E2"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 1, 188, 0, 0, 2, 0, 1, 15, 3, 0.01894834734761886, ["cmp     [rbp+rename_errno], 12h", "jz      loc_A56C"], ["cmp~[rbp+0],<STR>", "jz~FOO"]], [1, 0, 258, 0, 0, 2, 0, 1, 23, 10, 0.008253574611539504, ["mov     [rbp+new_dst], 1", "jmp     loc_9E1B"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 49, 0, 0, 4, 2, 1, 26, 5, 0.07815063096575864, ["movzx   eax, [rbp+dest_is_symlink]", "xor     eax, 1", "test    al, al", "jz      loc_B58E"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 269, 0, 0, 4, 1, 1, 18, 7, 0.06511476214463775, ["mov     eax, [rbp+dst_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_9E1B"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 48, 0, 0, 4, 1, 1, 27, 5, 0.013639710156159182, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "test    al, al", "jz      loc_B58E"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 268, 0, 0, 5, 2, 1, 19, 6, 0.005970602291367975, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      loc_9E1B"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 334, 0, 0, 1, 0, 0, 15, 6, 0.0021376629079965384, ["mov     [rbp+new_dst], 1"], ["mov~[rbp+0],0"]], [0, 0, 47, 0, 0, 3, 1, 1, 28, 4, 0.011989641053460948, ["movzx   eax, [rbp+new_dst]", "test    al, al", "jnz     short loc_B532"], ["movzx~eax,[rbp+0]", "test~al,al", "jnz~FOO"]], [1, 0, 333, 0, 0, 2, 0, 1, 8, 5, 0.06250242182353626, ["cmp     [rbp+rename_errno], 11h", "jnz     loc_9E1B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 267, 0, 0, 4, 1, 1, 20, 5, 0.005453946603634673, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+15h]", "test    al, al", "jnz     short loc_9D65"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [0, 0, 46, 0, 0, 4, 0, 1, 29, 4, 0.0019568334172898826, ["mov     edx, [rbp+src_sb.st_uid]", "mov     eax, [rbp+dst_sb.st_uid]", "cmp     edx, eax", "jnz     short loc_B532"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jnz~FOO"]], [0, 0, 266, 0, 0, 4, 1, 1, 21, 6, 0.0026446313015848415, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+22h]", "test    al, al", "jz      short loc_9D3C"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 45, 0, 0, 4, 0, 1, 30, 4, 0.00047790651115330463, ["mov     edx, [rbp+src_sb.st_gid]", "mov     eax, [rbp+dst_sb.st_gid]", "cmp     edx, eax", "jz      short loc_B58E"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "cmp~edx,eax", "jz~FOO"]], [2, 0, 332, 0, 0, 5, 0, 1, 9, 4, 0.02642048023146175, ["mov     [rbp+return_now], 0", "mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 2", "jz      loc_95E7"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 265, 0, 0, 3, 0, 1, 22, 5, 5.166556877333023e-05, ["mov     rax, [rbp+dst_sb.st_nlink]", "cmp     rax, 1", "ja      short loc_9D65"], ["mov~rax,[rbp+0]", "cmp~rax,0", "ja~FOO"]], [1, 0, 264, 0, 0, 4, 0, 1, 22, 6, 0.004737086836904715, ["mov     rax, [rbp+x]", "mov     eax, [rax+4]", "cmp     eax, 2", "jnz     loc_9E1B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [2, 0, 263, 0, 0, 4, 1, 1, 23, 5, 5.166556877333023e-05, ["mov     eax, [rbp+src_sb.st_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jz      loc_9E1B"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 126, 0, 0, 4, 1, 1, 19, 9, 0.04801022978261712, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+17h]", "test    al, al", "jz      short loc_ADDD"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 44, 0, 1, 14, 0, 2, 29, 3, 0.006990997274641247, ["movzx   eax, [rbp+new_dst]", "movzx   ecx, al", "lea     rdi, [rbp+dst_sb]", "lea     rdx, [rbp+src_sb]", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+x]", "mov     r9, rdi; dst_sb", "mov     r8d, ecx; new_dst", "mov     rcx, rdx; src_sb", "mov     edx, 0FFFFFFFFh; dest_desc", "mov     rdi, rax; x", "call    set_owner", "cmp     eax, 0FFFFFFFFh", "jz      short loc_B579"], ["movzx~eax,[rbp+0]", "movzx~ecx,al", "lea~rdi,[rbp+0]", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,rdi", "mov~r8d,ecx", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "cmp~eax,0", "jz~FOO"]], [0, 0, 262, 0, 1, 5, 1, 2, 21, 4, 0.0035003422843931232, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; name", "call    _unlink", "test    eax, eax", "jz      short loc_9DD2"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 89, 0, 0, 4, 1, 1, 20, 9, 0.0057477945260329885, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+16h]", "test    al, al", "jnz     short loc_AD88"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 331, 0, 1, 13, 2, 2, 10, 3, 0.0005166556877333024, ["lea     r8, [rbp+return_now]", "mov     rdi, [rbp+x]", "lea     rcx, [rbp+dst_sb]; dst_sb", "mov     rdx, [rbp+dst_name]; dst_name", "lea     rsi, [rbp+src_sb]; src_sb", "mov     rax, [rbp+src_name]", "mov     r9, r8; return_now", "mov     r8, rdi; x", "mov     rdi, rax; src_name", "call    same_file_ok", "xor     eax, 1", "test    al, al", "jz      short loc_95E7"], ["lea~r8,[rbp+0]", "mov~rdi,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 186, 0, 0, 4, 1, 1, 16, 6, 0.018115240051148913, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_A594"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 261, 0, 1, 4, 0, 2, 22, 3, 0.0008040454140349518, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jz      short loc_9DD2"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 88, 0, 0, 4, 0, 1, 21, 9, 0.001156017101303264, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 3", "jnz     short loc_AD8F"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 86, 0, 0, 2, 0, 1, 21, 8, 0.0031322251068831453, ["mov     eax, 1", "jmp     short loc_AD94"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 86, 0, 0, 1, 0, 0, 22, 8, 0.00027770243215665, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 184, 0, 1, 6, 1, 2, 17, 5, 0.008637837279291148, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; path", "call    _rmdir", "test    eax, eax", "setnz   al", "jmp     short loc_A5A8"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [0, 0, 39, 0, 0, 4, 1, 1, 27, 4, 0.0633452164141512, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+27h]", "test    al, al", "jz      short loc_B5E7"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 184, 0, 1, 5, 1, 1, 17, 5, 0.008637837279291148, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; name", "call    _unlink", "test    eax, eax", "setnz   al"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al"]], [0, 0, 183, 0, 0, 2, 1, 1, 18, 4, 0.018618979346688883, ["test    al, al", "jz      loc_A64B"], ["test~al,al", "jz~FOO"]], [1, 0, 182, 0, 1, 4, 0, 2, 19, 3, 0.0011172679247232662, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jz      loc_A64B"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 38, 0, 1, 11, 2, 2, 28, 4, 0.0035261750687797886, ["mov     rcx, [rbp+x]", "mov     rdx, [rbp+dst_name]; dst_path", "mov     rax, [rbp+src_name]", "mov     r8, rcx; x", "mov     ecx, 0FFFFFFFFh; dst_fd", "mov     esi, 0FFFFFFFFh; src_fd", "mov     rdi, rax; src_path", "call    copy_attr", "xor     eax, 1", "test    al, al", "jz      short loc_B5E7"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rcx", "mov~ecx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 259, 0, 0, 5, 1, 1, 22, 10, 0.004762919621291381, ["mov     [rbp+new_dst], 1", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_9E1B"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 119, 0, 0, 4, 1, 1, 20, 8, 0.04077705015435089, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 8000h", "jz      short loc_AE10"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 35, 0, 0, 2, 0, 1, 28, 3, 0.05696774776869325, ["cmp     [rbp+dest_is_symlink], 0", "jz      short loc_B5FC"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 329, 0, 0, 4, 1, 1, 10, 6, 0.029429999612508233, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Dh]", "test    al, al", "jz      loc_9710"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 118, 0, 0, 4, 1, 1, 21, 9, 0.03699254724170445, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+14h]", "test    al, al", "jz      short loc_AE71"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 328, 0, 0, 4, 1, 1, 11, 6, 0.004688650366179718, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_9710"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 117, 0, 0, 4, 1, 1, 22, 8, 0.0003183890675656476, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_AE71"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 258, 0, 3, 11, 0, 3, 23, 10, 0.0, ["mov     rax, [rbp+dst_name]", "mov     rsi, rax; arg", "mov     edi, 4; s", "call    quotearg_style", "mov     rbx, rax", "lea     rdi, aRemovedS; \"removed %s\\n\"", "call    _gettext", "mov     rsi, rbx", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf"], ["mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 327, 0, 0, 4, 1, 1, 12, 7, 0.0044496971106030665, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Fh]", "test    al, al", "jz      short loc_964B"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 257, 0, 0, 2, 0, 1, 6, 9, 0.17659291406724273, ["cmp     [rbp+command_line_arg], 0", "jz      loc_9F71"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 33, 0, 1, 9, 1, 2, 29, 5, 0.05347386368039679, ["lea     rdx, [rbp+src_sb]; src_sb", "mov     rax, [rbp+dst_name]", "mov     esi, 0FFFFFFFFh; dest_desc", "mov     rdi, rax; dst_name", "call    set_author", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Eh]", "test    al, al", "jnz     short loc_B635"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [1, 0, 326, 0, 0, 5, 2, 1, 13, 7, 0.0007749835315999535, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jnz     short loc_9644"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 32, 0, 0, 4, 1, 1, 30, 5, 0.04293408765063742, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_B683"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 256, 0, 0, 4, 1, 1, 7, 9, 0.007743377119902869, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "test    rax, rax", "jz      loc_9F71"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 325, 0, 0, 4, 0, 1, 14, 7, 6.458196096666279e-06, ["mov     rdx, [rbp+dst_sb.st_dev]", "mov     rax, [rbp+src_sb.st_dev]", "cmp     rdx, rax", "jz      short loc_964B"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jz~FOO"]], [1, 0, 323, 0, 0, 2, 0, 1, 14, 6, 0.0031289960088348124, ["mov     eax, 1", "jmp     short loc_9650"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 323, 0, 0, 1, 0, 0, 13, 6, 0.0060545588406246366, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 255, 0, 0, 5, 2, 1, 8, 9, 0.007104015706332907, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      loc_9F71"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 180, 0, 0, 4, 1, 1, 19, 9, 0.017747122873638936, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_A6A5"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 0, 254, 0, 0, 4, 1, 1, 9, 8, 0.006461425194714612, ["mov     rax, [rbp+x]", "mov     eax, [rax]", "test    eax, eax", "jnz     loc_9F71"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 179, 0, 0, 4, 1, 1, 20, 9, 0.0010526859637566034, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_A6A5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 322, 0, 1, 9, 1, 2, 14, 5, 0.012942224977719224, ["mov     [rbp+options], eax", "mov     ecx, [rbp+options]; options", "lea     rdx, [rbp+src_sb]; src_stat", "lea     rsi, [rbp+dst_sb]; dst_stat", "mov     rax, [rbp+dst_name]", "mov     rdi, rax; dst_name", "call    utimecmp", "test    eax, eax", "js      loc_9710"], ["mov~[rbp+0],eax", "mov~ecx,[rbp+0]", "lea~rdx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "js~FOO"]], [1, 1, 114, 0, 0, 4, 1, 1, 22, 8, 0.035305020601645545, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 1000h", "jnz     loc_AF2A"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jnz~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 15, 4, 0.002860980870823162, ["cmp     [rbp+rename_succeeded], 0", "jz      short loc_9695"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 27, 0, 0, 4, 1, 1, 31, 4, 0.04130662223427752, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Bh]", "test    al, al", "jz      short loc_B6C2"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 17, 0, 0, 2, 0, 0, 16, 4, 0.0, ["mov     rax, [rbp+rename_succeeded]", "mov     byte ptr [rax], 1"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 251, 0, 1, 7, 1, 2, 11, 7, 0.0014595523178465792, ["lea     rdx, [rbp+timespec]", "mov     rax, [rbp+dst_name]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jnz     short loc_9EB0"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 178, 0, 3, 11, 0, 3, 21, 9, 0.0, ["lea     rdi, aCopied; \"copied \"", "call    _gettext", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rdx, [rbp+dst_backup]; backup_dst_name", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rcx; dst", "mov     rdi, rax; src", "call    emit_verbose"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 177, 0, 0, 1, 0, 0, 20, 8, 0.018037741697988916, ["mov     [rbp+new_dst], 1"], ["mov~[rbp+0],0"]], [0, 0, 249, 0, 0, 3, 0, 1, 12, 6, 0.0008040454140349518, ["lea     rax, [rbp+timespec]", "mov     [rbp+dst_lstat_sb], rax", "jmp     short loc_9EB7"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 249, 0, 0, 1, 0, 0, 12, 6, 0.0008040454140349518, ["mov     [rbp+lstat_ok], 0"], ["mov~[rbp+0],0"]], [0, 0, 176, 0, 0, 4, 1, 1, 12, 7, 0.17598584363415612, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Bh]", "test    al, al", "jz      short loc_A6CC"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 248, 0, 0, 2, 0, 1, 12, 5, 0.010207178930781054, ["cmp     [rbp+lstat_ok], 0", "jz      loc_9F71"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 240, 0, 0, 2, 0, 1, 8, 7, 0.18935108045620697, ["cmp     [rbp+rename_errno], 0", "jnz     short loc_9FDD"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 244, 0, 0, 4, 1, 1, 7, 8, 0.18625114632980716, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+2Eh]", "test    al, al", "jz      short loc_9FC4"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 243, 0, 0, 5, 2, 1, 8, 8, 0.0015628834553932395, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "xor     eax, 1", "test    al, al", "jz      short loc_9FC4"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 242, 0, 0, 4, 1, 1, 9, 8, 0.000787899923793286, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_9FC4"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 241, 0, 1, 6, 0, 1, 10, 8, 0.0, ["mov     rdx, [rbp+dst_backup]; backup_dst_name", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+src_name]", "mov     rsi, rcx; dst", "mov     rdi, rax; src", "call    emit_verbose"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [1, 0, 16, 0, 1, 9, 0, 2, 16, 3, 0.002228077653349866, ["mov     rdx, [rbp+src_sb.st_dev]; dev", "mov     rcx, [rbp+src_sb.st_ino]", "mov     rax, [rbp+dst_name]", "mov     rsi, rcx; ino", "mov     rdi, rax; name", "call    remember_copied", "mov     [rbp+earlier_file], rax", "cmp     [rbp+earlier_file], 0", "jz      short loc_9706"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 1, 174, 0, 0, 4, 1, 1, 13, 6, 0.08748272432544142, ["mov     rax, [rbp+x]", "mov     eax, [rax+10h]", "and     eax, 0FFFh", "jmp     short loc_A6D7"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,<STR>", "jmp~FOO"]], [0, 0, 24, 0, 0, 4, 1, 1, 32, 5, 0.03603673421939784, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+20h]", "test    al, al", "jz      short loc_B749"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [0, 1, 174, 0, 0, 2, 1, 0, 13, 6, 0.08748272432544142, ["mov     eax, [rbp+src_mode]", "and     eax, 0FFFh"], ["mov~eax,[rbp+0]", "and~eax,<STR>"]], [2, 0, 247, 0, 0, 5, 1, 1, 13, 4, 0.0016694436909882333, ["mov     rax, [rbp+dst_lstat_sb]", "mov     eax, [rax+18h]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     loc_9F71"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 23, 0, 0, 3, 1, 1, 33, 5, 0.012658064349465908, ["movzx   eax, [rbp+new_dst]", "test    al, al", "jz      short loc_B749"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [2, 0, 10, 0, 0, 4, 1, 1, 34, 5, 0.010888518618979347, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_B700"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 173, 0, 0, 6, 2, 1, 14, 5, 0.1761214657521861, ["mov     [rbp+dst_mode_bits], eax", "mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Dh]", "xor     eax, 1", "test    al, al", "jz      short loc_A70F"], ["mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 171, 0, 0, 4, 1, 1, 15, 5, 0.002195786672866535, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_A708"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 246, 0, 1, 9, 1, 2, 14, 3, 0.0009332093359682773, ["mov     rax, [rbp+x]", "mov     rax, [rax+40h]", "mov     rdx, [rbp+dst_lstat_sb]; stats", "mov     rcx, [rbp+dst_name]", "mov     rsi, rcx; file", "mov     rdi, rax; ht", "call    seen_file", "test    al, al", "jz      short loc_9F71"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 35, 4, 0.0055120703685046695, ["mov     eax, 1FFh", "jmp     short loc_B70C"], ["mov~eax,0", "jmp~FOO"]], [0, 1, 169, 0, 0, 2, 0, 1, 16, 4, 0.0005457175701683006, ["mov     eax, 12h", "jmp     short loc_A714"], ["mov~eax,<STR>", "jmp~FOO"]], [1, 0, 169, 0, 0, 2, 0, 1, 16, 4, 0.0005457175701683006, ["mov     eax, 0", "jmp     short loc_A714"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 169, 0, 0, 1, 0, 0, 15, 4, 0.1728471603311763, ["mov     eax, 3Fh ; '?'"], ["mov~eax,0"]], [0, 0, 315, 0, 0, 4, 1, 1, 11, 5, 0.03978894615156094, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+18h]", "test    al, al", "jz      short loc_9761"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 110, 0, 0, 4, 1, 1, 23, 8, 0.030592474909908164, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 6000h", "jz      short loc_AF60"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 309, 0, 1, 8, 1, 2, 12, 4, 0.02027227754743545, ["lea     rdx, [rbp+dst_sb]; dst_sb", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+x]", "mov     rsi, rcx; dst_name", "mov     rdi, rax; x", "call    abandon_move", "test    al, al", "jz      short loc_97C2"], ["lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 1, 109, 0, 0, 4, 1, 1, 24, 8, 0.02718254737086837, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 2000h", "jz      short loc_AF60"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jz~FOO"]], [2, 0, 168, 0, 1, 15, 3, 2, 16, 3, 0.17608917477170277, ["and     eax, [rbp+dst_mode_bits]", "mov     [rbp+omitted_permissions], eax", "mov     [rbp+delayed_ok], 1", "movzx   eax, [rbp+new_dst]", "movzx   ecx, al; new_dst", "mov     rdi, [rbp+x]", "mov     edx, [rbp+src_mode]; mode", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "mov     r8, rdi; x", "mov     rdi, rax; src_name", "call    set_process_security_ctx", "xor     eax, 1", "test    al, al", "jz      short loc_A768"], ["and~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~[rbp+0],0", "movzx~eax,[rbp+0]", "movzx~ecx,al", "mov~rdi,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 108, 0, 0, 4, 1, 1, 25, 8, 0.026142777799305097, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 0C000h", "jnz     short loc_AFD9"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [0, 0, 305, 0, 0, 3, 1, 1, 13, 3, 0.047312744604177163, ["movzx   eax, [rbp+return_now]", "test    al, al", "jz      short loc_97D7"], ["movzx~eax,[rbp+0]", "test~al,al", "jz~FOO"]], [2, 0, 310, 0, 0, 4, 1, 1, 12, 4, 0.020698518489815423, ["mov     eax, [rbp+src_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_97C2"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 309, 0, 0, 4, 0, 1, 13, 3, 0.0013223156507924207, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 2", "jz      short loc_97B8"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 308, 0, 0, 4, 0, 1, 14, 4, 0.0023959907518631895, ["mov     rax, [rbp+x]", "mov     eax, [rax+8]", "cmp     eax, 3", "jnz     short loc_97C2"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 307, 0, 1, 9, 2, 2, 15, 3, 1.61454902416657e-05, ["lea     rdx, [rbp+dst_sb]; dst_sb", "mov     rcx, [rbp+dst_name]", "mov     rax, [rbp+x]", "mov     rsi, rcx; dst_name", "mov     rdi, rax; x", "call    overwrite_ok", "xor     eax, 1", "test    al, al", "jz      short loc_97C2"], ["lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]]], "func_feature": [247, 237, 590, 1, 395, 648, 2, 2390, 0.01483, 43, 19], "succs": [[24, 17], [0, 26], [10, 31], [2, 34], [13, 7], [4, 6], [4, 167], [13], [364], [8, 358], [34, 31], [40, 28], [11, 77], [168, 21], [13, 15], [16, 13], [13, 5], [97], [289, 293], [18, 20], [224, 18], [168, 37], [32, 33], [65, 22], [97], [83, 29], [38, 30], [1, 26], [62], [57, 36], [35, 38], [136], [66, 87], [32, 198], [107, 61], [97], [42, 39], [168, 100], [48, 97], [41], [49, 122], [57], [41], [168], [43, 45], [43, 164], [168], [166, 46], [97, 54], [122, 59], [62], [152, 50], [62], [52, 221], [58, 93], [62], [232, 55], [83, 79], [80, 85], [122, 84], [106, 107], [107, 60], [81, 82], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [83], [85, 93], [88, 90], [81], [89, 86], [122, 91], [97, 93], [99], [67, 109], [90], [92, 94], [130, 101], [122, 111], [94, 95], [97], [96], [96], [99], [226, 103], [97], [195, 102], [136], [120, 116], [104, 105], [112, 51], [119], [119], [136], [113, 129], [3, 107], [123, 134], [114, 115], [122, 110], [135, 63], [129, 117], [122], [114], [130], [121, 145], [125], [124, 118], [128, 130], [129, 145], [75, 131], [68, 134], [125], [133, 173], [327], [126, 279], [130], [169, 201], [136], [170, 132], [170], [136], [178, 174], [181, 191], [234, 171], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [136], [201, 172], [176, 203], [], [201, 175], [177, 195], [178], [201, 146], [179, 203], [185, 195], [180, 221], [194, 203], [192, 196], [184, 151], [47], [380, 182], [186, 151], [187, 190], [151], [137], [292], [290, 188], [137], [193, 226], [221], [64, 215], [203, 76], [197, 239], [221], [239, 199], [216, 217], [202, 230], [212, 302], [200, 302], [218, 230], [232, 214], [203, 205], [203], [203, 70], [203, 71], [72, 203], [210, 203], [73, 203], [74, 203], [19, 213], [19, 302], [232, 220], [64, 226], [53, 221], [216, 221], [138, 230], [228, 223], [232, 219], [205, 222], [204, 205], [232, 228], [225, 227], [147], [363, 229], [147], [56, 232], [240, 233], [239], [162, 334], [250, 235], [236, 237], [], [242, 250], [238], [238], [240], [241, 341], [245, 286], [249, 246], [248, 250], [316, 247], [243, 23], [256, 252], [249, 307], [206, 255], [250], [259, 251], [258, 253], [277, 254], [256], [258, 158], [257, 277], [260, 261], [264, 267], [259, 277], [265, 159], [266, 277], [261, 262], [288], [272, 261], [280, 261], [267], [189, 301], [268, 277], [269, 271], [277, 270], [271], [273, 277], [153, 276], [280, 263], [277, 278], [275, 142], [142], [153, 283], [282], [282], [327], [288], [168, 165], [284, 285], [153], [291], [291], [154, 299], [141, 78], [69, 206], [300], [292], [294, 295], [298, 301], [300, 148], [307], [296, 297], [297, 307], [305, 139], [160, 301], [321, 155], [341], [327, 303], [304, 341], [306, 327], [308, 341], [307], [309, 317], [312, 341], [318, 310], [317, 311], [313, 314], [317, 327], [320, 335], [314, 318], [315, 341], [341, 318], [333, 319], [161, 127], [322, 332], [323, 324], [140, 335], [328, 326], [332, 149], [324, 325], [207], [207], [329], [331, 334], [329], [330, 350], [156, 350], [334, 231], [339, 341], [336, 208], [163, 342], [384, 337], [338, 354], [384, 340], [208, 354], [341], [348, 343], [345, 366], [344, 44], [346, 347], [356, 44], [349, 366], [347, 348], [353], [353], [366, 351], [352, 360], [9, 366], [360, 359], [384, 355], [209, 385], [370, 357], [281, 372], [370], [361, 362], [360], [363], [364], [364], [371, 373], [366, 374], [98, 27], [365, 367], [368, 365], [369, 365], [365], [141, 287], [377], [14, 375], [377], [379, 366], [376, 14], [380, 183], [378, 383], [381, 382], [366, 150], [47], [388], [388], [388], [386, 391], [387, 211], [274, 390], [211, 389], [244, 157], [211, 12], [144, 108], [392, 390], [393, 143], [394, 390], [390, 143]], "fname": "copy_internal", "n_num": 395}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 1, 5, 0, 1, 0, 0, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B86h; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aCoNull; \"co != NULL\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [2, 0, 18, 1, 0, 6, 0, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+co], rdi", "cmp     [rbp+co], 0", "jnz     short loc_BA28"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 6, 0, 0, 5, 2, 1, 4, 2, 0.1568627450980392, ["mov     rax, [rbp+co]", "movzx   eax, byte ptr [rax+17h]", "xor     eax, 1", "test    al, al", "jnz     short loc_BB14"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 10, 0, 0, 4, 1, 1, 3, 3, 0.16339869281045752, ["mov     rax, [rbp+co]", "mov     eax, [rax+38h]", "test    eax, eax", "jz      short loc_BAD7"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "test~eax,eax", "jz~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 4, 3, 0.0392156862745098, ["mov     rax, [rbp+co]", "mov     eax, [rax+38h]", "cmp     eax, 1", "jz      short loc_BAD7"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 8, 0, 0, 4, 0, 1, 5, 3, 0.022875816993464054, ["mov     rax, [rbp+co]", "mov     eax, [rax+38h]", "cmp     eax, 2", "jz      short loc_BAD7"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 0, 3, 0, 0, 6, 0, 0.0, ["mov     eax, 1", "leave", "retn"], ["mov~eax,0", "leave", "retn"]], [1, 0, 3, 0, 0, 4, 0, 1, 5, 1, 0.09803921568627451, ["mov     rax, [rbp+co]", "mov     eax, [rax+38h]", "cmp     eax, 2", "jnz     short loc_BB4B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jnz~FOO"]], [1, 0, 2, 0, 0, 4, 0, 1, 6, 1, 0.03594771241830066, ["mov     rax, [rbp+co]", "mov     eax, [rax+0Ch]", "cmp     eax, 2", "jz      short loc_BB4B"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 7, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B8Dh; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aCoReflinkModeR; \"! (co->reflink_mode == REFLINK_ALWAYS &\"...", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 13, 0, 0, 4, 0, 1, 3, 4, 0.0196078431372549, ["mov     rax, [rbp+co]", "mov     eax, [rax+0Ch]", "cmp     eax, 2", "jz      short loc_BA95"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 14, 0, 0, 4, 0, 1, 2, 4, 0.09150326797385622, ["mov     rax, [rbp+co]", "mov     eax, [rax+0Ch]", "cmp     eax, 1", "jz      short loc_BA95"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 2, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B87h; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aValidBackupTyp; \"VALID_BACKUP_TYPE (co->backup_type)\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 16, 0, 0, 4, 0, 0, 1, 5, 0.05228758169934641, ["mov     rax, [rbp+co]", "mov     eax, [rax]", "cmp     eax, 3", "jbe     short loc_BA52"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "jbe~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 6, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B8Ah; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aCoHardLinkCoSy; \"!(co->hard_link && co->symbolic_link)\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 5, 0, 0, 5, 2, 1, 5, 2, 0.029411764705882353, ["mov     rax, [rbp+co]", "movzx   eax, byte ptr [rax+2Ch]", "xor     eax, 1", "test    al, al", "jnz     short loc_BB14"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 5, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B88h; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aValidSparseMod; \"VALID_SPARSE_MODE (co->sparse_mode)\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [1, 0, 12, 0, 0, 4, 0, 1, 4, 4, 0.013071895424836602, ["mov     rax, [rbp+co]", "mov     eax, [rax+0Ch]", "cmp     eax, 3", "jz      short loc_BA95"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 6, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7031; \"valid_options\"", "mov     edx, 0B89h; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aValidReflinkMo; \"VALID_REFLINK_MODE (co->reflink_mode)\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]]], "func_feature": [6, 5, 17, 0, 19, 24, 1, 85, 0.03801, 8, 1], "succs": [[], [0, 13], [7, 15], [2, 4], [2, 5], [2, 18], [], [8, 6], [9, 6], [], [17, 3], [10, 3], [], [11, 12], [], [14, 7], [], [16, 3], []], "fname": "valid_options", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 4, 1, 1, 18, 2, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+src_name], rdi", "mov     [rbp+dst_name], rsi", "mov     eax, edx", "mov     [rbp+options], rcx", "mov     [rbp+copy_into_self], r8", "mov     [rbp+rename_succeeded], r9", "mov     [rbp+nonexistent_dst], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+options]", "mov     rdi, rax; co", "call    valid_options", "test    al, al", "jnz     short loc_BBB1"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~al,al", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [4, 1, 2, 1, 1, 23, 1, 2, 0, 1, 0.16666666666666666, ["mov     rax, [rbp+src_name]", "mov     cs:top_level_src_name, rax", "mov     rax, [rbp+dst_name]", "mov     cs:top_level_dst_name, rax", "mov     [rbp+first_dir_created_per_command_line_arg], 0", "movzx   edx, [rbp+nonexistent_dst]; new_dst", "mov     rdi, [rbp+options]", "mov     rsi, [rbp+dst_name]; dst_name", "mov     rax, [rbp+src_name]", "push    [rbp+rename_succeeded]; rename_succeeded", "push    [rbp+copy_into_self]; copy_into_self", "lea     rcx, [rbp+first_dir_created_per_command_line_arg]", "push    rcx; first_dir_created_per_command_line_arg", "push    1; command_line_arg", "mov     r9, rdi; x", "mov     r8d, 0; ancestors", "mov     ecx, 0; parent", "mov     rdi, rax; src_name", "call    copy_internal", "add     rsp, 20h", "mov     rdx, [rbp+var_8]", "xor     rdx, fs:28h", "jz      short locret_BC16"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~[rbp+0],0", "movzx~edx,[rbp+0]", "mov~rdi,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "lea~rcx,[rbp+0]", "push~rcx", "push~0", "mov~r9,rdi", "mov~r8d,0", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "mov~rdx,[rbp+0]", "xor~rdx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 0, 0, 1, 5, 0, 1, 0, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___7040; \"copy\"", "mov     edx, 0B9Fh; line", "lea     rsi, file; \"src/copy.c\"", "lea     rdi, aValidOptionsOp; \"valid_options (options)\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]]], "func_feature": [4, 3, 6, 1, 5, 4, 2, 49, 0.03333, 6, 2], "succs": [[2, 4], [], [1, 3], [], []], "fname": "copy", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 1, 0, 1, 2, 23, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "mov     rax, [rbp+x]", "mov     edx, 50h ; 'P'; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "call    _geteuid", "test    eax, eax", "setz    dl", "mov     rax, [rbp+x]", "mov     [rax+1Bh], dl", "mov     rax, [rbp+x]", "movzx   edx, byte ptr [rax+1Bh]", "mov     rax, [rbp+x]", "mov     [rax+1Ah], dl", "mov     rax, [rbp+x]", "mov     dword ptr [rax+34h], 0FFFFFFFFh", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~edx,<STR>", "mov~esi,0", "mov~rdi,rax", "call~FOO", "call~FOO", "test~eax,eax", "setz~dl", "mov~rax,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "movzx~edx,[yte ptr [rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],dl", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "nop", "leave", "retn"]]], "func_feature": [2, 1, 2, 0, 1, 0, 1, 23, 0.0, 0, 1], "succs": [[]], "fname": "cp_options_default", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.041666666666666664, ["mov     eax, 1", "jmp     short loc_BCA7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 2, 1, 1, 2, 0.15833333333333333, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Ah]", "xor     eax, 1", "test    al, al", "jz      short loc_BCA2"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.10833333333333334, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 4, 0, 1, 4, 0, 2, 1, 2, 0.041666666666666664, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     short loc_BCA2"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [2, 0, 5, 1, 1, 8, 0, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 1", "jz      short loc_BC8C"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 3, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]]], "func_feature": [2, 3, 6, 0, 6, 8, 3, 23, 0.05833, 0, 1], "succs": [[5], [0, 2], [5], [1, 2], [1, 3], []], "fname": "chown_failure_ok", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 5, 1, 1, 8, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+x], rdi", "call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 1", "jz      short loc_BCD0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.041666666666666664, ["mov     eax, 1", "jmp     short loc_BCEB"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 2, 1, 0, 2, 0.15833333333333333, ["mov     rax, [rbp+x]", "movzx   eax, byte ptr [rax+1Bh]", "xor     eax, 1", "test    al, al", "jz      short loc_BCE6"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.10833333333333334, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 4, 0, 1, 4, 0, 2, 0, 2, 0.041666666666666664, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     short loc_BCE6"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]]], "func_feature": [2, 3, 6, 0, 6, 8, 1, 23, 0.05833, 0, 1], "succs": [[2, 4], [5], [1, 3], [5], [2, 3], []], "fname": "owner_failure_ok", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     eax, cs:mask_7054", "pop     rbp", "retn"], ["mov~eax,<TAG>", "pop~rbp", "retn"]], [1, 0, 2, 0, 0, 5, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, cs:mask_7054", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_BD1C"], ["push~rbp", "mov~rbp,rsp", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 2, 6, 0, 2, 1, 0, 0.0, ["mov     edi, 0; mask", "call    _umask", "mov     cs:mask_7054, eax", "mov     eax, cs:mask_7054", "mov     edi, eax; mask", "call    _umask"], ["mov~edi,0", "call~FOO", "mov~<TAG>,eax", "mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]]], "func_feature": [2, 0, 3, 0, 3, 3, 5, 14, 0.0, 1, 0], "succs": [[], [0, 2], [0]], "fname": "cached_umask", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+table_size], rsi", "mov     rax, [rbp+x]", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     rax, [rax]", "mov     edx, 0", "div     [rbp+table_size]", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "src_to_dest_hash", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.125, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 4, 0, 0, 14, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+y], rsi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+y]", "mov     [rbp+b], rax", "mov     rax, [rbp+a]", "mov     rdx, [rax]", "mov     rax, [rbp+b]", "mov     rax, [rax]", "cmp     rdx, rax", "jnz     short loc_BD98"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 3, 0, 0, 6, 0, 1, 1, 2, 0.08333333333333333, ["mov     rax, [rbp+a]", "mov     rdx, [rax+8]", "mov     rax, [rbp+b]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_BD98"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.041666666666666664, ["mov     eax, 1", "jmp     short loc_BD9D"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 1, 3, 0, 5, 6, 0, 26, 0.05, 0, 0], "succs": [[3], [0, 2], [0, 4], [], [3]], "fname": "src_to_dest_compare", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 2, 16, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+a]", "mov     rax, [rax+10h]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+x]", "mov     rdi, rax; ptr", "call    free", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 2, 16, 0.0, 0, 1], "succs": [[]], "fname": "src_to_dest_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 4, 1, 1, 1, 1, 0.3333333333333333, ["nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_BE4E"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [3, 0, 4, 1, 1, 21, 1, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+ino], rdi", "mov     [rbp+dev], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+ino]", "mov     [rbp+probe.st_ino], rax", "mov     rax, [rbp+dev]", "mov     [rbp+probe.st_dev], rax", "mov     [rbp+probe.name], 0", "mov     rax, cs:src_to_dest", "lea     rdx, [rbp+probe]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_delete", "mov     [rbp+ent], rax", "cmp     [rbp+ent], 0", "jz      short loc_BE39"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 3, 0, 1, 3, 0, 1, 1, 2, 0.0, ["mov     rax, [rbp+ent]", "mov     rdi, rax; x", "call    src_to_dest_free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]]], "func_feature": [3, 2, 5, 1, 5, 5, 3, 31, 0.06667, 2, 1], "succs": [[], [0, 2], [], [1, 4], [1]], "fname": "forget_created", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 0, 0.30000000000000004, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_BEC3"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 3, 0, 1, 1, 0, 0.07500000000000001, ["mov     rax, [rbp+e]", "mov     rax, [rax+10h]", "jmp     short loc_BEAF"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "jmp~FOO"]], [2, 0, 5, 1, 1, 20, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+ino], rdi", "mov     [rbp+dev], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+ino]", "mov     [rbp+ent.st_ino], rax", "mov     rax, [rbp+dev]", "mov     [rbp+ent.st_dev], rax", "mov     rax, cs:src_to_dest", "lea     rdx, [rbp+ent]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_lookup", "mov     [rbp+e], rax", "cmp     [rbp+e], 0", "jz      short loc_BEAA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 1, 0, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 2, 5, 1, 6, 6, 2, 30, 0.075, 2, 1], "succs": [[], [0, 5], [1], [2, 4], [1], []], "fname": "src_to_dest_lookup", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 6, 0, 2, 2, 0, 0.05, ["mov     rax, [rbp+ent]", "mov     rdi, rax; x", "call    src_to_dest_free", "mov     rax, [rbp+ent_from_table]", "mov     rax, [rax+10h]", "jmp     short locret_BF60"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0.05, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 3, 0, 0, 3, 0, 1, 1, 0, 0.15000000000000002, ["mov     rax, [rbp+ent_from_table]", "cmp     rax, [rbp+ent]", "jz      short loc_BF5B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [2, 1, 5, 1, 3, 29, 0, 4, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+name], rdi", "mov     [rbp+ino], rsi", "mov     [rbp+dev], rdx", "mov     edi, 18h; n", "call    xmalloc", "mov     [rbp+ent], rax", "mov     rax, [rbp+name]", "mov     rdi, rax; string", "call    xstrdup", "mov     rdx, rax", "mov     rax, [rbp+ent]", "mov     [rax+10h], rdx", "mov     rax, [rbp+ent]", "mov     rdx, [rbp+ino]", "mov     [rax], rdx", "mov     rax, [rbp+ent]", "mov     rdx, [rbp+dev]", "mov     [rax+8], rdx", "mov     rax, cs:src_to_dest", "mov     rdx, [rbp+ent]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_insert", "mov     [rbp+ent_from_table], rax", "cmp     [rbp+ent_from_table], 0", "jnz     short loc_BF3B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~edi,<STR>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    xalloc_die"], ["call~FOO"]]], "func_feature": [5, 0, 8, 0, 6, 6, 4, 42, 0.04167, 1, 1], "succs": [[], [0], [0], [1, 2], [3, 5], []], "fname": "remember_copied", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 2, 0, 1, 12, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "lea     r8, src_to_dest_free; data_freer", "lea     rcx, src_to_dest_compare; comparator", "lea     rdx, src_to_dest_hash; hasher", "mov     esi, 0; tuning", "mov     edi, 67h ; 'g'; candidate", "call    hash_initialize", "mov     cs:src_to_dest, rax", "mov     rax, cs:src_to_dest", "test    rax, rax", "jnz     short loc_BFA2"], ["push~rbp", "mov~rbp,rsp", "lea~r8,<TAG>", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~<TAG>,rax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "pop     rbp", "retn"], ["nop", "pop~rbp", "retn"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]]], "func_feature": [2, 1, 3, 0, 3, 2, 1, 16, 0.0, 4, 0], "succs": [[1, 2], [], []], "fname": "hash_init", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 8, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     rax, cs:src_to_dest", "mov     rdi, rax; table", "call    hash_free", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "nop", "pop~rbp", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 8, 0.0, 1, 0], "succs": [[]], "fname": "forget_all", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, 1", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 5, 0.0, 0, 0], "succs": [[]], "fname": "extent_need_sync", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[6, 0, 0, 1, 1, 25, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+src_fd], edi", "mov     [rbp+scan], rsi", "mov     rax, [rbp+scan]", "mov     edx, [rbp+src_fd]", "mov     [rax], edx", "mov     rax, [rbp+scan]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+scan]", "mov     qword ptr [rax+28h], 0", "mov     rax, [rbp+scan]", "mov     qword ptr [rax+8], 0", "mov     rax, [rbp+scan]", "mov     byte ptr [rax+20h], 0", "mov     rax, [rbp+scan]", "mov     byte ptr [rax+21h], 0", "call    extent_need_sync", "movzx   edx, al", "mov     rax, [rbp+scan]", "mov     [rax+10h], edx", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~<TAG>,edx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "call~FOO", "movzx~edx,al", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 25, 0.0, 0, 1], "succs": [[]], "fname": "extent_scan_init", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 44, 5, 0, 17, 0, 0, 0, 0, 0.005813953488372093, ["mov     rax, [rbp+last_ei]", "mov     rdx, [rax]", "mov     rax, [rbp+last_ei]", "mov     rax, [rax+8]", "add     rax, rdx", "mov     rcx, rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax]", "cmp     rcx, rax", "jbe     loc_C5DB"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rax,rdx", "mov~rcx,rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "cmp~rcx,rax", "jbe~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 9, 8, 0.07505285412262157, ["cmp     [rbp+si_0], 0", "jz      loc_C5DB"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 44, 0, 0, 8, 0, 0, 3, 9, 0.1886892177589852, ["mov     rax, [rbp+scan]", "mov     rdx, [rax+18h]", "mov     rax, [rbp+fiemap]", "mov     eax, [rax+14h]", "mov     eax, eax", "not     rax", "cmp     rdx, rax", "jbe     short loc_C1A7"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~eax,eax", "not~rax", "cmp~rdx,rax", "jbe~FOO"]], [0, 0, 44, 0, 0, 4, 1, 1, 2, 3, 0.20110993657505286, ["mov     rax, [rbp+fiemap]", "mov     eax, [rax+14h]", "test    eax, eax", "jnz     short loc_C169"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "test~eax,eax", "jnz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.042283298097251586, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_C791"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.005549682875264271, ["mov     eax, 0", "jmp     loc_C77D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 7, 1, 1, 3, 2, 0.003964059196617336, ["mov     rax, [rbp+scan]", "mov     byte ptr [rax+21h], 1", "mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "test    rax, rax", "setnz   al", "jmp     loc_C77D"], ["mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "setnz~al", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 14, 2, 0.022198731501057084, ["mov     eax, 0", "jmp     loc_C77D"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 10, 2, 0.025369978858350954, ["mov     eax, 1"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 10, 6, 0.11046511627906977, ["cmp     [rbp+si_0], 0", "jnz     short loc_C4A6"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 44, 4, 0, 14, 0, 1, 9, 7, 0.1083509513742072, ["mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "mov     rcx, rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax]", "cmp     rcx, rax", "ja      short loc_C489"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rcx,rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "cmp~rcx,rax", "ja~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [3, 3, 44, 1, 2, 36, 1, 2, 1, 4, 0.24365750528541227, ["lea     rax, [rbp+s]", "mov     [rbp+fiemap], rax", "mov     rax, [rbp+fiemap]", "add     rax, 20h", "mov     [rbp+fm_extents], rax", "lea     rax, [rbp+s]", "mov     edx, 1000h; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "mov     rdx, rax", "mov     rax, [rbp+fiemap]", "mov     [rax], rdx", "mov     rax, [rbp+scan]", "mov     edx, [rax+10h]", "mov     rax, [rbp+fiemap]", "mov     [rax+10h], edx", "mov     rax, [rbp+fiemap]", "mov     dword ptr [rax+18h], 48h ; 'H'", "mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "not     rax", "mov     rdx, rax", "mov     rax, [rbp+fiemap]", "mov     [rax+8], rdx", "mov     rax, [rbp+scan]", "mov     eax, [rax]", "mov     rdx, [rbp+fiemap]", "mov     esi, 0C020660Bh; request", "mov     edi, eax; fd", "mov     eax, 0", "call    _ioctl", "test    eax, eax", "jns     short loc_C13A"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~edx,<STR>", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],<STR>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "not~rax", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "test~eax,eax", "jns~FOO"]], [0, 0, 44, 0, 0, 1, 0, 1, 10, 5, 0.21300211416490486, ["jmp     loc_C061"], ["jmp~FOO"]], [1, 1, 44, 1, 0, 11, 1, 0, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 1060h", "mov     [rbp+scan], rdi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+si_0], 0", "mov     rax, [rbp+scan]", "mov     rax, [rax+28h]", "mov     [rbp+last_ei], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [8, 0, 44, 17, 0, 45, 0, 0, 10, 9, 0.07822410147991543, ["mov     rax, [rbp+scan]", "mov     rcx, [rax+28h]", "mov     edx, [rbp+si_0]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     [rbp+last_ei], rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdx, rax", "mov     rax, [rbp+last_ei]", "mov     [rax], rdx", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, rax", "mov     rax, [rbp+last_ei]", "mov     [rax+8], rdx", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     edx, [rax+28h]", "mov     rax, [rbp+last_ei]", "mov     [rax+10h], edx", "add     [rbp+si_0], 1"], ["mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~[rbp+0],rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "add~[rbp+0],0"]], [1, 0, 44, 1, 0, 9, 0, 1, 9, 4, 0.22357293868921777, ["mov     rax, [rbp+last_ei]", "mov     rdx, [rax]", "mov     rax, [rbp+last_ei]", "mov     rax, [rax+8]", "add     rdx, rax", "mov     rax, [rbp+scan]", "mov     [rax+8], rdx", "cmp     [rbp+si_0], 47h ; 'G'", "ja      short loc_C777"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 44, 1, 0, 1, 0, 0, 11, 8, 0.24735729386892177, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [4, 0, 44, 9, 0, 28, 0, 1, 10, 9, 0.04281183932346723, ["mov     rax, [rbp+last_ei]", "mov     rax, [rax+8]", "mov     rcx, rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax+10h]", "add     rax, rcx", "mov     rdx, rax", "mov     rax, [rbp+last_ei]", "mov     [rax+8], rdx", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     edx, [rax+28h]", "mov     rax, [rbp+last_ei]", "mov     [rax+10h], edx", "jmp     loc_C69C"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rcx,rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "add~rax,rcx", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],edx", "jmp~FOO"]], [7, 0, 44, 14, 0, 32, 0, 1, 13, 9, 0.07346723044397463, ["mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rdx, rax", "mov     rax, [rbp+new_logical]", "mov     [rdx], rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rcx, [rax+10h]", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rdx, rax", "mov     rax, rcx", "sub     rax, [rbp+length_adjust]", "mov     [rdx+10h], rax", "sub     [rbp+i], 1", "jmp     loc_C69C"], ["mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rcx,[rax+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,rcx", "sub~rax,[rbp+0]", "mov~[rdx+0],rax", "sub~[rbp+0],0", "jmp~FOO"]], [1, 0, 44, 0, 0, 5, 2, 1, 8, 5, 0.014799154334038056, ["mov     rax, [rbp+scan]", "movzx   eax, byte ptr [rax+21h]", "xor     eax, 1", "test    al, al", "jz      short loc_C723"], ["mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 1, 44, 0, 0, 2, 0, 0, 7, 5, 0.24577167019027485, ["cmp     [rbp+si_0], 48h ; 'H'", "jbe     short loc_C723"], ["cmp~[rbp+0],<STR>", "jbe~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 4, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___6112; \"extent_scan_read\"", "mov     edx, 7Eh ; '~'; line", "lea     rsi, aSrcExtentScanC; \"src/extent-scan.c\"", "lea     rdi, aScanEiCountSiz; \"scan->ei_count <= SIZE_MAX - fiemap->fm\"...", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 2, 3, 0.034090909090909095, ["mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "test    rax, rax", "jnz     short loc_C130"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 44, 0, 0, 4, 0, 1, 11, 5, 0.05126849894291755, ["mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "mov     [rbp+new_logical], rax", "jmp     short loc_C4C5"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [4, 0, 44, 9, 0, 24, 0, 0, 12, 4, 0.13266384778012685, ["mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdx, [rbp+new_logical]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+length_adjust], rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax+10h]", "cmp     [rbp+length_adjust], rax", "jnb     short loc_C550"], ["mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jnb~FOO"]], [0, 0, 44, 1, 0, 6, 0, 0, 11, 5, 0.05126849894291755, ["mov     rax, [rbp+last_ei]", "mov     rdx, [rax]", "mov     rax, [rbp+last_ei]", "mov     rax, [rax+8]", "add     rax, rdx", "mov     [rbp+new_logical], rax"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [1, 0, 4, 0, 0, 2, 0, 0, 3, 3, 0.0, ["mov     rax, [rbp+scan]", "mov     byte ptr [rax+20h], 1"], ["mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [1, 0, 44, 0, 0, 2, 0, 1, 8, 8, 0.1744186046511628, ["cmp     [rbp+si_0], 0", "jnz     short loc_C434"], ["cmp~[rbp+0],0", "jnz~FOO"]], [3, 0, 44, 4, 0, 14, 1, 1, 8, 9, 0.04492600422832981, ["mov     rax, [rbp+last_ei]", "mov     ecx, [rax+10h]", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     eax, [rax+28h]", "and     eax, 0FFFFFFFEh", "cmp     ecx, eax", "jnz     loc_C3F4"], ["mov~rax,[rbp+0]", "mov~ecx,[rax+0]", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~eax,[rax+0]", "and~eax,0", "cmp~ecx,eax", "jnz~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 7, 9, 0.21035940803382663, ["cmp     [rbp+si_0], 0", "jz      loc_C3F4"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 13, 3, 0.05073995771670191, ["mov     rax, [rbp+scan]", "mov     rax, [rax+8]", "test    rax, rax", "jnz     short loc_C546"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 44, 0, 0, 7, 1, 1, 8, 4, 0.26797040169133196, ["mov     edx, [rbp+si_0]", "mov     rax, [rbp+scan]", "mov     [rax+18h], rdx", "mov     rax, [rbp+scan]", "movzx   eax, byte ptr [rax+21h]", "test    al, al", "jnz     short loc_C774"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jnz~FOO"]], [2, 1, 44, 6, 0, 11, 0, 0, 9, 5, 0.0, ["mov     rax, [rbp+scan]", "mov     rcx, [rax+28h]", "sub     [rbp+si_0], 1", "mov     edx, [rbp+si_0]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "sub     rax, 18h", "add     rax, rcx", "mov     [rbp+last_ei], rax"], ["mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "sub~[rbp+0],0", "mov~edx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "sub~rax,<STR>", "add~rax,rcx", "mov~[rbp+0],rax"]], [1, 0, 4, 0, 0, 2, 0, 0, 14, 3, 0.0, ["mov     rax, [rbp+scan]", "mov     byte ptr [rax+20h], 1"], ["mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [1, 0, 44, 0, 0, 5, 2, 1, 6, 6, 0.2309725158562368, ["mov     rax, [rbp+last_ei]", "mov     eax, [rax+10h]", "and     eax, 1", "test    eax, eax", "jz      short loc_C6D5"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 44, 0, 0, 4, 0, 0, 5, 7, 0.45771670190274844, ["mov     rax, [rbp+fiemap]", "mov     eax, [rax+14h]", "cmp     [rbp+i], eax", "jb      loc_C276"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~[rbp+0],eax", "jb~FOO"]], [5, 1, 44, 7, 1, 41, 0, 2, 4, 8, 0.1802325581395349, ["mov     rax, [rbp+scan]", "mov     rdx, [rax+18h]", "mov     rax, [rbp+fiemap]", "mov     eax, [rax+14h]", "mov     eax, eax", "add     rdx, rax", "mov     rax, [rbp+scan]", "mov     [rax+18h], rdx", "mov     rdx, [rbp+last_ei]", "mov     rax, [rbp+scan]", "mov     rax, [rax+28h]", "sub     rdx, rax", "mov     rax, rdx", "sar     rax, 3", "mov     rdx, rax", "mov     rax, 0AAAAAAAAAAAAAAABh", "imul    rax, rdx", "mov     [rbp+prev_idx], rax", "mov     rax, [rbp+scan]", "mov     rcx, [rax+18h]", "mov     rax, [rbp+scan]", "mov     rax, [rax+28h]", "mov     edx, 18h; s", "mov     rsi, rcx; n", "mov     rdi, rax; p", "call    xnrealloc", "mov     rdx, rax", "mov     rax, [rbp+scan]", "mov     [rax+28h], rdx", "mov     rax, [rbp+scan]", "mov     rcx, [rax+28h]", "mov     rdx, [rbp+prev_idx]", "mov     rax, rdx", "add     rax, rax", "add     rax, rdx", "shl     rax, 3", "add     rax, rcx", "mov     [rbp+last_ei], rax", "mov     [rbp+i], 0", "mov     [rbp+i], 0", "jmp     loc_C6A3"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~eax,eax", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,rdx", "sar~rax,0", "mov~rdx,rax", "mov~rax,0", "imul~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~edx,<STR>", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,rdx", "add~rax,rax", "add~rax,rdx", "shl~rax,0", "add~rax,rcx", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 44, 0, 0, 2, 0, 0, 7, 6, 0.0, ["mov     rax, [rbp+scan]", "mov     byte ptr [rax+21h], 1"], ["mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [5, 0, 44, 9, 0, 23, 0, 0, 6, 10, 0.21881606765327696, ["mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rcx, [rax]", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax+10h]", "mov     rdx, 7FFFFFFFFFFFFFFFh", "sub     rdx, rax", "mov     rax, rdx", "cmp     rcx, rax", "jbe     short loc_C2F3"], ["mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rcx,<TAG>", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdx,0", "sub~rdx,rax", "mov~rax,rdx", "cmp~rcx,rax", "jbe~FOO"]], [2, 0, 44, 5, 0, 17, 0, 1, 9, 9, 0.043868921775898524, ["mov     rax, [rbp+last_ei]", "mov     rdx, [rax]", "mov     rax, [rbp+last_ei]", "mov     rax, [rax+8]", "add     rax, rdx", "mov     rcx, rax", "mov     edx, [rbp+i]", "mov     rax, rdx", "shl     rax, 3", "sub     rax, rdx", "shl     rax, 3", "mov     rdx, rax", "mov     rax, [rbp+fm_extents]", "add     rax, rdx", "mov     rax, [rax]", "cmp     rcx, rax", "jnz     short loc_C3F4"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rax,rdx", "mov~rcx,rax", "mov~edx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "cmp~rcx,rax", "jnz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 7, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___6112; \"extent_scan_read\"", "mov     edx, 8Dh; line", "lea     rsi, aSrcExtentScanC; \"src/extent-scan.c\"", "lea     rdi, aFmExtentsIFeLo; \"fm_extents[i].fe_logical <= OFF_T_MAX -\"...", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [0, 0, 4, 0, 0, 2, 0, 1, 9, 3, 0.03594080338266385, ["nop", "jmp     short loc_C778"], ["nop", "jmp~FOO"]], [0, 0, 4, 0, 0, 1, 0, 0, 10, 3, 0.0021141649048625794, ["nop"], ["nop"]]], "func_feature": [6, 13, 30, 1, 45, 63, 1, 422, 0.09686, 5, 94], "succs": [[16, 10], [0, 16], [38, 23], [2, 6], [9, 12], [4], [4], [4], [4], [], [25, 27], [1, 10], [], [24, 3], [13], [13], [18], [44, 14], [37], [18], [18], [33, 34], [33, 21], [], [28, 5], [26], [32, 20], [26], [5], [1, 11], [41, 29], [29, 30], [35, 7], [17, 43], [33], [7], [22, 39], [40, 36], [37], [22], [42, 31], [19, 29], [], [8], [8]], "fname": "extent_scan_read", "n_num": 45}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 11, 0, 1, 0, 0, 0.10833333333333334, ["mov     rdx, [rbp+dstdirlen]; n", "mov     rcx, [rbp+dstname]", "mov     rax, [rbp+dsttmp]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _mempcpy", "mov     rdx, qword ptr cs:simple_pattern; \"CuXXXXXX\"", "mov     [rax], rdx", "movzx   edx, byte ptr cs:simple_pattern+8; \"\"", "mov     [rax+8], dl", "mov     rax, [rbp+dsttmp]"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,<TAG>", "mov~<TAG>,rdx", "movzx~edx,<TAG>", "mov~[rax+0],dl", "mov~rax,[rbp+0]"]], [0, 0, 2, 0, 0, 3, 0, 1, 1, 2, 0.041666666666666664, ["mov     rax, [rbp+buf]", "mov     [rbp+dsttmp], rax", "jmp     short loc_C7FD"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 3, 0, 1, 6, 0, 2, 1, 2, 0.10833333333333334, ["mov     rax, [rbp+dsttmpsize]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+dsttmp], rax", "cmp     [rbp+dsttmp], 0", "jnz     short loc_C7FD"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.041666666666666664, ["mov     rax, [rbp+dsttmp]", "jmp     short locret_C82C"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [2, 1, 5, 3, 1, 18, 0, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+dstname], rdi", "mov     [rbp+buf], rsi", "mov     rax, [rbp+dstname]", "mov     rdi, rax; name", "call    last_component", "mov     rdx, rax", "mov     rax, [rbp+dstname]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+dstdirlen], rax", "mov     rax, [rbp+dstdirlen]", "add     rax, 9", "mov     [rbp+dsttmpsize], rax", "cmp     [rbp+dsttmpsize], 100h", "ja      short loc_C7E0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "cmp~[rbp+0],<STR>", "ja~FOO"]]], "func_feature": [3, 0, 7, 0, 6, 7, 2, 42, 0.05, 2, 3], "succs": [[3], [0], [0, 4], [], [3], [1, 2]], "fname": "samedir_template", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 1, 21, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+dest], rdi", "mov     [rbp+arg], rsi", "mov     rax, [rbp+arg]", "mov     [rbp+a], rax", "mov     rax, [rbp+a]", "mov     edi, [rax+14h]", "mov     rax, [rbp+a]", "mov     edx, [rax+10h]; tofd", "mov     rax, [rbp+a]", "mov     rsi, [rax+8]; from", "mov     rax, [rbp+a]", "mov     eax, [rax]", "mov     rcx, [rbp+dest]; to", "mov     r8d, edi; flags", "mov     edi, eax; fromfd", "call    _linkat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edi,[rax+0]", "mov~rax,[rbp+0]", "mov~edx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~rcx,[rbp+0]", "mov~r8d,edi", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 21, 0.0, 0, 1], "succs": [[]], "fname": "try_link", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 16, 0, 0, 4, 2, 1, 0, 0, 0.1904761904761905, ["movzx   eax, [rbp+force]", "xor     eax, 1", "test    al, al", "jnz     short loc_C90F"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 1, 21, 1, 0, 15, 1, 0, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 160h", "mov     [rbp+srcdir], edi", "mov     [rbp+srcname], rsi", "mov     [rbp+dstdir], edx", "mov     [rbp+dstname], rcx", "mov     [rbp+flags], r8d", "mov     eax, r9d", "mov     [rbp+force], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+linkat_errno], 0", "jns     short loc_C8FB"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8d", "mov~eax,r9d", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 17, 0, 0, 1, 0, 0, 3, 4, 0.12142857142857144, ["mov     [rbp+linkat_errno], eax"], ["mov~[rbp+0],eax"]], [1, 0, 6, 0, 1, 7, 0, 1, 7, 4, 0.04285714285714286, ["mov     [rbp+err], eax", "mov     rcx, [rbp+dsttmp]", "mov     eax, [rbp+dstdir]", "mov     edx, 0; flag", "mov     rsi, rcx; name", "mov     edi, eax; fd", "call    _unlinkat"], ["mov~[rbp+0],eax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO"]], [0, 0, 7, 0, 1, 3, 0, 2, 6, 5, 0.01904761904761905, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_C9ED"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 6, 5, 0.01904761904761905, ["mov     eax, 0FFFFFFFFh"], ["mov~eax,0"]], [1, 0, 15, 0, 0, 2, 0, 1, 2, 3, 0.15714285714285717, ["cmp     [rbp+linkat_errno], 11h", "jz      short loc_C917"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 2, 2, 0.05, ["mov     eax, [rbp+linkat_errno]", "jmp     loc_CA34"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [0, 0, 5, 0, 0, 3, 0, 1, 6, 3, 0.10952380952380954, ["lea     rax, [rbp+buf]", "cmp     [rbp+dsttmp], rax", "jz      short loc_CA2E"], ["lea~rax,[rbp+0]", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 6, 0, 1, 4, 0, 2, 5, 4, 0.07142857142857144, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+err], eax", "jmp     short loc_CA0F"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 18, 0, 1, 3, 0, 2, 2, 5, 0.022619047619047622, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_C8F8"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [0, 0, 20, 0, 1, 10, 1, 2, 1, 6, 0.0071428571428571435, ["mov     edi, [rbp+flags]", "mov     rcx, [rbp+dstname]; to", "mov     edx, [rbp+dstdir]; tofd", "mov     rsi, [rbp+srcname]; from", "mov     eax, [rbp+srcdir]", "mov     r8d, edi; flags", "mov     edi, eax; fromfd", "call    _linkat", "test    eax, eax", "jz      short loc_C8F3"], ["mov~edi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8d,edi", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 11, 0, 1, 17, 1, 2, 4, 5, 0.1523809523809524, ["mov     eax, [rbp+srcdir]", "mov     [rbp+arg.srcdir], eax", "mov     rax, [rbp+srcname]", "mov     [rbp+arg.srcname], rax", "mov     eax, [rbp+dstdir]", "mov     [rbp+arg.dstdir], eax", "mov     eax, [rbp+flags]", "mov     [rbp+arg.flags], eax", "lea     rdx, [rbp+arg]; args", "mov     rax, [rbp+dsttmp]", "mov     r8d, 6; x_suffix_len", "lea     rcx, try_link; tryfunc", "mov     esi, 0; suffixlen", "mov     rdi, rax; tmpl", "call    try_tempname_len", "test    eax, eax", "jz      short loc_C9BA"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "lea~rcx,<TAG>", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 13, 0, 1, 8, 0, 2, 3, 3, 0.16666666666666669, ["lea     rdx, [rbp+buf]", "mov     rax, [rbp+dstname]", "mov     rsi, rdx; buf", "mov     rdi, rax; dstname", "call    samedir_template", "mov     [rbp+dsttmp], rax", "cmp     [rbp+dsttmp], 0", "jnz     short loc_C94D"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 7, 2, 0.05714285714285715, ["mov     eax, [rbp+err]"], ["mov~eax,[rbp+0]"]], [0, 0, 4, 0, 1, 3, 0, 1, 7, 3, 0.0, ["mov     rax, [rbp+dsttmp]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.09047619047619049, ["mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_CA48"], ["mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 1, 3, 0, 2, 4, 2, 0.0071428571428571435, ["call    ___errno_location", "mov     eax, [rax]", "jmp     loc_CA34"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 9, 0, 1, 8, 1, 2, 5, 6, 0.0642857142857143, ["mov     rcx, [rbp+dstname]; new", "mov     edx, [rbp+dstdir]; newfd", "mov     rsi, [rbp+dsttmp]; old", "mov     eax, [rbp+dstdir]", "mov     edi, eax; oldfd", "call    _renameat", "test    eax, eax", "jz      short loc_C9E8"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 18, 0, 0, 1, 0, 0, 2, 5, 0.022619047619047622, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [11, 7, 24, 1, 22, 29, 1, 102, 0.06234, 2, 1], "succs": [[6, 7], [0, 11], [0], [8], [3], [3], [13, 7], [16], [14, 15], [8], [2], [10, 21], [9, 20], [17, 12], [16], [14], [18, 19], [16], [], [], [4, 5], [2]], "fname": "force_linkat", "n_num": 22}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 1, 17, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+dest], rdi", "mov     [rbp+arg], rsi", "mov     rax, [rbp+arg]", "mov     [rbp+a], rax", "mov     rax, [rbp+a]", "mov     ecx, [rax+8]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "mov     rdx, [rbp+dest]; to", "mov     esi, ecx; tofd", "mov     rdi, rax; from", "call    _symlinkat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~ecx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 17, 0.0, 0, 1], "succs": [[]], "fname": "try_symlink", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0.05526315789473684, ["mov     eax, [rbp+err]"], ["mov~eax,[rbp+0]"]], [0, 0, 5, 0, 0, 3, 0, 1, 6, 3, 0.10789473684210527, ["lea     rax, [rbp+buf]", "cmp     [rbp+dsttmp], rax", "jz      short loc_CC22"], ["lea~rax,[rbp+0]", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 7, 3, 0.0, ["mov     rax, [rbp+dsttmp]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [2, 0, 20, 1, 0, 14, 1, 0, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 150h", "mov     [rbp+srcname], rdi", "mov     [rbp+dstdir], esi", "mov     [rbp+dstname], rdx", "mov     eax, ecx", "mov     [rbp+symlinkat_errno], r8d", "mov     [rbp+force], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+symlinkat_errno], 0", "jns     short loc_CAFC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~eax,ecx", "mov~[rbp+0],r8d", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 12, 0, 1, 8, 0, 2, 3, 3, 0.16578947368421051, ["lea     rdx, [rbp+buf]", "mov     rax, [rbp+dstname]", "mov     rsi, rdx; buf", "mov     rdi, rax; dstname", "call    samedir_template", "mov     [rbp+dsttmp], rax", "cmp     [rbp+dsttmp], 0", "jnz     short loc_CB54"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 2, 3, 0.15789473684210525, ["cmp     [rbp+symlinkat_errno], 11h", "jz      short loc_CB1E"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 19, 0, 1, 8, 1, 2, 1, 6, 0.007894736842105263, ["mov     rdx, [rbp+dstname]; to", "mov     ecx, [rbp+dstdir]", "mov     rax, [rbp+srcname]", "mov     esi, ecx; tofd", "mov     rdi, rax; from", "call    _symlinkat", "test    eax, eax", "jz      short loc_CAF1"], ["mov~rdx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 15, 0, 0, 4, 2, 1, 1, 3, 0.19736842105263158, ["movzx   eax, [rbp+force]", "xor     eax, 1", "test    al, al", "jnz     short loc_CB13"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 16, 0, 0, 1, 0, 0, 3, 4, 0.12631578947368421, ["mov     [rbp+symlinkat_errno], eax"], ["mov~[rbp+0],eax"]], [0, 0, 6, 0, 1, 4, 0, 2, 5, 4, 0.07894736842105263, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+err], eax", "jmp     short loc_CC03"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 6, 0, 2, 10, 0, 3, 6, 4, 0.007894736842105263, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+err], eax", "mov     rcx, [rbp+dsttmp]", "mov     eax, [rbp+dstdir]", "mov     edx, 0; flag", "mov     rsi, rcx; name", "mov     edi, eax; fd", "call    _unlinkat", "jmp     short loc_CC03"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 6, 4, 0.007894736842105263, ["mov     [rbp+err], 0FFFFFFFFh"], ["mov~[rbp+0],0"]], [2, 0, 10, 0, 1, 13, 1, 2, 4, 5, 0.14736842105263157, ["mov     rax, [rbp+srcname]", "mov     [rbp+arg.srcname], rax", "mov     eax, [rbp+dstdir]", "mov     [rbp+arg.dstdir], eax", "lea     rdx, [rbp+arg]; args", "mov     rax, [rbp+dsttmp]", "mov     r8d, 6; x_suffix_len", "lea     rcx, try_symlink; tryfunc", "mov     esi, 0; suffixlen", "mov     rdi, rax; tmpl", "call    try_tempname_len", "test    eax, eax", "jz      short loc_CBA9"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "lea~rcx,<TAG>", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 8, 0, 1, 8, 1, 2, 5, 5, 0.04736842105263158, ["mov     rcx, [rbp+dstname]; new", "mov     edx, [rbp+dstdir]; newfd", "mov     rsi, [rbp+dsttmp]; old", "mov     eax, [rbp+dstdir]", "mov     edi, eax; oldfd", "call    _renameat", "test    eax, eax", "jz      short loc_CBF9"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.09473684210526316, ["mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_CC3C"], ["mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 17, 0, 1, 3, 0, 2, 2, 5, 0.02368421052631579, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_CAF6"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 17, 0, 0, 1, 0, 0, 2, 5, 0.02368421052631579, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 2, 2, 0.05526315789473684, ["mov     eax, [rbp+symlinkat_errno]", "jmp     loc_CC28"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [0, 0, 3, 0, 1, 3, 0, 2, 4, 2, 0.007894736842105263, ["call    ___errno_location", "mov     eax, [rax]", "jmp     loc_CC28"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]]], "func_feature": [11, 7, 24, 1, 21, 28, 2, 95, 0.06253, 2, 1], "succs": [[15], [0, 2], [0], [6, 7], [20, 12], [19, 4], [16, 17], [19, 5], [7], [1], [1], [1], [9, 13], [10, 11], [], [18, 14], [8], [8], [], [15], [15]], "fname": "force_symlinkat", "n_num": 21}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 5, 1, 1, 22, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 30h", "mov     [rbp+src_name], rdi", "mov     [rbp+source_desc], esi", "mov     [rbp+dst_name], rdx", "mov     [rbp+dest_desc], ecx", "mov     [rbp+mode], r8d", "mov     edi, [rbp+mode]", "mov     ecx, [rbp+dest_desc]; dest_desc", "mov     rdx, [rbp+dst_name]; dst_name", "mov     esi, [rbp+source_desc]; source_desc", "mov     rax, [rbp+src_name]", "mov     r8d, edi; mode", "mov     rdi, rax; src_name", "call    qcopy_acl", "mov     [rbp+ret], eax", "mov     eax, [rbp+ret]", "cmp     eax, 0FFFFFFFEh", "jz      short loc_CC89"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8d", "mov~edi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,edi", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0.0, ["mov     eax, [rbp+ret]", "add     rsp, 30h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["mov~eax,[rbp+0]", "add~rsp,0", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0.025, ["jmp     short loc_CCF9"], ["jmp~FOO"]], [2, 0, 1, 0, 3, 13, 0, 4, 0, 1, 0.05, ["mov     rax, [rbp+src_name]", "mov     rdi, rax; arg", "call    quote", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, rbx", "lea     rdx, aS_3; \"%s\"", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_CCF9"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,rbx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 1, 0, 4, 16, 0, 4, 0, 1, 0.025, ["mov     rax, [rbp+dst_name]", "mov     rdi, rax; arg", "call    quote", "mov     r12, rax", "lea     rdi, aPreservingPerm_0; \"preserving permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "nop"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "nop"]], [1, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.1, ["cmp     eax, 0FFFFFFFFh", "jz      short loc_CCBC"], ["cmp~eax,0", "jz~FOO"]]], "func_feature": [8, 0, 12, 0, 6, 7, 3, 60, 0.03333, 2, 2], "succs": [[3, 5], [], [1], [1], [1], [2, 4]], "fname": "copy_acl", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 0, 6, 0, 0, 0, 0, 0.0, ["mov     eax, [rbp+ret]", "add     rsp, 20h", "pop     rbx", "pop     r12", "pop     rbp", "retn"], ["mov~eax,[rbp+0]", "add~rsp,<STR>", "pop~rbx", "pop~r12", "pop~rbp", "retn"]], [1, 1, 2, 1, 1, 17, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+desc], esi", "mov     [rbp+mode], edx", "mov     edx, [rbp+mode]; mode", "mov     ecx, [rbp+desc]", "mov     rax, [rbp+name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    qset_acl", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jz      short loc_CD73"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 1, 0, 4, 15, 0, 4, 1, 0, 0.0, ["mov     rax, [rbp+name]", "mov     rdi, rax; arg", "call    quote", "mov     r12, rax", "lea     rdi, aSettingPermiss_1; \"setting permissions for %s\"", "call    _gettext", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r12,rax", "lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]]], "func_feature": [5, 0, 6, 0, 3, 3, 4, 38, 0.0, 1, 2], "succs": [[], [0, 2], [0]], "fname": "set_acl", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 13, 0, 1, 11, 0, 1, 0, 0, 0.29239766081871343, ["mov     rdx, [rbp+buf_size]; len", "mov     rcx, [rbp+buffer]", "mov     rax, [rbp+file]", "mov     rsi, rcx; buf", "mov     rdi, rax; path", "call    _readlink", "mov     [rbp+r], rax", "mov     rax, [rbp+r]", "mov     [rbp+link_length], rax", "cmp     [rbp+r], 0", "jns     short loc_CE58"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 13, 0, 1, 6, 0, 2, 5, 2, 0.3713450292397661, ["mov     rax, [rbp+buf_size]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+buffer], rax", "cmp     [rbp+buffer], 0", "jnz     short loc_CDF8"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 13, 0, 0, 3, 0, 0, 7, 2, 0.2324561403508772, ["mov     rax, [rbp+link_length]", "cmp     rax, [rbp+buf_size]", "jnb     short loc_CE76"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 13, 0, 1, 4, 0, 2, 7, 2, 0.04239766081871345, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 22h ; '\"'", "jz      short loc_CE58"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 16, 0, 0, 4, 0, 0, 2, 5, 0.14035087719298245, ["mov     [rbp+initial_limit], rax", "mov     rax, [rbp+size]", "cmp     rax, [rbp+initial_limit]", "jnb     short loc_CDCF"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 17, 1, 0, 3, 0, 1, 1, 6, 0.024853801169590642, ["mov     rax, [rbp+symlink_max]", "add     rax, 1", "jmp     short loc_CDB7"], ["mov~rax,[rbp+0]", "add~rax,0", "jmp~FOO"]], [0, 0, 17, 0, 0, 1, 0, 0, 1, 6, 0.024853801169590642, ["mov     rax, [rbp+INITIAL_LIMIT_BOUND]"], ["mov~rax,[rbp+0]"]], [1, 0, 13, 1, 0, 2, 0, 1, 9, 3, 0.049707602339181284, ["shl     [rbp+buf_size], 1", "jmp     loc_CDD7"], ["shl~[rbp+0],0", "jmp~FOO"]], [1, 0, 13, 0, 1, 6, 0, 2, 8, 3, 0.1783625730994152, ["mov     rax, [rbp+buffer]", "mov     rdi, rax; ptr", "call    free", "mov     rax, 3FFFFFFFFFFFFFFFh", "cmp     [rbp+buf_size], rax", "ja      short loc_CE9B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 2, 19, 1, 0, 10, 0, 0, 0, 7, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+file], rdi", "mov     [rbp+size], rsi", "mov     [rbp+symlink_max], 400h", "mov     [rbp+INITIAL_LIMIT_BOUND], 2000h", "mov     rax, [rbp+symlink_max]", "cmp     rax, [rbp+INITIAL_LIMIT_BOUND]", "jnb     short loc_CDB3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "mov~[rbp+0],<STR>", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 1, 0, 1, 3, 0, 1, 10, 1, 0.005847953216374269, ["call    ___errno_location", "mov     dword ptr [rax], 0Ch", "mov     eax, 0"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0"]], [1, 0, 13, 0, 0, 3, 0, 1, 9, 2, 0.08187134502923976, ["mov     rax, 7FFFFFFFFFFFFFFEh", "cmp     [rbp+buf_size], rax", "ja      short loc_CEBE"], ["mov~rax,0", "cmp~[rbp+0],rax", "ja~FOO"]], [1, 0, 13, 0, 0, 3, 0, 1, 10, 3, 0.02631578947368421, ["mov     rax, 7FFFFFFFFFFFFFFFh", "mov     [rbp+buf_size], rax", "jmp     loc_CDD7"], ["mov~rax,0", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 13, 0, 0, 1, 0, 0, 4, 3, 0.22807017543859648, ["mov     [rbp+buf_size], rax"], ["mov~[rbp+0],rax"]], [1, 0, 14, 1, 0, 3, 0, 1, 3, 4, 0.08187134502923976, ["mov     rax, [rbp+size]", "add     rax, 1", "jmp     short loc_CDD3"], ["mov~rax,[rbp+0]", "add~rax,0", "jmp~FOO"]], [0, 0, 14, 0, 0, 1, 0, 0, 3, 4, 0.08187134502923976, ["mov     rax, [rbp+initial_limit]"], ["mov~rax,[rbp+0]"]], [1, 0, 1, 1, 0, 6, 0, 1, 8, 1, 0.0043859649122807015, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+link_length]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+buffer]", "jmp     short locret_CECE"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 1, 0, 3, 12, 0, 4, 8, 1, 0.0043859649122807015, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     rax, [rbp+buffer]", "mov     rdi, rax; ptr", "call    free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     eax, 0", "jmp     short locret_CECE"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.029239766081871343, ["mov     eax, 0", "jmp     locret_CECE"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [8, 0, 19, 0, 20, 27, 2, 86, 0.09503, 0, 5], "succs": [[2, 3], [0, 19], [8, 16], [17, 2], [14, 15], [4], [4], [1], [11, 7], [5, 6], [18], [10, 12], [1], [1], [13], [13], [18], [18], [], [18]], "fname": "areadlink_with_size", "n_num": 20}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 1, 4, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     edi, 1; status", "call    usage"], ["push~rbp", "mov~rbp,rsp", "mov~edi,0", "call~FOO"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 4, 0.0, 0, 0], "succs": [[]], "fname": "__argmatch_die", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 0, 0.01098901098901099, ["mov     rax, [rbp+i]", "jmp     locret_D00E"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 0, 0.024725274725274728, ["mov     rax, 0FFFFFFFFFFFFFFFEh", "jmp     short locret_D00E"], ["mov~rax,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0.024725274725274728, ["mov     rax, [rbp+matchind]"], ["mov~rax,[rbp+0]"]], [1, 0, 14, 0, 0, 2, 0, 1, 4, 0, 0.19230769230769232, ["cmp     [rbp+matchind], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_CF91"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 14, 1, 1, 9, 0, 2, 3, 0, 0.23626373626373628, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; s", "call    _strlen", "cmp     [rbp+arglen], rax", "jnz     short loc_CF80"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 2, 0, 0.15384615384615385, ["cmp     [rbp+ambiguous], 0", "jz      short loc_D00A"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 14, 1, 0, 7, 1, 1, 1, 0, 0.4395604395604396, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_CF22"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 14, 1, 1, 12, 1, 2, 2, 0, 0.2527472527472528, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdx, [rbp+arglen]; n", "mov     rcx, [rbp+arg]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     loc_CFD7"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 14, 0, 0, 3, 0, 1, 5, 0, 0.08241758241758243, ["mov     rax, [rbp+i]", "mov     [rbp+matchind], rax", "jmp     short loc_CFD7"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 14, 2, 1, 16, 1, 2, 6, 0, 0.030219780219780223, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rsi, [rdx+rax]; s2", "mov     rax, [rbp+matchind]", "imul    rax, [rbp+valsize]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rax, [rbp+valsize]", "mov     rdx, rax; n", "mov     rdi, rcx; s1", "call    _memcmp", "test    eax, eax", "jz      short loc_CFD7"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~rdi,rcx", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 5, 0, 0.08241758241758243, ["cmp     [rbp+vallist], 0", "jz      short loc_CFD3"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 14, 0, 0, 1, 0, 0, 6, 0, 0.030219780219780223, ["mov     [rbp+ambiguous], 1"], ["mov~[rbp+0],0"]], [1, 0, 14, 1, 0, 1, 0, 0, 3, 0, 0.34065934065934067, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [4, 0, 14, 1, 1, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+arg], rdi", "mov     [rbp+arglist], rsi", "mov     [rbp+vallist], rdx", "mov     [rbp+valsize], rcx", "mov     [rbp+matchind], 0FFFFFFFFFFFFFFFFh", "mov     [rbp+ambiguous], 0", "mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+arglen], rax", "mov     [rbp+i], 0", "jmp     loc_CFDC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]]], "func_feature": [4, 3, 15, 0, 15, 21, 1, 77, 0.12674, 0, 7], "succs": [[], [0], [0], [0], [9, 11], [1, 4], [2, 3], [8, 6], [5, 13], [13], [12, 13], [10, 12], [13], [7], [7]], "fname": "argmatch", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 3, 0, 2, 0, 0, 0.08333333333333333, ["lea     rdi, aInvalidArgumen; \"invalid argument %s for %s\"", "call    _gettext", "jmp     short loc_D046"], ["lea~rdi,<TAG>", "call~FOO", "jmp~FOO"]], [2, 0, 3, 1, 0, 9, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+context], rdi", "mov     [rbp+value], rsi", "mov     [rbp+problem], rdx", "cmp     [rbp+problem], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_D03A"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 0.08333333333333333, ["lea     rdi, aAmbiguousArgum; \"ambiguous argument %s for %s\"", "call    _gettext"], ["lea~rdi,<TAG>", "call~FOO"]], [7, 0, 0, 1, 3, 25, 0, 3, 2, 0, 0.0, ["mov     [rbp+format], rax", "mov     rax, [rbp+context]", "mov     rsi, rax; arg", "mov     edi, 1; n", "call    quote_n", "mov     rbx, rax", "mov     rax, [rbp+value]", "mov     rdx, rax; arg", "mov     esi, 8; s", "mov     edi, 0; n", "call    quotearg_n_style", "mov     rdx, rax", "mov     rax, [rbp+format]", "mov     r8, rbx", "mov     rcx, rdx", "mov     rdx, rax; format", "mov     esi, 0; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "nop", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rbx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~r8,rbx", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "mov~eax,0", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [5, 0, 7, 0, 4, 4, 1, 39, 0.04167, 2, 2], "succs": [[3], [0, 2], [3], []], "fname": "argmatch_invalid", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 7, 1, 2, 16, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+arglist], rdi", "mov     [rbp+vallist], rsi", "mov     [rbp+valsize], rdx", "mov     [rbp+last_val], 0", "mov     rbx, cs:stderr@@GLIBC_2_2_5", "lea     rdi, aValidArguments; \"Valid arguments are:\"", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "mov     [rbp+i], 0", "jmp     loc_D1B0"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 7, 1, 2, 13, 0, 2, 0, 3, 0.047619047619047616, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; arg", "call    quote", "mov     rdx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rsi, aS_2; \", %s\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [0, 0, 7, 1, 1, 12, 1, 2, 0, 4, 0.11904761904761904, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+valsize]; n", "mov     rax, [rbp+last_val]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jz      short loc_D16F"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 7, 1, 0, 7, 1, 1, 0, 1, 0.5238095238095237, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_D0E8"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 7, 1, 0, 1, 0, 0, 0, 2, 0.3571428571428571, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [2, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rsi, rax; stream", "mov     edi, 0Ah; c", "call    _putc_unlocked", "nop", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["mov~rax,<TAG>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 7, 3, 2, 20, 0, 3, 0, 3, 0.16666666666666666, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; arg", "call    quote", "mov     rdx, rax", "mov     rax, cs:stderr@@GLIBC_2_2_5", "lea     rsi, aS_1; \"\\n  - %s\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "add     rax, rdx", "mov     [rbp+last_val], rax", "jmp     short loc_D1AB"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 0, 4, 0.3571428571428571, ["cmp     [rbp+i], 0", "jz      short loc_D11A"], ["cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [8, 2, 13, 0, 8, 10, 1, 80, 0.19643, 4, 9], "succs": [[3], [4], [1, 6], [5, 7], [3], [], [4], [2, 6]], "fname": "argmatch_valid", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 3, 15, 0, 3, 0, 0, 0.08333333333333333, ["mov     rdx, [rbp+res]; problem", "mov     rcx, [rbp+arg]", "mov     rax, [rbp+context]", "mov     rsi, rcx; value", "mov     rdi, rax; context", "call    argmatch_invalid", "mov     rdx, [rbp+valsize]; valsize", "mov     rcx, [rbp+vallist]", "mov     rax, [rbp+arglist]", "mov     rsi, rcx; vallist", "mov     rdi, rax; arglist", "call    argmatch_valid", "mov     rax, [rbp+exit_fn]", "call    rax", "mov     rax, 0FFFFFFFFFFFFFFFFh"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "call~rax", "mov~rax,0"]], [2, 0, 3, 1, 1, 18, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+context], rdi", "mov     [rbp+arg], rsi", "mov     [rbp+arglist], rdx", "mov     [rbp+vallist], rcx", "mov     [rbp+valsize], r8", "mov     [rbp+exit_fn], r9", "mov     rcx, [rbp+valsize]; valsize", "mov     rdx, [rbp+vallist]; vallist", "mov     rsi, [rbp+arglist]; arglist", "mov     rax, [rbp+arg]", "mov     rdi, rax; arg", "call    argmatch", "mov     [rbp+res], rax", "cmp     [rbp+res], 0", "js      short loc_D234"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+res]", "jmp     short locret_D26F"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [4, 0, 6, 0, 4, 4, 4, 37, 0.04167, 0, 1], "succs": [[2], [0, 3], [], [2]], "fname": "__xargmatch_internal", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 6, 1, 0, 1, 0, 0, 0, 0, 0.06666666666666667, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 6, 1, 1, 12, 1, 2, 2, 2, 0.16666666666666666, ["mov     rax, [rbp+valsize]", "imul    rax, [rbp+i]", "mov     rdx, rax", "mov     rax, [rbp+vallist]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+valsize]; n", "mov     rax, [rbp+value]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_D2D6"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 1, 0, 6, 0, 1, 3, 1, 0.03333333333333333, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "jmp     short locret_D2FB"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.1, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 6, 1, 0, 9, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+value], rdi", "mov     [rbp+arglist], rsi", "mov     [rbp+vallist], rdx", "mov     [rbp+valsize], rcx", "mov     [rbp+i], 0", "jmp     short loc_D2DB"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 6, 1, 0, 7, 1, 1, 1, 2, 0.3333333333333333, ["mov     rax, [rbp+i]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+arglist]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_D293"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]]], "func_feature": [1, 2, 5, 0, 7, 8, 0, 38, 0.1, 0, 5], "succs": [[6], [0, 3], [], [2], [2], [6], [1, 4]], "fname": "argmatch_to_argument", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 1, 5, 0, 2, 0, 0, 0.09523809523809523, ["mov     rax, [rbp+s]", "mov     rdi, rax; name", "call    last_component", "cmp     [rbp+s], rax", "jnz     short loc_D34A"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 4, 0, 0, 4, 1, 1, 2, 2, 0.14285714285714285, ["mov     rax, [rbp+s]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_D34A"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 1, 2, 0.23809523809523808, ["cmp     [rbp+s], 0", "jz      short loc_D34A"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 7, 1, 0, 6, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], rdi", "cmp     [rbp+s], 0", "jnz     short loc_D320"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 1, 3, 0.0, ["lea     rdi, aSimpleBackupSu; \"SIMPLE_BACKUP_SUFFIX\"", "call    _getenv", "mov     [rbp+s], rax"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.011904761904761904, ["mov     rax, [rbp+s]", "jmp     short loc_D351"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.10714285714285714, ["lea     rax, off_1AF71"], ["lea~rax,<TAG>"]], [0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0.0, ["mov     cs:simple_backup_suffix, rax", "nop", "leave", "retn"], ["mov~<TAG>,rax", "nop", "leave", "retn"]]], "func_feature": [2, 1, 7, 0, 8, 11, 2, 27, 0.0744, 3, 1], "succs": [[5, 6], [0, 6], [1, 6], [2, 4], [2], [7], [7], []], "fname": "set_simple_backup_suffix", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 11, 0, 0, 2, 0, 1, 0, 0, 0.0392156862745098, ["cmp     [rbp+name_max], 0FFFFFFFFFFFFFFFFh", "jge     short loc_D469"], ["cmp~[rbp+0],0", "jge~FOO"]], [1, 0, 13, 0, 0, 2, 0, 0, 4, 6, 0.16013071895424838, ["cmp     [rbp+name_max], 0", "jns     short loc_D472"], ["cmp~[rbp+0],0", "jns~FOO"]], [3, 0, 14, 1, 3, 22, 1, 4, 3, 7, 0.042483660130718956, ["mov     rax, [rbp+base]", "movzx   eax, word ptr [rax]", "mov     word ptr [rbp+tmp], ax", "mov     rax, [rbp+base]", "mov     word ptr [rax], 2Eh ; '.'", "call    ___errno_location", "mov     dword ptr [rax], 0", "mov     rax, [rbp+file]", "mov     esi, 3; name", "mov     rdi, rax; path", "call    _pathconf", "mov     [rbp+name_max], rax", "call    ___errno_location", "mov     eax, [rax]", "test    eax, eax", "setz    al", "movzx   eax, al", "sub     [rbp+name_max], rax", "movzx   edx, word ptr [rbp+tmp]", "mov     rax, [rbp+base]", "mov     [rax], dx", "jmp     short loc_D454"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[ord ptr [rbp+0],ax", "mov~rax,[rbp+0]", "mov~<TAG>,0", "call~FOO", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "test~eax,eax", "setz~al", "movzx~eax,al", "sub~[rbp+0],rax", "movzx~edx,[ord ptr [rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,dx", "jmp~FOO"]], [1, 0, 16, 0, 0, 2, 0, 0, 2, 8, 0.05228758169934641, ["cmp     [rbp+dir_fd], 0", "jns     short loc_D423"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 17, 0, 0, 4, 1, 1, 1, 4, 0.032679738562091505, ["mov     rax, [rbp+base_max]", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_D47D"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 1, 18, 1, 2, 23, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+file], rdi", "mov     [rbp+filelen], rsi", "mov     eax, edx", "mov     [rbp+dir_fd], ecx", "mov     [rbp+base_max], r8", "mov     [rbp+e], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+file]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+base], rax", "mov     rax, [rbp+base]", "mov     rdi, rax; name", "call    base_len", "mov     [rbp+baselen], rax", "mov     [rbp+baselen_max], 0FFh", "cmp     [rbp+baselen], 0Eh", "jbe     loc_D488"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jbe~FOO"]], [0, 0, 7, 0, 0, 3, 0, 0, 2, 3, 0.22875816993464054, ["mov     rax, [rbp+base_max]", "mov     rax, [rax]", "mov     [rbp+baselen_max], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 8, 0, 0, 2, 0, 0, 6, 4, 0.20915032679738563, ["mov     rdx, [rbp+base_max]", "mov     [rdx], rax"], ["mov~rdx,[rbp+0]", "mov~<TAG>,rax"]], [1, 0, 3, 2, 0, 10, 0, 0, 3, 2, 0.0196078431372549, ["mov     rdx, [rbp+base]", "mov     rax, [rbp+baselen]", "add     rdx, rax", "movzx   eax, [rbp+e]", "mov     [rdx], al", "mov     rax, [rbp+baselen]", "lea     rdx, [rax+1]", "mov     rax, [rbp+base]", "add     rax, rdx", "mov     byte ptr [rax], 0"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "movzx~eax,[rbp+0]", "mov~<TAG>,al", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 5, 2, 0, 11, 0, 1, 2, 3, 0.08496732026143791, ["mov     rdx, [rbp+file]", "mov     rax, [rbp+filelen]", "add     rax, rdx", "mov     rdx, rax", "mov     rax, [rbp+base]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+baselen], rax", "mov     rax, [rbp+baselen_max]", "cmp     rax, [rbp+baselen]", "ja      short loc_D4C4"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [1, 0, 4, 1, 0, 3, 0, 0, 3, 3, 0.0, ["mov     rax, [rbp+baselen_max]", "sub     rax, 1", "mov     [rbp+baselen], rax"], ["mov~rax,[rbp+0]", "sub~rax,0", "mov~[rbp+0],rax"]], [1, 0, 9, 0, 0, 2, 0, 1, 6, 5, 0.014705882352941176, ["mov     eax, 0Eh", "jmp     short loc_D476"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 6, 5, 0.014705882352941176, ["mov     rax, 0FFFFFFFFFFFFFFFFh", "jmp     short loc_D476"], ["mov~rax,0", "jmp~FOO"]], [0, 0, 6, 0, 0, 3, 0, 0, 1, 2, 0.23529411764705882, ["mov     rax, [rbp+baselen_max]", "cmp     rax, [rbp+baselen]", "jnb     short loc_D4E7"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 14, 1, 3, 13, 1, 3, 3, 7, 0.042483660130718956, ["call    ___errno_location", "mov     dword ptr [rax], 0", "mov     eax, [rbp+dir_fd]", "mov     esi, 3; name", "mov     edi, eax; fd", "call    _fpathconf", "mov     [rbp+name_max], rax", "call    ___errno_location", "mov     eax, [rax]", "test    eax, eax", "setz    al", "movzx   eax, al", "sub     [rbp+name_max], rax"], ["call~FOO", "mov~<TAG>,0", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "test~eax,eax", "setz~al", "movzx~eax,al", "sub~[rbp+0],rax"]], [0, 0, 9, 0, 0, 1, 0, 0, 5, 5, 0.12418300653594772, ["mov     rax, [rbp+name_max]"], ["mov~rax,[rbp+0]"]], [0, 0, 2, 0, 0, 4, 1, 1, 2, 1, 0.10457516339869281, ["nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_D4FC"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [9, 5, 16, 1, 19, 25, 1, 112, 0.07396, 1, 8], "succs": [[11, 12], [0, 15], [1], [2, 14], [3, 6], [4, 13], [13], [6], [16], [8, 10], [8], [7], [7], [16, 9], [1], [7], [17, 18], [], []], "fname": "check_extension", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0.04355400696864112, ["mov     rax, [rbp+buffer]", "mov     rdx, [rbp+buf]", "mov     [rax], rdx", "mov     eax, [rbp+result]"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,[rbp+0]"]], [1, 0, 35, 0, 1, 6, 0, 2, 2, 3, 0.47502903600464574, ["mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _readdir", "mov     [rbp+dp], rax", "cmp     [rbp+dp], 0", "jnz     loc_D639"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 35, 0, 0, 5, 3, 1, 15, 4, 0.1437282229965157, ["mov     rax, rcx", "and     eax, 1", "xor     eax, 1", "test    al, al", "jz      short loc_D807"], ["mov~rax,rcx", "and~eax,0", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 35, 0, 0, 2, 1, 0, 14, 5, 0.14605110336817653, ["test    rax, rax", "jns     short loc_D7F6"], ["test~rax,rax", "jns~FOO"]], [1, 0, 35, 0, 0, 1, 0, 0, 15, 5, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 35, 2, 0, 13, 2, 0, 9, 6, 0.0, ["movzx   edx, [rbp+all_9s]", "mov     rcx, [rbp+p]", "mov     rax, [rbp+versionlen]", "add     rax, rcx", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "setz    al", "movzx   eax, al", "and     eax, edx", "test    eax, eax", "setnz   al", "mov     [rbp+all_9s], al", "add     [rbp+versionlen], 1"], ["movzx~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rcx", "movzx~eax,<TAG>", "cmp~al,0", "setz~al", "movzx~eax,al", "and~eax,edx", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "add~[rbp+0],0"]], [2, 0, 35, 2, 0, 8, 0, 0, 8, 5, 0.3420441347270616, ["mov     rdx, [rbp+p]", "mov     rax, [rbp+versionlen]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 30h ; '0'", "cmp     eax, 9", "jbe     short loc_D6DF"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "jbe~FOO"]], [0, 0, 35, 1, 1, 12, 1, 2, 4, 5, 0.38385598141695704, ["mov     rax, [rbp+baselen]", "lea     rdx, [rax+2]; n", "mov     rax, [rbp+dp]", "lea     rcx, [rax+13h]", "mov     rsi, [rbp+base_offset]", "mov     rax, [rbp+buf]", "add     rax, rsi", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jz      short loc_D690"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "lea~rcx,[rax+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rsi", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 35, 2, 1, 9, 0, 1, 3, 5, 0.40882694541231124, ["mov     rax, [rbp+dp]", "add     rax, 13h", "mov     rdi, rax; s", "call    _strlen", "mov     rdx, rax", "mov     rax, [rbp+baselen]", "add     rax, 4", "cmp     rdx, rax", "jnb     short loc_D65E"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,0", "cmp~rdx,rax", "jnb~FOO"]], [0, 0, 35, 0, 0, 1, 0, 1, 5, 4, 0.002032520325203252, ["jmp     loc_D8DA"], ["jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.04645760743321719, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_D917"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.0078397212543554, ["mov     eax, [rbp+result]", "jmp     loc_D903"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 0, 1, 17, 2, 0.013066202090592335, ["mov     rax, [rbp+buffer]", "mov     rdx, [rbp+buf]", "mov     [rax], rdx", "mov     eax, 3", "jmp     loc_D903"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~eax,0", "jmp~FOO"]], [0, 0, 35, 0, 1, 11, 1, 2, 13, 5, 0.028455284552845527, ["mov     rax, [rbp+filelen]", "lea     rdx, [rax+2]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+versionlen]; n", "mov     rax, [rbp+p]", "mov     rsi, rax; s2", "mov     rdi, rcx; s1", "call    _memcmp", "test    eax, eax", "jle     short loc_D798"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "test~eax,eax", "jle~FOO"]], [0, 0, 35, 0, 0, 3, 0, 1, 12, 4, 0.04994192799070848, ["mov     rax, [rbp+versionlenmax]", "cmp     rax, [rbp+versionlen]", "jnz     loc_D8DA"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 35, 0, 0, 1, 0, 1, 14, 4, 0.011033681765389082, ["jmp     loc_D8DA"], ["jmp~FOO"]], [4, 0, 42, 2, 1, 32, 1, 2, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0B0h", "mov     [rbp+dir_fd], edi", "mov     [rbp+buffer], rsi", "mov     [rbp+buffer_size], rdx", "mov     [rbp+filelen], rcx", "mov     [rbp+base_offset], r8", "mov     [rbp+dirpp], r9", "mov     rax, [rbp+arg_0]", "mov     [rbp+pnew_fd], rax", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+result], 2", "mov     rax, [rbp+dirpp]", "mov     rax, [rax]", "mov     [rbp+dirp], rax", "mov     rax, [rbp+buffer]", "mov     rax, [rax]", "mov     [rbp+buf], rax", "mov     [rbp+versionlenmax], 1", "mov     rdx, [rbp+base_offset]", "mov     rax, [rbp+buf]", "add     rax, rdx", "mov     [rbp+base], rax", "mov     rax, [rbp+base]", "mov     rdi, rax; name", "call    base_len", "mov     [rbp+baselen], rax", "cmp     [rbp+dirp], 0", "jz      short loc_D5A8"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 35, 0, 0, 1, 0, 1, 4, 4, 0.0029036004645760743, ["jmp     loc_D8DA"], ["jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 35, 0, 1, 4, 0, 2, 1, 4, 0.019454123112659698, ["mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _rewinddir", "jmp     loc_D8DA"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 35, 0, 0, 4, 0, 1, 3, 4, 0.0743321718931475, ["mov     rax, [rbp+dirpp]", "mov     rdx, [rbp+dirp]", "mov     [rax], rdx", "jmp     loc_D8DA"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "jmp~FOO"]], [2, 0, 35, 2, 0, 10, 0, 1, 5, 4, 0.3597560975609756, ["mov     rax, [rbp+dp]", "lea     rdx, [rax+13h]", "mov     rax, [rbp+baselen]", "add     rax, 2", "add     rax, rdx", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "cmp     al, 30h ; '0'", "jle     loc_D8DA"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,0", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [0, 0, 35, 0, 0, 1, 0, 1, 7, 4, 0.005807200929152149, ["jmp     loc_D8DA"], ["jmp~FOO"]], [1, 0, 35, 1, 0, 6, 0, 1, 9, 4, 0.31997677119628337, ["mov     rdx, [rbp+p]", "mov     rax, [rbp+versionlen]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 7Eh ; '~'", "jnz     loc_D8DA"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 35, 1, 0, 7, 1, 1, 10, 4, 0.2880371660859466, ["mov     rax, [rbp+versionlen]", "lea     rdx, [rax+1]", "mov     rax, [rbp+p]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     loc_D8DA"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 35, 1, 0, 6, 0, 0, 15, 4, 0.17334494773519163, ["mov     rax, [rbp+q]", "movzx   eax, byte ptr [rax]", "add     eax, 1", "mov     edx, eax", "mov     rax, [rbp+q]", "mov     [rax], dl"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "add~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,dl"]], [3, 0, 37, 1, 0, 10, 0, 1, 2, 3, 0.0664924506387921, ["movzx   edx, word ptr [rbp+tmp]", "mov     rax, [rbp+base]", "mov     [rax], dx", "mov     rdx, [rbp+base]", "mov     rax, [rbp+baselen]", "add     rax, rdx", "mov     dword ptr [rax], 7E317E2Eh", "mov     byte ptr [rax+4], 0", "cmp     [rbp+dirp], 0", "jnz     short loc_D626"], ["movzx~edx,[ord ptr [rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,dx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~[yte ptr [rax+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [3, 0, 40, 0, 1, 15, 0, 2, 1, 4, 0.003774680603948897, ["mov     rax, [rbp+base]", "movzx   eax, word ptr [rax]", "mov     word ptr [rbp+tmp], ax", "mov     rax, [rbp+base]", "mov     word ptr [rax], 2Eh ; '.'", "mov     rdx, [rbp+pnew_fd]", "mov     rsi, [rbp+buf]; dir", "mov     eax, [rbp+dir_fd]", "mov     rcx, rdx; pnew_fd", "mov     edx, 0; extra_flags", "mov     edi, eax; dir_fd", "call    opendirat", "mov     [rbp+dirp], rax", "cmp     [rbp+dirp], 0", "jnz     short loc_D5F7"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[ord ptr [rbp+0],ax", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 39, 0, 1, 4, 0, 2, 2, 4, 0.0011614401858304297, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 0Ch", "jnz     short loc_D5F7"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 38, 0, 0, 1, 0, 0, 3, 4, 0.0, ["mov     [rbp+result], 3"], ["mov~[rbp+0],0"]], [2, 0, 35, 0, 0, 7, 0, 1, 7, 6, 0.3234610917537747, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "setz    al", "mov     [rbp+all_9s], al", "mov     [rbp+versionlen], 1", "jmp     short loc_D708"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "setz~al", "mov~[rbp+0],al", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 35, 1, 0, 1, 0, 0, 16, 4, 0.0, ["shl     [rbp+new_buffer_size], 1"], ["shl~[rbp+0],0"]], [2, 0, 35, 1, 0, 5, 0, 1, 14, 5, 0.1954123112659698, ["sub     [rbp+q], 1", "mov     rax, [rbp+q]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jz      short loc_D8B1"], ["sub~[rbp+0],0", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [3, 0, 35, 3, 1, 26, 0, 2, 13, 6, 0.17682926829268292, ["mov     rdx, [rbp+buf]", "mov     rax, [rbp+filelen]", "add     rax, rdx", "mov     [rbp+q], rax", "mov     rax, [rbp+q]", "lea     rdx, [rax+1]", "mov     [rbp+q], rdx", "mov     byte ptr [rax], 2Eh ; '.'", "mov     rax, [rbp+q]", "lea     rdx, [rax+1]", "mov     [rbp+q], rdx", "mov     byte ptr [rax], 7Eh ; '~'", "mov     rax, [rbp+q]", "mov     byte ptr [rax], 30h ; '0'", "movzx   eax, [rbp+all_9s]", "add     [rbp+q], rax", "mov     rax, [rbp+versionlen]", "lea     rdx, [rax+2]; n", "mov     rcx, [rbp+p]", "mov     rax, [rbp+q]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rax, [rbp+versionlen]", "add     [rbp+q], rax", "jmp     short loc_D8B8"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~<TAG>,0", "movzx~eax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "jmp~FOO"]], [1, 0, 35, 0, 0, 2, 0, 0, 15, 6, 0.0, ["mov     rax, [rbp+q]", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [1, 0, 35, 3, 0, 15, 0, 0, 12, 7, 0.2218350754936121, ["movzx   edx, [rbp+all_9s]", "mov     rax, [rbp+versionlen]", "add     rax, rdx", "mov     [rbp+versionlenmax], rax", "movzx   eax, [rbp+all_9s]", "movzx   eax, al", "mov     [rbp+result], eax", "mov     rdx, [rbp+filelen]", "mov     rax, [rbp+versionlenmax]", "add     rax, rdx", "add     rax, 4", "mov     [rbp+new_buffer_size], rax", "mov     rax, [rbp+buffer_size]", "cmp     rax, [rbp+new_buffer_size]", "jnb     short loc_D84D"], ["movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "movzx~eax,[rbp+0]", "movzx~eax,al", "mov~[rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 35, 0, 0, 4, 0, 0, 17, 7, 0.10569105691056911, ["mov     rax, [rbp+new_buf]", "mov     [rbp+buf], rax", "mov     rax, [rbp+new_buffer_size]", "mov     [rbp+buffer_size], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 35, 0, 1, 8, 0, 2, 16, 3, 0.14140534262485482, ["mov     rdx, [rbp+new_buffer_size]", "mov     rax, [rbp+buf]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+new_buf], rax", "cmp     [rbp+new_buf], 0", "jnz     short loc_D83A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 35, 0, 0, 4, 0, 1, 6, 5, 0.351335656213705, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jle     short loc_D6C6"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [0, 0, 35, 0, 0, 3, 0, 0, 11, 5, 0.2775842044134727, ["mov     rax, [rbp+versionlenmax]", "cmp     rax, [rbp+versionlen]", "jb      short loc_D798"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [2, 0, 35, 1, 0, 5, 0, 0, 13, 6, 0.1483739837398374, ["mov     ecx, 0", "mov     edx, 2", "mov     rax, rdx", "mul     [rbp+new_buffer_size]", "jno     short loc_D7EC"], ["mov~ecx,0", "mov~edx,0", "mov~rax,rdx", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 35, 0, 0, 1, 0, 0, 14, 6, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [11, 11, 37, 1, 43, 63, 1, 271, 0.12463, 1, 24], "succs": [[10], [0, 8], [32, 38], [2, 4], [2], [6], [24, 5], [9, 22], [18, 7], [1], [19, 15], [10], [10], [16, 36], [1, 13], [], [1], [28, 20], [1], [], [1], [1], [1, 39], [1], [1, 25], [40, 1], [1], [11, 21], [27, 29], [27, 30], [27], [6], [38], [26, 35], [33], [33], [41, 34], [34], [12, 37], [31, 23], [36, 14], [42, 3], [3]], "fname": "numbered_backup", "n_num": 43}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 28, 2, 1, 14, 0, 2, 0, 0, 0.14705882352941177, ["mov     rdx, [rbp+ssize]; buffer_size", "lea     r9, [rbp+dirp]; dirpp", "mov     r8, [rbp+base_offset]; base_offset", "mov     rcx, [rbp+filelen]; filelen", "lea     rsi, [rbp+s]; buffer", "mov     eax, [rbp+dir_fd]", "sub     rsp, 8", "lea     rdi, [rbp+sdir]", "push    rdi; pnew_fd", "mov     edi, eax; dir_fd", "call    numbered_backup", "add     rsp, 10h", "cmp     eax, 1", "jz      short loc_DAC3"], ["mov~rdx,[rbp+0]", "lea~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rsi,[rbp+0]", "mov~eax,[rbp+0]", "sub~rsp,0", "lea~rdi,[rbp+0]", "push~rdi", "mov~edi,eax", "call~FOO", "add~rsp,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 28, 0, 1, 9, 0, 2, 4, 7, 0.26024955436720143, ["mov     rax, [rbp+filelen]", "lea     rdx, [rax+1]; n", "mov     rax, [rbp+s]", "mov     rcx, [rbp+file]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "cmp     [rbp+backup_type], 1", "jnz     short loc_DA54"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 2, 9, 0, 3, 11, 2, 0.012032085561497326, ["mov     rax, [rbp+s]", "mov     rdi, rax; ptr", "call    free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     eax, 0", "jmp     short loc_DBCA"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [0, 0, 5, 0, 0, 3, 1, 1, 10, 3, 0.04590017825311943, ["mov     rax, [rbp+dirp]", "test    rax, rax", "jz      short loc_DB8D"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 11, 3, 0.0, ["mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _closedir"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [3, 0, 28, 0, 0, 3, 0, 0, 3, 8, 0.11140819964349376, ["mov     [rbp+dirp], 0", "mov     [rbp+sdir], 0FFFFFFFFh", "mov     [rbp+base_max], 0"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 30, 2, 1, 12, 1, 2, 2, 3, 0.10695187165775401, ["mov     rdx, [rbp+filelen]", "mov     rax, [rbp+backup_suffix_size_guess]", "add     rax, rdx", "add     rax, 1", "mov     [rbp+ssize], rax", "mov     rax, [rbp+ssize]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+s], rax", "mov     rax, [rbp+s]", "test    rax, rax", "jnz     short loc_D9F6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [1, 0, 34, 4, 2, 31, 2, 3, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "add     rsp, 0FFFFFFFFFFFFFF80h", "mov     [rbp+dir_fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+backup_type], edx", "mov     eax, ecx", "mov     [rbp+rename], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+file]", "mov     rdi, rax; name", "call    last_component", "mov     rdx, rax", "mov     rax, [rbp+file]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+base_offset], rax", "mov     rdx, [rbp+base_offset]", "mov     rax, [rbp+file]", "add     rax, rdx", "mov     rdi, rax; s", "call    _strlen", "mov     rdx, rax", "mov     rax, [rbp+base_offset]", "add     rax, rdx", "mov     [rbp+filelen], rax", "mov     rax, cs:simple_backup_suffix", "test    rax, rax", "jnz     short loc_D993"], ["push~rbp", "mov~rbp,rsp", "add~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~eax,ecx", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 7, 4, 0.0962566844919786, ["cmp     eax, 2", "jz      short loc_DA95"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 28, 0, 0, 2, 0, 0, 6, 5, 0.12388591800356505, ["cmp     eax, 1", "jb      short loc_DB07"], ["cmp~eax,0", "jb~FOO"]], [2, 0, 3, 0, 2, 7, 0, 3, 9, 2, 0.013368983957219251, ["mov     rax, [rbp+s]", "mov     rdi, rax; ptr", "call    free", "call    ___errno_location", "mov     dword ptr [rax], 0Ch", "mov     eax, 0", "jmp     loc_DBCA"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 8, 3, 0.0552584670231729, ["cmp     eax, 3", "jz      short loc_DAE6"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 33, 0, 1, 2, 0, 1, 1, 5, 0.0, ["mov     edi, 0; s", "call    set_simple_backup_suffix"], ["mov~edi,0", "call~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 8, 7, 0.02762923351158645, ["cmp     [rbp+backup_type], 2", "jnz     short loc_DAC3"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 28, 0, 0, 3, 1, 0, 7, 6, 0.19964349376114082, ["mov     eax, [rbp+sdir]", "test    eax, eax", "jns     short loc_DB2D"], ["mov~eax,[rbp+0]", "test~eax,eax", "jns~FOO"]], [1, 0, 28, 0, 0, 4, 2, 1, 6, 5, 0.28609625668449196, ["movzx   eax, [rbp+rename]", "xor     eax, 1", "test    al, al", "jnz     loc_DBAD"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [2, 0, 28, 0, 0, 2, 0, 0, 8, 6, 0.0, ["mov     [rbp+sdir], 0FFFFFF9Ch", "mov     [rbp+base_offset], 0"], ["mov~[rbp+0],0", "mov~[rbp+0],0"]], [0, 0, 28, 0, 0, 1, 0, 0, 7, 6, 0.0142602495543672, ["nop"], ["nop"]], [1, 0, 28, 0, 1, 5, 0, 2, 9, 4, 0.18404634581105167, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "cmp     [rbp+e], 11h", "jz      loc_DA0D"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 7, 4, 0.07219251336898395, ["nop", "jmp     short loc_DBB1"], ["nop", "jmp~FOO"]], [0, 0, 6, 0, 0, 1, 0, 0, 9, 4, 0.012032085561497326, ["nop"], ["nop"]], [2, 0, 28, 0, 1, 16, 1, 2, 8, 5, 0.2103386809269162, ["cmp     [rbp+backup_type], 1", "setnz   al", "movzx   eax, al", "mov     [rbp+flags], eax", "mov     rdx, [rbp+s]", "mov     rax, [rbp+base_offset]", "lea     rcx, [rdx+rax]; dst", "mov     edx, [rbp+sdir]; fd2", "mov     esi, [rbp+flags]", "mov     rax, [rbp+file]", "mov     r8d, esi; flags", "mov     rsi, rax; src", "mov     edi, 0FFFFFF9Ch; fd1", "call    renameatu", "test    eax, eax", "jz      short loc_DBB0"], ["cmp~[rbp+0],0", "setnz~al", "movzx~eax,al", "mov~[rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~edx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,esi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 32, 1, 1, 9, 0, 2, 1, 4, 0.0570409982174688, ["mov     rax, cs:simple_backup_suffix", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+simple_backup_suffix_size], rax", "mov     rax, [rbp+simple_backup_suffix_size]", "mov     [rbp+backup_suffix_size_guess], rax", "cmp     [rbp+backup_suffix_size_guess], 8", "ja      short loc_D9C1"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "ja~FOO"]], [0, 0, 5, 0, 0, 3, 1, 1, 8, 3, 0.07352941176470588, ["mov     rax, [rbp+dirp]", "test    rax, rax", "jz      short loc_DBC6"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [1, 0, 31, 0, 0, 1, 0, 0, 2, 4, 0.0, ["mov     [rbp+backup_suffix_size_guess], 9"], ["mov~[rbp+0],0"]], [1, 0, 28, 1, 1, 9, 0, 1, 9, 7, 0.0, ["mov     [rbp+backup_type], 1", "mov     rax, cs:simple_backup_suffix", "mov     rcx, [rbp+s]", "mov     rdx, [rbp+filelen]", "add     rcx, rdx", "mov     rdx, [rbp+simple_backup_suffix_size]; n", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy"], ["mov~[rbp+0],0", "mov~rax,<TAG>", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "add~rcx,rdx", "mov~rdx,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 9, 3, 0.0, ["mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _closedir"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 9, 2, 0.03609625668449198, ["mov     rax, [rbp+s]"], ["mov~rax,[rbp+0]"]], [0, 0, 28, 1, 1, 9, 0, 2, 5, 6, 0.09982174688057041, ["mov     rax, cs:simple_backup_suffix", "mov     rcx, [rbp+s]", "mov     rdx, [rbp+filelen]", "add     rcx, rdx", "mov     rdx, [rbp+simple_backup_suffix_size]; n", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "jmp     loc_DB08"], ["mov~rax,<TAG>", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "add~rcx,rdx", "mov~rdx,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.0570409982174688, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_DBDE"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.013368983957219251, ["mov     rax, [rbp+s]", "jmp     loc_DBCA"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 28, 0, 1, 10, 0, 2, 6, 6, 0.06684491978609625, ["mov     edx, [rbp+sdir]", "mov     rax, [rbp+s]", "lea     rcx, [rbp+base_max]", "mov     rsi, [rbp+filelen]; filelen", "mov     r8, rcx; base_max", "mov     ecx, edx; dir_fd", "mov     edx, 7Eh ; '~'; e", "mov     rdi, rax; file", "call    check_extension", "jmp     short loc_DB08"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~r8,rcx", "mov~ecx,edx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 28, 0, 0, 1, 0, 1, 9, 6, 0.02762923351158645, ["jmp     short loc_DB08"], ["jmp~FOO"]]], "func_feature": [19, 10, 40, 1, 35, 49, 2, 189, 0.06886, 2, 11], "succs": [[9, 33], [0, 28], [29], [2, 4], [2], [1], [5, 30], [12, 22], [11, 13], [8, 17], [29], [10, 34], [22], [25, 33], [16, 21], [19, 14], [21], [15], [1, 3], [23], [23], [18, 20], [24, 6], [26, 27], [6], [33], [27], [29], [15], [32, 31], [29], [], [], [15], [15]], "fname": "backupfile_internal", "n_num": 35}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+dir_fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+backup_type], edx", "mov     edx, [rbp+backup_type]; backup_type", "mov     rsi, [rbp+file]; file", "mov     eax, [rbp+dir_fd]", "mov     ecx, 1; rename", "mov     edi, eax; dir_fd", "call    backupfile_internal", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 14, 0.0, 0, 1], "succs": [[]], "fname": "backup_file_rename", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 1, 2, 1, 1, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+dir_fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+backup_type], edx", "mov     edx, [rbp+backup_type]; backup_type", "mov     rsi, [rbp+file]; file", "mov     eax, [rbp+dir_fd]", "mov     ecx, 0; rename", "mov     edi, eax; dir_fd", "call    backupfile_internal", "mov     [rbp+result], rax", "cmp     [rbp+result], 0", "jnz     short loc_DC42"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+result]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 0, 3, 0, 3, 2, 1, 19, 0.0, 0, 1], "succs": [[1, 2], [], []], "fname": "find_backup_file_name", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 0, 4, 1, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+version]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_DC71"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [2, 0, 4, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+context], rdi", "mov     [rbp+version], rsi", "cmp     [rbp+version], 0", "jz      short loc_DC6A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.125, ["mov     eax, 2", "jmp     short locret_DCB1"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 1, 12, 0, 1, 2, 1, 0.041666666666666664, ["mov     rdx, cs:argmatch_die", "mov     rsi, [rbp+version]; arg", "mov     rax, [rbp+context]", "mov     r9, rdx; exit_fn", "mov     r8d, 4; valsize", "lea     rcx, backup_types; vallist", "lea     rdx, backup_args; arglist", "mov     rdi, rax; context", "call    __xargmatch_internal", "lea     rdx, ds:0[rax*4]", "lea     rax, backup_types", "mov     eax, [rdx+rax]"], ["mov~rdx,<TAG>", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,rdx", "mov~r8d,0", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~rdi,rax", "call~FOO", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>"]]], "func_feature": [1, 1, 4, 0, 5, 6, 2, 27, 0.05, 3, 1], "succs": [[3, 4], [0, 3], [], [2], [2]], "fname": "get_version", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 4, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+context], rdi", "mov     [rbp+version], rsi", "cmp     [rbp+version], 0", "jz      short loc_DCEA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 1, 6, 0, 2, 0, 1, 0.041666666666666664, ["mov     rdx, [rbp+version]", "mov     rax, [rbp+context]", "mov     rsi, rdx; version", "mov     rdi, rax; context", "call    get_version", "jmp     short locret_DD05"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 3, 0, 0, 4, 1, 1, 0, 2, 0.08333333333333333, ["mov     rax, [rbp+version]", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_DCEA"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 2, 5, 0, 2, 0, 1, 0.125, ["lea     rdi, aVersionControl; \"VERSION_CONTROL\"", "call    _getenv", "mov     rsi, rax; version", "lea     rdi, aVersionControl_0; \"$VERSION_CONTROL\"", "call    get_version"], ["lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "lea~rdi,<TAG>", "call~FOO"]]], "func_feature": [3, 1, 6, 0, 5, 6, 1, 24, 0.05, 2, 1], "succs": [[2, 4], [3], [1, 4], [], [3]], "fname": "xget_version", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 5, 2, 0, 10, 0, 1, 0, 0, 0.1043956043956044, ["mov     rax, [rbp+a]", "mov     edx, 0", "div     [rbp+n]", "mov     [rbp+q], rax", "mov     rax, [rbp+q]", "imul    rax, [rbp+b]", "mov     [rbp+lcm], rax", "mov     rax, [rbp+lcm]", "cmp     rax, [rbp+lcm_max]", "ja      short loc_DDBB"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [2, 0, 8, 1, 0, 6, 0, 1, 3, 4, 0.11538461538461539, ["mov     rax, [rbp+m]", "mov     edx, 0", "div     [rbp+n]", "mov     [rbp+r], rdx", "cmp     [rbp+r], 0", "jnz     short loc_DD52"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 1, 4, 0.016483516483516484, ["cmp     [rbp+b], 0", "jz      short loc_DD2B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 14, 0, 0, 7, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+a], rdi", "mov     [rbp+b], rsi", "mov     [rbp+lcm_max], rdx", "cmp     [rbp+a], 0", "jnz     short loc_DD39"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 2, 3, 0.01098901098901099, ["mov     rax, [rbp+b]", "jmp     short loc_DD30"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 1, 3, 0, 0, 1, 0, 0, 2, 3, 0.01098901098901099, ["mov     eax, 2000h"], ["mov~eax,<STR>"]], [0, 0, 1, 0, 0, 3, 0, 0, 3, 1, 0.049450549450549455, ["mov     rax, [rbp+lcm_max]", "cmp     [rbp+size], rax", "cmovbe  rax, [rbp+size]"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovbe~rax,[rbp+0]"]], [0, 0, 2, 0, 0, 2, 0, 1, 3, 2, 0.03296703296703297, ["mov     [rbp+size], rax", "jmp     loc_DDC3"], ["mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0.06043956043956045, ["mov     rax, [rbp+a]", "mov     [rbp+size], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 8, 0, 0, 5, 0, 1, 2, 5, 0.05494505494505495, ["mov     rax, [rbp+a]", "mov     [rbp+m], rax", "mov     rax, [rbp+b]", "mov     [rbp+n], rax", "jmp     short loc_DD62"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 1, 3, 0.049450549450549455, ["cmp     [rbp+b], 0", "jz      short loc_DDBB"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.016483516483516484, ["mov     rax, [rbp+lcm]", "jmp     short loc_DDD0"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 4, 1, 0, 5, 0, 1, 5, 2, 0.04395604395604396, ["mov     rax, [rbp+lcm]", "mov     edx, 0", "div     [rbp+b]", "cmp     [rbp+q], rax", "jnz     short loc_DDBB"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 8, 0, 0, 4, 0, 0, 4, 5, 0.0, ["mov     rax, [rbp+n]", "mov     [rbp+m], rax", "mov     rax, [rbp+r]", "mov     [rbp+n], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]]], "func_feature": [0, 0, 10, 0, 15, 20, 1, 55, 0.03773, 0, 4], "succs": [[8, 13], [0, 14], [4, 5], [2, 10], [7], [7], [11], [6], [6], [1], [8, 9], [], [11], [8, 12], [1]], "fname": "buffer_lcm", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     cs:file_name, rax", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 8, 0.0, 1, 0], "succs": [[]], "fname": "close_stdin_set_file_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 2, 0, 1, 3, 0, 2, 0, 0, 0.15151515151515152, ["call    close_stdout", "cmp     [rbp+fail], 0", "jz      short loc_DEF1"], ["call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 2, 0.2727272727272727, ["cmp     [rbp+fail], 0", "jz      short loc_DED9"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 3, 0, 3, 15, 0, 4, 4, 2, 0.011363636363636364, ["mov     rax, cs:file_name", "mov     rdi, rax; arg", "call    quotearg_colon", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+close_error]", "mov     r8, rdx", "mov     rcx, rbx", "lea     rdx, aSS_1; \"%s: %s\"", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_DED9"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~r8,rdx", "mov~rcx,rbx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 3, 0, 2, 9, 0, 2, 4, 2, 0.011363636363636364, ["call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+close_error]", "mov     rcx, rdx", "lea     rdx, aS; \"%s\"", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [2, 0, 11, 0, 1, 7, 1, 2, 1, 4, 0.015151515151515152, ["mov     rax, cs:stdin@@GLIBC_2_2_5", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     rdi, rax; fp", "call    rpl_fseeko", "test    eax, eax", "jnz     short loc_DE3D"], ["mov~rax,<TAG>", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 1, 12, 1, 1, 10, 1, 2, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 18h", "mov     [rbp+fail], 0", "mov     rax, cs:stdin@@GLIBC_2_2_5", "mov     rdi, rax; fp", "call    freadahead", "test    rax, rax", "jz      short loc_DE3D"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],0", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 4, -1, 0.0, ["mov     eax, cs:exit_failure", "mov     edi, eax; status", "call    __exit"], ["mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]], [0, 1, 0, 1, 0, 5, 0, 0, 4, 0, 0.0, ["nop", "add     rsp, 18h", "pop     rbx", "pop     rbp", "retn"], ["nop", "add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 8, 0, 1, 5, 1, 2, 1, 3, 0.24242424242424243, ["mov     rax, cs:stdin@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      short loc_DE54"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 10, 0, 1, 5, 1, 2, 2, 4, 0.015151515151515152, ["mov     rax, cs:stdin@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    rpl_fflush", "test    eax, eax", "jz      short loc_DE3D"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 9, 0, 0, 1, 0, 0, 3, 4, 0.0, ["mov     [rbp+fail], 1"], ["mov~[rbp+0],0"]], [1, 0, 7, 0, 0, 1, 0, 0, 2, 3, 0.0, ["mov     [rbp+fail], 1"], ["mov~[rbp+0],0"]], [0, 0, 5, 0, 1, 6, 1, 2, 3, 3, 0.10606060606060606, ["lea     rdi, aErrorClosingFi; \"error closing file\"", "call    _gettext", "mov     [rbp+close_error], rax", "mov     rax, cs:file_name", "test    rax, rax", "jz      short loc_DEB3"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]]], "func_feature": [12, 5, 20, 0, 13, 18, 0, 72, 0.06352, 6, 2], "succs": [[6, 7], [0, 12], [0], [0], [8, 9], [8, 4], [], [], [1, 11], [8, 10], [8], [1], [2, 3]], "fname": "close_stdin", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     cs:file_name_0, rax", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 8, 0.0, 1, 0], "succs": [[]], "fname": "close_stdout_set_file_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+ignore], al", "movzx   eax, [rbp+ignore]", "mov     cs:ignore_EPIPE, al", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "mov~<TAG>,al", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 9, 0.0, 1, 0], "succs": [[]], "fname": "close_stdout_set_ignore_EPIPE", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 1, 5, 1, 2, 0, 0, 0.08333333333333333, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      short loc_E00F"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 1, 9, 1, 1, 9, 1, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 18h", "mov     rax, cs:stdout@@GLIBC_2_2_5", "mov     rdi, rax; stream", "call    close_stream", "test    eax, eax", "jz      loc_DFEF"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 1, 7, 0, 1, 4, 0, 2, 2, 2, 0.041666666666666664, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 20h ; ' '", "jz      loc_DFEF"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,<STR>", "jz~FOO"]], [1, 0, 8, 0, 0, 4, 2, 1, 1, 3, 0.06944444444444445, ["movzx   eax, cs:ignore_EPIPE", "xor     eax, 1", "test    al, al", "jnz     short loc_DF63"], ["movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 4, -1, 0.0, ["mov     eax, cs:exit_failure", "mov     edi, eax; status", "call    __exit"], ["mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]], [2, 0, 1, 0, 3, 15, 0, 4, 3, -1, 0.027777777777777776, ["mov     rax, cs:file_name_0", "mov     rdi, rax; arg", "call    quotearg_colon", "mov     rbx, rax", "call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+write_error]", "mov     r8, rdx", "mov     rcx, rbx", "lea     rdx, aSS_2; \"%s: %s\"", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error", "jmp     short loc_DFE2"], ["mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rbx,rax", "call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~r8,rdx", "mov~rcx,rbx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 1, 0, 2, 9, 0, 2, 3, -1, 0.027777777777777776, ["call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+write_error]", "mov     rcx, rdx", "lea     rdx, off_1B031; format", "mov     esi, eax; errnum", "mov     edi, 0; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 3, 0, 1, 6, 1, 2, 2, -1, 0.125, ["lea     rdi, aWriteError; \"write error\"", "call    _gettext", "mov     [rbp+write_error], rax", "mov     rax, cs:file_name_0", "test    rax, rax", "jz      short loc_DFBC"], ["lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 1, 3, 0, 1, 2, -1, 0.0, ["mov     eax, cs:exit_failure", "mov     edi, eax; status", "call    __exit"], ["mov~eax,<TAG>", "mov~edi,eax", "call~FOO"]], [0, 1, 0, 1, 0, 5, 0, 0, 2, 0, 0.0, ["nop", "add     rsp, 18h", "pop     rbx", "pop     rbp", "retn"], ["nop", "add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [11, 5, 17, 0, 10, 12, 1, 63, 0.0375, 8, 2], "succs": [[8, 9], [0, 3], [0, 7], [2, 7], [], [4], [4], [5, 6], [], []], "fname": "close_stdout", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 2, 1, 1, 10, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     rdi, rax; file", "call    mdir_name", "mov     [rbp+result], rax", "cmp     [rbp+result], 0", "jnz     short loc_E03F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+result]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 0, 3, 0, 3, 2, 3, 14, 0.0, 0, 1], "succs": [[1, 2], [], []], "fname": "dir_name", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0.3181818181818182, ["mov     rax, [rbp+prefix_length]", "cmp     rax, [rbp+length]", "jb      short loc_E0A1"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 6, 2, 1, 10, 0, 2, 2, 3, 0.2727272727272727, ["add     [rbp+prefix_length], rax", "mov     rax, [rbp+file]", "mov     rdi, rax; name", "call    last_component", "mov     rdx, rax", "mov     rax, [rbp+file]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+length], rax", "jmp     short loc_E0BC"], ["add~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 6, 1, 0, 1, 0, 0, 5, 3, 0.01818181818181818, ["sub     [rbp+length], 1"], ["sub~[rbp+0],0"]], [0, 0, 1, 0, 0, 1, 0, 1, 4, 1, 0.07272727272727272, ["jmp     short loc_E0C9"], ["jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 5, 1, 0.00909090909090909, ["nop"], ["nop"]], [1, 0, 6, 1, 0, 7, 0, 1, 4, 2, 0.13636363636363635, ["mov     rax, [rbp+length]", "lea     rdx, [rax-1]", "mov     rax, [rbp+file]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jnz     short loc_E0C8"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 1, 5, 0.01818181818181818, ["mov     rax, [rbp+file]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jnz     short loc_E072"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 1, 11, 1, 0, 7, 0, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+file], rdi", "mov     [rbp+prefix_length], 0", "cmp     [rbp+prefix_length], 0", "jnz     short loc_E079"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 5, 0, 0.0, ["mov     rax, [rbp+length]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [1, 0, 7, 0, 0, 2, 0, 1, 2, 4, 0.031818181818181815, ["mov     eax, 1", "jmp     short loc_E07E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 2, 4, 0.031818181818181815, ["mov     eax, 0", "jmp     short loc_E07E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 7, 0, 0, 1, 0, 0, 1, 4, 0.06363636363636363, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [1, 0, 8, 0, 12, 15, 2, 42, 0.08106, 0, 5], "succs": [[3, 5], [0], [0], [8], [8], [2, 4], [9, 10], [11, 6], [], [1], [1], [1]], "fname": "dir_len", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 1, 0, 5, 0, 0, 0, 0, 0.1, ["mov     rdx, [rbp+dir]", "mov     rax, [rbp+length]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+dir]"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]"]], [1, 0, 3, 0, 1, 8, 0, 2, 1, 2, 0.1, ["mov     rdx, [rbp+length]; n", "mov     rcx, [rbp+file]", "mov     rax, [rbp+dir]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "cmp     [rbp+append_dot], 0", "jz      short loc_E152"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 2, 1, 0, 6, 0, 0, 2, 2, 0.0, ["mov     rax, [rbp+length]", "lea     rdx, [rax+1]", "mov     [rbp+length], rdx", "mov     rdx, [rbp+dir]", "add     rax, rdx", "mov     byte ptr [rax], 2Eh ; '.'"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.05, ["mov     eax, 0", "jmp     short locret_E164"], ["mov~eax,0", "jmp~FOO"]], [4, 0, 5, 3, 2, 20, 0, 3, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     rdi, rax; file", "call    dir_len", "mov     [rbp+length], rax", "cmp     [rbp+length], 0", "setz    al", "mov     [rbp+append_dot], al", "movzx   edx, [rbp+append_dot]", "mov     rax, [rbp+length]", "add     rax, rdx", "add     rax, 1", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+dir], rax", "cmp     [rbp+dir], 0", "jnz     short loc_E11F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "setz~al", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [3, 0, 6, 0, 6, 7, 1, 43, 0.04167, 0, 5], "succs": [[3], [0, 2], [0], [], [3], [1, 4]], "fname": "mdir_name", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 7, 0, 0, 2, 0, 1, 0, 0, 0.044444444444444446, ["mov     [rbp+saw_slash], 1", "jmp     short loc_E1B9"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 4, 4, 0.3111111111111111, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jnz     short loc_E1A7"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 7, 0, 0, 4, 1, 1, 3, 1, 0.45555555555555555, ["mov     rax, [rbp+p]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_E196"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 7, 0, 0, 3, 0, 1, 2, 2, 0.23333333333333334, ["mov     rax, [rbp+base]", "mov     [rbp+p], rax", "jmp     short loc_E1BE"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 7, 1, 0, 1, 0, 0, 6, 2, 0.17777777777777778, ["add     [rbp+p], 1"], ["add~[rbp+0],0"]], [1, 0, 10, 0, 0, 4, 0, 1, 1, 3, 0.18888888888888888, ["mov     rax, [rbp+base]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_E17C"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [1, 0, 10, 0, 0, 7, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+name], rdi", "mov     rax, [rbp+name]", "mov     [rbp+base], rax", "mov     [rbp+saw_slash], 0", "jmp     short loc_E181"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 10, 1, 0, 1, 0, 0, 2, 4, 0.0, ["add     [rbp+base], 1"], ["add~[rbp+0],0"]], [1, 0, 7, 0, 0, 2, 0, 1, 5, 3, 0.13333333333333333, ["cmp     [rbp+saw_slash], 0", "jz      short loc_E1B9"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0.0, ["mov     rax, [rbp+base]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "pop~rbp", "retn"]], [1, 0, 7, 0, 0, 3, 0, 0, 6, 3, 0.0, ["mov     rax, [rbp+p]", "mov     [rbp+base], rax", "mov     [rbp+saw_slash], 0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0"]]], "func_feature": [0, 1, 7, 0, 11, 14, 12, 34, 0.1404, 0, 2], "succs": [[4], [0, 8], [9, 1], [2], [2], [3, 7], [5], [5], [10, 4], [], [4]], "fname": "last_component", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+len]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [1, 0, 4, 0, 0, 2, 0, 0, 1, 0, 0.41666666666666663, ["cmp     [rbp+len], 1", "jbe     short loc_E217"], ["cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 4, 1, 0, 7, 0, 1, 2, 0, 0.16666666666666666, ["mov     rax, [rbp+len]", "lea     rdx, [rax-1]", "mov     rax, [rbp+name]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_E1F5"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [1, 1, 4, 1, 1, 10, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+prefix_len], 0", "mov     rax, [rbp+name]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+len], rax", "jmp     short loc_E1FA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 4, 1, 0, 1, 0, 0, 3, 0, 0.08333333333333333, ["sub     [rbp+len], 1"], ["sub~[rbp+0],0"]]], "func_feature": [1, 0, 3, 0, 5, 6, 6, 23, 0.13333, 0, 3], "succs": [[], [0, 2], [0, 4], [1], [1]], "fname": "base_len", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+file]", "mov     [rbp+base], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 2, 1, 1, 12, 1, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+file], rdi", "mov     rax, [rbp+file]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+base], rax", "mov     rax, [rbp+base]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_E24C"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 0, 1, 1, 17, 1, 1, 1, 0, 0.0, ["mov     rax, [rbp+base]", "mov     rdi, rax; name", "call    base_len", "mov     rdx, rax", "mov     rax, [rbp+base]", "add     rax, rdx", "mov     [rbp+base_lim], rax", "mov     rax, [rbp+base_lim]", "movzx   eax, byte ptr [rax]", "test    al, al", "setnz   al", "mov     [rbp+had_slash], al", "mov     rax, [rbp+base_lim]", "mov     byte ptr [rax], 0", "movzx   eax, [rbp+had_slash]", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~<TAG>,0", "movzx~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 2, 3, 0, 3, 3, 3, 31, 0.0, 0, 2], "succs": [[2], [0, 2], []], "fname": "strip_trailing_slashes", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 1, 17, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+offset], rsi", "mov     [rbp+len], rdx", "mov     [rbp+advice], ecx", "mov     ecx, [rbp+advice]; advise", "mov     rdx, [rbp+len]; len", "mov     rsi, [rbp+offset]; offset", "mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    _posix_fadvise", "mov     [rbp+__x], eax", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 17, 0.0, 0, 1], "succs": [[]], "fname": "fdadvise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [2, 0, 2, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fp], rdi", "mov     [rbp+advice], esi", "cmp     [rbp+fp], 0", "jz      short loc_E2EB"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 1, 0, 2, 9, 0, 2, 1, 0, 0.0, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     edi, eax; fd", "mov     eax, [rbp+advice]", "mov     ecx, eax; advice", "mov     edx, 0; len", "mov     esi, 0; offset", "call    fdadvise"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~edi,eax", "mov~eax,[rbp+0]", "mov~ecx,eax", "mov~edx,0", "mov~esi,0", "call~FOO"]]], "func_feature": [2, 0, 3, 0, 3, 3, 0, 19, 0.0, 0, 1], "succs": [[], [0, 2], [0]], "fname": "fadvise", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [0, 1, 9, 1, 0, 11, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0F0h", "mov     [rbp+file], rdi", "mov     [rbp+flags], esi", "mov     [rbp+var_A0], rdx", "mov     [rbp+var_98], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_E346"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [3, 0, 6, 0, 0, 9, 0, 1, 2, 4, 0.125, ["mov     [rbp+ap.gp_offset], 10h", "mov     [rbp+ap.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+ap.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+ap.reg_save_area], rax", "mov     eax, [rbp+ap.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_E3CA"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [2, 0, 7, 0, 0, 8, 3, 1, 1, 2, 0.19444444444444442, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+mode], 0", "mov     eax, [rbp+flags]", "and     eax, 40h", "test    eax, eax", "jz      short loc_E3E4"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 4, 2, 0, 8, 0, 1, 3, 3, 0.048611111111111105, ["mov     rax, [rbp+ap.reg_save_area]", "mov     edx, [rbp+ap.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+ap.gp_offset]", "add     edx, 8", "mov     [rbp+ap.gp_offset], edx", "jmp     short loc_E3DC"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 2, 0, 2, 12, 1, 3, 2, 1, 0.19444444444444442, ["mov     edx, [rbp+mode]", "mov     ecx, [rbp+flags]", "mov     rax, [rbp+file]", "mov     esi, ecx; oflag", "mov     rdi, rax; file", "mov     eax, 0", "call    _open", "mov     edi, eax; fd", "call    fd_safer", "mov     rsi, [rbp+var_B8]", "xor     rsi, fs:28h", "jz      short locret_E424"], ["mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~edi,eax", "call~FOO", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.048611111111111105, ["mov     rax, [rbp+ap.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+ap.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [0, 0, 3, 0, 0, 2, 0, 0, 4, 2, 0.125, ["mov     eax, [rax]", "mov     [rbp+mode], eax"], ["mov~eax,<TAG>", "mov~[rbp+0],eax"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [3, 5, 8, 14, 10, 12, 4, 64, 0.07361, 1, 3], "succs": [[3], [0, 3], [4, 7], [2, 6], [8], [], [9, 5], [8], [6], []], "fname": "open_safer", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 4, 0, 3, 25, 0, 4, 0, 0, 0.1, ["mov     edi, 18h; n", "call    xmalloc", "mov     [rbp+ent], rax", "mov     rax, [rbp+file]", "mov     rdi, rax; string", "call    xstrdup", "mov     rdx, rax", "mov     rax, [rbp+ent]", "mov     [rax], rdx", "mov     rax, [rbp+stats]", "mov     rdx, [rax+8]", "mov     rax, [rbp+ent]", "mov     [rax+8], rdx", "mov     rax, [rbp+stats]", "mov     rdx, [rax]", "mov     rax, [rbp+ent]", "mov     [rax+10h], rdx", "mov     rdx, [rbp+ent]", "mov     rax, [rbp+ht]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_insert", "mov     [rbp+ent_from_table], rax", "cmp     [rbp+ent_from_table], 0", "jnz     short loc_E4A7"], ["mov~edi,<STR>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 6, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+ht], rdi", "mov     [rbp+file], rsi", "mov     [rbp+stats], rdx", "cmp     [rbp+ht], 0", "jz      short loc_E4BF"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 0, 1, 2, 1, 0.1, ["mov     rax, [rbp+ent_from_table]", "cmp     rax, [rbp+ent]", "jz      short locret_E4C0"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 1, 0, 1, 4, 0, 2, 3, 1, 0.0, ["mov     rax, [rbp+ent]", "mov     rdi, rax; x", "call    triple_free", "jmp     short locret_E4C0"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.03333333333333333, ["nop"], ["nop"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]]], "func_feature": [5, 0, 9, 0, 7, 8, 3, 44, 0.03333, 0, 1], "succs": [[3, 6], [0, 5], [], [2, 4], [2], [2], []], "fname": "record_file", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 0, 0.30000000000000004, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_E53F"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 1, 15, 1, 1, 1, 0, 0.07500000000000001, ["mov     rax, [rbp+file]", "mov     [rbp+new_ent.name], rax", "mov     rax, [rbp+stats]", "mov     rax, [rax+8]", "mov     [rbp+new_ent.st_ino], rax", "mov     rax, [rbp+stats]", "mov     rax, [rax]", "mov     [rbp+new_ent.st_dev], rax", "lea     rdx, [rbp+new_ent]", "mov     rax, [rbp+ht]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_lookup", "test    rax, rax", "setnz   al"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~rax,rax", "setnz~al"]], [2, 0, 5, 1, 0, 11, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+ht], rdi", "mov     [rbp+file], rsi", "mov     [rbp+stats], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+ht], 0", "jnz     short loc_E4F3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 0, 0.07500000000000001, ["mov     eax, 0", "jmp     short loc_E52B"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 3, 5, 1, 6, 6, 3, 34, 0.075, 1, 1], "succs": [[], [0, 5], [1], [2, 4], [1], []], "fname": "seen_file", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.004761904761904762, ["mov     eax, 63h ; 'c'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 9, 0, 0, 4, 1, 1, 3, 2, 0.1142857142857143, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 2000h", "jnz     short loc_E5A3"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 7, 1, 0.002380952380952381, ["mov     eax, 73h ; 's'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 0, 4, 1, 1, 6, 2, 0.05714285714285715, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 0C000h", "jnz     short loc_E5E5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [2, 0, 11, 0, 0, 4, 1, 1, 2, 2, 0.09523809523809525, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 6000h", "jnz     short loc_E58D"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [2, 0, 13, 0, 0, 4, 1, 1, 1, 2, 0.05714285714285715, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 4000h", "jnz     short loc_E577"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 7, 1, 0.002380952380952381, ["mov     eax, 3Fh ; '?'"], ["mov~eax,0"]], [1, 1, 5, 0, 0, 4, 1, 1, 5, 2, 0.09523809523809525, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 1000h", "jnz     short loc_E5CF"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,<STR>", "jnz~FOO"]], [2, 0, 7, 0, 0, 4, 1, 1, 4, 2, 0.1142857142857143, ["mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jnz     short loc_E5B9"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.004761904761904762, ["mov     eax, 62h ; 'b'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.004761904761904762, ["mov     eax, 70h ; 'p'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 15, 0, 0, 7, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+bits], edi", "mov     eax, [rbp+bits]", "and     eax, 0F000h", "cmp     eax, 8000h", "jnz     short loc_E561"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 5, 1, 0.004761904761904762, ["mov     eax, 6Ch ; 'l'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.004761904761904762, ["mov     eax, 2Dh ; '-'", "jmp     loc_E5EA"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.004761904761904762, ["mov     eax, 64h ; 'd'", "jmp     short loc_E5EA"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 7, 14, 0, 16, 22, 1, 48, 0.03542, 0, 0], "succs": [[13], [0, 8], [13], [2, 6], [9, 1], [4, 15], [13], [10, 3], [12, 7], [13], [13], [5, 14], [13], [], [13], [13]], "fname": "ftypelet", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 16, 0, 0, 4, 2, 1, 0, 0, 0.1214574898785425, ["mov     eax, [rbp+mode]", "and     eax, 8", "test    eax, eax", "jz      short loc_E70A"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [2, 0, 20, 1, 0, 7, 2, 1, 11, 10, 0.2564102564102564, ["mov     rax, [rbp+str]", "add     rax, 5", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 400h", "test    eax, eax", "jz      short loc_E6F9"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 27, 0, 0, 2, 0, 1, 6, 15, 0.040991902834008095, ["mov     eax, 78h ; 'x'", "jmp     short loc_E68B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 29, 0, 0, 4, 2, 1, 5, 16, 0.07321187584345479, ["mov     eax, [rbp+mode]", "and     eax, 40h", "test    eax, eax", "jz      short loc_E686"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 0, 4, 2, 1, 19, 2, 0.05566801619433198, ["mov     eax, [rbp+mode]", "and     eax, 1", "test    eax, eax", "jz      short loc_E78E"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 1, 7, 1, 0, 7, 2, 1, 18, 3, 0.15114709851551955, ["mov     rax, [rbp+str]", "add     rax, 8", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 200h", "test    eax, eax", "jz      short loc_E77D"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 27, 0, 0, 1, 0, 0, 6, 15, 0.040991902834008095, ["mov     eax, 2Dh ; '-'"], ["mov~eax,0"]], [1, 0, 14, 0, 0, 2, 0, 1, 13, 8, 0.05195681511470985, ["mov     eax, 78h ; 'x'", "jmp     short loc_E70F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 14, 0, 0, 1, 0, 0, 13, 8, 0.05195681511470985, ["mov     eax, 2Dh ; '-'"], ["mov~eax,0"]], [1, 0, 1, 0, 0, 2, 0, 1, 20, 1, 0.0059041835357624825, ["mov     eax, 78h ; 'x'", "jmp     short loc_E793"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 20, 1, 0.0059041835357624825, ["mov     eax, 2Dh ; '-'"], ["mov~eax,0"]], [1, 1, 39, 1, 1, 15, 2, 2, 0, 21, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+mode], edi", "mov     [rbp+str], rsi", "mov     eax, [rbp+mode]", "mov     edi, eax; bits", "call    ftypelet", "mov     edx, eax", "mov     rax, [rbp+str]", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 100h", "test    eax, eax", "jz      short loc_E620"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 1, 26, 1, 0, 7, 2, 1, 7, 14, 0.22807017543859648, ["mov     rdx, [rbp+str]", "add     rdx, 3", "mov     [rdx], al", "mov     eax, [rbp+mode]", "and     eax, 20h", "test    eax, eax", "jz      short loc_E6A6"], ["mov~rdx,[rbp+0]", "add~rdx,0", "mov~<TAG>,al", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [1, 0, 27, 0, 0, 2, 0, 1, 6, 15, 0.040991902834008095, ["mov     eax, 73h ; 's'", "jmp     short loc_E68B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 27, 0, 0, 2, 0, 1, 6, 15, 0.040991902834008095, ["mov     eax, 53h ; 'S'", "jmp     short loc_E68B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 37, 0, 0, 2, 0, 1, 1, 20, 0.012483130904183536, ["mov     edx, 72h ; 'r'", "jmp     short loc_E625"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 37, 0, 0, 1, 0, 0, 1, 20, 0.012483130904183536, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [2, 0, 13, 1, 0, 7, 2, 1, 14, 7, 0.22807017543859648, ["mov     rdx, [rbp+str]", "add     rdx, 6", "mov     [rdx], al", "mov     eax, [rbp+mode]", "and     eax, 4", "test    eax, eax", "jz      short loc_E72A"], ["mov~rdx,[rbp+0]", "add~rdx,0", "mov~<TAG>,al", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 13, 8, 0.05195681511470985, ["mov     eax, 73h ; 's'", "jmp     short loc_E70F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 13, 8, 0.05195681511470985, ["mov     eax, 53h ; 'S'", "jmp     short loc_E70F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 24, 0, 0, 2, 0, 1, 8, 13, 0.11336032388663968, ["mov     edx, 72h ; 'r'", "jmp     short loc_E6AB"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 24, 0, 0, 1, 0, 0, 8, 13, 0.11336032388663968, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [1, 0, 11, 0, 0, 2, 0, 1, 15, 6, 0.10020242914979757, ["mov     edx, 72h ; 'r'", "jmp     short loc_E72F"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 11, 0, 0, 1, 0, 0, 15, 6, 0.10020242914979757, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [4, 1, 0, 3, 0, 12, 0, 0, 21, 0, 0.0, ["mov     rdx, [rbp+str]", "add     rdx, 9", "mov     [rdx], al", "mov     rax, [rbp+str]", "add     rax, 0Ah", "mov     byte ptr [rax], 20h ; ' '", "mov     rax, [rbp+str]", "add     rax, 0Bh", "mov     byte ptr [rax], 0", "nop", "leave", "retn"], ["mov~rdx,[rbp+0]", "add~rdx,0", "mov~<TAG>,al", "mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,<STR>", "mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,0", "nop", "leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 20, 1, 0.0059041835357624825, ["mov     eax, 74h ; 't'", "jmp     short loc_E793"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 20, 1, 0.0059041835357624825, ["mov     eax, 54h ; 'T'", "jmp     short loc_E793"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 36, 1, 0, 7, 2, 1, 2, 19, 0.0728744939271255, ["mov     rax, [rbp+str]", "add     rax, 1", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 80h", "test    eax, eax", "jz      short loc_E642"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [2, 0, 23, 1, 0, 7, 2, 1, 9, 12, 0.24831309041835356, ["mov     rax, [rbp+str]", "add     rax, 4", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 10h", "test    eax, eax", "jz      short loc_E6C6"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 34, 0, 0, 2, 0, 1, 3, 18, 0.04588394062078272, ["mov     edx, 77h ; 'w'", "jmp     short loc_E647"], ["mov~edx,0", "jmp~FOO"]], [2, 0, 10, 1, 0, 7, 2, 1, 16, 5, 0.19568151147098514, ["mov     rax, [rbp+str]", "add     rax, 7", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 2", "test    eax, eax", "jz      short loc_E74A"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 34, 0, 0, 1, 0, 0, 3, 18, 0.04588394062078272, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [1, 0, 21, 0, 0, 2, 0, 1, 10, 11, 0.12044534412955465, ["mov     edx, 77h ; 'w'", "jmp     short loc_E6CB"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 21, 0, 0, 1, 0, 0, 10, 11, 0.12044534412955465, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [1, 0, 8, 0, 0, 2, 0, 1, 17, 4, 0.08097165991902834, ["mov     edx, 77h ; 'w'", "jmp     short loc_E74F"], ["mov~edx,0", "jmp~FOO"]], [1, 0, 8, 0, 0, 1, 0, 0, 17, 4, 0.08097165991902834, ["mov     edx, 2Dh ; '-'"], ["mov~edx,0"]], [2, 0, 33, 1, 0, 7, 2, 1, 4, 17, 0.13360323886639675, ["mov     rax, [rbp+str]", "add     rax, 2", "mov     [rax], dl", "mov     eax, [rbp+mode]", "and     eax, 800h", "test    eax, eax", "jz      short loc_E675"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,dl", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 29, 0, 0, 4, 2, 1, 5, 16, 0.07321187584345479, ["mov     eax, [rbp+mode]", "and     eax, 40h", "test    eax, eax", "jz      short loc_E66E"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 16, 0, 0, 4, 2, 1, 12, 9, 0.1214574898785425, ["mov     eax, [rbp+mode]", "and     eax, 8", "test    eax, eax", "jz      short loc_E6F2"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 0, 4, 2, 1, 19, 2, 0.05566801619433198, ["mov     eax, [rbp+mode]", "and     eax, 1", "test    eax, eax", "jz      short loc_E776"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]]], "func_feature": [1, 30, 31, 0, 40, 54, 2, 146, 0.08392, 0, 12], "succs": [[8, 7], [0, 38], [12], [2, 6], [9, 10], [4, 39], [12], [17], [17], [24], [24], [16, 15], [20, 21], [12], [12], [27], [27], [22, 23], [17], [17], [28], [28], [30], [30], [], [24], [24], [29, 31], [32, 33], [36], [34, 35], [36], [1], [1], [5], [5], [3, 37], [13, 14], [18, 19], [25, 26]], "fname": "strmode", "n_num": 40}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+statp], rdi", "mov     [rbp+str], rsi", "mov     rax, [rbp+statp]", "mov     eax, [rax+18h]", "mov     rdx, [rbp+str]", "mov     rsi, rdx; str", "mov     edi, eax; mode", "call    strmode", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "filemodestring", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 2, 1, 1, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+dir], rdi", "mov     [rbp+base], rsi", "mov     [rbp+base_in_result], rdx", "mov     rdx, [rbp+base_in_result]; base_in_result", "mov     rcx, [rbp+base]", "mov     rax, [rbp+dir]", "mov     rsi, rcx; base", "mov     rdi, rax; dir", "call    mfile_name_concat", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_E819"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 0, 3, 0, 3, 2, 4, 19, 0.0, 0, 1], "succs": [[1, 2], [], []], "fname": "file_name_concat", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 0, 0.06363636363636363, ["mov     eax, 0", "jmp     short locret_E961"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 1, 10, 0, 1, 4, 0, 0.01818181818181818, ["mov     rdx, [rbp+baselen]; n", "mov     rcx, [rbp+base]", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _mempcpy", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     byte ptr [rax], 0", "mov     rax, [rbp+p_concat]"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]"]], [3, 0, 11, 3, 3, 29, 0, 4, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 60h", "mov     [rbp+dir], rdi", "mov     [rbp+base], rsi", "mov     [rbp+base_in_result], rdx", "mov     rax, [rbp+dir]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+dirbase], rax", "mov     rax, [rbp+dirbase]", "mov     rdi, rax; name", "call    base_len", "mov     [rbp+dirbaselen], rax", "mov     rdx, [rbp+dirbase]", "mov     rax, [rbp+dir]", "sub     rdx, rax", "mov     rax, rdx", "mov     rdx, rax", "mov     rax, [rbp+dirbaselen]", "add     rax, rdx", "mov     [rbp+dirlen], rax", "mov     rax, [rbp+base]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+baselen], rax", "mov     [rbp+sep], 0", "cmp     [rbp+dirbaselen], 0", "jz      short loc_E8B1"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 2, 0, 0.01818181818181818, ["mov     rax, [rbp+base]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_E8C0"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [1, 0, 8, 1, 0, 7, 0, 1, 1, 0, 0.045454545454545456, ["mov     rax, [rbp+dirlen]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dir]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jz      short loc_E8C0"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [3, 0, 5, 3, 1, 13, 0, 2, 2, 0, 0.2727272727272727, ["cmp     [rbp+sep], 0", "setnz   al", "movzx   edx, al", "mov     rax, [rbp+dirlen]", "add     rdx, rax", "mov     rax, [rbp+baselen]", "add     rax, rdx", "add     rax, 1", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+p_concat], rax", "cmp     [rbp+p_concat], 0", "jnz     short loc_E8F6"], ["cmp~[rbp+0],0", "setnz~al", "movzx~edx,al", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 3, 0, 0.0, ["mov     [rbp+sep], 2Fh ; '/'", "jmp     short loc_E8C0"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 1, 0, 0.03636363636363636, ["mov     rax, [rbp+base]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jnz     short loc_E8C0"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 2, 0, 0.0, ["mov     [rbp+sep], 2Eh ; '.'"], ["mov~[rbp+0],0"]], [2, 0, 3, 1, 1, 16, 0, 2, 3, 0, 0.12727272727272726, ["mov     rdx, [rbp+dirlen]; n", "mov     rcx, [rbp+dir]", "mov     rax, [rbp+p_concat]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _mempcpy", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "movzx   edx, [rbp+sep]", "mov     [rax], dl", "cmp     [rbp+sep], 0", "setnz   al", "movzx   eax, al", "add     [rbp+p], rax", "cmp     [rbp+base_in_result], 0", "jz      short loc_E93B"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~edx,[rbp+0]", "mov~<TAG>,dl", "cmp~[rbp+0],0", "setnz~al", "movzx~eax,al", "add~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0.0, ["mov     rax, [rbp+base_in_result]", "mov     rdx, [rbp+p]", "mov     [rax], rdx"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx"]]], "func_feature": [6, 0, 14, 0, 12, 17, 1, 93, 0.04848, 0, 8], "succs": [[], [0], [0], [8, 5], [6, 7], [4, 6], [1, 10], [6], [9, 6], [6], [2, 11], [2]], "fname": "mfile_name_concat", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+total]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [1, 0, 1, 0, 1, 3, 0, 2, 4, 0, 0.017857142857142856, ["call    ___errno_location", "mov     dword ptr [rax], 1Ch", "jmp     short loc_E9DE"], ["call~FOO", "mov~<TAG>,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0.05357142857142857, ["jmp     short loc_E9DE"], ["jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0.017857142857142856, ["nop"], ["nop"]], [2, 0, 8, 1, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+fd], edi", "mov     [rbp+buf], rsi", "mov     [rbp+count], rdx", "mov     [rbp+total], 0", "mov     rax, [rbp+buf]", "mov     [rbp+ptr], rax", "jmp     short loc_E9D4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 8, 0, 1, 9, 0, 2, 2, 0, 0.21428571428571427, ["mov     rdx, [rbp+count]; count", "mov     rcx, [rbp+ptr]", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    safe_write", "mov     [rbp+n_rw], rax", "cmp     [rbp+n_rw], 0FFFFFFFFFFFFFFFFh", "jz      short loc_E9DD"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 1, 0, 0.30357142857142855, ["cmp     [rbp+count], 0", "jnz     short loc_E988"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 3, 0, 0.1607142857142857, ["cmp     [rbp+n_rw], 0", "jnz     short loc_E9BC"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 8, 3, 0, 6, 0, 0, 4, 0, 0.10714285714285714, ["mov     rax, [rbp+n_rw]", "add     [rbp+total], rax", "mov     rax, [rbp+n_rw]", "add     [rbp+ptr], rax", "mov     rax, [rbp+n_rw]", "sub     [rbp+count], rax"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax"]]], "func_feature": [2, 0, 8, 0, 9, 11, 2, 37, 0.09722, 0, 4], "succs": [[], [0], [0], [0], [6], [3, 7], [2, 5], [8, 1], [6]], "fname": "full_write", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "hash_get_n_buckets", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "hash_get_n_buckets_used", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "hash_get_n_entries", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 9, 0, 0, 4, 1, 1, 0, 0, 0.3611111111111111, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_EA7F"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 9, 0, 0, 4, 0, 0, 1, 1, 0.4861111111111111, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_EA37"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 9, 1, 0, 1, 0, 0, 3, 2, 0.3611111111111111, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [0, 0, 9, 0, 0, 3, 0, 0, 5, 3, 0.29166666666666663, ["mov     rax, [rbp+bucket_length]", "cmp     rax, [rbp+max_bucket_length]", "jbe     short loc_EA7F"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jbe~FOO"]], [0, 0, 9, 0, 0, 2, 0, 0, 6, 3, 0.0, ["mov     rax, [rbp+bucket_length]", "mov     [rbp+max_bucket_length], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 9, 0, 0, 5, 0, 1, 4, 4, 0.40277777777777773, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "cmp     [rbp+cursor], 0", "jnz     short loc_EA55"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 3, 5, 0.29166666666666663, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "mov     [rbp+bucket_length], 1", "jmp     short loc_EA5A"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 9, 1, 0, 1, 0, 0, 5, 5, 0.0, ["add     [rbp+bucket_length], 1"], ["add~[rbp+0],0"]], [1, 0, 9, 0, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     [rbp+max_bucket_length], 0", "mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_EA84"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     rax, [rbp+max_bucket_length]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 1, 4, 0, 10, 13, 1, 35, 0.21944, 0, 2], "succs": [[2, 6], [0, 9], [1], [2, 4], [2], [3, 7], [5], [5], [1], []], "fname": "hash_get_max_bucket_length", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 0, 4, 0, 1, 0, 0, 0.07272727272727272, ["mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "cmp     [rbp+n_entries], rax", "jnz     short loc_EB2B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 4, 0, 0, 4, 0, 1, 2, 2, 0.2545454545454545, ["mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "cmp     [rbp+n_buckets_used], rax", "jnz     short loc_EB2B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [2, 0, 11, 2, 0, 5, 0, 1, 3, 6, 0.07272727272727272, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "add     [rbp+n_buckets_used], 1", "add     [rbp+n_entries], 1", "jmp     short loc_EAE2"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "add~[rbp+0],0", "add~[rbp+0],0", "jmp~FOO"]], [0, 0, 11, 0, 0, 4, 1, 1, 2, 5, 0.11818181818181818, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_EAF5"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 11, 0, 0, 4, 0, 0, 1, 3, 0.39999999999999997, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_EABD"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [2, 0, 11, 0, 0, 9, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     [rbp+n_buckets_used], 0", "mov     [rbp+n_entries], 0", "mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_EAFA"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 11, 1, 0, 1, 0, 0, 3, 4, 0.2636363636363636, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004545454545454545, ["mov     eax, 1", "jmp     short loc_EB30"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 3, 1, 0.07727272727272727, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 11, 0, 0, 5, 0, 1, 4, 5, 0.19999999999999998, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "cmp     [rbp+cursor], 0", "jnz     short loc_EADD"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 11, 1, 0, 1, 0, 0, 5, 6, 0.0, ["add     [rbp+n_entries], 1"], ["add~[rbp+0],0"]]], "func_feature": [0, 1, 7, 0, 12, 16, 0, 42, 0.12197, 0, 4], "succs": [[8, 7], [0, 8], [10], [2, 6], [1, 3], [4], [4], [9], [9], [], [11, 6], [10]], "fname": "hash_table_ok", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 6, 1, 6, 36, 1, 7, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+table], rdi", "mov     [rbp+stream], rsi", "mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    hash_get_n_entries", "mov     [rbp+n_entries], rax", "mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    hash_get_n_buckets", "mov     [rbp+n_buckets], rax", "mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    hash_get_n_buckets_used", "mov     [rbp+n_buckets_used], rax", "mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    hash_get_max_bucket_length", "mov     [rbp+max_bucket_length], rax", "mov     rdx, [rbp+n_entries]", "mov     rax, [rbp+stream]", "lea     rsi, aEntriesLu; \"# entries:         %lu\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "mov     rdx, [rbp+n_buckets]", "mov     rax, [rbp+stream]", "lea     rsi, aBucketsLu; \"# buckets:         %lu\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "mov     rax, [rbp+n_buckets_used]", "test    rax, rax", "js      short loc_EBCA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [0, 0, 4, 0, 0, 2, 0, 1, 0, 3, 0.06666666666666667, ["cvtsi2sd xmm0, rax", "jmp     short loc_EBDF"], ["cvtsi2sd~xmm0,rax", "jmp~FOO"]], [2, 0, 1, 0, 0, 6, 2, 0, 0, 1, 0.06666666666666667, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2sd xmm0, rdx", "addsd   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2sd~xmm0,rdx", "addsd~xmm0,xmm0"]], [0, 0, 3, 0, 0, 5, 1, 1, 0, 2, 0.3, ["movsd   xmm1, cs:qword_1B0C8", "mulsd   xmm1, xmm0", "mov     rax, [rbp+n_buckets]", "test    rax, rax", "js      short loc_EBFB"], ["movsd~xmm1,<TAG>", "mulsd~xmm1,xmm0", "mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [2, 0, 0, 0, 2, 17, 0, 2, 0, 0, 0.0, ["divsd   xmm1, xmm0", "movapd  xmm0, xmm1", "mov     rdx, [rbp+n_buckets_used]", "mov     rax, [rbp+stream]", "lea     rsi, aBucketsUsedLu2; \"# buckets used:    %lu (%.2f%%)\\n\"", "mov     rdi, rax; stream", "mov     eax, 1", "call    _fprintf", "mov     rdx, [rbp+max_bucket_length]", "mov     rax, [rbp+stream]", "lea     rsi, aMaxBucketLengt; \"max bucket length: %lu\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "nop", "leave", "retn"], ["divsd~xmm1,xmm0", "movapd~xmm0,xmm1", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "nop", "leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.06666666666666667, ["cvtsi2sd xmm0, rax", "jmp     short loc_EC10"], ["cvtsi2sd~xmm0,rax", "jmp~FOO"]], [2, 0, 4, 0, 0, 6, 2, 0, 0, 3, 0.06666666666666667, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2sd xmm0, rdx", "addsd   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2sd~xmm0,rdx", "addsd~xmm0,xmm0"]]], "func_feature": [8, 6, 12, 0, 7, 8, 0, 74, 0.08095, 5, 1], "succs": [[1, 6], [3], [4], [2, 5], [], [4], [3]], "fname": "hash_print_statistics", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    _abort"], ["call~FOO"]], [0, 1, 2, 1, 1, 18, 0, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+table], rdi", "mov     [rbp+key], rsi", "mov     rax, [rbp+table]", "mov     rax, [rax+30h]", "mov     rdx, [rbp+table]", "mov     rcx, [rdx+10h]", "mov     rdx, [rbp+key]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "mov     [rbp+n], rax", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "cmp     [rbp+n], rax", "jb      short loc_EC96"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rcx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 0, 2, 0, 7, 0, 0, 1, 0, 0.0, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     rdx, [rbp+n]", "shl     rdx, 4", "add     rax, rdx", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rax,rdx", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 3, 2, 5, 26, 0.0, 0, 3], "succs": [[], [0, 2], []], "fname": "safe_hasher", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0.027777777777777776, ["mov     rax, [rbp+cursor]", "mov     rax, [rax]", "jmp     short locret_ED3B"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "jmp~FOO"]], [0, 0, 7, 0, 0, 4, 0, 1, 3, 2, 0.15277777777777776, ["mov     rax, [rbp+cursor]", "mov     rax, [rax]", "cmp     [rbp+entry], rax", "jz      short loc_ED1A"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 7, 0, 1, 10, 1, 2, 4, 2, 0.08333333333333333, ["mov     rax, [rbp+table]", "mov     rax, [rax+38h]", "mov     rdx, [rbp+cursor]", "mov     rcx, [rdx]", "mov     rdx, [rbp+entry]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "test    al, al", "jz      short loc_ED23"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "test~al,al", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.013888888888888888, ["mov     eax, 0", "jmp     short locret_ED3B"], ["mov~eax,0", "jmp~FOO"]], [0, 1, 9, 1, 1, 15, 1, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     rdx, [rbp+entry]", "mov     rax, [rbp+table]", "mov     rsi, rdx; key", "mov     rdi, rax; table", "call    safe_hasher", "mov     [rbp+bucket], rax", "mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_ECE4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 7, 0, 0, 3, 0, 0, 5, 3, 0.06944444444444445, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [0, 0, 7, 0, 0, 3, 0, 1, 1, 3, 0.08333333333333333, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "jmp     short loc_ED2F"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 2, 2, 0.2638888888888889, ["cmp     [rbp+cursor], 0", "jnz     short loc_ECEE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 3, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [2, 2, 9, 0, 10, 13, 3, 45, 0.07361, 0, 1], "succs": [[9], [0, 2], [0, 5], [9], [3, 6], [7], [7], [8, 1], [9], []], "fname": "hash_lookup", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0.08928571428571427, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 1, 8, 1, 0, 8, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "test    rax, rax", "jnz     short loc_ED5D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 6, 0, 0, 4, 1, 1, 3, 2, 0.17857142857142855, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_ED90"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 6, 0, 0, 4, 0, 0, 2, 3, 0.25, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_ED7B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 1, 0, 0, 3, 0, 1, 4, 1, 0.07142857142857142, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "jmp     short locret_ED97"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "jmp~FOO"]], [1, 0, 6, 1, 0, 2, 0, 1, 4, 4, 0.03571428571428571, ["add     [rbp+bucket], 10h", "jmp     short loc_ED68"], ["add~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.017857142857142856, ["mov     eax, 0", "jmp     short locret_ED97"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [1, 2, 6, 0, 9, 10, 0, 29, 0.07143, 0, 2], "succs": [[3], [0, 8], [4, 5], [2, 6], [7], [3], [], [], [7]], "fname": "hash_get_first", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 10, 0, 0, 4, 1, 1, 0, 0, 0.061111111111111116, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "test    rax, rax", "jz      short loc_EDEF"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 10, 0, 0, 4, 0, 1, 1, 3, 0.1277777777777778, ["mov     rax, [rbp+cursor]", "mov     rax, [rax]", "cmp     [rbp+entry], rax", "jnz     short loc_EDEF"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 10, 0, 0, 5, 0, 1, 2, 4, 0.17777777777777778, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "cmp     [rbp+cursor], 0", "jnz     short loc_EDC8"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 5, 0, 0, 1, 0, 1, 3, 3, 0.18333333333333335, ["jmp     short loc_EE19"], ["jmp~FOO"]], [0, 1, 10, 1, 1, 13, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     rdx, [rbp+entry]", "mov     rax, [rbp+table]", "mov     rsi, rdx; key", "mov     rdi, rax; table", "call    safe_hasher", "mov     [rbp+bucket], rax", "mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 5, 1, 0, 5, 0, 0, 4, 2, 0.19444444444444445, ["add     [rbp+bucket], 10h", "mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_EE04"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 5, 2, 0.06666666666666667, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_EE19"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 5, 1, 0.02777777777777778, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 1, 0, 0, 4, 0, 1, 3, 1, 0.03888888888888889, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     rax, [rax]", "jmp     short locret_EE31"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rax,<TAG>", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 3, 0, 1, 6, 1, 0.011111111111111112, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "jmp     short locret_EE31"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "jmp~FOO"]]], "func_feature": [1, 2, 8, 0, 11, 15, 0, 46, 0.08081, 0, 2], "succs": [[8, 2], [0, 2], [1, 3], [5], [1], [6, 7], [10, 5], [9], [9], [], [9]], "fname": "hash_get_next", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 10, 0, 0, 4, 1, 1, 0, 0, 0.22222222222222224, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_EEB6"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 10, 0, 0, 4, 0, 0, 1, 2, 0.33333333333333337, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_EE58"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 10, 0, 0, 10, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     [rbp+buffer], rsi", "mov     [rbp+buffer_size], rdx", "mov     [rbp+counter], 0", "mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_EEBB"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 10, 1, 0, 1, 0, 0, 3, 3, 0.2, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.044444444444444446, ["mov     rax, [rbp+counter]"], ["mov~rax,[rbp+0]"]], [0, 0, 10, 1, 0, 12, 0, 0, 6, 4, 0.06666666666666667, ["mov     rax, [rbp+counter]", "lea     rdx, [rax+1]", "mov     [rbp+counter], rdx", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+buffer]", "add     rdx, rax", "mov     rax, [rbp+cursor]", "mov     rax, [rax]", "mov     [rdx], rax", "mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [0, 0, 10, 0, 0, 3, 0, 0, 5, 2, 0.17777777777777778, ["mov     rax, [rbp+counter]", "cmp     rax, [rbp+buffer_size]", "jb      short loc_EE7E"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [0, 0, 10, 0, 0, 3, 0, 1, 3, 4, 0.17777777777777778, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "jmp     short loc_EEAF"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.044444444444444446, ["mov     rax, [rbp+counter]", "jmp     short loc_EECD"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 4, 3, 0.3666666666666667, ["cmp     [rbp+cursor], 0", "jnz     short loc_EE6E"], ["cmp~[rbp+0],0", "jnz~FOO"]]], "func_feature": [0, 1, 5, 0, 11, 14, 0, 44, 0.14848, 0, 2], "succs": [[3, 7], [0, 4], [1], [1], [8], [10], [9, 5], [10], [], [8], [3, 6]], "fname": "hash_get_entries", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 10, 0, 0, 4, 1, 1, 0, 0, 0.22222222222222224, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_EF4A"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 10, 0, 0, 4, 0, 0, 1, 2, 0.33333333333333337, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_EEF8"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 4, 3, 0.3666666666666667, ["cmp     [rbp+cursor], 0", "jnz     short loc_EF0E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 3, 0, 1, 3, 4, 0.17777777777777778, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "jmp     short loc_EF43"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 10, 1, 0, 4, 0, 0, 6, 4, 0.06666666666666667, ["add     [rbp+counter], 1", "mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [1, 0, 10, 0, 1, 10, 2, 2, 5, 2, 0.17777777777777778, ["mov     rax, [rbp+cursor]", "mov     rdx, [rax]", "mov     rcx, [rbp+processor_data]", "mov     rax, [rbp+processor]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "xor     eax, 1", "test    al, al", "jz      short loc_EF32"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 6, 1, 0.044444444444444446, ["mov     rax, [rbp+counter]", "jmp     short locret_EF61"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.044444444444444446, ["mov     rax, [rbp+counter]"], ["mov~rax,[rbp+0]"]], [2, 0, 10, 1, 0, 11, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+table], rdi", "mov     [rbp+processor], rsi", "mov     [rbp+processor_data], rdx", "mov     [rbp+counter], 0", "mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_EF4F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 10, 1, 0, 1, 0, 0, 3, 3, 0.2, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]]], "func_feature": [1, 3, 7, 0, 11, 14, 0, 44, 0.14848, 0, 3], "succs": [[10, 3], [0, 8], [10, 5], [2], [2], [4, 7], [], [6], [6], [1], [1]], "fname": "hash_do_for_each", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+value]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "pop~rbp", "retn"]], [1, 0, 3, 0, 0, 5, 0, 1, 1, 0, 0.5, ["mov     rax, [rbp+string]", "movzx   eax, byte ptr [rax]", "mov     [rbp+ch_0], al", "cmp     [rbp+ch_0], 0", "jnz     short loc_EF79"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+string], rdi", "mov     [rbp+n_buckets], rsi", "mov     [rbp+value], 0", "jmp     short loc_EFA3"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "jmp~FOO"]], [3, 0, 3, 5, 0, 11, 0, 0, 2, 0, 0.0, ["mov     rdx, [rbp+value]", "mov     rax, rdx", "shl     rax, 5", "sub     rax, rdx", "mov     rdx, rax", "movzx   eax, [rbp+ch_0]", "add     rax, rdx", "mov     edx, 0", "div     [rbp+n_buckets]", "mov     [rbp+value], rdx", "add     [rbp+string], 1"], ["mov~rdx,[rbp+0]", "mov~rax,rdx", "shl~rax,0", "sub~rax,rdx", "mov~rdx,rax", "movzx~eax,[rbp+0]", "add~rax,rdx", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rdx", "add~[rbp+0],0"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 25, 0.125, 0, 5], "succs": [[], [0, 3], [1], [1]], "fname": "hash_string", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 4, 4, 0, 5, 0, 0, 0, 0, 0.08333333333333333, ["add     [rbp+divisor], 1", "mov     rax, [rbp+divisor]", "shl     rax, 2", "add     [rbp+square], rax", "add     [rbp+divisor], 1"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "shl~rax,0", "add~[rbp+0],rax", "add~[rbp+0],0"]], [1, 0, 4, 1, 0, 6, 1, 1, 2, 1, 0.16666666666666666, ["mov     rax, [rbp+candidate]", "mov     edx, 0", "div     [rbp+divisor]", "mov     rax, rdx", "test    rax, rax", "jnz     short loc_EFD8"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "test~rax,rax", "jnz~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 1, 1, 0.41666666666666663, ["mov     rax, [rbp+square]", "cmp     rax, [rbp+candidate]", "jnb     short loc_F00D"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 0, 1, 0, 8, 1, 0, 2, 0, 0.0, ["mov     rax, [rbp+candidate]", "mov     edx, 0", "div     [rbp+divisor]", "mov     rax, rdx", "test    rax, rax", "setnz   al", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "test~rax,rax", "setnz~al", "pop~rbp", "retn"]], [1, 0, 4, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+candidate], rdi", "mov     [rbp+divisor], 3", "mov     rax, [rbp+divisor]", "imul    rax, [rbp+divisor]", "mov     [rbp+square], rax", "jmp     short loc_EFEE"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]]], "func_feature": [0, 2, 2, 0, 5, 6, 1, 30, 0.13333, 0, 7], "succs": [[2], [0, 3], [1, 3], [], [2]], "fname": "is_prime", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 4, 0, 1, 6, 2, 2, 0, 0, 0.13333333333333333, ["mov     rax, [rbp+candidate]", "mov     rdi, rax; candidate", "call    is_prime", "xor     eax, 1", "test    al, al", "jnz     short loc_F047"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 2, 1, 0.36666666666666664, ["cmp     [rbp+candidate], 0FFFFFFFFFFFFFFFFh", "jz      short loc_F066"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 4, 0, 0, 2, 1, 1, 1, 2, 0.26666666666666666, ["or      [rbp+candidate], 1", "jmp     short loc_F04C"], ["or~[rbp+0],0", "jmp~FOO"]], [2, 0, 6, 1, 0, 6, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 8", "mov     [rbp+candidate], rdi", "cmp     [rbp+candidate], 9", "ja      short loc_F040"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 1, 3, 0.0, ["mov     [rbp+candidate], 0Ah"], ["mov~[rbp+0],0"]], [1, 0, 4, 1, 0, 1, 0, 0, 4, 2, 0.03333333333333333, ["add     [rbp+candidate], 2"], ["add~[rbp+0],0"]], [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+candidate]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 3, 5, 0, 7, 9, 1, 21, 0.11429, 0, 2], "succs": [[5, 6], [0, 6], [1], [2, 4], [2], [1], []], "fname": "next_prime", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+tuning], rdi", "mov     rax, [rbp+tuning]", "pxor    xmm0, xmm0", "movss   dword ptr [rax], xmm0", "mov     rax, [rbp+tuning]", "movss   xmm0, cs:dword_1B0D0", "movss   dword ptr [rax+4], xmm0", "mov     rax, [rbp+tuning]", "movss   xmm0, cs:dword_1B0D4", "movss   dword ptr [rax+8], xmm0", "mov     rax, [rbp+tuning]", "movss   xmm0, cs:dword_1B0D8", "movss   dword ptr [rax+0Ch], xmm0", "mov     rax, [rbp+tuning]", "mov     byte ptr [rax+10h], 0", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "pxor~xmm0,xmm0", "movss~<TAG>,xmm0", "mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "movss~[word ptr [rax+0],xmm0", "mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "movss~[word ptr [rax+0],xmm0", "mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "movss~[word ptr [rax+0],xmm0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 20, 0.0, 3, 0], "succs": [[]], "fname": "hash_reset_tuning", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 1, 0, 2, 1, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+data], rdi", "mov     [rbp+n], rsi", "mov     rax, [rbp+data]", "mov     esi, 3; n", "mov     rdi, rax; x", "call    rotr_sz", "mov     [rbp+val], rax", "mov     rax, [rbp+val]", "mov     edx, 0", "div     [rbp+n]", "mov     rax, rdx", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 16, 0.0, 0, 2], "succs": [[]], "fname": "raw_hasher", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+a], rdi", "mov     [rbp+b], rsi", "mov     rax, [rbp+a]", "cmp     rax, [rbp+b]", "setz    al", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "setz~al", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 9, 0.0, 0, 0], "succs": [[]], "fname": "raw_comparator", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0.13636363636363635, ["mov     rax, [rbp+tuning]", "movss   xmm0, dword ptr [rax]", "addss   xmm0, [rbp+epsilon]", "mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+4]", "ucomiss xmm1, xmm0", "jbe     short loc_F1FB"], ["mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "addss~xmm0,[rbp+0]", "mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "ucomiss~xmm1,xmm0", "jbe~FOO"]], [0, 0, 6, 0, 0, 5, 0, 0, 4, 2, 0.14545454545454545, ["mov     rax, [rbp+tuning]", "movss   xmm0, dword ptr [rax]", "pxor    xmm1, xmm1", "ucomiss xmm0, xmm1", "jb      short loc_F1FB"], ["mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "pxor~xmm1,xmm1", "ucomiss~xmm0,xmm1", "jb~FOO"]], [0, 0, 7, 0, 0, 7, 0, 0, 3, 2, 0.13636363636363635, ["movss   xmm1, [rbp+epsilon]", "movss   xmm0, cs:dword_1B0D0", "addss   xmm0, xmm1", "mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+0Ch]", "ucomiss xmm1, xmm0", "jbe     short loc_F1FB"], ["movss~xmm1,[rbp+0]", "movss~xmm0,<TAG>", "addss~xmm0,xmm1", "mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "ucomiss~xmm1,xmm0", "jbe~FOO"]], [1, 0, 1, 0, 0, 4, 0, 0, 2, 1, 0.05909090909090909, ["mov     rax, [rbp+table]", "lea     rdx, default_tuning", "mov     [rax+28h], rdx", "mov     eax, 0"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~[rax+0],rdx", "mov~eax,0"]], [0, 0, 9, 0, 0, 6, 0, 0, 1, 2, 0.07272727272727272, ["movss   xmm0, cs:dword_1B0DC", "movss   [rbp+epsilon], xmm0", "mov     rax, [rbp+tuning]", "movss   xmm0, dword ptr [rax+8]", "ucomiss xmm0, [rbp+epsilon]", "jbe     loc_F1FB"], ["movss~xmm0,<TAG>", "movss~[rbp+0],xmm0", "mov~rax,[rbp+0]", "movss~xmm0,[word ptr [rax+0]", "ucomiss~xmm0,[rbp+0]", "jbe~FOO"]], [0, 0, 8, 0, 0, 6, 0, 0, 2, 2, 0.10909090909090909, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+8]", "movss   xmm0, cs:dword_1B0D0", "subss   xmm0, [rbp+epsilon]", "ucomiss xmm0, xmm1", "jbe     loc_F1FB"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "movss~xmm0,<TAG>", "subss~xmm0,[rbp+0]", "ucomiss~xmm0,xmm1", "jbe~FOO"]], [0, 0, 4, 0, 0, 5, 0, 0, 6, 2, 0.10909090909090909, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+4]", "movss   xmm0, cs:dword_1B0D0", "ucomiss xmm0, xmm1", "jb      short loc_F1FB"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "movss~xmm0,<TAG>", "ucomiss~xmm0,xmm1", "jb~FOO"]], [0, 0, 3, 0, 0, 7, 0, 0, 7, 2, 0.06363636363636363, ["mov     rax, [rbp+tuning]", "movss   xmm0, dword ptr [rax]", "addss   xmm0, [rbp+epsilon]", "mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+8]", "ucomiss xmm1, xmm0", "jbe     short loc_F1FB"], ["mov~rax,[rbp+0]", "movss~xmm0,<TAG>", "addss~xmm0,[rbp+0]", "mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "ucomiss~xmm1,xmm0", "jbe~FOO"]], [0, 0, 11, 0, 0, 9, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "mov     [rbp+tuning], rax", "lea     rax, default_tuning", "cmp     [rbp+tuning], rax", "jnz     short loc_F139"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "lea~rax,<TAG>", "cmp~[rbp+0],rax", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.00909090909090909, ["mov     eax, 1", "jmp     loc_F20F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 8, 1, 0.004545454545454545, ["mov     eax, 1", "jmp     short loc_F20F"], ["mov~eax,0", "jmp~FOO"]]], "func_feature": [0, 0, 3, 0, 12, 19, 3, 62, 0.07045, 3, 0], "succs": [[3, 6], [0, 3], [1, 3], [9], [3, 5], [2, 3], [3, 7], [11, 3], [10, 4], [], [9], [9]], "fname": "check_tuning", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 5, 0, 0, 2, 1, 0, 2, 3, 0.18566176470588236, ["test    rax, rax", "jns     short loc_F303"], ["test~rax,rax", "jns~FOO"]], [0, 0, 14, 0, 0, 2, 0, 1, 2, 3, 0.03768382352941176, ["cvtsi2ss xmm0, rax", "jmp     short loc_F259"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 16, 0, 0, 3, 1, 1, 1, 4, 0.03125, ["mov     rax, [rbp+candidate]", "test    rax, rax", "js      short loc_F244"], ["mov~rax,[rbp+0]", "test~rax,rax", "js~FOO"]], [1, 0, 9, 0, 0, 7, 1, 0, 5, 6, 0.07720588235294118, ["movss   xmm0, [rbp+new_candidate]", "movss   xmm1, cs:dword_1B0E4", "subss   xmm0, xmm1", "cvttss2si rax, xmm0", "mov     [rbp+candidate], rax", "mov     rax, 8000000000000000h", "xor     [rbp+candidate], rax"], ["movss~xmm0,[rbp+0]", "movss~xmm1,<TAG>", "subss~xmm0,xmm1", "cvttss2si~rax,xmm0", "mov~[rbp+0],rax", "mov~rax,0", "xor~[rbp+0],rax"]], [0, 0, 11, 0, 0, 3, 0, 0, 4, 7, 0.15808823529411764, ["movss   xmm0, [rbp+new_candidate]", "ucomiss xmm0, cs:dword_1B0E4", "jnb     short loc_F2A1"], ["movss~xmm0,[rbp+0]", "ucomiss~xmm0,<TAG>", "jnb~FOO"]], [1, 0, 3, 0, 0, 4, 2, 1, 3, 2, 0.12683823529411764, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_F314"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.016544117647058824, ["mov     eax, 0", "jmp     locret_F318"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.017463235294117647, ["mov     eax, 0", "jmp     short locret_F318"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.017463235294117647, ["mov     rax, [rbp+candidate]"], ["mov~rax,[rbp+0]"]], [0, 0, 8, 0, 0, 2, 0, 0, 6, 5, 0.19117647058823528, ["mov     rax, [rbp+candidate]", "mov     [rbp+candidate], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 9, 0, 0, 4, 0, 1, 5, 6, 0.07720588235294118, ["movss   xmm0, [rbp+new_candidate]", "cvttss2si rax, xmm0", "mov     [rbp+candidate], rax", "jmp     short loc_F2C9"], ["movss~xmm0,[rbp+0]", "cvttss2si~rax,xmm0", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 1, 17, 1, 0, 10, 2, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+candidate], rdi", "mov     [rbp+tuning], rsi", "mov     rax, [rbp+tuning]", "movzx   eax, byte ptr [rax+10h]", "xor     eax, 1", "test    al, al", "jz      loc_F2D1"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 13, 0, 0, 7, 0, 0, 3, 2, 0.1636029411764706, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+8]", "divss   xmm0, xmm1", "movss   [rbp+new_candidate], xmm0", "movss   xmm0, [rbp+new_candidate]", "ucomiss xmm0, cs:dword_1B0E0", "jb      short loc_F283"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "divss~xmm0,xmm1", "movss~[rbp+0],xmm0", "movss~xmm0,[rbp+0]", "ucomiss~xmm0,<TAG>", "jb~FOO"]], [2, 0, 7, 1, 1, 9, 0, 1, 1, 4, 0.2150735294117647, ["mov     rax, [rbp+candidate]", "mov     rdi, rax; candidate", "call    next_prime", "mov     [rbp+candidate], rax", "mov     ecx, 0", "mov     edx, 8", "mov     rax, rdx", "mul     [rbp+candidate]", "jno     short loc_F2F9"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~ecx,0", "mov~edx,0", "mov~rax,rdx", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 2, 4, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 14, 0, 0, 6, 2, 0, 2, 3, 0.03768382352941176, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]]], "func_feature": [1, 9, 8, 0, 18, 24, 2, 68, 0.07516, 2, 2], "succs": [[6], [0, 6], [14], [17, 2], [11], [12, 4], [9, 10], [], [7], [7], [7], [15], [11], [3, 15], [8, 5], [16, 1], [1], [14]], "fname": "compute_bucket_size", "n_num": 18}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 15, 0, 0, 2, 0, 0, 0, 0, 0.0, ["lea     rax, raw_hasher", "mov     [rbp+hasher], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [2, 0, 16, 1, 0, 10, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+candidate], rdi", "mov     [rbp+tuning], rsi", "mov     [rbp+hasher], rdx", "mov     [rbp+comparator], rcx", "mov     [rbp+data_freer], r8", "cmp     [rbp+hasher], 0", "jnz     short loc_F348"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 4, 0, 1, 12, 1, 2, 6, 2, 0.07708333333333334, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "mov     esi, 10h; size", "mov     rdi, rax; nmemb", "call    _calloc", "mov     rdx, rax", "mov     rax, [rbp+table]", "mov     [rax], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_F47A"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 6, 0, 1, 12, 1, 2, 5, 3, 0.13333333333333333, ["mov     rdx, [rbp+tuning]", "mov     rax, [rbp+candidate]", "mov     rsi, rdx; tuning", "mov     rdi, rax; candidate", "call    compute_bucket_size", "mov     rdx, rax", "mov     rax, [rbp+table]", "mov     [rax+10h], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "jz      loc_F477"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 9, 0, 0, 2, 0, 0, 4, 4, 0.0, ["lea     rax, default_tuning", "mov     [rbp+tuning], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [1, 0, 10, 0, 0, 2, 0, 1, 3, 4, 0.1875, ["cmp     [rbp+tuning], 0", "jnz     short loc_F38B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 8, 0, 1, 9, 2, 2, 4, 3, 0.2125, ["mov     rax, [rbp+table]", "mov     rdx, [rbp+tuning]", "mov     [rax+28h], rdx", "mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    check_tuning", "xor     eax, 1", "test    al, al", "jnz     loc_F474"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 1, 0, 1, 4, 0, 1, 6, 1, 0.027083333333333334, ["mov     rax, [rbp+table]", "mov     rdi, rax; ptr", "call    free", "mov     eax, 0"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,0"]], [0, 0, 2, 0, 0, 2, 0, 1, 5, 2, 0.04583333333333333, ["nop", "jmp     short fail"], ["nop", "jmp~FOO"]], [0, 0, 2, 0, 0, 2, 0, 1, 6, 2, 0.00625, ["nop", "jmp     short fail"], ["nop", "jmp~FOO"]], [0, 0, 2, 0, 0, 1, 0, 0, 7, 2, 0.004166666666666667, ["nop"], ["nop"]], [1, 0, 14, 0, 0, 2, 0, 1, 1, 3, 0.11666666666666667, ["cmp     [rbp+comparator], 0", "jnz     short loc_F35A"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 1, 12, 0, 1, 5, 0, 2, 2, 2, 0.2, ["mov     edi, 50h ; 'P'; size", "call    _malloc", "mov     [rbp+table], rax", "cmp     [rbp+table], 0", "jnz     short loc_F379"], ["mov~edi,<STR>", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 13, 0, 0, 2, 0, 0, 2, 3, 0.0, ["lea     rax, raw_comparator", "mov     [rbp+comparator], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.020833333333333332, ["mov     eax, 0", "jmp     locret_F48C"], ["mov~eax,0", "jmp~FOO"]], [4, 0, 1, 2, 0, 25, 0, 1, 7, 1, 0.00625, ["mov     rax, [rbp+table]", "mov     rdx, [rax]", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "shl     rax, 4", "add     rdx, rax", "mov     rax, [rbp+table]", "mov     [rax+8], rdx", "mov     rax, [rbp+table]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+table]", "mov     qword ptr [rax+20h], 0", "mov     rax, [rbp+table]", "mov     rdx, [rbp+hasher]", "mov     [rax+30h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rbp+comparator]", "mov     [rax+38h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rbp+data_freer]", "mov     [rax+40h], rdx", "mov     rax, [rbp+table]", "mov     qword ptr [rax+48h], 0", "mov     rax, [rbp+table]", "jmp     short locret_F48C"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "shl~rax,0", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [5, 4, 16, 0, 17, 23, 4, 96, 0.06103, 3, 3], "succs": [[11], [0, 11], [16, 10], [9, 2], [6], [4, 6], [8, 3], [14], [7], [7], [7], [12, 13], [5, 15], [12], [], [14], [14]], "fname": "hash_initialize", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 12, 0, 0, 14, 0, 0, 0, 0, 0.14393939393939395, ["mov     rax, [rbp+cursor]", "mov     qword ptr [rax], 0", "mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rax, [rbp+table]", "mov     rdx, [rax+48h]", "mov     rax, [rbp+cursor]", "mov     [rax+8], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rbp+cursor]", "mov     [rax+48h], rdx", "mov     rax, [rbp+next]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 12, 0, 0, 4, 1, 1, 5, 7, 0.14393939393939395, ["mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "test    rax, rax", "jz      short loc_F4E9"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 12, 0, 1, 6, 0, 1, 6, 7, 0.0, ["mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "mov     rdx, [rbp+cursor]", "mov     rdx, [rdx]", "mov     rdi, rdx", "call    rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rdx,<TAG>", "mov~rdi,rdx", "call~rax"]], [1, 0, 12, 1, 0, 1, 0, 0, 3, 2, 0.36363636363636365, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [0, 0, 12, 0, 0, 4, 1, 1, 2, 3, 0.36363636363636365, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      loc_F563"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [2, 0, 12, 0, 0, 4, 0, 0, 6, 3, 0.32575757575757575, ["mov     rax, [rbp+bucket]", "mov     qword ptr [rax], 0", "mov     rax, [rbp+bucket]", "mov     qword ptr [rax+8], 0"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0"]], [1, 0, 12, 1, 0, 8, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     loc_F568"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 12, 0, 0, 4, 0, 1, 3, 6, 0.32575757575757575, ["mov     rax, [rbp+bucket]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "jmp     short loc_F524"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 4, 5, 0.5530303030303031, ["cmp     [rbp+cursor], 0", "jnz     short loc_F4C8"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 12, 0, 1, 6, 0, 1, 6, 4, 0.0, ["mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "mov     rdx, [rbp+bucket]", "mov     rdx, [rdx]", "mov     rdi, rdx", "call    rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rdx,<TAG>", "mov~rdi,rdx", "call~rax"]], [0, 0, 12, 0, 0, 4, 1, 1, 5, 4, 0.32575757575757575, ["mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "test    rax, rax", "jz      short loc_F54C"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [2, 0, 0, 0, 0, 7, 0, 0, 2, 0, 0.0, ["mov     rax, [rbp+table]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+table]", "mov     qword ptr [rax+20h], 0", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "nop", "leave", "retn"]], [0, 0, 12, 0, 0, 4, 0, 0, 1, 1, 0.4545454545454546, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      loc_F4AA"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]]], "func_feature": [2, 3, 8, 0, 13, 17, 0, 68, 0.23077, 0, 2], "succs": [[8], [0, 2], [0], [12], [3, 7], [3], [12], [8], [1, 10], [5], [9, 5], [], [11, 4]], "fname": "hash_clear", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.10784313725490197, ["cmp     [rbp+cursor], 0", "jnz     short loc_F67B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 4, 0, 1, 3, 2, 0.14705882352941177, ["mov     rax, [rbp+table]", "mov     rax, [rax+48h]", "mov     [rbp+cursor], rax", "jmp     short loc_F69B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 3, 0, 1, 8, 0, 1, 5, 2, 0.0, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rax, [rbp+cursor]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+next]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 16, 0, 0, 2, 0, 1, 6, 7, 0.11111111111111112, ["cmp     [rbp+cursor], 0", "jnz     short loc_F5DE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 16, 0, 0, 3, 0, 1, 5, 8, 0.0392156862745098, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "jmp     short loc_F5FE"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 16, 0, 1, 9, 0, 1, 7, 8, 0.0, ["mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "mov     rdx, [rbp+cursor]", "mov     rdx, [rdx]", "mov     rdi, rdx", "call    rax", "mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rdx,<TAG>", "mov~rdi,rdx", "call~rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [1, 0, 16, 1, 0, 1, 0, 0, 5, 6, 0.16013071895424838, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [0, 0, 16, 0, 0, 4, 1, 1, 4, 7, 0.06862745098039216, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_F605"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 16, 0, 0, 4, 0, 1, 2, 6, 0.0392156862745098, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_F60A"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 17, 0, 0, 4, 1, 1, 1, 5, 0.022875816993464054, ["mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "test    rax, rax", "jz      short loc_F618"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 9, 0, 0, 4, 0, 0, 2, 3, 0.3300653594771242, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_F625"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 9, 0, 0, 4, 0, 1, 1, 4, 0.2647058823529412, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     short loc_F65F"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 9, 1, 0, 1, 0, 0, 5, 4, 0.05555555555555556, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [1, 0, 18, 1, 0, 8, 1, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+40h]", "test    rax, rax", "jz      short loc_F618"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 9, 0, 1, 8, 0, 1, 5, 6, 0.0, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rax, [rbp+cursor]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+next]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 9, 0, 0, 2, 0, 1, 4, 5, 0.12091503267973856, ["cmp     [rbp+cursor], 0", "jnz     short loc_F633"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 9, 0, 0, 4, 0, 1, 3, 6, 0.11437908496732027, ["mov     rax, [rbp+bucket]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "jmp     short loc_F653"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 16, 0, 0, 4, 0, 0, 3, 5, 0.27450980392156865, ["mov     rax, [rbp+table]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      short loc_F5C8"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 0, 0, 2, 10, 0, 2, 5, 0, 0.0, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+table]", "mov     rdi, rax; ptr", "call    free", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [5, 3, 16, 0, 19, 26, 1, 86, 0.0977, 0, 3], "succs": [[2, 18], [0], [0], [5, 6], [3], [3], [17], [4, 6], [17], [8, 11], [16, 1], [10], [10], [9, 11], [15], [12, 14], [15], [11, 7], []], "fname": "hash_free", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 1, 3, 0, 1, 0, 0, 0.08333333333333333, ["mov     edi, 10h; size", "call    _malloc", "mov     [rbp+new], rax"], ["mov~edi,0", "call~FOO", "mov~[rbp+0],rax"]], [0, 1, 3, 1, 0, 8, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+table], rdi", "mov     rax, [rbp+table]", "mov     rax, [rax+48h]", "test    rax, rax", "jz      short loc_F6F7"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     rax, [rbp+new]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 1, 0, 0, 8, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+table]", "mov     rax, [rax+48h]", "mov     [rbp+new], rax", "mov     rax, [rbp+new]", "mov     rdx, [rax+8]", "mov     rax, [rbp+table]", "mov     [rax+48h], rdx", "jmp     short loc_F705"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]]], "func_feature": [1, 1, 3, 0, 4, 4, 2, 22, 0.04167, 0, 1], "succs": [[2], [0, 3], [], [2]], "fname": "allocate_entry", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     rax, [rbp+entry]", "mov     qword ptr [rax], 0", "mov     rax, [rbp+table]", "mov     rdx, [rax+48h]", "mov     rax, [rbp+entry]", "mov     [rax+8], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rbp+entry]", "mov     [rax+48h], rdx", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 3, 16, 0.0, 0, 0], "succs": [[]], "fname": "free_entry", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.0196078431372549, ["mov     rax, [rbp+data]", "jmp     locret_F8D4"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 5, 0, 0, 5, 0, 1, 2, 2, 0.04575163398692811, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "mov     [rbp+data], rax", "cmp     [rbp+delete], 0", "jz      short loc_F81E"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 1, 15, 0, 2, 4, 2, 0.0032679738562091504, ["mov     rax, [rbp+bucket]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rcx, [rbp+bucket]", "mov     rax, [rbp+next]", "mov     rdx, [rax+8]", "mov     rax, [rax]", "mov     [rcx], rax", "mov     [rcx+8], rdx", "mov     rdx, [rbp+next]", "mov     rax, [rbp+table]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    free_entry", "jmp     short loc_F81E"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,<TAG>", "mov~<TAG>,rax", "mov~[rcx+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 2, 0, 0, 2, 0, 0, 4, 2, 0.0032679738562091504, ["mov     rax, [rbp+bucket]", "mov     qword ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~<TAG>,0"]], [0, 0, 9, 0, 0, 5, 0, 1, 5, 3, 0.09477124183006536, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     rax, [rax]", "cmp     [rbp+entry], rax", "jz      short loc_F868"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 9, 0, 0, 4, 1, 1, 4, 2, 0.12745098039215685, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "test    rax, rax", "jnz     loc_F834"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 9, 0, 1, 11, 1, 2, 6, 3, 0.026143790849673203, ["mov     rax, [rbp+table]", "mov     rax, [rax+38h]", "mov     rdx, [rbp+cursor]", "mov     rdx, [rdx+8]", "mov     rcx, [rdx]", "mov     rdx, [rbp+entry]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "test    al, al", "jz      short loc_F8B2"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rdx,[rdx+0]", "mov~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "test~al,al", "jz~FOO"]], [0, 1, 18, 1, 1, 21, 1, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     [rbp+bucket_head], rdx", "mov     eax, ecx", "mov     [rbp+delete], al", "mov     rdx, [rbp+entry]", "mov     rax, [rbp+table]", "mov     rsi, rdx; key", "mov     rdi, rax; table", "call    safe_hasher", "mov     [rbp+bucket], rax", "mov     rax, [rbp+bucket_head]", "mov     rdx, [rbp+bucket]", "mov     [rax], rdx", "mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_F792"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~eax,ecx", "mov~[rbp+0],al", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 2, 0, 1, 12, 0, 1, 7, 2, 0.0, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next_0], rax", "mov     rax, [rbp+next_0]", "mov     rdx, [rax+8]", "mov     rax, [rbp+cursor]", "mov     [rax+8], rdx", "mov     rdx, [rbp+next_0]", "mov     rax, [rbp+table]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    free_entry"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [1, 0, 3, 0, 0, 6, 0, 1, 6, 2, 0.058823529411764705, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     rax, [rax]", "mov     [rbp+data_0], rax", "cmp     [rbp+delete], 0", "jz      short loc_F8AC"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 9, 0, 0, 3, 0, 1, 3, 3, 0.0784313725490196, ["mov     rax, [rbp+bucket]", "mov     [rbp+cursor], rax", "jmp     loc_F8BE"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 9, 0, 0, 3, 0, 0, 7, 3, 0.016339869281045753, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax"]], [0, 0, 16, 0, 0, 4, 0, 1, 1, 3, 0.049019607843137254, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "cmp     [rbp+entry], rax", "jz      short loc_F7BE"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 15, 0, 1, 10, 1, 2, 2, 3, 0.058823529411764705, ["mov     rax, [rbp+table]", "mov     rax, [rax+38h]", "mov     rdx, [rbp+bucket]", "mov     rcx, [rdx]", "mov     rdx, [rbp+entry]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "test    al, al", "jz      short loc_F827"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "test~al,al", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 5, 1, 0.00980392156862745, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.0032679738562091504, ["mov     eax, 0", "jmp     locret_F8D4"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 7, 1, 0.013071895424836602, ["mov     rax, [rbp+data_0]", "jmp     short locret_F8D4"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 4, 0, 0, 4, 1, 1, 3, 3, 0.026143790849673203, ["mov     rax, [rbp+bucket]", "mov     rax, [rax+8]", "test    rax, rax", "jz      short loc_F813"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 5, 19, 0, 19, 27, 3, 114, 0.03337, 0, 1], "succs": [[18], [0, 17], [0], [0], [9, 6], [4, 14], [9, 11], [12, 15], [16], [8, 16], [5], [5], [1, 13], [1, 10], [18], [18], [18], [2, 3], []], "fname": "hash_find_entry", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 19, 0, 1, 13, 0, 1, 0, 0, 0.04239766081871345, ["mov     rax, [rbp+new_bucket]", "mov     rdx, [rbp+data]", "mov     [rax], rdx", "mov     rax, [rbp+dst]", "mov     rax, [rax+18h]", "lea     rdx, [rax+1]", "mov     rax, [rbp+dst]", "mov     [rax+18h], rdx", "mov     rdx, [rbp+cursor]", "mov     rax, [rbp+dst]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    free_entry"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [0, 0, 19, 0, 1, 16, 1, 2, 5, 8, 0.12573099415204678, ["mov     rax, [rbp+cursor]", "mov     rax, [rax]", "mov     [rbp+data], rax", "mov     rdx, [rbp+data]", "mov     rax, [rbp+dst]", "mov     rsi, rdx; key", "mov     rdi, rax; table", "call    safe_hasher", "mov     [rbp+new_bucket], rax", "mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rax, [rbp+new_bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_F974"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 19, 0, 0, 8, 0, 0, 7, 5, 0.07309941520467836, ["mov     rax, [rbp+new_bucket]", "mov     rdx, [rbp+data]", "mov     [rax], rdx", "mov     rax, [rbp+dst]", "mov     rax, [rax+18h]", "lea     rdx, [rax+1]", "mov     rax, [rbp+dst]", "mov     [rax+18h], rdx"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx"]], [0, 0, 19, 0, 1, 10, 1, 2, 6, 3, 0.22807017543859648, ["mov     rdx, [rbp+data]", "mov     rax, [rbp+dst]", "mov     rsi, rdx; key", "mov     rdi, rax; table", "call    safe_hasher", "mov     [rbp+new_bucket], rax", "mov     rax, [rbp+new_bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_FA47"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 8, 1, 0.02631578947368421, ["mov     eax, 0", "jmp     locret_FAA4"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 19, 0, 1, 6, 0, 2, 7, 2, 0.11403508771929824, ["mov     rax, [rbp+dst]", "mov     rdi, rax; table", "call    allocate_entry", "mov     [rbp+new_entry], rax", "cmp     [rbp+new_entry], 0", "jnz     short loc_FA1E"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 19, 0, 0, 4, 1, 1, 2, 4, 0.35964912280701755, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      loc_FA88"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 19, 0, 0, 4, 0, 0, 1, 2, 0.4269005847953216, ["mov     rax, [rbp+src]", "mov     rax, [rax+8]", "cmp     [rbp+bucket], rax", "jb      loc_F8FB"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 19, 0, 0, 1, 0, 0, 6, 4, 0.11403508771929824, ["nop"], ["nop"]], [2, 0, 19, 0, 0, 7, 0, 1, 5, 4, 0.3830409356725146, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "mov     [rbp+data], rax", "mov     rax, [rbp+bucket]", "mov     qword ptr [rax+8], 0", "cmp     [rbp+safe], 0", "jnz     loc_FA87"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 19, 1, 0, 1, 0, 0, 3, 3, 0.36549707602339176, ["add     [rbp+bucket], 10h"], ["add~[rbp+0],0"]], [1, 0, 19, 0, 0, 8, 0, 1, 8, 4, 0.17543859649122806, ["mov     rax, [rbp+bucket]", "mov     qword ptr [rax], 0", "mov     rax, [rbp+src]", "mov     rax, [rax+18h]", "lea     rdx, [rax-1]", "mov     rax, [rbp+src]", "mov     [rax+18h], rdx", "jmp     short loc_FA88"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 19, 0, 0, 2, 0, 0, 7, 6, 0.14327485380116958, ["mov     rax, [rbp+next]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 19, 0, 0, 8, 0, 1, 6, 7, 0.04239766081871345, ["mov     rax, [rbp+new_bucket]", "mov     rdx, [rax+8]", "mov     rax, [rbp+cursor]", "mov     [rax+8], rdx", "mov     rax, [rbp+new_bucket]", "mov     rdx, [rbp+cursor]", "mov     [rax+8], rdx", "jmp     short loc_F9A6"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 19, 0, 0, 11, 0, 1, 8, 5, 0.043859649122807015, ["mov     rax, [rbp+new_entry]", "mov     rdx, [rbp+data]", "mov     [rax], rdx", "mov     rax, [rbp+new_bucket]", "mov     rdx, [rax+8]", "mov     rax, [rbp+new_entry]", "mov     [rax+8], rdx", "mov     rax, [rbp+new_bucket]", "mov     rdx, [rbp+new_entry]", "mov     [rax+8], rdx", "jmp     short loc_FA66"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.023391812865497075, ["mov     eax, 1"], ["mov~eax,0"]], [1, 0, 19, 0, 0, 2, 0, 1, 4, 5, 0.5497076023391813, ["cmp     [rbp+cursor], 0", "jnz     loc_F91C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 19, 0, 0, 4, 0, 1, 3, 6, 0.347953216374269, ["mov     rax, [rbp+bucket]", "mov     rax, [rax+8]", "mov     [rbp+cursor], rax", "jmp     loc_F9AE"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 1, 19, 1, 0, 11, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+dst], rdi", "mov     [rbp+src], rsi", "mov     eax, edx", "mov     [rbp+safe], al", "mov     rax, [rbp+src]", "mov     rax, [rax]", "mov     [rbp+bucket], rax", "jmp     loc_FA8D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]]], "func_feature": [4, 3, 16, 0, 20, 26, 3, 121, 0.17924, 0, 2], "succs": [[12], [0, 13], [11], [2, 5], [15], [4, 14], [10, 18], [16, 6], [10], [8, 3], [7], [10], [17], [12], [11], [], [15], [1, 9], [17], [7]], "fname": "transfer_entries", "n_num": 20}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.016483516483516484, ["mov     eax, 1", "jmp     loc_FCB7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 12, 0, 0, 4, 0, 1, 1, 3, 0.049450549450549455, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "cmp     [rbp+new_size], rax", "jnz     short loc_FB09"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~[rbp+0],rax", "jnz~FOO"]], [2, 0, 14, 1, 1, 17, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "add     rsp, 0FFFFFFFFFFFFFF80h", "mov     [rbp+table], rdi", "mov     [rbp+candidate], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+table]", "mov     rdx, [rax+28h]", "mov     rax, [rbp+candidate]", "mov     rsi, rdx; tuning", "mov     rdi, rax; candidate", "call    compute_bucket_size", "mov     [rbp+new_size], rax", "cmp     [rbp+new_size], 0", "jnz     short loc_FAF1"], ["push~rbp", "mov~rbp,rsp", "add~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.1208791208791209, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_FCCB"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [4, 0, 8, 2, 1, 42, 1, 2, 3, 3, 0.08241758241758243, ["mov     rax, [rbp+new_table]", "mov     rdx, [rbp+new_size]", "mov     [rax+10h], rdx", "mov     rax, [rbp+new_table]", "mov     rax, [rax]", "mov     rdx, [rbp+new_size]", "shl     rdx, 4", "add     rdx, rax", "mov     rax, [rbp+new_table]", "mov     [rax+8], rdx", "mov     rax, [rbp+new_table]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+new_table]", "mov     qword ptr [rax+20h], 0", "mov     rax, [rbp+table]", "mov     rdx, [rax+28h]", "mov     rax, [rbp+new_table]", "mov     [rax+28h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rax+30h]", "mov     rax, [rbp+new_table]", "mov     [rax+30h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rax+38h]", "mov     rax, [rbp+new_table]", "mov     [rax+38h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rax+40h]", "mov     rax, [rbp+new_table]", "mov     [rax+40h], rdx", "mov     rax, [rbp+table]", "mov     rdx, [rax+48h]", "mov     rax, [rbp+new_table]", "mov     [rax+48h], rdx", "mov     rcx, [rbp+table]", "mov     rax, [rbp+new_table]", "mov     edx, 0; safe", "mov     rsi, rcx; src", "mov     rdi, rax; dst", "call    transfer_entries", "test    al, al", "jz      short loc_FC50"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "shl~rdx,0", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [1, 0, 10, 0, 1, 13, 1, 2, 2, 3, 0.07692307692307693, ["lea     rax, [rbp+storage]", "mov     [rbp+new_table], rax", "mov     rax, [rbp+new_size]", "mov     esi, 10h; size", "mov     rdi, rax; nmemb", "call    _calloc", "mov     rdx, rax", "mov     rax, [rbp+new_table]", "mov     [rax], rdx", "mov     rax, [rbp+new_table]", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_FB42"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 0, 6, 0, 1, 13, 2, 2, 4, 4, 0.06593406593406594, ["mov     rax, [rbp+new_table]", "mov     rdx, [rax+48h]", "mov     rax, [rbp+table]", "mov     [rax+48h], rdx", "mov     rcx, [rbp+new_table]", "mov     rax, [rbp+table]", "mov     edx, 1; safe", "mov     rsi, rcx; src", "mov     rdi, rax; dst", "call    transfer_entries", "xor     eax, 1", "test    al, al", "jnz     short loc_FC9E"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.016483516483516484, ["mov     eax, 0", "jmp     loc_FCB7"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 1, 26, 0, 2, 4, 2, 0.016483516483516484, ["mov     rax, [rbp+table]", "mov     rax, [rax]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+new_table]", "mov     rdx, [rax]", "mov     rax, [rbp+table]", "mov     [rax], rdx", "mov     rax, [rbp+new_table]", "mov     rdx, [rax+8]", "mov     rax, [rbp+table]", "mov     [rax+8], rdx", "mov     rax, [rbp+new_table]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+table]", "mov     [rax+10h], rdx", "mov     rax, [rbp+new_table]", "mov     rdx, [rax+18h]", "mov     rax, [rbp+table]", "mov     [rax+18h], rdx", "mov     rax, [rbp+new_table]", "mov     rdx, [rax+48h]", "mov     rax, [rbp+table]", "mov     [rax+48h], rdx", "mov     eax, 1", "jmp     short loc_FCB7"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 1, 5, 0, 1, 6, 2, 0.03296703296703297, ["mov     rax, [rbp+new_table]", "mov     rax, [rax]", "mov     rdi, rax; ptr", "call    free", "mov     eax, 0"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~eax,0"]], [2, 0, 5, 0, 1, 9, 2, 2, 5, 3, 0.04395604395604396, ["mov     rcx, [rbp+new_table]", "mov     rax, [rbp+table]", "mov     edx, 0; safe", "mov     rsi, rcx; src", "mov     rdi, rax; dst", "call    transfer_entries", "xor     eax, 1", "test    al, al", "jz      short loc_FCA3"], ["mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.016483516483516484, ["mov     eax, 0", "jmp     loc_FCB7"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    _abort"], ["call~FOO"]]], "func_feature": [9, 8, 20, 1, 15, 19, 2, 142, 0.0359, 1, 3], "succs": [[4], [0, 7], [9, 1], [], [3, 5], [], [8, 10], [13, 6], [12, 14], [4], [4], [4], [11, 14], [4], []], "fname": "hash_rehash", "n_num": 15}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0.04141414141414142, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_10008"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.006060606060606061, ["mov     eax, 0", "jmp     loc_FFF4"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 17, 2, 0.015151515151515152, ["mov     eax, 0FFFFFFFFh", "jmp     loc_FFF4"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 20, 2, 0.006060606060606061, ["mov     eax, 0FFFFFFFFh", "jmp     loc_FFF4"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 2, 0.0007575757575757576, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_FFF4"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 17, 0, 1, 9, 2, 0.0007575757575757576, ["mov     rax, [rbp+new_entry]", "mov     rdx, [rbp+entry]", "mov     [rax], rdx", "mov     rax, [rbp+bucket]", "mov     rdx, [rax+8]", "mov     rax, [rbp+new_entry]", "mov     [rax+8], rdx", "mov     rax, [rbp+bucket]", "mov     rdx, [rbp+new_entry]", "mov     [rax+8], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "lea     rdx, [rax+1]", "mov     rax, [rbp+table]", "mov     [rax+20h], rdx", "mov     eax, 1", "jmp     short loc_FFF4"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 14, 0, 0, 8, 2, 0.024242424242424242, ["mov     rax, [rbp+bucket]", "mov     rdx, [rbp+entry]", "mov     [rax], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "lea     rdx, [rax+1]", "mov     rax, [rbp+table]", "mov     [rax+20h], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "lea     rdx, [rax+1]", "mov     rax, [rbp+table]", "mov     [rax+18h], rdx", "mov     eax, 1"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0"]], [0, 0, 18, 0, 0, 2, 0, 1, 14, 5, 0.029166666666666667, ["cvtsi2ss xmm0, rax", "jmp     short loc_FE99"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 20, 0, 0, 4, 1, 1, 13, 6, 0.06641414141414141, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_FE84"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 34, 0, 0, 2, 0, 1, 5, 5, 0.05, ["cvtsi2ss xmm1, rax", "jmp     short loc_FD9B"], ["cvtsi2ss~xmm1,rax", "jmp~FOO"]], [0, 0, 36, 0, 0, 7, 1, 1, 4, 6, 0.08787878787878788, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "movss   xmm2, dword ptr [rax+8]", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_FD86"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "movss~xmm2,[word ptr [rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 12, 0, 0, 6, 1, 0, 18, 4, 0.04191919191919192, ["movss   xmm0, [rbp+candidate]", "movss   xmm1, cs:dword_1B0E4", "subss   xmm0, xmm1", "cvttss2si rax, xmm0", "mov     rdx, 8000000000000000h", "xor     rax, rdx"], ["movss~xmm0,[rbp+0]", "movss~xmm1,<TAG>", "subss~xmm0,xmm1", "cvttss2si~rax,xmm0", "mov~rdx,0", "xor~rax,rdx"]], [0, 0, 14, 0, 0, 3, 0, 0, 17, 5, 0.10404040404040404, ["movss   xmm0, [rbp+candidate]", "ucomiss xmm0, cs:dword_1B0E4", "jnb     short loc_FEEA"], ["movss~xmm0,[rbp+0]", "ucomiss~xmm0,<TAG>", "jnb~FOO"]], [2, 0, 27, 0, 0, 6, 2, 0, 10, 5, 0.07045454545454545, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm1, rdx", "addss   xmm1, xmm1"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm1,rdx", "addss~xmm1,xmm1"]], [0, 0, 29, 0, 0, 7, 1, 1, 9, 6, 0.1393939393939394, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "movss   xmm2, dword ptr [rax+8]", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_FDFE"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "movss~xmm2,[word ptr [rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [2, 0, 18, 0, 0, 6, 2, 0, 14, 5, 0.029166666666666667, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [2, 0, 34, 0, 0, 6, 2, 0, 5, 5, 0.05, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm1, rdx", "addss   xmm1, xmm1"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm1,rdx", "addss~xmm1,xmm1"]], [0, 0, 26, 0, 0, 3, 0, 0, 11, 4, 0.1606060606060606, ["mulss   xmm1, xmm2", "ucomiss xmm0, xmm1", "jbe     loc_FF50"], ["mulss~xmm1,xmm2", "ucomiss~xmm0,xmm1", "jbe~FOO"]], [0, 0, 27, 0, 0, 2, 0, 1, 10, 5, 0.07045454545454545, ["cvtsi2ss xmm1, rax", "jmp     short loc_FE13"], ["cvtsi2ss~xmm1,rax", "jmp~FOO"]], [0, 0, 17, 0, 0, 6, 0, 0, 15, 4, 0.06641414141414141, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+0Ch]", "mulss   xmm0, xmm1", "mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+8]", "mulss   xmm0, xmm1"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1", "mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1"]], [2, 0, 43, 0, 1, 9, 0, 2, 1, 4, 0.021717171717171718, ["lea     rdx, [rbp+bucket]; bucket_head", "mov     rsi, [rbp+entry]; entry", "mov     rax, [rbp+table]", "mov     ecx, 0; delete", "mov     rdi, rax; table", "call    hash_find_entry", "mov     [rbp+data], rax", "cmp     [rbp+data], 0", "jz      short loc_FD3C"], ["lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 45, 1, 0, 11, 1, 1, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     [rbp+matched_ent], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+entry], 0", "jnz     short loc_FCFC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 11, 0, 1, 7, 2, 2, 19, 3, 0.08131313131313131, ["mov     rdx, [rbp+table]", "mov     rsi, rax; candidate", "mov     rdi, rdx; table", "call    hash_rehash", "xor     eax, 1", "test    al, al", "jz      short loc_FF2D"], ["mov~rdx,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 12, 0, 0, 3, 0, 1, 18, 4, 0.04191919191919192, ["movss   xmm0, [rbp+candidate]", "cvttss2si rax, xmm0", "jmp     short loc_FF0D"], ["movss~xmm0,[rbp+0]", "cvttss2si~rax,xmm0", "jmp~FOO"]], [0, 0, 33, 0, 0, 3, 0, 0, 6, 4, 0.1303030303030303, ["mulss   xmm1, xmm2", "ucomiss xmm0, xmm1", "jbe     loc_FF50"], ["mulss~xmm1,xmm2", "ucomiss~xmm0,xmm1", "jbe~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 2, 3, 0.00505050505050505, ["cmp     [rbp+matched_ent], 0", "jz      short loc_FD32"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.0, ["mov     rax, [rbp+matched_ent]", "mov     rdx, [rbp+data]", "mov     [rax], rdx"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx"]], [0, 0, 0, 0, 1, 1, 0, 1, 21, -1, 0.0, ["call    _abort"], ["call~FOO"]], [1, 0, 9, 0, 1, 8, 1, 2, 20, 4, 0.050505050505050504, ["lea     rdx, [rbp+bucket]; bucket_head", "mov     rsi, [rbp+entry]; entry", "mov     rax, [rbp+table]", "mov     ecx, 0; delete", "mov     rdi, rax; table", "call    hash_find_entry", "test    rax, rax", "jz      short loc_FF50"], ["lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jz~FOO"]], [0, 0, 25, 0, 0, 7, 1, 1, 12, 7, 0.13737373737373737, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "mov     [rbp+tuning], rax", "mov     rax, [rbp+tuning]", "movzx   eax, byte ptr [rax+10h]", "test    al, al", "jz      short loc_FE70"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [1, 0, 5, 0, 1, 6, 0, 2, 8, 3, 0.03232323232323232, ["mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    allocate_entry", "mov     [rbp+new_entry], rax", "cmp     [rbp+new_entry], 0", "jnz     short loc_FF7A"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 20, 0, 0, 4, 1, 1, 13, 6, 0.06641414141414141, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_FE4C"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 16, 0, 0, 4, 0, 0, 16, 3, 0.13737373737373737, ["movss   [rbp+candidate], xmm0", "movss   xmm0, [rbp+candidate]", "ucomiss xmm0, cs:dword_1B0E0", "jb      short loc_FED0"], ["movss~[rbp+0],xmm0", "movss~xmm0,[rbp+0]", "ucomiss~xmm0,<TAG>", "jb~FOO"]], [0, 0, 17, 0, 0, 4, 0, 1, 15, 4, 0.06641414141414141, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+0Ch]", "mulss   xmm0, xmm1", "jmp     short loc_FEB3"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1", "jmp~FOO"]], [0, 0, 30, 0, 0, 2, 0, 1, 8, 7, 0.05757575757575758, ["cvtsi2ss xmm0, rax", "jmp     short loc_FDDD"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 32, 0, 1, 7, 1, 2, 7, 8, 0.10909090909090909, ["mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    check_tuning", "mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "test    rax, rax", "js      short loc_FDC8"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 39, 0, 0, 4, 1, 1, 2, 8, 0.03636363636363636, ["mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "test    rax, rax", "js      short loc_FD50"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 18, 0, 0, 2, 0, 1, 14, 5, 0.029166666666666667, ["cvtsi2ss xmm0, rax", "jmp     short loc_FE61"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 37, 0, 0, 2, 0, 1, 3, 7, 0.026515151515151516, ["cvtsi2ss xmm0, rax", "jmp     short loc_FD65"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [2, 0, 30, 0, 0, 6, 2, 0, 8, 7, 0.05757575757575758, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [0, 0, 7, 0, 0, 4, 1, 1, 7, 3, 0.08535353535353535, ["mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_FFBC"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [2, 0, 18, 0, 0, 6, 2, 0, 14, 5, 0.029166666666666667, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [2, 0, 37, 0, 0, 6, 2, 0, 3, 7, 0.026515151515151516, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, -1, 0.0, ["call    _abort"], ["call~FOO"]]], "func_feature": [8, 26, 36, 1, 46, 61, 1, 217, 0.04975, 3, 1], "succs": [[9, 12], [0], [0], [0], [0], [0], [0], [21], [17, 7], [], [26], [10, 18], [], [24], [25, 13], [19], [20, 15], [21], [26], [42, 31], [19], [34], [27, 38], [45, 22], [3, 30], [24], [42, 37], [1, 28], [1], [], [42, 29], [8, 33], [4, 5], [43, 39], [2, 14], [34], [16], [41, 36], [40, 44], [35], [11], [16], [32, 6], [35], [11], []], "fname": "hash_insert_if_absent", "n_num": 46}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 7, 1, 1, 17, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rdx, [rbp+matched_ent]; matched_ent", "mov     rcx, [rbp+entry]", "mov     rax, [rbp+table]", "mov     rsi, rcx; entry", "mov     rdi, rax; table", "call    hash_insert_if_absent", "mov     [rbp+err], eax", "cmp     [rbp+err], 0FFFFFFFFh", "jz      short loc_1005B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 0, 1, 0.23809523809523808, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_10074"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.03571428571428571, ["mov     rax, [rbp+matched_ent]", "jmp     short loc_10060"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 0, 2, 0.03571428571428571, ["mov     rax, [rbp+entry]", "jmp     short loc_10060"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 0, 2, 0.07142857142857142, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 5, 0, 0, 2, 0, 1, 0, 3, 0.047619047619047616, ["cmp     [rbp+err], 0", "jnz     short loc_10055"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [2, 2, 7, 1, 8, 9, 3, 30, 0.05357, 1, 1], "succs": [[5, 6], [], [1, 7], [2], [2], [2], [3, 4], []], "fname": "hash_insert", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 14, 0, 0, 4, 1, 1, 0, 0, 0.09210526315789475, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_10209"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 21, 0, 0, 7, 1, 1, 12, 8, 0.1934566145092461, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "mov     [rbp+tuning], rax", "mov     rax, [rbp+tuning]", "movzx   eax, byte ptr [rax+10h]", "test    al, al", "jz      short loc_1025E"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "test~al,al", "jz~FOO"]], [2, 0, 12, 0, 0, 6, 2, 0, 14, 6, 0.038229018492176386, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [0, 0, 14, 0, 0, 4, 1, 1, 13, 7, 0.09210526315789475, ["mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_10272"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 26, 0, 0, 2, 0, 1, 8, 6, 0.07965860597439545, ["cvtsi2ss xmm0, rax", "jmp     short loc_1019B"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 28, 0, 1, 7, 1, 2, 7, 7, 0.15362731152204837, ["mov     rax, [rbp+table]", "mov     rdi, rax; table", "call    check_tuning", "mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "test    rax, rax", "js      short loc_10186"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 35, 0, 0, 9, 1, 1, 2, 7, 0.044096728307254626, ["mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "lea     rdx, [rax-1]", "mov     rax, [rbp+table]", "mov     [rax+18h], rdx", "mov     rax, [rbp+table]", "mov     rax, [rax+18h]", "test    rax, rax", "js      short loc_1010F"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 36, 0, 0, 9, 1, 1, 1, 3, 0.023470839260312945, ["mov     rax, [rbp+table]", "mov     rax, [rax+20h]", "lea     rdx, [rax-1]", "mov     rax, [rbp+table]", "mov     [rax+20h], rdx", "mov     rax, [rbp+bucket]", "mov     rax, [rax]", "test    rax, rax", "jnz     loc_1032E"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 12, 0, 0, 2, 0, 1, 14, 6, 0.038229018492176386, ["cvtsi2ss xmm0, rax", "jmp     short loc_1021E"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 7, 0, 1, 8, 0, 1, 20, 5, 0.0, ["mov     rax, [rbp+cursor]", "mov     rax, [rax+8]", "mov     [rbp+next], rax", "mov     rax, [rbp+cursor]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+next]", "mov     [rbp+cursor], rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 7, 0, 0, 2, 0, 1, 19, 4, 0.050497866287339974, ["cmp     [rbp+cursor], 0", "jnz     short loc_102FB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 33, 0, 0, 2, 0, 1, 3, 6, 0.032361308677098154, ["cvtsi2ss xmm0, rax", "jmp     short loc_10124"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [2, 0, 26, 0, 0, 6, 2, 0, 8, 6, 0.07965860597439545, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [2, 0, 12, 0, 0, 6, 2, 0, 14, 6, 0.038229018492176386, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [2, 0, 33, 0, 0, 6, 2, 0, 3, 6, 0.032361308677098154, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm0, rdx", "addss   xmm0, xmm0"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm0,rdx", "addss~xmm0,xmm0"]], [1, 0, 4, 0, 0, 2, 0, 0, 20, 3, 0.008534850640113799, ["mov     rax, [rbp+table]", "mov     qword ptr [rax+48h], 0"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0"]], [0, 0, 11, 0, 0, 8, 0, 0, 15, 5, 0.07930298719772404, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+4]", "mulss   xmm0, xmm1", "mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+8]", "mulss   xmm0, xmm1", "ucomiss xmm0, cs:dword_1B0E4", "jnb     short loc_102B1"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1", "mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1", "ucomiss~xmm0,<TAG>", "jnb~FOO"]], [0, 0, 12, 0, 0, 2, 0, 1, 14, 6, 0.038229018492176386, ["cvtsi2ss xmm0, rax", "jmp     short loc_10287"], ["cvtsi2ss~xmm0,rax", "jmp~FOO"]], [0, 0, 25, 0, 0, 7, 1, 1, 9, 5, 0.18776671408250356, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "movss   xmm2, dword ptr [rax]", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_101BB"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "movss~xmm2,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.07041251778093884, ["mov     rax, [rbp+data]"], ["mov~rax,[rbp+0]"]], [0, 0, 29, 0, 0, 3, 0, 0, 6, 3, 0.1593172119487909, ["mulss   xmm1, xmm2", "ucomiss xmm1, xmm0", "jbe     loc_1032E"], ["mulss~xmm1,xmm2", "ucomiss~xmm1,xmm0", "jbe~FOO"]], [0, 0, 22, 0, 0, 3, 0, 0, 11, 3, 0.20910384068278806, ["mulss   xmm1, xmm2", "ucomiss xmm1, xmm0", "jbe     loc_1032E"], ["mulss~xmm1,xmm2", "ucomiss~xmm1,xmm0", "jbe~FOO"]], [1, 0, 8, 0, 1, 9, 2, 2, 17, 3, 0.11948790896159318, ["mov     [rbp+candidate], rax", "mov     rdx, [rbp+candidate]", "mov     rax, [rbp+table]", "mov     rsi, rdx; candidate", "mov     rdi, rax; table", "call    hash_rehash", "xor     eax, 1", "test    al, al", "jz      short loc_1032E"], ["mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 9, 0, 0, 2, 0, 1, 16, 4, 0.028627311522048365, ["cvttss2si rax, xmm0", "jmp     short loc_102CF"], ["cvttss2si~rax,xmm0", "jmp~FOO"]], [0, 0, 11, 0, 0, 5, 0, 0, 15, 5, 0.07930298719772404, ["mov     rax, [rbp+tuning]", "movss   xmm1, dword ptr [rax+4]", "mulss   xmm0, xmm1", "ucomiss xmm0, cs:dword_1B0E4", "jnb     short loc_1023E"], ["mov~rax,[rbp+0]", "movss~xmm1,[word ptr [rax+0]", "mulss~xmm0,xmm1", "ucomiss~xmm0,<TAG>", "jnb~FOO"]], [2, 1, 38, 1, 1, 17, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+table], rdi", "mov     [rbp+entry], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rdx, [rbp+bucket]; bucket_head", "mov     rsi, [rbp+entry]; entry", "mov     rax, [rbp+table]", "mov     ecx, 1; delete", "mov     rdi, rax; table", "call    hash_find_entry", "mov     [rbp+data], rax", "cmp     [rbp+data], 0", "jnz     short loc_100C3"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 23, 0, 0, 2, 0, 1, 10, 4, 0.09352773826458037, ["cvtsi2ss xmm1, rax", "jmp     short loc_101D0"], ["cvtsi2ss~xmm1,rax", "jmp~FOO"]], [0, 0, 32, 0, 0, 7, 1, 1, 4, 5, 0.10810810810810811, ["mov     rax, [rbp+table]", "mov     rax, [rax+28h]", "movss   xmm2, dword ptr [rax]", "mov     rax, [rbp+table]", "mov     rax, [rax+10h]", "test    rax, rax", "js      short loc_10144"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "movss~xmm2,<TAG>", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.0021337126600284497, ["mov     eax, 0", "jmp     loc_10332"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.05120910384068279, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_10346"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 7, 0, 0, 4, 0, 1, 18, 5, 0.06401137980085349, ["mov     rax, [rbp+table]", "mov     rax, [rax+48h]", "mov     [rbp+cursor], rax", "jmp     short loc_1031B"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 30, 0, 0, 2, 0, 1, 5, 4, 0.061166429587482224, ["cvtsi2ss xmm1, rax", "jmp     short loc_10159"], ["cvtsi2ss~xmm1,rax", "jmp~FOO"]], [0, 0, 9, 0, 0, 2, 0, 1, 16, 4, 0.028627311522048365, ["cvttss2si rax, xmm0", "jmp     loc_102CF"], ["cvttss2si~rax,xmm0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 9, 0, 0, 5, 1, 0, 16, 4, 0.028627311522048365, ["movss   xmm1, cs:dword_1B0E4", "subss   xmm0, xmm1", "cvttss2si rax, xmm0", "mov     rdx, 8000000000000000h", "xor     rax, rdx"], ["movss~xmm1,<TAG>", "subss~xmm0,xmm1", "cvttss2si~rax,xmm0", "mov~rdx,0", "xor~rax,rdx"]], [2, 0, 23, 0, 0, 6, 2, 0, 10, 4, 0.09352773826458037, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm1, rdx", "addss   xmm1, xmm1"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm1,rdx", "addss~xmm1,xmm1"]], [2, 0, 30, 0, 0, 6, 2, 0, 5, 4, 0.061166429587482224, ["mov     rdx, rax", "shr     rdx, 1", "and     eax, 1", "or      rdx, rax", "cvtsi2ss xmm1, rdx", "addss   xmm1, xmm1"], ["mov~rdx,rax", "shr~rdx,0", "and~eax,0", "or~rdx,rax", "cvtsi2ss~xmm1,rdx", "addss~xmm1,xmm1"]], [1, 0, 9, 0, 0, 6, 1, 1, 16, 4, 0.028627311522048365, ["movss   xmm1, cs:dword_1B0E4", "subss   xmm0, xmm1", "cvttss2si rax, xmm0", "mov     rdx, 8000000000000000h", "xor     rax, rdx", "jmp     short loc_102CF"], ["movss~xmm1,<TAG>", "subss~xmm0,xmm1", "cvttss2si~rax,xmm0", "mov~rdx,0", "xor~rax,rdx", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [5, 26, 28, 1, 39, 53, 1, 187, 0.06638, 2, 1], "succs": [[8, 13], [0, 3], [16], [17, 2], [18], [12, 4], [11, 14], [19, 6], [24], [10], [9, 15], [27], [18], [24], [27], [19], [34, 23], [16], [26, 35], [29], [19, 5], [1, 19], [19, 30], [22], [32, 37], [28, 7], [21], [36, 31], [29], [33, 38], [10], [20], [22], [], [22], [21], [20], [22], []], "fname": "hash_delete", "n_num": 39}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 2, 1, 22, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     [rbp+table_size], rsi", "mov     rax, [rbp+x]", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     rax, [rax]", "mov     rdx, [rbp+table_size]", "mov     rsi, rdx; tablesize", "mov     rdi, rax; x", "call    hash_pjw", "mov     [rbp+tmp], rax", "mov     rax, [rbp+p]", "mov     rax, [rax+8]", "xor     rax, [rbp+tmp]", "mov     edx, 0", "div     [rbp+table_size]", "mov     rax, rdx", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "xor~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "leave", "retn"]]], "func_feature": [1, 1, 1, 0, 1, 0, 0, 22, 0.0, 0, 2], "succs": [[]], "fname": "triple_hash", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+table_size], rsi", "mov     rax, [rbp+x]", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     rax, [rax+8]", "mov     edx, 0", "div     [rbp+table_size]", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "triple_hash_no_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 0, 1, 9, 1, 2, 0, 0, 0.1, ["mov     rax, [rbp+b]", "mov     rdx, [rax]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "mov     rsi, rdx; dest", "mov     rdi, rax; source", "call    same_name", "test    al, al", "jz      short loc_1042C"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 0, 6, 0, 1, 1, 2, 0.1, ["mov     rax, [rbp+a]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+b]", "mov     rax, [rax+10h]", "cmp     rdx, rax", "jnz     short loc_1042C"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 1, 5, 1, 0, 15, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     [rbp+y], rsi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+y]", "mov     [rbp+b], rax", "mov     rax, [rbp+a]", "mov     rdx, [rax+8]", "mov     rax, [rbp+b]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_1042C"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.025, ["mov     eax, 1", "jmp     short loc_10431"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.125, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]]], "func_feature": [1, 2, 5, 0, 6, 8, 0, 36, 0.05833, 0, 1], "succs": [[3, 4], [0, 4], [1, 4], [5], [5], []], "fname": "triple_compare", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.025, ["mov     eax, 1", "jmp     short loc_104A9"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 1, 9, 1, 2, 2, 2, 0.1, ["mov     rax, [rbp+b]", "mov     rdx, [rax]", "mov     rax, [rbp+a]", "mov     rax, [rax]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_104A4"], ["mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.125, ["mov     eax, 0"], ["mov~eax,0"]], [0, 1, 5, 1, 0, 15, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     [rbp+y], rsi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+y]", "mov     [rbp+b], rax", "mov     rax, [rbp+a]", "mov     rdx, [rax+8]", "mov     rax, [rbp+b]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_104A4"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 4, 0, 0, 6, 0, 1, 1, 2, 0.1, ["mov     rax, [rbp+a]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+b]", "mov     rax, [rax+10h]", "cmp     rdx, rax", "jnz     short loc_104A4"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "leave", "retn"], ["and~eax,0", "leave", "retn"]]], "func_feature": [1, 2, 5, 0, 6, 8, 0, 36, 0.05833, 0, 1], "succs": [[5], [0, 2], [5], [2, 4], [1, 2], []], "fname": "triple_compare_ino_str", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 2, 16, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+x], rdi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+a]", "mov     rax, [rax]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+a]", "mov     rdi, rax; ptr", "call    free", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 1, 16, 0.0, 0, 1], "succs": [[]], "fname": "triple_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 0, 6, 1, 1, 20, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+dir_fd], edi", "mov     [rbp+dir], rsi", "mov     [rbp+extra_flags], edx", "mov     [rbp+pnew_fd], rcx", "mov     eax, [rbp+extra_flags]", "or      eax, 90900h", "mov     [rbp+open_flags], eax", "mov     edx, [rbp+open_flags]; flags", "mov     rcx, [rbp+dir]", "mov     eax, [rbp+dir_fd]", "mov     rsi, rcx; file", "mov     edi, eax; fd", "mov     eax, 0", "call    openat_safer", "mov     [rbp+new_fd], eax", "cmp     [rbp+new_fd], 0", "jns     short loc_1052A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~eax,[rbp+0]", "or~eax,0", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.03333333333333333, ["mov     eax, 0", "jmp     short locret_1056F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 2, 0, 3, 10, 0, 3, 0, 2, 0.05, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+fdopendir_errno], eax", "mov     eax, [rbp+new_fd]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+fdopendir_errno]", "mov     [rdx], eax"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax"]], [1, 0, 4, 0, 1, 6, 0, 2, 0, 3, 0.1, ["mov     eax, [rbp+new_fd]", "mov     edi, eax; fd", "call    _fdopendir", "mov     [rbp+dirp], rax", "cmp     [rbp+dirp], 0", "jz      short loc_1054A"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.1, ["mov     rax, [rbp+dirp]"], ["mov~rax,[rbp+0]"]], [0, 0, 2, 0, 0, 4, 0, 1, 0, 2, 0.05, ["mov     rax, [rbp+pnew_fd]", "mov     edx, [rbp+new_fd]", "mov     [rax], edx", "jmp     short loc_1056B"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~<TAG>,edx", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 1, 8, 0, 7, 8, 1, 45, 0.04762, 0, 1], "succs": [[1, 3], [6], [4], [2, 5], [6], [4], []], "fname": "opendirat", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 9, 1, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+argv0], rdi", "cmp     [rbp+argv0], 0", "jnz     short loc_105A9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 7, 0, 1, 7, 0, 2, 0, 3, 0.09722222222222221, ["mov     rax, [rbp+argv0]", "mov     esi, 2Fh ; '/'; c", "mov     rdi, rax; s", "call    _strrchr", "mov     [rbp+slash], rax", "cmp     [rbp+slash], 0", "jz      short loc_105CF"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 0, 0, 2, 7, 0, 2, 0, -1, 0.0, ["mov     rax, cs:stderr@@GLIBC_2_2_5", "mov     rcx, rax; s", "mov     edx, 37h ; '7'; n", "mov     esi, 1; size", "lea     rdi, aANullArgv0WasP; \"A NULL argv[0] was passed through an ex\"...", "call    _fwrite", "call    _abort"], ["mov~rax,<TAG>", "mov~rcx,rax", "mov~edx,0", "mov~esi,0", "lea~rdi,<TAG>", "call~FOO", "call~FOO"]], [1, 0, 4, 1, 0, 7, 0, 1, 0, 1, 0.2222222222222222, ["mov     [rbp+base], rax", "mov     rdx, [rbp+base]", "mov     rax, [rbp+argv0]", "sub     rdx, rax", "mov     rax, rdx", "cmp     rax, 6", "jle     short loc_10646"], ["mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "cmp~rax,0", "jle~FOO"]], [1, 0, 5, 1, 0, 3, 0, 1, 0, 2, 0.06944444444444445, ["mov     rax, [rbp+slash]", "add     rax, 1", "jmp     short loc_105D3"], ["mov~rax,[rbp+0]", "add~rax,0", "jmp~FOO"]], [0, 0, 5, 0, 0, 1, 0, 0, 0, 2, 0.06944444444444445, ["mov     rax, [rbp+argv0]"], ["mov~rax,[rbp+0]"]], [2, 0, 3, 1, 1, 8, 1, 2, 0, 1, 0.1388888888888889, ["mov     rax, [rbp+base]", "sub     rax, 7", "mov     edx, 7; n", "lea     rsi, aLibs; \"/.libs/\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     short loc_10646"], ["mov~rax,[rbp+0]", "sub~rax,0", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 2, 0, 1, 9, 1, 2, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+base]", "mov     [rbp+argv0], rax", "mov     rax, [rbp+base]", "mov     edx, 3; n", "lea     rsi, aLt; \"lt-\"", "mov     rdi, rax; s1", "call    _strncmp", "test    eax, eax", "jnz     short loc_10646"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+argv0]", "mov     cs:program_name, rax", "mov     rax, [rbp+argv0]", "mov     cs:program_invocation_name@@GLIBC_2_2_5, rax", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "nop", "leave", "retn"]], [1, 0, 1, 1, 0, 5, 0, 0, 0, 1, 0.0, ["mov     rax, [rbp+base]", "add     rax, 3", "mov     [rbp+argv0], rax", "mov     rax, [rbp+argv0]", "mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rax"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax"]]], "func_feature": [5, 2, 11, 0, 10, 13, 1, 60, 0.06806, 7, 5], "succs": [[1, 2], [4, 5], [], [8, 6], [3], [3], [8, 7], [8, 9], [], [8]], "fname": "set_program_name", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 0, 3, 1, 1, 0, 0, 0.30000000000000004, ["mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_106EA"], ["mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.07500000000000001, ["mov     eax, 0FFFFFFFEh", "jmp     short loc_106D6"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 2, 11, 0, 2, 1, 2, 0.07500000000000001, ["mov     edx, [rbp+dest_desc]; desc", "mov     rcx, [rbp+dst_name]", "lea     rax, [rbp+ctx]", "mov     rsi, rcx; name", "mov     rdi, rax; ctx", "call    set_permissions", "mov     [rbp+ret], eax", "lea     rax, [rbp+ctx]", "mov     rdi, rax; ctx", "call    free_permission_context", "mov     eax, [rbp+ret]"], ["mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 5, 1, 1, 20, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+src_name], rdi", "mov     [rbp+source_desc], esi", "mov     [rbp+dst_name], rdx", "mov     [rbp+dest_desc], ecx", "mov     [rbp+mode], r8d", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rcx, [rbp+ctx]; ctx", "mov     edx, [rbp+mode]; mode", "mov     esi, [rbp+source_desc]; desc", "mov     rax, [rbp+src_name]", "mov     rdi, rax; name", "call    get_permissions", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jz      short loc_106AE"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8d", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [4, 2, 7, 1, 6, 6, 1, 39, 0.075, 1, 1], "succs": [[3, 4], [0], [0], [], [], [1, 2]], "fname": "qcopy_acl", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [2, 1, 2, 1, 3, 30, 2, 4, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+desc], esi", "mov     [rbp+mode], edx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+ctx]", "mov     edx, 4; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     eax, [rbp+mode]", "mov     [rbp+ctx.mode], eax", "mov     edx, [rbp+desc]; desc", "mov     rcx, [rbp+name]", "lea     rax, [rbp+ctx]", "mov     rsi, rcx; name", "mov     rdi, rax; ctx", "call    set_permissions", "mov     [rbp+ret], eax", "lea     rax, [rbp+ctx]", "mov     rdi, rax; ctx", "call    free_permission_context", "mov     eax, [rbp+ret]", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_10765"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 2, 5, 1, 3, 2, 2, 33, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "qset_acl", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_10791"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 1, 3, 1, 1, 9, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+o], rdi", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "cmp     [rbp+o], 0", "jz      short loc_1078A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 0, 0, 2, 11, 0, 2, 2, 0, 0.0, ["mov     esi, 38h ; '8'; s", "mov     rdi, rax; p", "call    xmemdup", "mov     [rbp+p], rax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+p]", "leave", "retn"], ["mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]]], "func_feature": [3, 0, 5, 0, 4, 4, 0, 23, 0.04167, 1, 1], "succs": [[2], [0, 3], [], [2]], "fname": "clone_quoting_options", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_107D1"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "cmp     [rbp+o], 0", "jz      short loc_107CA"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["mov     eax, [rax]", "pop     rbp", "retn"], ["mov~eax,<TAG>", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 11, 0.04167, 1, 0], "succs": [[2], [0, 3], [], [2]], "fname": "get_quoting_style", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_107F4"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 6, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     [rbp+s], esi", "cmp     [rbp+o], 0", "jz      short loc_107ED"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0.0, ["mov     edx, [rbp+s]", "mov     [rax], edx", "nop", "pop     rbp", "retn"], ["mov~edx,[rbp+0]", "mov~<TAG>,edx", "nop", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 14, 0.04167, 1, 0], "succs": [[2], [0, 3], [], [2]], "fname": "set_quoting_style", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     eax, esi", "mov     [rbp+i], edx", "mov     [rbp+c], al", "movzx   eax, [rbp+c]", "mov     [rbp+uc], al", "cmp     [rbp+o], 0", "jz      short loc_10820"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~eax,esi", "mov~[rbp+0],edx", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [5, 0, 0, 3, 0, 34, 5, 0, 0, 0, 0.0, ["lea     rdx, [rax+8]", "movzx   eax, [rbp+uc]", "shr     al, 5", "movzx   eax, al", "shl     rax, 2", "add     rax, rdx", "mov     [rbp+p], rax", "movzx   eax, [rbp+uc]", "and     eax, 1Fh", "mov     [rbp+shift], eax", "mov     rax, [rbp+p]", "mov     edx, [rax]", "mov     eax, [rbp+shift]", "mov     ecx, eax", "shr     edx, cl", "mov     eax, edx", "and     eax, 1", "mov     [rbp+r], eax", "mov     rax, [rbp+p]", "mov     edx, [rax]", "mov     eax, [rbp+i]", "and     eax, 1", "xor     eax, [rbp+r]", "mov     esi, eax", "mov     eax, [rbp+shift]", "mov     ecx, eax", "shl     esi, cl", "mov     eax, esi", "xor     edx, eax", "mov     rax, [rbp+p]", "mov     [rax], edx", "mov     eax, [rbp+r]", "pop     rbp", "retn"], ["lea~rdx,[rax+0]", "movzx~eax,[rbp+0]", "shr~al,0", "movzx~eax,al", "shl~rax,0", "add~rax,rdx", "mov~[rbp+0],rax", "movzx~eax,[rbp+0]", "and~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~eax,[rbp+0]", "mov~ecx,eax", "shr~edx,cl", "mov~eax,edx", "and~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~eax,[rbp+0]", "and~eax,0", "xor~eax,[rbp+0]", "mov~esi,eax", "mov~eax,[rbp+0]", "mov~ecx,eax", "shl~esi,cl", "mov~eax,esi", "xor~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~eax,[rbp+0]", "pop~rbp", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_10827"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [0, 5, 2, 0, 4, 4, 2, 47, 0.04167, 1, 3], "succs": [[1, 3], [2], [], [2]], "fname": "set_char_quoting", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+o]", "mov     eax, [rax+4]", "mov     [rbp+r], eax", "mov     rax, [rbp+o]", "mov     edx, [rbp+i]", "mov     [rax+4], edx", "mov     eax, [rbp+r]", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~[rax+0],edx", "mov~eax,[rbp+0]", "pop~rbp", "retn"]], [1, 0, 2, 0, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+o], rdi", "mov     [rbp+i], esi", "cmp     [rbp+o], 0", "jnz     short loc_108A3"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0.0, ["lea     rax, default_quoting_options", "mov     [rbp+o], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]]], "func_feature": [0, 0, 1, 0, 3, 3, 0, 17, 0.0, 1, 0], "succs": [[], [0, 2], [0]], "fname": "set_quoting_flags", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 3, 0, 0, 4, 0, 1, 0, 0, 0.30000000000000004, ["mov     rax, [rbp+o]", "mov     dword ptr [rax], 0Ah", "cmp     [rbp+left_quote], 0", "jz      short loc_108FA"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 5, 1, 0, 8, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+o], rdi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "cmp     [rbp+o], 0", "jnz     short loc_108E2"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 4, 0, 0, 2, 0, 0, 1, 3, 0.0, ["lea     rax, default_quoting_options", "mov     [rbp+o], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [1, 0, 2, 0, 0, 2, 0, 1, 2, 1, 0.15000000000000002, ["cmp     [rbp+right_quote], 0", "jnz     short loc_108FF"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 9, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+o]", "mov     rdx, [rbp+left_quote]", "mov     [rax+28h], rdx", "mov     rax, [rbp+o]", "mov     rdx, [rbp+right_quote]", "mov     [rax+30h], rdx", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    _abort"], ["call~FOO"]]], "func_feature": [1, 0, 4, 0, 6, 7, 1, 26, 0.075, 1, 1], "succs": [[3, 5], [0, 2], [0], [4, 5], [], []], "fname": "set_custom_quoting", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 21, 1, 1, 1, 0, 0.16666666666666666, ["mov     eax, [rbp+style]", "mov     [rbp+o.style], eax", "mov     rcx, [rbp+var_48]", "mov     rax, qword ptr [rbp+o.style]", "mov     rdx, qword ptr [rbp+o.quote_these_too]", "mov     [rcx], rax", "mov     [rcx+8], rdx", "mov     rax, qword ptr [rbp+o.quote_these_too+8]", "mov     rdx, qword ptr [rbp+o.quote_these_too+10h]", "mov     [rcx+10h], rax", "mov     [rcx+18h], rdx", "mov     rax, qword ptr [rbp+o.quote_these_too+18h]", "mov     rdx, [rbp+o.left_quote]", "mov     [rcx+20h], rax", "mov     [rcx+28h], rdx", "mov     rax, [rbp+o.right_quote]", "mov     [rcx+30h], rax", "mov     rax, [rbp+var_48]", "mov     rdx, [rbp+var_8]", "xor     rdx, fs:28h", "jz      short locret_109D4"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rcx,[rbp+0]", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~<TAG>,rax", "mov~[rcx+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[rcx+0],rax", "mov~[rcx+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[rbp+0]", "mov~[rcx+0],rax", "mov~[rcx+0],rdx", "mov~rax,[rbp+0]", "mov~[rcx+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "xor~rdx,<TAG>", "jz~FOO"]], [8, 1, 4, 1, 0, 17, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+var_48], rdi", "mov     [rbp+style], esi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     qword ptr [rbp+o.style], 0", "mov     qword ptr [rbp+o.quote_these_too], 0", "mov     qword ptr [rbp+o.quote_these_too+8], 0", "mov     qword ptr [rbp+o.quote_these_too+10h], 0", "mov     qword ptr [rbp+o.quote_these_too+18h], 0", "mov     [rbp+o.left_quote], 0", "mov     [rbp+o.right_quote], 0", "cmp     [rbp+style], 0Ah", "jnz     short loc_1097B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[word ptr [rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    _abort"], ["call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 2, 4, 2, 5, 4, 3, 42, 0.03333, 1, 1], "succs": [[], [0, 4], [1, 3], [], []], "fname": "quoting_options_from_style", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.00641025641025641, ["mov     rax, [rbp+translation]", "jmp     locret_10A8F"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 1, 13, 1, 1, 12, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+msgid], rdi", "mov     [rbp+s], esi", "mov     rax, [rbp+msgid]", "mov     rdi, rax; msgid", "call    _gettext", "mov     [rbp+translation], rax", "mov     rax, [rbp+translation]", "cmp     rax, [rbp+msgid]", "jz      short loc_10A08"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 7, 0, 1, 6, 1, 2, 2, 3, 0.07692307692307693, ["mov     rax, [rbp+locale_code]", "lea     rsi, aGb18030; \"GB18030\"", "mov     rdi, rax; s1", "call    c_strcasecmp", "test    eax, eax", "jnz     short loc_10A79"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 11, 0, 2, 8, 1, 3, 1, 3, 0.0641025641025641, ["call    locale_charset", "mov     [rbp+locale_code], rax", "mov     rax, [rbp+locale_code]", "lea     rsi, aUtf8; \"UTF-8\"", "mov     rdi, rax; s1", "call    c_strcasecmp", "test    eax, eax", "jnz     short loc_10A45"], ["call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 3, 0, 0, 4, 0, 1, 3, 2, 0.041666666666666664, ["mov     rax, [rbp+msgid]", "movzx   eax, byte ptr [rax]", "cmp     al, 60h ; '`'", "jnz     short loc_10A70"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.004807692307692308, ["lea     rax, asc_1B1E7; \"'\""], ["lea~rax,<TAG>"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.041666666666666664, ["cmp     [rbp+s], 9", "jnz     short loc_10A88"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_1B1E5", "jmp     short locret_10A8F"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_1B1DE", "jmp     short locret_10A8F"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.00641025641025641, ["lea     rax, unk_1B1CE", "jmp     short locret_10A8F"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 3, 1, 0.00641025641025641, ["lea     rax, unk_1B1D2", "jmp     short locret_10A8F"], ["lea~rax,<TAG>", "jmp~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.004807692307692308, ["lea     rax, unk_1B1E2", "jmp     short locret_10A8F"], ["lea~rax,<TAG>", "jmp~FOO"]], [1, 0, 3, 0, 0, 4, 0, 1, 2, 2, 0.03205128205128205, ["mov     rax, [rbp+msgid]", "movzx   eax, byte ptr [rax]", "cmp     al, 60h ; '`'", "jnz     short loc_10A3C"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]]], "func_feature": [4, 2, 16, 0, 14, 19, 2, 51, 0.02106, 8, 1], "succs": [[9], [0, 3], [4, 6], [2, 13], [8, 12], [9], [5, 7], [9], [9], [], [9], [9], [9], [10, 11]], "fname": "gettext_quote", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0.0, ["mov     [rbp+quoting_style], 4"], ["mov~[rbp+0],0"]], [1, 0, 5, 0, 0, 2, 0, 1, 13, 3, 0.003355363497712252, ["cmp     [rbp+backslash_escapes], 0", "jz      short loc_11A0B"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.0671631926792069, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119DC"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 6, 0.09025673614641584, ["cmp     [rbp+backslash_escapes], 0; jumptable 0000000000010DF5 case 0", "jz      loc_10F52"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 17, 10, 0.03453228266395526, ["cmp     [rbp+pending_shell_escape_end], 0", "jz      short loc_1165E"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 11, 0.1770017793594306, ["mov     rax, [rbp+i]", "add     rax, 1", "cmp     [rbp+ilim], rax", "jbe     loc_116A2"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 15, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1180D"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 20, 5, 0.0038002033553634976, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B48C", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B48C", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [2, 0, 281, 4, 0, 12, 0, 1, 19, 6, 0.010015251652262329, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+j]", "add     rdx, rax", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 5Bh ; '['; switch 34 cases", "cmp     eax, 21h ; '!'", "ja      short loc_11411; jumptable 000000000001140F default case"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 0, 281, 1, 0, 5, 0, 0, 16, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "movzx   eax, [rbp+c]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "movzx~eax,[rbp+0]", "mov~<TAG>,al"]], [0, 0, 281, 0, 0, 3, 0, 0, 15, 12, 0.5514616166751398, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1185A"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 2, 0, 0, 20, 8, 0.006875953228266395, ["nop; jumptable 000000000001140F default case", "add     [rbp+j], 1"], ["nop", "add~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 0, 14, 14, 0.032498729028978136, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11226"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 15, 0.031354855109303505, ["cmp     [rbp+buffersize], 0", "jz      short loc_11208"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 15, 0.0031647178444331467, ["cmp     [rbp+orig_buffersize], 0", "jnz     short loc_11208"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 3, 0, 0, 15, 15, 0.0, ["mov     rax, [rbp+buffersize]", "mov     [rbp+orig_buffersize], rax", "mov     [rbp+buffersize], 0"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0"]], [0, 0, 281, 1, 0, 8, 0, 1, 17, 6, 0.03468479918657855, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B414", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B414", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [2, 0, 281, 2, 0, 9, 0, 1, 16, 7, 0.04378495170310117, ["mov     rax, [rbp+i]", "lea     rdx, [rax+2]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movsx   eax, al", "sub     eax, 21h ; '!'; switch 30 cases", "cmp     eax, 1Dh", "ja      loc_110CB; jumptable 0000000000011014 default case"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movsx~eax,al", "sub~eax,0", "cmp~eax,0", "ja~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 20, 16, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 17, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_117A9"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [2, 0, 281, 0, 0, 3, 0, 1, 13, 14, 0.06406964921199797, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_10E90"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 12, 0.034023894255210976, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1126C"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 13, 0.03326131164209456, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11249"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 2, 10, 0, 2, 4, 13, 0.0, ["mov     eax, [rbp+quoting_style]", "mov     esi, eax; s", "lea     rdi, asc_1B1E9; \"`\"", "call    gettext_quote", "mov     [rbp+left_quote], rax", "mov     eax, [rbp+quoting_style]", "mov     esi, eax; s", "lea     rdi, asc_1B1E7; \"'\"", "call    gettext_quote", "mov     [rbp+right_quote], rax"], ["mov~eax,[rbp+0]", "mov~esi,eax", "lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "mov~esi,eax", "lea~rdi,<TAG>", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 281, 0, 0, 2, 0, 1, 3, 13, 0.024885612608032535, ["cmp     [rbp+quoting_style], 0Ah; jumptable 0000000000010B79 cases 8-10", "jz      short loc_10C1F"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 18, 5, 0.03173614641586172, ["cmp     [rbp+elide_outer_quotes], 0; jumptable 0000000000011014 cases 33,39-41,45,47,60-62", "jnz     loc_119DF"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 5, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 4, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10BB2"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 14, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11830"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 7, 0.026715810879511945, ["mov     rax, [rbp+j]", "cmp     rax, [rbp+bytes]", "jb      short loc_113C4"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 17, 8, 0.015899847483477374, ["mov     [rbp+j], 1", "jmp     short loc_11417"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 14, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_10E90"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 4, 2, 1, 4, 12, 0.025648195221148955, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_10C70"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 21, 4, 0.0007117437722419928, ["nop; jumptable 000000000001140F cases 91,92,94,96,124", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 1, 5, 1, 2, 16, 12, 0.033032536858159635, ["mov     eax, [rbp+w]", "mov     edi, eax; wc", "call    _iswprint", "test    eax, eax", "jnz     short loc_11433"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 10, 0.034265378749364514, ["cmp     [rbp+elide_outer_quotes], 0", "jz      short loc_11421"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 9, 0.018912048805287237, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_11421"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 15, 17, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10E41"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 17, 12, 0.0, ["mov     [rbp+printable], 0"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 1, 5, 13, 0.012506354855109304, ["mov     rax, [rbp+left_quote]", "mov     [rbp+quote_string], rax", "jmp     short loc_10C65"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 2, 0, 1, 12, 10, 0.010294865277071682, ["nop", "jmp     short loc_116B8"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 6, 0.013540925266903914, ["cmp     [rbp+quoting_style], 2; jumptable 0000000000010DF5 cases 33,34,36,38,40-42,59-62,91,94,96,124", "jnz     loc_116B4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.003906964921199796, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_116B4"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 19, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 17, 19, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11763"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 7, 14, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10C5B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 4, 1, 1, 6, 12, 0.023525673614641585, ["mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_10C37"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 13, 0.5487925775292323, ["cmp     [rbp+pending_shell_escape_end], 0", "jz      short loc_11839"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 15, 13, 0.015696492119979664, ["movzx   eax, [rbp+escaping]", "xor     eax, 1", "test    al, al", "jz      short loc_11839"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 18, 13, 0.014107778342653787, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 0, 0, 4, 0, 1, 12, 9, 0.18070665988815454, ["movzx   eax, [rbp+printable]", "mov     [rbp+c_and_shell_quote_compat], al", "cmp     [rbp+m], 1", "ja      short loc_1147C"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "ja~FOO"]], [2, 0, 281, 2, 1, 13, 2, 2, 11, 10, 0.10008896797153025, ["mov     [rbp+m], 1", "call    ___ctype_b_loc", "mov     rax, [rax]", "movzx   edx, [rbp+c]", "add     rdx, rdx", "add     rax, rdx", "movzx   eax, word ptr [rax]", "movzx   eax, ax", "and     eax, 4000h", "test    eax, eax", "setnz   al", "mov     [rbp+printable], al", "jmp     loc_11455"], ["mov~[rbp+0],0", "call~FOO", "mov~rax,<TAG>", "movzx~edx,[rbp+0]", "add~rdx,rdx", "add~rax,rdx", "movzx~eax,<TAG>", "movzx~eax,ax", "and~eax,0", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 10, 0.00327910523640061, ["mov     [rbp+printable], 0", "jmp     loc_11455"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 10, 0.03216827656329436, ["jmp     short loc_11455"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.00979918657854601, ["nop", "jmp     short loc_11455"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 17, 10, 0.020754956786985256, ["nop"], ["nop"]], [1, 0, 281, 2, 0, 10, 0, 0, 19, 17, 0.02830452465683782, ["mov     rax, [rbp+i]", "lea     rdx, [rax+2]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "add     [rbp+i], 2", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1105B"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 1, 1, 7, 1, 2, 17, 11, 0.03379511947127605, ["mov     rax, [rbp+bytes]", "add     [rbp+m], rax", "lea     rax, [rbp+mbstate]", "mov     rdi, rax; ps", "call    _mbsinit", "test    eax, eax", "jz      loc_112FD"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 16, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10E64"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 3, 1, 20, 0, 2, 12, 11, 0.07458057956278596, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+argsize]", "sub     rax, rdx", "mov     rdi, rax", "mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+arg]", "lea     rsi, [rdx+rax]; s", "lea     rdx, [rbp+mbstate]", "lea     rax, [rbp+w]", "mov     rcx, rdx; ps", "mov     rdx, rdi; n", "mov     rdi, rax; pwc", "call    rpl_mbrtowc", "mov     [rbp+bytes], rax", "cmp     [rbp+bytes], 0", "jz      loc_11451"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,rdx", "mov~rdi,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "lea~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,rdi", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 1, 0, 5, 0, 0, 16, 11, 0.022801220132180985, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rax, rdx", "cmp     [rbp+argsize], rax", "jbe     loc_11454"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 11, 0.0035205897305541434, ["jmp     loc_11454"], ["jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 6, 0.009938993390950685, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_118C5"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 8, 6, 0.1599517031011693, ["cmp     [rbp+len], 0", "jnz     short loc_118C5"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 3Fh ; '?'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 1, 0, 6, 0, 0, 8, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~<TAG>,al"]], [2, 0, 281, 1, 0, 2, 0, 0, 21, 10, 0.014107778342653787, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 11, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11655"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 11, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [2, 0, 281, 2, 0, 2, 0, 0, 8, 13, 0.007079308591764108, ["add     [rbp+len], 1", "add     [rbp+quote_string], 1"], ["add~[rbp+0],0", "add~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 16, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.04452846975088968, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_116B8"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 5, 2, 1, 16, 11, 0.5522241992882562, ["add     [rbp+len], 1", "movzx   eax, [rbp+c_and_shell_quote_compat]", "xor     eax, 1", "test    al, al", "jz      short loc_1186E"], ["add~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 1, 0, 0, 17, 11, 0.0, ["mov     [rbp+all_c_and_shell_quote_compat], 0"], ["mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 16, 0.029067107269954245, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1107E"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 15, 14, 0.009189120488052873, ["nop", "jmp     short store_c"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 8, 0.009278088459583122, ["cmp     [rbp+quote_string_len], 0", "jnz     loc_117DA"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 18, 10, 0.015696492119979664, ["movzx   eax, [rbp+escaping]", "xor     eax, 1", "test    al, al", "jz      short loc_1165E"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 15, 0.06621759023894255, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_117D0"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 0, 0, 3, 0, 1, 15, 16, 0.06278596847991866, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_117B2"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 16, 16, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_117B2"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10E87"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 3, 0, 1, 17, 11, 0.0347864768683274, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 0", "jmp     loc_116B7"], ["add~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 9, 0.0005147432638535841, ["movzx   eax, [rbp+printable]", "xor     eax, 1", "test    al, al", "jz      loc_116B8"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 9, 0.037201321809862735, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1167F"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 14, 10, 0.5733985765124555, ["add     [rbp+i], 1"], ["add~[rbp+0],0"]], [0, 0, 281, 0, 0, 1, 0, 1, 13, 11, 0.016853075749872902, ["jmp     loc_1186E"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 16, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 1, 0, 5, 0, 0, 19, 9, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "movzx   eax, [rbp+c]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "movzx~eax,[rbp+0]", "mov~<TAG>,al"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 10, 0.012874936451448906, ["mov     [rbp+c_and_shell_quote_compat], 1; jumptable 0000000000010DF5 cases 37,43-58,65-90,93,95,97-122", "jmp     loc_116B8"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 1, 0, 8, 0, 1, 10, 7, 0.36952211489578035, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B218", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B218", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 11, 0.17469496695475342, ["cmp     [rbp+unibyte_locale], 0; jumptable 0000000000010DF5 default case", "jz      short loc_112BB"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 8, 0, 1, 9, 8, 0.5461616675139807, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "movzx   eax, [rbp+c]", "cmp     eax, 7Eh ; '~'; switch 127 cases", "ja      loc_11283; jumptable 0000000000010DF5 default case"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 14, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 13, 1, 0.0070665988815455, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_11A71"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 18, 14, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [3, 0, 281, 2, 0, 6, 1, 1, 21, 12, 0.05510930350788002, ["add     [rbp+len], 1", "movzx   eax, [rbp+c]", "and     eax, 7", "add     eax, 30h ; '0'", "mov     [rbp+c], al", "jmp     short loc_115F1"], ["add~[rbp+0],0", "movzx~eax,[rbp+0]", "and~eax,0", "add~eax,0", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 13, 0.0543467208947636, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_115B0"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [2, 0, 281, 1, 0, 9, 1, 0, 21, 13, 0.0, ["movzx   eax, [rbp+c]", "shr     al, 3", "and     eax, 7", "lea     ecx, [rax+30h]", "mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     edx, ecx", "mov     [rax], dl"], ["movzx~eax,[rbp+0]", "shr~al,0", "and~eax,0", "lea~ecx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,ecx", "mov~<TAG>,dl"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 15, 0.029829689883070665, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_110A1"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 1, 8, 0, 2, 5, 11, 0.02793594306049822, ["mov     [rbp+backslash_escapes], 1", "mov     rax, [rbp+right_quote]", "mov     [rbp+quote_string], rax", "mov     rax, [rbp+quote_string]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+quote_string_len], rax", "jmp     short loc_10D00"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 3, 15, 0.0, ["mov     [rbp+backslash_escapes], 1; jumptable 0000000000010B79 case 3"], ["mov~[rbp+0],0"]], [0, 0, 281, 1, 0, 8, 0, 1, 2, 12, 0.1197508896797153, ["mov     eax, [rbp+quoting_style]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B1EC", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B1EC", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [0, 0, 281, 1, 0, 7, 1, 1, 6, 8, 0.35229410269445854, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "setnz   al", "jmp     short loc_118A3"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "setnz~al", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 5, 9, 0.7073843416370107, ["cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_11895"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 3, 14, 0.003546009150991357, ["mov     [rbp+elide_outer_quotes], 1; jumptable 0000000000010B79 case 1"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 0, 14, 13, 0.06750127097102186, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10EAE"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 4, 0, 1, 15, 14, 0.11860701576004067, ["mov     rax, [rbp+orig_buffersize]", "mov     [rbp+buffersize], rax", "mov     [rbp+len], 0", "jmp     process_input"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 5, 0.11839095068632435, ["cmp     [rbp+orig_buffersize], 0", "jz      short loc_11965"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 3, 0, 8, 0, 1, 19, 8, 0.03796390442297915, ["add     [rbp+len], 1", "add     [rbp+i], 1", "mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "mov     [rbp+c], al", "jmp     loc_1148B"], ["add~[rbp+0],0", "add~[rbp+0],0", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "mov~[rbp+0],al", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 22h ; '\"'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 6, 8, 0.35229410269445854, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+argsize]", "setnz   al"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "setnz~al"]], [1, 0, 281, 0, 0, 4, 2, 1, 3, 13, 0.01021860701576004, ["movzx   eax, [rbp+elide_outer_quotes]; jumptable 0000000000010B79 case 4", "xor     eax, 1", "test    al, al", "jz      short loc_10CA8; jumptable 0000000000010B79 case 2"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 17, 14, 0.1396733604473818, ["nop", "jmp     store_c"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 4, 13, 0.0, ["mov     [rbp+backslash_escapes], 1"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 2, 1, 1, 7, 7, 0.7085282155566853, ["test    al, al", "jnz     loc_10D0D"], ["test~al,al", "jnz~FOO"]], [0, 0, 281, 0, 1, 6, 0, 2, 13, 8, 0.001766649720386375, ["mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+argsize], rax", "mov     rax, [rbp+argsize]", "jmp     short loc_10D7A"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 0, 12, 9, 0.0031647178444331467, ["cmp     [rbp+quote_string_len], 1", "jbe     short loc_10D73"], ["cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 5, 0.05713650228774784, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119EB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 15, 6, 0.05999618708693442, ["movzx   eax, [rbp+printable]", "xor     eax, 1", "test    al, al", "jz      loc_115C4"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.07590238942552109, ["nop", "jmp     short loc_116B8"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 16, 11, 0.07169547534316217, ["mov     [rbp+c], 30h ; '0'", "jmp     loc_116A8"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 12, 11, 0.020297407219115403, ["mov     eax, [rbp+flags]", "and     eax, 1", "test    eax, eax", "jz      loc_116A8"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 15, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.020411794611082865, ["nop", "jmp     short loc_116B8"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 7, 0.06609049313675648, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_116AB"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 17, 12, 0.007079308591764108, ["add     [rbp+len], 1", "mov     [rbp+is_right_quote], 0"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [0, 0, 281, 0, 0, 3, 0, 0, 16, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_115E8"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 2, 0, 1, 14, 10, 0.013408744280630401, ["nop", "jmp     short loc_116B8"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 0, 2, 1, 1, 13, 9, 0.013739196746314183, ["test    al, al", "jnz     loc_116AE"], ["test~al,al", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 14, 0.030592272496187085, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_110C4"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 12, 10, 0.003393492628368073, ["nop", "jmp     short loc_116B8"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.0037747839349262834, ["cmp     [rbp+i], 0; jumptable 0000000000010DF5 cases 35,126", "jnz     loc_116B1"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 18, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11786"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 5, 0.15413701067615657, ["cmp     [rbp+quoting_style], 2", "jnz     loc_11965"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 5, 0.006856888662938485, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119F1"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.0002846975088967971, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.018485002541942047, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_117D7"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 12, 10, 0.04150991357397051, ["nop"], ["nop"]], [3, 0, 281, 0, 0, 4, 0, 1, 11, 6, 0.04040925266903915, ["mov     [rbp+encountered_single_quote], 1; jumptable 0000000000010DF5 case 39", "mov     [rbp+c_and_shell_quote_compat], 1", "cmp     [rbp+quoting_style], 2", "jnz     loc_116B7"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 0, 0, 3, 0, 1, 17, 16, 0.04938993390950686, ["mov     [rbp+escaping], 1", "cmp     [rbp+quoting_style], 2", "jnz     short loc_11533"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 281, 1, 0, 3, 0, 1, 15, 12, 0.06826385358413828, ["add     [rbp+len], 1", "cmp     [rbp+quoting_style], 2", "jz      loc_10F49"], ["add~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 0, 0, 5, 2, 1, 3, 12, 0.02648703609557702, ["mov     [rbp+quoting_style], 2; jumptable 0000000000010B79 case 2", "movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_10CE0"], ["mov~[rbp+0],0", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 13, 8, 0.3245721064226402, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jnz     short loc_11713"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 12, 9, 0.32878749364514487, ["movzx   eax, [rbp+backslash_escapes]", "xor     eax, 1", "test    al, al", "jnz     short loc_116CC"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 9, 0.0031456532791052363, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_116D7"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 23, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 3Fh ; '?'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 4, 2, 1, 18, 16, 0.02188612099644128, ["movzx   eax, [rbp+pending_shell_escape_end]", "xor     eax, 1", "test    al, al", "jz      short loc_11533"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 14, 0, 0.0, ["mov     rbx, [rbp+var_8]", "leave", "retn"], ["mov~rbx,[rbp+0]", "leave", "retn"]], [0, 0, 281, 0, 0, 3, 0, 0, 4, 13, 0.006316725978647687, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10CDB"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 2, 0, 1, 23, 13, 0.031354855109303505, ["add     [rbp+len], 1", "jmp     short loc_110CC"], ["add~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 17, 13, 0.009633960345704117, ["nop; jumptable 0000000000011014 default case"], ["nop"]], [0, 0, 281, 0, 0, 1, 0, 1, 18, 12, 0.0449288256227758, ["jmp     short loc_110D4"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 10, 0.006596339603457041, ["nop", "jmp     loc_116B8"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.009689883070665989, ["cmp     [rbp+elide_outer_quotes], 0", "jz      loc_110CE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 16, 12, 0.02188612099644128, ["mov     rax, [rbp+i]", "add     rax, 1", "cmp     [rbp+argsize], rax", "jbe     short loc_10F49"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 19, 0.018797661413319774, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_114E4"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 14, 11, 0.058070665988815454, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 4, 2, 1, 13, 10, 0.05540162684290798, ["mov     eax, [rbp+flags]", "and     eax, 4", "test    eax, eax", "jz      loc_110D4"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 14, 9, 0.04956786985256736, ["mov     rax, [rbp+i]", "add     rax, 2", "cmp     [rbp+argsize], rax", "jbe     loc_110D4"], ["mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 15, 8, 0.04668276563294357, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 3Fh ; '?'", "jnz     loc_110D4"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [2, 0, 281, 0, 0, 5, 0, 1, 4, 11, 0.017602948652770716, ["mov     [rbp+backslash_escapes], 1", "lea     rax, unk_1B1E5", "mov     [rbp+quote_string], rax", "mov     [rbp+quote_string_len], 1", "jmp     loc_10D00"], ["mov~[rbp+0],0", "lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 3, 12, 0.016077783426537873, ["movzx   eax, [rbp+elide_outer_quotes]; jumptable 0000000000010B79 case 5", "xor     eax, 1", "test    al, al", "jz      short loc_10BB7"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 5, 12, 0.007079308591764108, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [0, 0, 7, 0, 0, 2, 0, 1, 15, 4, 0.006183274021352313, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 5, 0.07177808845958311, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119EE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 5, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 4, 1, 0, 4, 0, 0, 12, 3, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 0"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 5, 0, 0, 3, 0, 0, 11, 3, 0.009456024402643618, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_119D0"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 1, 0, 0, 5, 12, 0.007079308591764108, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 61h ; 'a'; jumptable 0000000000010DF5 case 7", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 8, 0.004971614980511778, ["cmp     [rbp+quote_these_too], 0", "jz      short loc_11713"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 19, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 4, 10, 0.13004575495678697, ["mov     [rbp+i], 0", "jmp     loc_11873"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 62h ; 'b'; jumptable 0000000000010DF5 case 8", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [5, 0, 281, 0, 1, 9, 0, 2, 11, 12, 0.07180986273512964, ["lea     rax, [rbp+mbstate]", "mov     edx, 8; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     [rbp+m], 0", "mov     [rbp+printable], 1", "cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_112FD"], ["lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 17, 12, 0.018797661413319774, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "jle     short loc_10F49"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jle~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 66h ; 'f'; jumptable 0000000000010DF5 case 12", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 22, 17, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 17, 0.020322826639552618, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1152A"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 10, 5, 0.12071682765632943, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      loc_11965"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 1, 0, 8, 0, 0, 20, 14, 0.0, ["movzx   eax, [rbp+c]", "shr     al, 6", "lea     ecx, [rax+30h]", "mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     edx, ecx", "mov     [rax], dl"], ["movzx~eax,[rbp+0]", "shr~al,0", "lea~ecx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,ecx", "mov~<TAG>,dl"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 14, 0.053584138281647174, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1157F"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 6Eh ; 'n'; jumptable 0000000000010DF5 case 10", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 4, 0, 1, 4, 11, 0.02801220132180986, ["lea     rax, asc_1B1E7; \"'\"", "mov     [rbp+quote_string], rax", "mov     [rbp+quote_string_len], 1", "jmp     short loc_10D00"], ["lea~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 18, 0.019560244026436198, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11507"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 72h ; 'r'; jumptable 0000000000010DF5 case 13", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 3, 11, 0.020939247585155057, ["mov     [rbp+elide_outer_quotes], 0; jumptable 0000000000010B79 case 0", "jmp     short loc_10D00"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    _abort; jumptable 0000000000010B79 default case"], ["call~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 1, 13, 0.12255973563802745, ["cmp     [rbp+quoting_style], 0Ah; switch 11 cases", "ja      loc_10CFB; jumptable 0000000000010B79 default case"], ["cmp~[rbp+0],0", "ja~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 7, 0.004084053550245718, ["mov     [rbp+esc], 74h ; 't'; jumptable 0000000000010DF5 case 9", "jmp     short c_and_shell_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 14, 10, 0.06814946619217081, ["jmp     loc_116B8"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 1, 13, 11, 0.0061387900355871884, ["jmp     loc_110D5"], ["jmp~FOO"]], [1, 0, 281, 1, 0, 7, 0, 1, 18, 12, 0.015696492119979664, ["mov     rax, [rbp+i]", "lea     rdx, [rax+1]", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 39h ; '9'", "jg      short loc_10F49"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jg~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 8, 0.007412938485002542, ["mov     [rbp+esc], 76h ; 'v'; jumptable 0000000000010DF5 case 11", "jmp     short c_escape"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 18, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [2, 0, 281, 0, 0, 3, 0, 1, 3, 11, 0.020939247585155057, ["mov     [rbp+backslash_escapes], 1; jumptable 0000000000010B79 case 7", "mov     [rbp+elide_outer_quotes], 0", "jmp     loc_10D00"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 14, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10F21"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 18, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [3, 0, 281, 1, 0, 15, 3, 1, 15, 7, 0.00023301135400779526, ["movzx   eax, [rbp+c]", "shr     al, 5", "movzx   eax, al", "lea     rdx, ds:0[rax*4]", "mov     rax, [rbp+quote_these_too]", "add     rax, rdx", "mov     edx, [rax]", "movzx   eax, [rbp+c]", "and     eax, 1Fh", "mov     ecx, eax", "shr     edx, cl", "mov     eax, edx", "and     eax, 1", "test    eax, eax", "jnz     short loc_11722"], ["movzx~eax,[rbp+0]", "shr~al,0", "movzx~eax,al", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~edx,<TAG>", "movzx~eax,[rbp+0]", "and~eax,0", "mov~ecx,eax", "shr~edx,cl", "mov~eax,edx", "and~eax,0", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 0, 0, 4, 0, 1, 11, 6, 0.03424504321301475, ["movzx   eax, [rbp+c]; jumptable 0000000000010DF5 case 92", "mov     [rbp+esc], al", "cmp     [rbp+quoting_style], 2", "jnz     short loc_11123"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 10, 0, 0, 3, 0, 0, 14, 6, 0.006494661921708185, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_1199D"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 10, 0, 0, 4, 1, 1, 13, 4, 0.010027961362480934, ["mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_11979"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 12, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 27h ; '''"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 3, 0, 0, 19, 12, 0.012582613116420945, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11632"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 0, 0, 4, 2, 1, 14, 7, 0.33018132519911875, ["movzx   eax, [rbp+is_right_quote]", "xor     eax, 1", "test    al, al", "jnz     loc_117DD"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jnz~FOO"]], [4, 0, 281, 0, 0, 5, 0, 1, 8, 9, 0.5457803762074225, ["mov     [rbp+is_right_quote], 0", "mov     [rbp+escaping], 0", "mov     [rbp+c_and_shell_quote_compat], 0", "cmp     [rbp+backslash_escapes], 0", "jz      loc_10DB3"], ["mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 14, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 281, 0, 0, 1, 0, 0, 15, 6, 0.024955516014234874, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 5, 0.03444839857651246, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119E5"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 10, 4, 0.0313421453990849, ["cmp     [rbp+quote_string], 0", "jz      short loc_119B2"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 11, 0, 0, 4, 2, 1, 11, 4, 0.01601423487544484, ["movzx   eax, [rbp+elide_outer_quotes]", "xor     eax, 1", "test    al, al", "jz      short loc_119B2"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 11, 0.05591001525165226, ["cmp     [rbp+bytes], 0FFFFFFFFFFFFFFFEh", "jnz     short loc_113AB"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 8, 0.012963904422979155, ["cmp     [rbp+backslash_escapes], 0", "jz      short loc_1113A"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 9, 9, 0.031113370615149974, ["cmp     [rbp+quoting_style], 2", "jz      loc_10DB3"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 1, 0, 4, 0, 0, 13, 8, 0.13445602440264362, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rax, rdx", "mov     [rbp+ilim], rax"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 8, 0.009367056431113371, ["cmp     [rbp+elide_outer_quotes], 0", "jz      short loc_1113A"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 281, 1, 0, 2, 0, 0, 22, 16, 0.021085409252669038, ["add     [rbp+len], 1", "mov     [rbp+pending_shell_escape_end], 1"], ["add~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 4, 0, 0, 20, 13, 0.013345195729537365, ["add     [rbp+len], 1", "mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_10F44"], ["add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 12, 2, 0.0029740721911540417, ["mov     rax, [rbp+len]", "jmp     loc_11A5D"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 10, 9, 0.02806304016268429, ["cmp     [rbp+quote_string_len], 0", "jz      short loc_10DB3"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 1, 3, 2, 1, 15, 0, 2, 13, 2, 9.532282663955262e-05, ["mov     edi, [rbp+flags]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+orig_buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    [rbp+right_quote]; right_quote", "push    [rbp+left_quote]; left_quote", "push    [rbp+quote_these_too]; quote_these_too", "mov     r9d, edi; flags", "mov     r8d, 5; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "jmp     loc_11A5D"], ["mov~edi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~[rbp+0]", "mov~r9d,edi", "mov~r8d,0", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 3, 0.1212061514997458, ["cmp     [rbp+all_c_and_shell_quote_compat], 0", "jz      short loc_1193C"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 13, 7, 0.001741230299949161, ["nop"], ["nop"]], [0, 0, 281, 0, 0, 3, 0, 0, 18, 15, 0.05282155566853076, ["mov     rax, [rbp+len]", "cmp     rax, [rbp+buffersize]", "jnb     short loc_11551"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 21, 13, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 30h ; '0'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 6, 0.025050838840874428, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_1114E"], ["cmp~[rbp+0],0", "jnz~FOO"]], [11, 0, 281, 1, 1, 36, 3, 1, 0, 14, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0B8h", "mov     [rbp+buffer], rdi", "mov     [rbp+buffersize], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     [rbp+quoting_style], r8d", "mov     [rbp+flags], r9d", "mov     rax, [rbp+arg_0]", "mov     [rbp+quote_these_too], rax", "mov     rax, [rbp+arg_8]", "mov     [rbp+left_quote], rax", "mov     rax, [rbp+arg_10]", "mov     [rbp+right_quote], rax", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+len], 0", "mov     [rbp+orig_buffersize], 0", "mov     [rbp+quote_string], 0", "mov     [rbp+quote_string_len], 0", "mov     [rbp+backslash_escapes], 0", "call    ___ctype_get_mb_cur_max", "cmp     rax, 1", "setz    al", "mov     [rbp+unibyte_locale], al", "mov     eax, [rbp+flags]", "and     eax, 2", "test    eax, eax", "setnz   al", "mov     [rbp+elide_outer_quotes], al", "mov     [rbp+pending_shell_escape_end], 0", "mov     [rbp+encountered_single_quote], 0", "mov     [rbp+all_c_and_shell_quote_compat], 1"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8d", "mov~[rbp+0],r9d", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "call~FOO", "cmp~rax,0", "setz~al", "mov~[rbp+0],al", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0"]], [1, 0, 281, 1, 0, 1, 0, 0, 21, 12, 0.014107778342653787, ["add     [rbp+len], 1"], ["add~[rbp+0],0"]], [3, 1, 3, 2, 1, 17, 1, 1, 13, 2, 0.007416115912557193, ["mov     eax, [rbp+flags]", "and     eax, 0FFFFFFFDh", "mov     r8d, eax", "mov     edi, [rbp+quoting_style]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    [rbp+right_quote]; right_quote", "push    [rbp+left_quote]; left_quote", "push    0; quote_these_too", "mov     r9d, r8d; flags", "mov     r8d, edi; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h"], ["mov~eax,[rbp+0]", "and~eax,0", "mov~r8d,eax", "mov~edi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~0", "mov~r9d,r8d", "mov~r8d,edi", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>"]], [1, 0, 6, 0, 0, 2, 0, 1, 12, 3, 0.017329689883070664, ["cmp     [rbp+quoting_style], 2", "jnz     short loc_11A0B"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 5, 0.0038891713268937467, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119E2"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 1, 4, 0, 1, 12, 12, 0.0, ["mov     rax, [rbp+arg]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+argsize], rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 281, 0, 0, 5, 0, 1, 11, 9, 0.024999999999999998, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+quote_string_len]", "lea     rbx, [rdx+rax]", "cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_10D73"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rbx,<TAG>", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 281, 0, 0, 3, 0, 1, 13, 6, 0.04288256227758007, ["movzx   eax, [rbp+esc]", "mov     [rbp+c], al", "jmp     store_escape"], ["movzx~eax,[rbp+0]", "mov~[rbp+0],al", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 13, 8, 0.021822572445348246, ["nop"], ["nop"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 11, 0.06198525673614641, ["cmp     [rbp+bytes], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_11360"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 4, 0.12095195729537365, ["cmp     [rbp+encountered_single_quote], 0", "jz      short loc_11965"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [1, 0, 281, 1, 0, 1, 0, 0, 18, 12, 1.2709710218607015e-05, ["add     [rbp+m], 1"], ["add~[rbp+0],0"]], [0, 0, 281, 2, 0, 8, 1, 1, 17, 12, 0.0063294356888662934, ["mov     rdx, [rbp+i]", "mov     rax, [rbp+m]", "add     rdx, rax", "mov     rax, [rbp+arg]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_1136D"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 13, 5, 0.1183019827147941, ["cmp     [rbp+buffersize], 0", "jnz     short loc_11965"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 12, 0.018848500254194205, ["mov     [rbp+printable], 0", "jmp     short loc_11372"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 14, 7, 0.17635993899339095, ["cmp     [rbp+backslash_escapes], 0", "jz      loc_115C4"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 11, 11, 0.012595322826639553, ["cmp     [rbp+argsize], 0FFFFFFFFFFFFFFFFh; jumptable 0000000000010DF5 cases 123,125", "jnz     short loc_11184"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 3, 0, 1, 11, 6, 0.07682257244534822, ["mov     eax, [rbp+quoting_style]; jumptable 0000000000010DF5 case 63", "cmp     eax, 2", "jz      short loc_10F7D"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 12, 8, 0.020818505338078292, ["mov     rax, [rbp+argsize]"], ["mov~rax,[rbp+0]"]], [1, 0, 281, 0, 0, 2, 0, 1, 12, 11, 0.06433655312658872, ["cmp     eax, 5", "jz      short loc_10F8C"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 10, 0, 0, 1, 0, 1, 12, 5, 0.012862226741230299, ["jmp     short loc_119A7"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 0, 13, 7, 0.02652516522623284, ["cmp     rax, rbx", "jb      short loc_10DB3"], ["cmp~rax,rbx", "jb~FOO"]], [1, 0, 281, 1, 0, 6, 1, 1, 12, 10, 0.004899593289273005, ["mov     rax, [rbp+arg]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "test    al, al", "setnz   al", "jmp     short loc_1118F"], ["mov~rax,[rbp+0]", "add~rax,0", "movzx~eax,<TAG>", "test~al,al", "setnz~al", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 19, 18, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 24h ; '$'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [2, 0, 281, 0, 0, 2, 0, 0, 3, 13, 0.0, ["mov     [rbp+quoting_style], 5; jumptable 0000000000010B79 case 6", "mov     [rbp+elide_outer_quotes], 1"], ["mov~[rbp+0],0", "mov~[rbp+0],0"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.00028469750889679714, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 17, 4, 0.0049377224199288255, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [1, 0, 281, 0, 0, 2, 0, 0, 12, 10, 0.004899593289273005, ["cmp     [rbp+argsize], 1", "setnz   al"], ["cmp~[rbp+0],0", "setnz~al"]], [0, 0, 7, 0, 0, 2, 0, 1, 13, 4, 0.0002846975088967971, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 10, 1, 0, 6, 0, 0, 15, 6, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rdx, rax", "mov     rax, [rbp+quote_string]", "movzx   eax, byte ptr [rax]", "mov     [rdx], al"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~<TAG>,al"]], [1, 0, 281, 0, 0, 1, 0, 0, 11, 7, 0.0006990340620233858, ["mov     [rbp+c_and_shell_quote_compat], 1; jumptable 0000000000010DF5 case 32"], ["mov~[rbp+0],0"]], [0, 0, 281, 0, 1, 10, 1, 2, 14, 6, 0.00992628368073208, ["mov     rdx, [rbp+arg]", "mov     rax, [rbp+i]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+quote_string_len]; n", "mov     rax, [rbp+quote_string]", "mov     rsi, rax; s2", "mov     rdi, rcx; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_10DB3"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 5, 0.006875953228266395, ["cmp     [rbp+elide_outer_quotes], 0", "jnz     loc_119D9"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 281, 0, 0, 2, 0, 1, 15, 12, 0.11680859176410777, ["cmp     [rbp+is_right_quote], 0", "jz      short loc_115F1"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 281, 0, 0, 1, 0, 0, 16, 9, 0.0034443314692425013, ["mov     [rbp+is_right_quote], 1"], ["mov~[rbp+0],0"]], [2, 0, 10, 2, 0, 2, 0, 0, 15, 5, 0.00019064565327910524, ["add     [rbp+len], 1", "add     [rbp+quote_string], 1"], ["add~[rbp+0],0", "add~[rbp+0],0"]], [1, 0, 281, 1, 0, 2, 0, 1, 17, 14, 0.06698017285205897, ["add     [rbp+len], 1", "jmp     short store_c"], ["add~[rbp+0],0", "jmp~FOO"]], [1, 0, 281, 1, 0, 4, 0, 0, 17, 15, 0.0, ["mov     rdx, [rbp+buffer]", "mov     rax, [rbp+len]", "add     rax, rdx", "mov     byte ptr [rax], 5Ch ; '\\'"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 7, 0, 0, 1, 0, 1, 13, 4, 0.0008185053380782919, ["jmp     force_outer_quoting_style"], ["jmp~FOO"]], [0, 0, 281, 0, 0, 2, 0, 1, 13, 14, 0.015391459074733096, ["nop", "jmp     short store_c"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 16, 4, 0.0006227758007117438, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 281, 0, 0, 1, 0, 0, 15, 14, 0.3029422979156075, ["nop"], ["nop"]], [0, 0, 7, 0, 0, 2, 0, 1, 19, 4, 0.0006227758007117438, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 14, 4, 0.000800711743772242, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 2, 0, 1, 13, 4, 0.00028469750889679714, ["nop", "jmp     short force_outer_quoting_style"], ["nop", "jmp~FOO"]], [0, 0, 7, 0, 0, 1, 0, 0, 11, 4, 0.00376842907981698, ["nop"], ["nop"]]], "func_feature": [16, 60, 177, 2, 282, 444, 7, 994, 0.05056, 8, 114], "succs": [[237], [0, 237], [264, 22], [129, 2], [90, 83], [120, 4], [31], [6, 31], [12, 37], [8, 12], [77], [10, 77], [32], [24, 35], [13, 15], [16, 13], [13], [28, 159], [17, 159], [84], [19, 21], [19], [113, 34], [88, 78], [25, 23], [23], [36], [26, 36], [61, 278], [171], [171, 29], [54, 206], [9, 38], [32], [41, 113], [24], [107, 43], [238], [42, 62], [40, 38], [33, 38], [44, 63], [62], [51], [63], [152], [45, 47], [274, 45], [141], [48, 141], [74, 70], [50, 107], [11, 53], [11, 7], [11], [76, 223], [55], [55], [55], [55], [55], [80, 69], [64, 58], [75, 87], [59, 244], [248, 60], [60], [142, 143], [67, 142], [80], [74], [90], [73, 71], [71], [51], [87], [152, 89], [91, 79], [88], [91], [106, 93], [52], [81, 231], [90, 212], [272, 273], [84, 86], [49, 84], [97, 102], [146], [152, 223], [116, 94], [111], [91], [106], [116], [152], [98, 3, 198, 202, 140, 194, 46, 208, 178, 147, 182, 185, 266, 95, 252, 253, 191], [102], [56, 183], [96, 98], [], [156, 100], [113], [5], [105, 103], [103], [138, 117], [181], [112], [195, 260, 204, 170, 108, 112, 150, 119, 27], [122], [118, 110], [119], [130, 149], [197], [114, 218], [251], [138], [122], [121, 150], [52], [150], [68, 214], [257], [123, 254], [148, 262], [125, 269], [152], [127], [92, 127], [149], [152], [242, 131], [5], [133, 135], [133], [152], [136, 140], [154, 158], [152], [266, 139], [259, 20], [218, 188], [281, 142], [238], [144, 275], [152], [217, 146], [232, 155], [128, 163], [192, 157], [179, 213], [153, 151], [179, 151], [158], [232, 164], [], [177, 174], [160], [160], [165], [152], [161, 261], [184, 128], [193, 180], [199], [165, 167], [168, 165], [18, 165], [181], [169, 30], [169], [238], [172, 85], [177], [227], [227, 175], [192], [132], [213, 207], [193], [111], [132], [64, 240], [128, 201], [132], [225], [225, 186], [218, 245], [104], [104, 189], [234], [181], [203, 187], [234], [181], [], [196, 109], [234], [152], [199], [128, 205], [132], [187], [181], [226, 215], [54], [216, 213], [145, 221], [265, 271], [176, 209], [72], [72, 211], [216, 277], [99, 222], [226], [173], [280, 14], [176, 219], [176, 256], [250, 39], [224, 231], [99, 228], [251], [82, 231], [232], [233, 236], [101], [241, 99], [101], [249, 229], [234], [246, 190], [236], [243, 239], [197], [128], [101], [1, 237], [243, 279], [64], [124, 254], [173], [132], [57, 220], [218, 230], [190], [65], [66, 247], [218, 115], [65], [269, 126], [258, 263], [162, 255], [257], [200, 166], [210], [99, 267], [137], [20], [170], [238], [238], [137], [238], [271], [46], [99, 268], [276, 270], [5, 134], [99], [210], [52], [272], [238], [52], [238], [52], [238], [238], [238], [238]], "fname": "quotearg_buffer_restyled", "n_num": 282}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 3, 1, 0, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+buffer], rdi", "mov     [rbp+buffersize], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     [rbp+o], r8", "cmp     [rbp+o], 0", "jz      short loc_11AA0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [1, 1, 0, 2, 3, 34, 0, 3, 0, 0, 0.0, ["mov     [rbp+p], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+p]", "mov     r8, [rax+30h]", "mov     rax, [rbp+p]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+p]", "lea     r11, [rax+8]", "mov     rax, [rbp+p]", "mov     r9d, [rax+4]; flags", "mov     rax, [rbp+p]", "mov     r10d, [rax]", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+buffersize]; buffersize", "mov     rax, [rbp+buffer]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "mov     [rbp+r], rax", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+r]", "leave", "retn"], ["mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r9d,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "mov~[rbp+0],rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+o]", "jmp     short loc_11AA7"], ["mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [3, 0, 5, 0, 4, 4, 0, 47, 0.04167, 1, 3], "succs": [[1, 3], [2], [], [2]], "fname": "quotearg_buffer", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     [rbp+o], rdx", "mov     rdx, [rbp+o]", "mov     rsi, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rcx, rdx; o", "mov     edx, 0; size", "mov     rdi, rax; arg", "call    quotearg_alloc_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 15, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_alloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[7, 2, 2, 5, 5, 67, 1, 6, 0, 0, 0.30000000000000004, ["mov     [rbp+p], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+p]", "mov     edx, [rax+4]", "cmp     [rbp+size], 0", "setz    al", "movzx   eax, al", "or      eax, edx", "mov     [rbp+flags], eax", "mov     rax, [rbp+p]", "mov     rsi, [rax+30h]", "mov     rax, [rbp+p]", "mov     rcx, [rax+28h]", "mov     rax, [rbp+p]", "lea     r9, [rax+8]", "mov     rax, [rbp+p]", "mov     edi, [rax]", "mov     r8d, [rbp+flags]", "mov     rdx, [rbp+argsize]", "mov     rax, [rbp+arg]", "sub     rsp, 8", "push    rsi; right_quote", "push    rcx; left_quote", "push    r9; quote_these_too", "mov     r9d, r8d; flags", "mov     r8d, edi; quoting_style", "mov     rcx, rdx; argsize", "mov     rdx, rax; arg", "mov     esi, 0; buffersize", "mov     edi, 0; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "add     rax, 1", "mov     [rbp+bufsize], rax", "mov     rax, [rbp+bufsize]", "mov     rdi, rax; n", "call    xcharalloc", "mov     [rbp+buf], rax", "mov     rax, [rbp+p]", "mov     r8, [rax+30h]", "mov     rax, [rbp+p]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+p]", "lea     r11, [rax+8]", "mov     rax, [rbp+p]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+bufsize]; buffersize", "mov     rax, [rbp+buf]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "cmp     [rbp+size], 0", "jz      short loc_11C75"], ["mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,[rax+0]", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "or~eax,edx", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rax,[rbp+0]", "lea~r9,[rax+0]", "mov~rax,[rbp+0]", "mov~edi,<TAG>", "mov~r8d,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~rsi", "push~rcx", "push~r9", "mov~r9d,r8d", "mov~r8d,edi", "mov~rcx,rdx", "mov~rdx,rax", "mov~esi,0", "mov~edi,0", "call~FOO", "add~rsp,<STR>", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.07500000000000001, ["mov     rax, [rbp+o]", "jmp     short loc_11B79"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 1, 2, 0.07500000000000001, ["lea     rax, default_quoting_options"], ["lea~rax,<TAG>"]], [2, 0, 5, 1, 0, 9, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     [rbp+size], rdx", "mov     [rbp+o], rcx", "cmp     [rbp+o], 0", "jz      short loc_11B72"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 1, 0, 0, 4, 0, 0, 3, 1, 0.0, ["mov     rax, [rbp+bufsize]", "lea     rdx, [rax-1]", "mov     rax, [rbp+size]", "mov     [rax], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rdx"]], [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+buf]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [5, 1, 8, 0, 6, 7, 1, 86, 0.075, 1, 6], "succs": [[4, 5], [0], [0], [1, 2], [5], []], "fname": "quotearg_alloc_mem", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 5, 0, 1, 0, 0, 0.0, ["mov     rax, [rbp+sv]", "mov     rdi, rax; ptr", "call    free", "lea     rax, slotvec0", "mov     cs:slotvec_0, rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rax,<TAG>", "mov~<TAG>,rax"]], [0, 0, 2, 0, 0, 3, 0, 1, 3, 1, 0.23809523809523808, ["lea     rax, slotvec0", "cmp     [rbp+sv], rax", "jz      short loc_11D29"], ["lea~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 7, 0, 0, 3, 0, 1, 1, 3, 0.26190476190476186, ["mov     eax, cs:nslots", "cmp     [rbp+i], eax", "jl      short loc_11C97"], ["mov~eax,<TAG>", "cmp~[rbp+0],eax", "jl~FOO"]], [2, 0, 7, 1, 0, 7, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     rax, cs:slotvec_0", "mov     [rbp+sv], rax", "mov     [rbp+i], 1", "jmp     short loc_11CBA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 7, 3, 1, 10, 0, 1, 2, 4, 0.0, ["mov     eax, [rbp+i]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    free", "add     [rbp+i], 1"], ["mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "add~[rbp+0],0"]], [0, 0, 4, 0, 0, 5, 0, 1, 2, 2, 0.2857142857142857, ["mov     rax, [rbp+sv]", "mov     rdx, [rax+8]", "lea     rax, slot0", "cmp     rdx, rax", "jz      short loc_11D02"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "lea~rax,<TAG>", "cmp~rdx,rax", "jz~FOO"]], [0, 1, 3, 0, 1, 7, 0, 1, 3, 2, 0.0, ["mov     rax, [rbp+sv]", "mov     rax, [rax+8]", "mov     rdi, rax; ptr", "call    free", "mov     cs:slotvec0.size, 100h", "lea     rax, slot0", "mov     cs:slotvec0.val, rax"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,<STR>", "lea~rax,<TAG>", "mov~<TAG>,rax"]], [1, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0.0, ["mov     cs:nslots, 1", "nop", "leave", "retn"], ["mov~<TAG>,0", "nop", "leave", "retn"]]], "func_feature": [3, 0, 7, 0, 8, 10, 0, 44, 0.09821, 5, 4], "succs": [[7], [0, 7], [4, 5], [2], [2], [1, 6], [1], []], "fname": "quotearg_free", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 1, 4, 6, 1, 45, 1, 2, 0, 0, 0.17142857142857143, ["mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax]", "mov     [rbp+size], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rax, rdx", "mov     rax, [rax+8]", "mov     [rbp+val], rax", "mov     rax, [rbp+options]", "mov     eax, [rax+4]", "or      eax, 1", "mov     [rbp+flags], eax", "mov     rax, [rbp+options]", "mov     r8, [rax+30h]", "mov     rax, [rbp+options]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+options]", "lea     r11, [rax+8]", "mov     rax, [rbp+options]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+size]; buffersize", "mov     rax, [rbp+val]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h", "mov     [rbp+qsize], rax", "mov     rax, [rbp+size]", "cmp     rax, [rbp+qsize]", "ja      loc_11F96"], ["mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~eax,[rax+0]", "or~eax,0", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [0, 0, 13, 0, 0, 3, 0, 1, 1, 2, 0.06190476190476191, ["mov     eax, cs:nslots", "cmp     [rbp+n], eax", "jl      loc_11E42"], ["mov~eax,<TAG>", "cmp~[rbp+0],eax", "jl~FOO"]], [4, 0, 5, 5, 1, 20, 0, 1, 6, 2, 0.14285714285714288, ["mov     eax, [rbp+n]", "lea     edx, [rax+1]", "mov     eax, cs:nslots", "sub     edx, eax", "mov     eax, edx", "cdqe", "shl     rax, 4", "mov     rdx, rax; n", "mov     eax, cs:nslots", "cdqe", "shl     rax, 4", "mov     rcx, rax", "mov     rax, [rbp+sv]", "add     rax, rcx", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     eax, [rbp+n]", "add     eax, 1", "mov     cs:nslots, eax"], ["mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~eax,<TAG>", "sub~edx,eax", "mov~eax,edx", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~eax,<TAG>", "cdqe~", "shl~rax,0", "mov~rcx,rax", "mov~rax,[rbp+0]", "add~rax,rcx", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~eax,[rbp+0]", "add~eax,0", "mov~<TAG>,eax"]], [0, 0, 6, 0, 0, 5, 0, 0, 6, 3, 0.0, ["mov     rcx, [rbp+sv]", "mov     rax, cs:slotvec0.size", "mov     rdx, cs:slotvec0.val", "mov     [rcx], rax", "mov     [rcx+8], rdx"], ["mov~rcx,[rbp+0]", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~<TAG>,rax", "mov~[rcx+0],rdx"]], [1, 0, 7, 0, 1, 8, 0, 2, 5, 3, 0.1523809523809524, ["mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "mov     [rbp+sv], rax", "mov     rax, [rbp+sv]", "mov     cs:slotvec_0, rax", "cmp     [rbp+preallocated], 0", "jz      short loc_11DFA"], ["mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 15, 1, 1, 14, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     [rbp+options], rcx", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, cs:slotvec_0", "mov     [rbp+sv], rax", "cmp     [rbp+n], 0", "jns     short loc_11D6D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, -1, 0.0, ["call    _abort"], ["call~FOO"]], [2, 1, 1, 4, 2, 33, 0, 2, 4, 1, 0.009523809523809525, ["mov     rax, [rbp+size]", "mov     rdi, rax; n", "call    xcharalloc", "mov     [rbp+val], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rdx, rax", "mov     rax, [rbp+val]", "mov     [rdx+8], rax", "mov     rax, [rbp+options]", "mov     r8, [rax+30h]", "mov     rax, [rbp+options]", "mov     rdi, [rax+28h]", "mov     rax, [rbp+options]", "lea     r11, [rax+8]", "mov     rax, [rbp+options]", "mov     r10d, [rax]", "mov     r9d, [rbp+flags]; flags", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     rsi, [rbp+size]; buffersize", "mov     rax, [rbp+val]", "sub     rsp, 8", "push    r8; right_quote", "push    rdi; left_quote", "push    r11; quote_these_too", "mov     r8d, r10d; quoting_style", "mov     rdi, rax; buffer", "call    quotearg_buffer_restyled", "add     rsp, 20h"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~[rdx+0],rax", "mov~rax,[rbp+0]", "mov~r8,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,[rax+0]", "mov~rax,[rbp+0]", "lea~r11,[rax+0]", "mov~rax,[rbp+0]", "mov~r10d,<TAG>", "mov~r9d,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r8", "push~rdi", "push~r11", "mov~r8d,r10d", "mov~rdi,rax", "call~FOO", "add~rsp,<STR>"]], [2, 0, 3, 3, 0, 14, 0, 1, 3, 2, 0.09523809523809525, ["mov     rax, [rbp+qsize]", "add     rax, 1", "mov     [rbp+size], rax", "mov     eax, [rbp+n]", "cdqe", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+sv]", "add     rdx, rax", "mov     rax, [rbp+size]", "mov     [rdx], rax", "lea     rax, slot0", "cmp     [rbp+val], rax", "jz      short loc_11F20"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "lea~rax,<TAG>", "cmp~[rbp+0],rax", "jz~FOO"]], [0, 0, 2, 0, 1, 3, 0, 1, 4, 2, 0.0, ["mov     rax, [rbp+val]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 0, 0, 1, 7, 0, 1, 3, 0, 0.0, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+val]", "leave", "retn"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "leave", "retn"]], [3, 0, 10, 2, 0, 7, 0, 1, 3, 5, 0.09523809523809525, ["mov     eax, [rbp+n]", "add     eax, 1", "cdqe", "shl     rax, 4", "mov     rdx, rax", "cmp     [rbp+preallocated], 0", "jz      short loc_11DBD"], ["mov~eax,[rbp+0]", "add~eax,0", "cdqe~", "shl~rax,0", "mov~rdx,rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 12, 0, 0, 8, 0, 1, 2, 6, 0.06666666666666668, ["lea     rax, slotvec0", "cmp     [rbp+sv], rax", "setz    al", "mov     [rbp+preallocated], al", "mov     [rbp+nmax], 7FFFFFFEh", "mov     eax, [rbp+nmax]", "cmp     eax, [rbp+n]", "jge     short loc_11DA1"], ["lea~rax,<TAG>", "cmp~[rbp+0],rax", "setz~al", "mov~[rbp+0],al", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jge~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 4, 4, 0.05238095238095239, ["mov     eax, 0", "jmp     short loc_11DC1"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 8, 0, 0, 1, 0, 0, 4, 4, 0.05238095238095239, ["mov     rax, [rbp+sv]"], ["mov~rax,[rbp+0]"]]], "func_feature": [10, 1, 17, 0, 16, 20, 8, 172, 0.05625, 5, 21], "succs": [[8, 10], [0, 12], [0], [2], [2, 3], [1, 6], [], [10], [9, 7], [7], [], [13, 15], [11, 14], [4], [], [4]], "fname": "quotearg_n_options", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, default_quoting_options; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 1, 1], "succs": [[]], "fname": "quotearg_n", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, default_quoting_options; options", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 14, 0.0, 1, 1], "succs": [[]], "fname": "quotearg_n_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "quotearg", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 12, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 1, 2, 1, 2, 24, 2, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 50h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+o]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "lea     rdx, [rbp+o]", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     rcx, rdx; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_120AC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,0", "mov~edi,eax", "call~FOO", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [3, 2, 4, 1, 3, 2, 33, 27, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 2, 1, 2, 24, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 60h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+o]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "lea     rcx, [rbp+o]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_1210E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 1, 27, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], edi", "mov     [rbp+arg], rsi", "mov     rdx, [rbp+arg]; arg", "mov     eax, [rbp+s]", "mov     esi, eax; s", "mov     edi, 0; n", "call    quotearg_n_style", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,eax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 68, 12, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_style", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+s], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rcx, [rbp+argsize]; argsize", "mov     rdx, [rbp+arg]; arg", "mov     eax, [rbp+s]", "mov     esi, eax; s", "mov     edi, 0; n", "call    quotearg_n_style_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,eax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_style_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [3, 0, 2, 1, 2, 39, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 60h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     eax, edx", "mov     [rbp+ch_0], al", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, qword ptr cs:default_quoting_options.style", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too", "mov     qword ptr [rbp+options.style], rax", "mov     qword ptr [rbp+options.quote_these_too], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+8", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too+10h", "mov     qword ptr [rbp+options.quote_these_too+8], rax", "mov     qword ptr [rbp+options.quote_these_too+10h], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+18h", "mov     rdx, cs:default_quoting_options.left_quote", "mov     qword ptr [rbp+options.quote_these_too+18h], rax", "mov     [rbp+options.left_quote], rdx", "mov     rax, cs:default_quoting_options.right_quote", "mov     [rbp+options.right_quote], rax", "movsx   ecx, [rbp+ch_0]", "lea     rax, [rbp+options]", "mov     edx, 1; i", "mov     esi, ecx; c", "mov     rdi, rax; o", "call    set_char_quoting", "lea     rcx, [rbp+options]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quotearg_n_options", "mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_12215"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],al", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "movsx~ecx,[rbp+0]", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 42, 0.0, 8, 1], "succs": [[], [0, 2], []], "fname": "quotearg_char_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     eax, esi", "mov     [rbp+ch_0], al", "movsx   edx, [rbp+ch_0]; ch_0", "mov     rax, [rbp+arg]", "mov     rsi, 0FFFFFFFFFFFFFFFFh; argsize", "mov     rdi, rax; arg", "call    quotearg_char_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~eax,esi", "mov~[rbp+0],al", "movsx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_char", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     esi, 3Ah ; ':'; ch_0", "mov     rdi, rax; arg", "call    quotearg_char", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 10, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_colon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rcx, [rbp+argsize]", "mov     rax, [rbp+arg]", "mov     edx, 3Ah ; ':'; ch_0", "mov     rsi, rcx; argsize", "mov     rdi, rax; arg", "call    quotearg_char_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,<STR>", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_colon_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [2, 2, 2, 1, 3, 43, 2, 4, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 90h", "mov     [rbp+n], edi", "mov     [rbp+s], esi", "mov     [rbp+arg], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+var_90]", "mov     edx, [rbp+s]", "mov     esi, edx; style", "mov     rdi, rax; retstr", "call    quoting_options_from_style", "mov     rax, qword ptr [rbp+var_90.style]", "mov     rdx, qword ptr [rbp+var_90.quote_these_too]", "mov     qword ptr [rbp+options.style], rax", "mov     qword ptr [rbp+options.quote_these_too], rdx", "mov     rax, qword ptr [rbp+var_90.quote_these_too+8]", "mov     rdx, qword ptr [rbp+var_90.quote_these_too+10h]", "mov     qword ptr [rbp+options.quote_these_too+8], rax", "mov     qword ptr [rbp+options.quote_these_too+10h], rdx", "mov     rax, qword ptr [rbp+var_90.quote_these_too+18h]", "mov     rdx, [rbp+var_90.left_quote]", "mov     qword ptr [rbp+options.quote_these_too+18h], rax", "mov     [rbp+options.left_quote], rdx", "mov     rax, [rbp+var_90.right_quote]", "mov     [rbp+options.right_quote], rax", "lea     rax, [rbp+options]", "mov     edx, 1; i", "mov     esi, 3Ah ; ':'; c", "mov     rdi, rax; o", "call    set_char_quoting", "lea     rdx, [rbp+options]", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     rcx, rdx; options", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_12346"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[word ptr [rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,[word ptr [rbp+0]", "mov~rdx,[rbp+0]", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~edx,0", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~rcx,rdx", "mov~rdx,0", "mov~edi,eax", "call~FOO", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 2, 5, 2, 3, 2, 5, 46, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_style_colon", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "mov     [rbp+arg], rcx", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rsi, [rbp+left_quote]; left_quote", "mov     eax, [rbp+n]", "mov     r8, 0FFFFFFFFFFFFFFFFh; argsize", "mov     edi, eax; n", "call    quotearg_n_custom_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~r8,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 16, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_n_custom", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 2, 1, 2, 40, 2, 3, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+n], edi", "mov     [rbp+left_quote], rsi", "mov     [rbp+right_quote], rdx", "mov     [rbp+arg], rcx", "mov     [rbp+argsize], r8", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, qword ptr cs:default_quoting_options.style", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too", "mov     qword ptr [rbp+o.style], rax", "mov     qword ptr [rbp+o.quote_these_too], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+8", "mov     rdx, qword ptr cs:default_quoting_options.quote_these_too+10h", "mov     qword ptr [rbp+o.quote_these_too+8], rax", "mov     qword ptr [rbp+o.quote_these_too+10h], rdx", "mov     rax, qword ptr cs:default_quoting_options.quote_these_too+18h", "mov     rdx, cs:default_quoting_options.left_quote", "mov     qword ptr [rbp+o.quote_these_too+18h], rax", "mov     [rbp+o.left_quote], rdx", "mov     rax, cs:default_quoting_options.right_quote", "mov     [rbp+o.right_quote], rax", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rcx, [rbp+left_quote]", "lea     rax, [rbp+o]", "mov     rsi, rcx; left_quote", "mov     rdi, rax; o", "call    set_custom_quoting", "lea     rcx, [rbp+o]; options", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "mov     edi, eax; n", "call    quotearg_n_options", "mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_12436"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[word ptr [rbp+0],rdx", "mov~rax,<TAG>", "mov~rdx,<TAG>", "mov~[word ptr [rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "lea~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 2, 4, 1, 3, 2, 2, 43, 0.0, 8, 1], "succs": [[], [0, 2], []], "fname": "quotearg_n_custom_mem", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+left_quote], rdi", "mov     [rbp+right_quote], rsi", "mov     [rbp+arg], rdx", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rax, [rbp+left_quote]", "mov     rsi, rax; left_quote", "mov     edi, 0; n", "call    quotearg_n_custom", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_custom", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 17, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+left_quote], rdi", "mov     [rbp+right_quote], rsi", "mov     [rbp+arg], rdx", "mov     [rbp+argsize], rcx", "mov     rsi, [rbp+argsize]", "mov     rcx, [rbp+arg]; arg", "mov     rdx, [rbp+right_quote]; right_quote", "mov     rax, [rbp+left_quote]", "mov     r8, rsi; argsize", "mov     rsi, rax; left_quote", "mov     edi, 0; n", "call    quotearg_n_custom_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 17, 0.0, 0, 1], "succs": [[]], "fname": "quotearg_custom_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     [rbp+argsize], rdx", "mov     rdx, [rbp+argsize]; argsize", "mov     rsi, [rbp+arg]; arg", "mov     eax, [rbp+n]", "lea     rcx, quote_quoting_options; options", "mov     edi, eax; n", "call    quotearg_n_options", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "lea~rcx,<TAG>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 14, 0.0, 1, 1], "succs": [[]], "fname": "quote_n_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     [rbp+argsize], rsi", "mov     rdx, [rbp+argsize]; argsize", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quote_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 12, 0.0, 0, 1], "succs": [[]], "fname": "quote_mem", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], edi", "mov     [rbp+arg], rsi", "mov     rcx, [rbp+arg]", "mov     eax, [rbp+n]", "mov     rdx, 0FFFFFFFFFFFFFFFFh; argsize", "mov     rsi, rcx; arg", "mov     edi, eax; n", "call    quote_n_mem", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rdx,0", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 13, 0.0, 0, 1], "succs": [[]], "fname": "quote_n", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+arg], rdi", "mov     rax, [rbp+arg]", "mov     rsi, rax; arg", "mov     edi, 0; n", "call    quote_n", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 8, 10, 0.0, 0, 1], "succs": [[]], "fname": "quote", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+e], edi", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 5, 11, 0.0, 0, 1], "succs": [[]], "fname": "errno_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 9, 0, 0, 4, 1, 1, 0, 0, 0.06346153846153846, ["mov     eax, [rbp+src_st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      loc_128A5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 7, 4, 0.14423076923076922, ["cmp     [rbp+dst_found_nonexistent], 0", "jz      short loc_12819"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 26, 0, 2, 10, 0, 3, 3, 3, 0.15096153846153845, ["mov     rax, [rbp+src]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+src_len], rax", "mov     rax, [rbp+dst]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+dst_len], rax", "cmp     [rbp+src_len], 0", "jz      short loc_12711"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 35, 0, 0, 8, 0, 1, 2, 4, 0.08333333333333333, ["mov     rax, [rbp+src]", "mov     [rbp+src_temp], rax", "mov     rax, [rbp+dst]", "mov     [rbp+dst_temp], rax", "mov     [rbp+rename_errno], 14h", "mov     [rbp+dst_found_nonexistent], 0", "cmp     [rbp+flags], 0", "jz      short loc_126D1"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 27, 0, 0, 1, 0, 0, 7, 4, 0.06153846153846154, ["mov     [rbp+dst_found_nonexistent], 1"], ["mov~[rbp+0],0"]], [1, 0, 39, 0, 0, 2, 0, 1, 1, 5, 0.022435897435897436, ["cmp     [rbp+err], 16h", "jz      short loc_12625"], ["cmp~[rbp+0],0", "jz~FOO"]], [5, 1, 40, 1, 2, 30, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 180h", "mov     [rbp+fd1], edi", "mov     [rbp+src], rsi", "mov     [rbp+fd2], edx", "mov     [rbp+dst], rcx", "mov     [rbp+flags], r8d", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+ret_val], 0FFFFFFFFh", "mov     [rbp+err], 16h", "mov     edi, [rbp+flags]", "mov     rsi, [rbp+dst]", "mov     ecx, [rbp+fd2]", "mov     rdx, [rbp+src]", "mov     eax, [rbp+fd1]", "mov     r9d, edi", "mov     r8, rsi", "mov     esi, eax", "mov     edi, 13Ch; sysno", "mov     eax, 0", "call    _syscall", "mov     [rbp+ret_val], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+err], eax", "cmp     [rbp+ret_val], 0", "jns     short loc_1261A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8d", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~edi,[rbp+0]", "mov~rsi,[rbp+0]", "mov~ecx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~r9d,edi", "mov~r8,rsi", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 5, 0, 0, 3, 0, 1, 10, 3, 0.03461538461538462, ["mov     rax, [rbp+dst_temp]", "cmp     rax, [rbp+dst]", "jz      short loc_12918"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 7, 0, 2, 14, 0, 3, 9, 4, 0.05641025641025641, ["mov     rcx, [rbp+dst_temp]; new", "mov     edx, [rbp+fd2]; newfd", "mov     rsi, [rbp+src_temp]; old", "mov     eax, [rbp+fd1]", "mov     edi, eax; oldfd", "call    _renameat", "mov     [rbp+ret_val], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+rename_errno], eax", "nop", "mov     rax, [rbp+src_temp]", "cmp     rax, [rbp+src]", "jz      short loc_128F9"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "nop", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jz~FOO"]], [0, 0, 6, 0, 1, 3, 0, 1, 10, 4, 0.0, ["mov     rax, [rbp+src_temp]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [3, 0, 23, 2, 0, 20, 2, 1, 5, 4, 0.15384615384615385, ["mov     rax, [rbp+src_len]", "lea     rdx, [rax-1]", "mov     rax, [rbp+src]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "setz    al", "mov     [rbp+src_slash], al", "mov     rax, [rbp+dst_len]", "lea     rdx, [rax-1]", "mov     rax, [rbp+dst]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 2Fh ; '/'", "setz    al", "mov     [rbp+dst_slash], al", "movzx   eax, [rbp+src_slash]", "xor     eax, 1", "test    al, al", "jz      short loc_127BF"], ["mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "setz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "lea~rdx,[rax-1]+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "setz~al", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 25, 0, 0, 2, 0, 1, 4, 3, 0.14807692307692308, ["cmp     [rbp+dst_len], 0", "jnz     short loc_12737"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 32, 0, 1, 8, 1, 2, 4, 3, 0.03461538461538462, ["lea     rdx, [rbp+dst_st]; st", "mov     rcx, [rbp+dst]", "mov     eax, [rbp+fd2]", "mov     rsi, rcx; name", "mov     edi, eax; fd", "call    lstatat", "test    eax, eax", "jz      short loc_126A5"], ["lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 34, 0, 0, 4, 2, 1, 3, 3, 0.02403846153846154, ["mov     eax, [rbp+flags]", "and     eax, 0FFFFFFFEh", "test    eax, eax", "jz      short loc_12677"], ["mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [1, 0, 38, 0, 0, 2, 0, 1, 2, 4, 0.002564102564102564, ["cmp     [rbp+err], 26h ; '&'", "jz      short loc_12625"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 11, 3, 0.0, ["mov     rax, [rbp+dst_temp]", "mov     rdi, rax; ptr", "call    free"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 3, 0, 1, 3, 0, 2, 9, 2, 0.0038461538461538464, ["mov     edi, 2; e", "call    errno_fail", "jmp     loc_1292E"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 22, 0, 0, 4, 2, 1, 6, 3, 0.009294871794871795, ["movzx   eax, [rbp+dst_slash]", "xor     eax, 1", "test    al, al", "jz      short loc_127BF"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 37, 0, 0, 2, 0, 1, 3, 3, 0.0038461538461538464, ["cmp     [rbp+err], 5Fh ; '_'", "jz      short loc_12625"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 10, 0, 1, 4, 0, 2, 9, 3, 0.02435897435897436, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jnz     short loc_12859"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 15, 0, 1, 8, 1, 2, 8, 4, 0.07179487179487179, ["lea     rdx, [rbp+dst_st]; st", "mov     rcx, [rbp+dst]", "mov     eax, [rbp+fd2]", "mov     rsi, rcx; name", "mov     edi, eax; fd", "call    lstatat", "test    eax, eax", "jz      short loc_12863"], ["lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.00641025641025641, ["mov     eax, [rbp+ret_val]", "jmp     loc_1292E"], ["mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 31, 0, 1, 4, 0, 2, 5, 3, 0.04423076923076923, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4Bh ; 'K'", "jnz     short loc_126B4"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 3, 0, 1, 5, 0, 1, 11, 2, 0.007692307692307693, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+rename_errno]", "mov     [rdx], eax", "mov     eax, [rbp+ret_val]"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,[rbp+0]"]], [0, 0, 20, 0, 1, 8, 1, 2, 6, 3, 0.15352564102564104, ["lea     rdx, [rbp+src_st]; st", "mov     rcx, [rbp+src]", "mov     eax, [rbp+fd1]", "mov     rsi, rcx; name", "mov     edi, eax; fd", "call    lstatat", "test    eax, eax", "jz      short loc_127EB"], ["lea~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 3, 0, 1, 3, 0, 2, 5, 2, 0.0038461538461538464, ["mov     edi, 11h; e", "call    errno_fail", "jmp     loc_1292E"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [0, 0, 3, 0, 1, 7, 0, 2, 4, 2, 0.007371794871794872, ["mov     rcx, [rbp+dst]; new", "mov     edx, [rbp+fd2]; newfd", "mov     rsi, [rbp+src]; old", "mov     eax, [rbp+fd1]", "mov     edi, eax; oldfd", "call    _renameat", "jmp     loc_1292E"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [0, 0, 3, 0, 1, 7, 0, 2, 7, 2, 0.0028846153846153848, ["mov     rcx, [rbp+dst]; new", "mov     edx, [rbp+fd2]; newfd", "mov     rsi, [rbp+src]; old", "mov     eax, [rbp+fd1]", "mov     edi, eax; oldfd", "call    _renameat", "jmp     loc_1292E"], ["mov~rcx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.04871794871794872, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_12942"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 1, 3, 0, 2, 4, 2, 0.0035256410256410257, ["mov     edi, 5Fh ; '_'; e", "call    errno_fail", "jmp     loc_1292E"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 7, 2, 0.0019230769230769232, ["mov     eax, 0FFFFFFFFh", "jmp     loc_1292E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 7, 2, 0.0028846153846153848, ["mov     eax, 0FFFFFFFFh", "jmp     loc_1292E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 10, 2, 0.004807692307692308, ["mov     eax, 0FFFFFFFFh", "jmp     loc_1292E"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 1, 3, 0, 2, 10, 2, 0.0028846153846153848, ["mov     edi, 14h; e", "call    errno_fail", "jmp     loc_1292E"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 3, 0, 1, 3, 0, 2, 11, 2, 0.0019230769230769232, ["mov     edi, 15h; e", "call    errno_fail", "jmp     loc_1292E"], ["mov~edi,0", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 29, 0, 1, 4, 0, 2, 6, 3, 0.05641025641025641, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jz      short loc_126CA"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [2, 0, 9, 0, 0, 4, 1, 1, 10, 3, 0.016346153846153847, ["mov     eax, [rbp+src_st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_128A5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 9, 0, 0, 4, 1, 1, 10, 3, 0.004807692307692308, ["mov     eax, [rbp+src_st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_128A5"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [2, 0, 11, 0, 0, 4, 1, 1, 9, 3, 0.035256410256410256, ["mov     eax, [rbp+dst_st.st_mode]", "and     eax, 0F000h", "cmp     eax, 4000h", "jz      short loc_12884"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]]], "func_feature": [23, 15, 57, 1, 41, 63, 2, 210, 0.03655, 1, 3], "succs": [[16, 8], [0, 20], [26, 11], [2, 13], [2], [3, 14], [5, 21], [23, 15], [9, 7], [7], [24, 17], [10, 26], [25, 22], [12, 29], [18, 3], [23], [28], [24, 27], [3, 21], [32, 39], [40, 19], [28], [25, 36], [28], [1, 31], [28], [28], [28], [35, 38], [28], [28], [28], [28], [28], [28], [], [4, 30], [8, 34], [], [32, 8], [33, 37]], "fname": "renameatu", "n_num": 41}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 10, 0, 1, 4, 0, 2, 0, 0, 0.3111111111111111, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4", "jz      short loc_129AF"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 10, 0, 1, 9, 0, 2, 1, 2, 0.43333333333333335, ["mov     rdx, [rbp+count]; n", "mov     rcx, [rbp+buf]", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    _write", "mov     [rbp+result], rax", "cmp     [rbp+result], 0", "js      short loc_1297D"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 5, 4, 0.12222222222222223, ["mov     [rbp+count], 7FF00000h", "jmp     short loc_129B0"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 10, 0, 0, 2, 0, 0, 4, 2, 0.12222222222222223, ["cmp     [rbp+count], 7FF00000h", "jbe     short loc_129A9"], ["cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 10, 0, 1, 4, 0, 2, 3, 2, 0.2, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jnz     short loc_129A9"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 1, 4, 1, 0.03333333333333333, ["mov     rax, [rbp+result]", "jmp     short locret_129B2"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 10, 0, 0, 1, 0, 0, 3, 4, 0.05555555555555556, ["nop"], ["nop"]], [0, 0, 10, 0, 0, 1, 0, 1, 4, 3, 0.3, ["jmp     short loc_12957"], ["jmp~FOO"]], [1, 0, 10, 1, 0, 6, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fd], edi", "mov     [rbp+buf], rsi", "mov     [rbp+count], rdx"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx"]], [0, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.05555555555555556, ["mov     rax, [rbp+result]", "jmp     short locret_129B2"], ["mov~rax,[rbp+0]", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [3, 0, 10, 0, 11, 14, 1, 35, 0.14848, 0, 1], "succs": [[4, 6], [0, 9], [7], [2, 5], [3, 5], [10], [7], [1], [1], [10], []], "fname": "safe_write", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+source], rdi", "mov     [rbp+dest], rsi", "mov     rdx, [rbp+dest]", "mov     rax, [rbp+source]", "mov     rcx, rdx; dest", "mov     edx, 0FFFFFF9Ch; dest_dfd", "mov     rsi, rax; source", "mov     edi, 0FFFFFF9Ch; source_dfd", "call    same_nameat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 7, 14, 0.0, 0, 1], "succs": [[]], "fname": "same_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 11, 0, 2, 13, 1, 3, 0, 0, 0.16666666666666666, ["mov     rax, [rbp+source]", "mov     rdi, rax; file", "call    dir_name", "mov     [rbp+source_dirname], rax", "mov     [rbp+flags], 100h", "mov     ecx, [rbp+flags]; flag", "lea     rdx, [rbp+source_dir_stats]; stat_buf", "mov     rsi, [rbp+source_dirname]; filename", "mov     eax, [rbp+source_dfd]", "mov     edi, eax; fildes", "call    fstatat", "test    eax, eax", "jz      short loc_12B4B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],<STR>", "mov~ecx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 0, 12, 0, 0, 7, 1, 1, 2, 2, 0.2, ["mov     [rbp+identical_basenames], al", "and     [rbp+identical_basenames], 1", "movzx   eax, [rbp+identical_basenames]", "mov     [rbp+compare_dirs], al", "mov     [rbp+same], 0", "cmp     [rbp+compare_dirs], 0", "jz      loc_12C0C"], ["mov~[rbp+0],al", "and~[rbp+0],0", "movzx~eax,[rbp+0]", "mov~[rbp+0],al", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 15, 0, 1, 8, 1, 2, 1, 4, 0.004166666666666667, ["mov     rdx, [rbp+dest_baselen]; n", "mov     rcx, [rbp+dest_basename]", "mov     rax, [rbp+source_basename]", "mov     rsi, rcx; s2", "mov     rdi, rax; s1", "call    _memcmp", "test    eax, eax", "jnz     short loc_12AAA"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 1, 16, 1, 4, 29, 1, 5, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 190h", "mov     [rbp+source_dfd], edi", "mov     [rbp+source], rsi", "mov     [rbp+dest_dfd], edx", "mov     [rbp+dest], rcx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+source]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+source_basename], rax", "mov     rax, [rbp+dest]", "mov     rdi, rax; name", "call    last_component", "mov     [rbp+dest_basename], rax", "mov     rax, [rbp+source_basename]", "mov     rdi, rax; name", "call    base_len", "mov     [rbp+source_baselen], rax", "mov     rax, [rbp+dest_basename]", "mov     rdi, rax; name", "call    base_len", "mov     [rbp+dest_baselen], rax", "mov     rax, [rbp+source_baselen]", "cmp     rax, [rbp+dest_baselen]", "jnz     short loc_12AAA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 6, 0, 0, 4, 0, 1, 6, 4, 0.041666666666666664, ["mov     rdx, [rbp+source_dir_stats.st_dev]", "mov     rax, [rbp+dest_dir_stats.st_dev]", "cmp     rdx, rax", "jnz     short loc_12BEB"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 7, 0, 0, 4, 0, 1, 5, 4, 0.2, ["mov     rdx, [rbp+source_dir_stats.st_ino]", "mov     rax, [rbp+dest_dir_stats.st_ino]", "cmp     rdx, rax", "jnz     short loc_12BEB"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "cmp~rdx,rax", "jnz~FOO"]], [2, 0, 10, 0, 2, 9, 0, 2, 4, 6, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+source_dirname]", "mov     rcx, rdx", "lea     rdx, off_1B514; format", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [1, 0, 3, 0, 1, 5, 1, 1, 7, 2, 0.1, ["mov     [rbp+same], al", "and     [rbp+same], 1", "mov     rax, [rbp+dest_dirname]", "mov     rdi, rax; ptr", "call    free"], ["mov~[rbp+0],al", "and~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 7, 3, 0.008333333333333333, ["mov     eax, 1", "jmp     short loc_12BF0"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 6, 3, 0.1125, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 13, 0, 0, 2, 0, 1, 2, 3, 0.027083333333333334, ["mov     eax, 1", "jmp     short loc_12AAF"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 13, 0, 0, 1, 0, 0, 1, 3, 0.08125, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 4, 1, 1, 3, 1, 0.11666666666666667, ["movzx   eax, [rbp+same]", "mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_12C27"], ["movzx~eax,[rbp+0]", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 9, 0, 3, 15, 1, 4, 4, 5, 0.2, ["mov     rax, [rbp+source_dirname]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+dest]", "mov     rdi, rax; file", "call    dir_name", "mov     [rbp+dest_dirname], rax", "mov     ecx, [rbp+flags]; flag", "lea     rdx, [rbp+dest_dir_stats]; stat_buf", "mov     rsi, [rbp+dest_dirname]; filename", "mov     eax, [rbp+dest_dfd]", "mov     edi, eax; fildes", "call    fstatat", "test    eax, eax", "jz      short loc_12BBE"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~ecx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [2, 0, 8, 0, 2, 9, 0, 2, 5, 5, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "mov     rdx, [rbp+dest_dirname]", "mov     rcx, rdx", "lea     rdx, off_1B514; format", "mov     esi, eax; errnum", "mov     edi, 1; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~eax,<TAG>", "mov~rdx,[rbp+0]", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,eax", "mov~edi,0", "mov~eax,0", "call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [16, 7, 26, 1, 17, 23, 1, 116, 0.07402, 2, 1], "succs": [[14, 6], [0, 13], [10, 11], [2, 11], [8, 9], [9, 4], [14], [13], [7], [7], [1], [1], [], [16, 12], [5, 15], [5], []], "fname": "same_nameat", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 1, 18, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+a], rdi", "mov     [rbp+b], rsi", "mov     rax, [rbp+a]", "mov     [rbp+dea], rax", "mov     rax, [rbp+b]", "mov     [rbp+deb], rax", "mov     rax, [rbp+deb]", "mov     rdx, [rax]", "mov     rax, [rbp+dea]", "mov     rax, [rax]", "mov     rsi, rdx; s2", "mov     rdi, rax; s1", "call    _strcmp", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 18, 0.0, 0, 1], "succs": [[]], "fname": "direntry_cmp_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.08333333333333333, ["mov     eax, 0FFFFFFFFh"], ["mov~eax,0"]], [0, 0, 3, 0, 0, 14, 0, 0, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+a], rdi", "mov     [rbp+b], rsi", "mov     rax, [rbp+a]", "mov     [rbp+dea], rax", "mov     rax, [rbp+b]", "mov     [rbp+deb], rax", "mov     rax, [rbp+dea]", "mov     rdx, [rax+8]", "mov     rax, [rbp+deb]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jb      short loc_12CB0"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jb~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 1, 0, 0, 8, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+dea]", "mov     rdx, [rax+8]", "mov     rax, [rbp+deb]", "mov     rax, [rax+8]", "cmp     rdx, rax", "setnbe  al", "movzx   eax, al", "jmp     short loc_12CB5"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "setnbe~al", "movzx~eax,al", "jmp~FOO"]]], "func_feature": [0, 0, 1, 0, 4, 4, 0, 25, 0.04167, 0, 0], "succs": [[2], [0, 3], [], [2]], "fname": "direntry_cmp_inode", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 32, 0, 1, 11, 0, 1, 0, 0, 0.0, ["mov     rax, [rbp+entries_allocated]", "mov     [rbp+n], rax", "lea     rcx, [rbp+n]", "mov     rax, [rbp+entries]", "mov     edx, 10h; s", "mov     rsi, rcx; pn", "mov     rdi, rax; p", "call    x2nrealloc", "mov     [rbp+entries], rax", "mov     rax, [rbp+n]", "mov     [rbp+entries_allocated], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 32, 0, 0, 3, 0, 1, 6, 7, 0.04214015151515152, ["mov     rax, [rbp+entries_allocated]", "cmp     rax, [rbp+entries_used]", "jnz     short loc_12E05"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 4, 0, 1, 7, 0, 1, 5, 3, 0.0, ["mov     rax, [rbp+used]", "lea     rdx, [rax+1]", "mov     rax, [rbp+name_space]", "mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "mov     [rbp+name_space], rax"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [0, 0, 5, 0, 0, 3, 0, 1, 4, 3, 0.038825757575757576, ["mov     rax, [rbp+used]", "cmp     rax, [rbp+allocated]", "jnz     short loc_1300B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [1, 0, 3, 0, 3, 12, 0, 4, 3, 2, 0.048295454545454544, ["mov     rax, [rbp+entries]", "mov     rdi, rax; ptr", "call    free", "mov     rax, [rbp+name_space]", "mov     rdi, rax; ptr", "call    free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+readdir_errno]", "mov     [rdx], eax", "mov     eax, 0", "jmp     loc_1301D"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [1, 0, 14, 0, 1, 6, 0, 2, 2, 3, 0.22253787878787878, ["nop", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+readdir_errno], eax", "cmp     [rbp+readdir_errno], 0", "jz      short loc_12F10"], ["nop", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 32, 1, 0, 5, 0, 1, 3, 7, 0.02840909090909091, ["mov     rax, [rbp+entry]", "add     rax, 1", "movzx   eax, byte ptr [rax]", "cmp     al, 2Eh ; '.'", "jz      short loc_12D96"], ["mov~rax,[rbp+0]", "add~rax,0", "movzx~eax,<TAG>", "cmp~al,0", "jz~FOO"]], [2, 0, 32, 1, 0, 7, 0, 1, 2, 7, 0.13541666666666666, ["mov     rax, [rbp+dp]", "add     rax, 13h", "mov     [rbp+entry], rax", "mov     rax, [rbp+entry]", "movzx   eax, byte ptr [rax]", "cmp     al, 2Eh ; '.'", "jnz     short loc_12D9D"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [1, 0, 32, 0, 0, 2, 0, 1, 4, 6, 0.013731060606060606, ["mov     eax, 1", "jmp     short loc_12DA2"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 3, 4, 0.1534090909090909, ["cmp     [rbp+cmp], 0", "jz      loc_12FE6"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 32, 0, 1, 9, 0, 1, 8, 7, 0.027462121212121212, ["lea     rcx, [rbp+n]", "mov     rax, [rbp+name_space]", "mov     edx, 1; s", "mov     rsi, rcx; pn", "mov     rdi, rax; p", "call    x2nrealloc", "mov     [rbp+name_space], rax", "mov     rax, [rbp+n]", "mov     [rbp+allocated], rax"], ["lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 32, 1, 0, 7, 0, 0, 7, 8, 0.029356060606060608, ["mov     rdx, [rbp+used]", "mov     rax, [rbp+entry_size]", "add     rax, rdx", "mov     [rbp+n], rax", "mov     rax, [rbp+n]", "cmp     [rbp+used], rax", "jbe     short loc_12E77"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [1, 0, 3, 1, 0, 5, 0, 0, 5, 2, 0.02556818181818182, ["mov     rdx, [rbp+name_space]", "mov     rax, [rbp+used]", "add     rax, rdx", "mov     byte ptr [rax], 0", "mov     rax, [rbp+name_space]"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~<TAG>,0", "mov~rax,[rbp+0]"]], [0, 0, 4, 0, 1, 4, 0, 2, 7, 3, 0.01893939393939394, ["mov     rax, [rbp+entries]", "mov     rdi, rax; ptr", "call    free", "jmp     short loc_1300B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 0, 32, 0, 0, 2, 0, 1, 4, 6, 0.013731060606060606, ["mov     eax, 2", "jmp     short loc_12DA2"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 32, 0, 0, 1, 0, 0, 3, 6, 0.10606060606060606, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 9, 0, 0, 2, 0, 1, 4, 6, 0.08996212121212122, ["cmp     [rbp+entries_used], 0", "jz      short loc_12F3E"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 32, 2, 1, 8, 0, 2, 5, 8, 0.11174242424242424, ["mov     rax, [rbp+dp]", "add     rax, 13h", "mov     rdi, rax; s", "call    _strlen", "add     rax, 1", "mov     [rbp+entry_size], rax", "cmp     [rbp+cmp], 0", "jz      short loc_12E4B"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 2, 1, 0.05681818181818182, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_13031"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.002840909090909091, ["mov     eax, 0", "jmp     loc_1301D"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 32, 1, 0, 5, 1, 1, 4, 5, 0.20643939393939395, ["mov     rdx, [rbp+entry]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "test    al, al", "jz      short loc_12D40"], ["mov~rdx,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "test~al,al", "jz~FOO"]], [8, 0, 33, 1, 0, 22, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 98h", "mov     [rbp+dirp], rdi", "mov     [rbp+option], esi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     [rbp+name_space], 0", "mov     [rbp+allocated], 0", "mov     [rbp+entries], 0", "mov     [rbp+entries_allocated], 0", "mov     [rbp+entries_used], 0", "mov     [rbp+used], 0", "mov     eax, [rbp+option]", "lea     rdx, ds:0[rax*8]", "lea     rax, comparison_function_table", "mov     rax, [rdx+rax]", "mov     [rbp+cmp], rax", "cmp     [rbp+dirp], 0", "jnz     short loc_12D40"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 32, 0, 1, 8, 0, 1, 7, 6, 0.09517045454545454, ["mov     rdx, [rbp+name_space]", "mov     rax, [rbp+used]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+entry_size]; n", "mov     rax, [rbp+entry]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO"]], [0, 0, 32, 1, 0, 4, 0, 0, 6, 7, 0.06865530303030304, ["mov     rax, [rbp+allocated]", "sub     rax, [rbp+used]", "cmp     [rbp+entry_size], rax", "jb      short loc_12E9B"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [4, 0, 7, 9, 2, 29, 0, 2, 7, 5, 0.0, ["mov     rdx, [rbp+name_space]", "mov     rax, [rbp+used]", "add     rax, rdx", "mov     [rbp+dest], rax", "mov     rax, [rbp+i]", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+entries]", "add     rax, rdx", "mov     rdx, [rax]", "mov     rax, [rbp+dest]", "mov     rsi, rdx; src", "mov     rdi, rax; dest", "call    _stpcpy", "mov     rdx, rax", "mov     rax, [rbp+dest]", "sub     rdx, rax", "mov     rax, rdx", "add     rax, 1", "add     [rbp+used], rax", "mov     rax, [rbp+i]", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+entries]", "add     rax, rdx", "mov     rax, [rax]", "mov     rdi, rax; ptr", "call    free", "add     [rbp+i], 1"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "add~rax,0", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "add~[rbp+0],0"]], [0, 0, 7, 0, 0, 3, 0, 0, 6, 4, 0.05776515151515152, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+entries_used]", "jb      short loc_12F64"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [1, 0, 8, 0, 1, 7, 0, 1, 5, 6, 0.0, ["mov     rdx, [rbp+cmp]", "mov     rsi, [rbp+entries_used]; nmemb", "mov     rax, [rbp+entries]", "mov     rcx, rdx; compar", "mov     edx, 10h; size", "mov     rdi, rax; base", "call    _qsort"], ["mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO"]], [1, 0, 0, 1, 0, 4, 0, 0, 3, 0, 0.0, ["add     rsp, 98h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 32, 1, 0, 3, 0, 1, 8, 5, 0.20928030303030304, ["mov     rax, [rbp+entry_size]", "add     [rbp+used], rax", "jmp     loc_12D40"], ["mov~rax,[rbp+0]", "add~[rbp+0],rax", "jmp~FOO"]], [3, 0, 32, 4, 1, 19, 0, 2, 7, 6, 0.07054924242424243, ["mov     rax, [rbp+entries_used]", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+entries]", "lea     rbx, [rdx+rax]", "mov     rax, [rbp+entry]", "mov     rdi, rax; string", "call    xstrdup", "mov     [rbx], rax", "mov     rax, [rbp+entries_used]", "shl     rax, 4", "mov     rdx, rax", "mov     rax, [rbp+entries]", "add     rdx, rax", "mov     rax, [rbp+dp]", "mov     rax, [rax]", "mov     [rdx+8], rax", "add     [rbp+entries_used], 1", "jmp     short loc_12EBA"], ["mov~rax,[rbp+0]", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rbx,<TAG>", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shl~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rdx+0],rax", "add~[rbp+0],0", "jmp~FOO"]], [3, 0, 7, 1, 1, 8, 0, 2, 5, 5, 0.06723484848484848, ["mov     rax, [rbp+used]", "add     rax, 1", "mov     rdi, rax; n", "call    xmalloc", "mov     [rbp+name_space], rax", "mov     [rbp+used], 0", "mov     [rbp+i], 0", "jmp     short loc_12FCE"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 32, 0, 2, 8, 0, 3, 1, 4, 0.35984848484848486, ["call    ___errno_location", "mov     dword ptr [rax], 0", "mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _readdir", "mov     [rbp+dp], rax", "cmp     [rbp+dp], 0", "jz      loc_12EC7"], ["call~FOO", "mov~<TAG>,0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 8, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]]], "func_feature": [19, 3, 39, 1, 34, 46, 1, 223, 0.06765, 2, 25], "succs": [[30], [0, 30], [12], [2, 12], [18], [9, 4], [8, 14], [6, 15], [21], [16, 3], [23], [33, 10], [18], [12], [21], [21], [27, 31], [24, 1], [28, 20], [18], [], [32, 17], [32, 19], [29], [11, 23], [26], [25, 13], [31], [], [32], [29], [26], [5, 7], []], "fname": "streamsavedir", "n_num": 34}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.05, ["mov     eax, 0", "jmp     short locret_130BB"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 5, 1, 1, 11, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+dir], rdi", "mov     [rbp+option], esi", "mov     rax, [rbp+dir]", "mov     rdi, rax; name", "call    opendir_safer", "mov     [rbp+dirp], rax", "cmp     [rbp+dirp], 0", "jnz     short loc_13068"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 2, 11, 1, 3, 1, 2, 0.1, ["mov     edx, [rbp+option]", "mov     rax, [rbp+dirp]", "mov     esi, edx; option", "mov     rdi, rax; dirp", "call    streamsavedir", "mov     [rbp+name_space], rax", "mov     rax, [rbp+dirp]", "mov     rdi, rax; dirp", "call    _closedir", "test    eax, eax", "jz      short loc_130B7"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 1, 0, 3, 12, 0, 4, 2, 1, 0.025, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+closedir_errno], eax", "mov     rax, [rbp+name_space]", "mov     rdi, rax; ptr", "call    free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+closedir_errno]", "mov     [rdx], eax", "mov     eax, 0", "jmp     short locret_130BB"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.025, ["mov     rax, [rbp+name_space]"], ["mov~rax,[rbp+0]"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [6, 1, 10, 0, 6, 7, 1, 39, 0.03333, 0, 1], "succs": [[5], [0, 2], [3, 4], [5], [5], []], "fname": "savedir", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "getcon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+con], rdi", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 6, 0.0, 0, 0], "succs": [[]], "fname": "freecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "getfscreatecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 3, 9, 0.0, 0, 1], "succs": [[]], "fname": "setfscreatecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 1, 0, 1, 1, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+file], rdi", "mov     [rbp+m], esi", "mov     [rbp+con], rdx", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 11, 0.0, 0, 1], "succs": [[]], "fname": "matchpathcon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "getfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 10, 0.0, 0, 1], "succs": [[]], "fname": "lgetfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fd], edi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "fgetfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "setfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "lsetfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fd], edi", "mov     [rbp+con], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "fsetfilecon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "security_check_context", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "security_check_context_raw", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+con], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "setexeccon", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 1, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+scon], rdi", "mov     [rbp+tcon], rsi", "mov     eax, edx", "mov     [rbp+newcon], rcx", "mov     [rbp+tclass], ax", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~eax,edx", "mov~[rbp+0],rcx", "mov~[rbp+0],ax", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "security_compute_create", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+name], rdi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 9, 0.0, 0, 1], "succs": [[]], "fname": "string_to_security_class", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 0, 0, 1, 1, 10, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+path], rdi", "mov     [rbp+prefix], rsi", "call    ___errno_location", "mov     dword ptr [rax], 5Fh ; '_'", "mov     eax, 0FFFFFFFFh", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 10, 0.0, 0, 1], "succs": [[]], "fname": "matchpathcon_init_prefix", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rax, [rax+50h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 7, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_atime_ns", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rax, [rax+70h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 7, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_ctime_ns", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rax, [rax+60h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 5, 7, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_mtime_ns", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     eax, 0", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 6, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_birthtime_ns", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rdx, [rax+50h]", "mov     rax, [rax+48h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 6, 8, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_atime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rdx, [rax+70h]", "mov     rax, [rax+68h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 8, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_ctime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     rax, [rbp+st]", "mov     rdx, [rax+60h]", "mov     rax, [rax+58h]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 6, 8, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_mtime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+st], rdi", "mov     [rbp+t.tv_sec], 0FFFFFFFFFFFFFFFFh", "mov     [rbp+t.tv_nsec], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+t.tv_sec]", "mov     rdx, [rbp+t.tv_nsec]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 9, 0.0, 0, 0], "succs": [[]], "fname": "get_stat_birthtime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+result], edi", "mov     [rbp+st], rsi", "mov     eax, [rbp+result]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~eax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 7, 0.0, 0, 0], "succs": [[]], "fname": "stat_time_normalize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+name], rsi", "mov     [rbp+st], rdx", "mov     rdx, [rbp+st]; stat_buf", "mov     rsi, [rbp+name]; filename", "mov     eax, [rbp+fd]", "mov     ecx, 0; flag", "mov     edi, eax; fildes", "call    fstatat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,0", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "statat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 2, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+name], rsi", "mov     [rbp+st], rdx", "mov     rdx, [rbp+st]; stat_buf", "mov     rsi, [rbp+name]; filename", "mov     eax, [rbp+fd]", "mov     ecx, 100h; flag", "mov     edi, eax; fildes", "call    fstatat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,<STR>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 3, 14, 0.0, 0, 1], "succs": [[]], "fname": "lstatat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], rdi", "mov     [rbp+len], rsi", "mov     rax, [rbp+s]", "lea     rsi, accept; accept", "mov     rdi, rax; s", "call    _strspn", "cmp     [rbp+len], rax", "setbe   al", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],rax", "setbe~al", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 13, 0.0, 1, 1], "succs": [[]], "fname": "check_x_suffix", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 1, 0, 1, 4, 0, 2, 1, 0, 0.007352941176470588, ["call    ___errno_location", "mov     dword ptr [rax], 16h", "mov     eax, 0FFFFFFFFh", "jmp     locret_135D9"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 3, 0, 0.003676470588235294, ["mov     eax, 0FFFFFFFFh", "jmp     locret_135D9"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 1, 0, 2, 7, 0, 3, 5, 0, 0.011029411764705881, ["mov     rax, [rbp+rand_src]", "mov     rdi, rax; s", "call    randint_all_free", "call    ___errno_location", "mov     dword ptr [rax], 11h", "mov     eax, 0FFFFFFFFh", "jmp     short locret_135D9"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 3, 11, 0, 3, 9, 0, 0.025735294117647058, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     rax, [rbp+rand_src]", "mov     rdi, rax; s", "call    randint_all_free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     eax, [rbp+fd]"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,[rbp+0]"]], [0, 0, 12, 0, 0, 3, 0, 0, 6, 0, 0.2389705882352941, ["mov     rax, [rbp+i]", "cmp     rax, [rbp+x_suffix_len]", "jb      short loc_13509"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 5, 0, 0.1948529411764706, ["mov     [rbp+i], 0", "jmp     short loc_1353A"], ["mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 12, 2, 1, 12, 0, 1, 7, 0, 0.0, ["mov     rax, [rbp+rand_src]", "mov     esi, 3Dh ; '='; genmax", "mov     rdi, rax; s", "call    randint_genmax", "mov     rcx, rax", "mov     rdx, [rbp+XXXXXX]", "mov     rax, [rbp+i]", "add     rdx, rax", "lea     rax, letters; \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM\"...", "movzx   eax, byte ptr [rcx+rax]", "mov     [rdx], al", "add     [rbp+i], 1"], ["mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rdx,rax", "lea~rax,<TAG>", "movzx~eax,<TAG>", "mov~<TAG>,al", "add~[rbp+0],0"]], [1, 0, 2, 0, 0, 2, 0, 1, 9, 0, 0.007352941176470588, ["mov     [rbp+fd], 0FFFFFFFFh", "jmp     short done"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 12, 0, 1, 4, 0, 2, 8, 0, 0.11764705882352941, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 11h", "jz      short loc_13585"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 12, 1, 0, 1, 0, 0, 9, 0, 0.07352941176470588, ["add     [rbp+count], 1"], ["add~[rbp+0],0"]], [2, 0, 14, 3, 1, 16, 0, 2, 2, 0, 0.09558823529411764, ["mov     rax, [rbp+len]", "sub     rax, [rbp+x_suffix_len]", "mov     rdx, rax", "mov     eax, [rbp+suffixlen]", "cdqe", "sub     rdx, rax", "mov     rax, [rbp+tmpl]", "add     rax, rdx", "mov     [rbp+XXXXXX], rax", "mov     rax, [rbp+x_suffix_len]", "mov     rsi, rax; bytes_bound", "mov     edi, 0; name", "call    randint_all_new", "mov     [rbp+rand_src], rax", "cmp     [rbp+rand_src], 0", "jnz     short loc_134F3"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~eax,[rbp+0]", "cdqe~", "sub~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 16, 3, 1, 15, 2, 2, 1, 0, 0.051470588235294115, ["mov     rax, [rbp+len]", "sub     rax, [rbp+x_suffix_len]", "mov     rdx, rax", "mov     eax, [rbp+suffixlen]", "cdqe", "sub     rdx, rax", "mov     rax, [rbp+tmpl]", "add     rdx, rax", "mov     rax, [rbp+x_suffix_len]", "mov     rsi, rax; len", "mov     rdi, rdx; s", "call    check_x_suffix", "xor     eax, 1", "test    al, al", "jz      short loc_134AF"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~eax,[rbp+0]", "cdqe~", "sub~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [3, 0, 17, 2, 2, 23, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+tmpl], rdi", "mov     [rbp+suffixlen], esi", "mov     [rbp+args], rdx", "mov     [rbp+tryfunc], rcx", "mov     [rbp+x_suffix_len], r8", "mov     [rbp+fd], 0FFFFFFFFh", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+save_errno], eax", "mov     [rbp+attempts], 3A2F8h", "mov     rax, [rbp+tmpl]", "mov     rdi, rax; s", "call    _strlen", "mov     [rbp+len], rax", "mov     eax, [rbp+suffixlen]", "movsxd  rdx, eax", "mov     rax, [rbp+x_suffix_len]", "add     rax, rdx", "cmp     [rbp+len], rax", "jb      short loc_1349A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],0", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "mov~rax,[rbp+0]", "add~rax,rdx", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 12, 0, 0, 3, 0, 0, 4, 0, 0.2426470588235294, ["mov     eax, [rbp+count]", "cmp     eax, [rbp+attempts]", "jb      loc_134FF"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jb~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 3, 0, 0.1213235294117647, ["mov     [rbp+count], 0", "jmp     loc_13589"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 2, 0, 1, 5, 0, 2, 8, 0, 0.051470588235294115, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+save_errno]", "mov     [rdx], eax", "jmp     short done"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "jmp~FOO"]], [1, 0, 12, 0, 1, 9, 0, 2, 7, 0, 0.20588235294117646, ["mov     rcx, [rbp+args]", "mov     rdx, [rbp+tmpl]", "mov     rax, [rbp+tryfunc]", "mov     rsi, rcx", "mov     rdi, rdx", "call    rax", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "js      short loc_13570"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rdx", "call~rax", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]]], "func_feature": [14, 2, 25, 0, 18, 24, 4, 123, 0.08047, 1, 11], "succs": [[], [0], [0], [0], [0], [17, 7], [5], [5], [4], [8, 10], [14], [2, 15], [1, 11], [1, 12], [3, 6], [14], [4], [16, 9]], "fname": "try_tempname_len", "n_num": 18}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 2, 0, 1, 1, 20, 2, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+tmpl], rdi", "mov     [rbp+flags], rsi", "mov     rax, [rbp+flags]", "mov     [rbp+openflags], rax", "mov     rax, [rbp+openflags]", "mov     eax, [rax]", "and     al, 3Ch", "or      al, 0C2h", "mov     ecx, eax", "mov     rax, [rbp+tmpl]", "mov     edx, 180h", "mov     esi, ecx; oflag", "mov     rdi, rax; file", "mov     eax, 0", "call    _open", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~al,0", "or~al,0", "mov~ecx,eax", "mov~rax,[rbp+0]", "mov~edx,<STR>", "mov~esi,ecx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 2, 1, 0, 1, 0, 0, 20, 0.0, 0, 1], "succs": [[]], "fname": "try_file", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+tmpl], rdi", "mov     [rbp+flags], rsi", "mov     rax, [rbp+tmpl]", "mov     esi, 1C0h; mode", "mov     rdi, rax; path", "call    _mkdir", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 11, 0.0, 0, 1], "succs": [[]], "fname": "try_dir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 5, 0, 1, 4, 0, 2, 0, 0, 0.26785714285714285, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 2", "jnz     short loc_136AB"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 7, 0, 1, 4, 0, 2, 1, 4, 0.05357142857142857, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 4Bh ; 'K'", "jnz     short loc_13698"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 6, 0, 1, 2, 0, 1, 1, 4, 0.05357142857142857, ["call    ___errno_location", "mov     dword ptr [rax], 11h"], ["call~FOO", "mov~<TAG>,0"]], [1, 0, 3, 0, 0, 1, 0, 0, 3, 2, 0.10714285714285714, ["mov     eax, 0FFFFFFFFh"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.21428571428571427, ["mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_136C4"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.10714285714285714, ["mov     eax, 0", "jmp     short loc_136B0"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 8, 1, 1, 15, 2, 2, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0B0h", "mov     [rbp+tmpl], rdi", "mov     [rbp+flags], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rdx, [rbp+st]", "mov     rax, [rbp+tmpl]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_1368D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [5, 3, 10, 1, 9, 11, 0, 34, 0.08929, 1, 1], "succs": [[3, 6], [0, 2], [0], [5], [], [8, 4], [5], [1, 2], []], "fname": "try_nocreate", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 7, 1, 0, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+tmpl], rdi", "mov     [rbp+suffixlen], esi", "mov     [rbp+flags], edx", "mov     [rbp+kind], ecx", "mov     [rbp+x_suffix_len], r8", "mov     eax, [rbp+kind]", "cmp     eax, 1", "jz      short loc_136FD"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~[rbp+0],ecx", "mov~[rbp+0],r8", "mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 1, 0, 0, 3, 0, 1, 0, 1, 0.023809523809523808, ["lea     rax, try_dir", "mov     [rbp+tryfunc], rax", "jmp     short loc_13736"], ["lea~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 0, 2, 0.09523809523809523, ["cmp     eax, 2", "jz      short loc_1370A"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 3, 0, 0, 2, 1, 1, 0, 2, 0.09523809523809523, ["test    eax, eax", "jnz     short loc_13717"], ["test~eax,eax", "jnz~FOO"]], [1, 0, 0, 0, 1, 5, 0, 1, 0, -1, 0.0, ["lea     rcx, __PRETTY_FUNCTION___4844; \"gen_tempname_len\"", "mov     edx, 147h; line", "lea     rsi, aLibTempnameC; \"lib/tempname.c\"", "lea     rdi, aInvalidKindInG; \"! \\\"invalid KIND in __gen_tempname\\\"\"", "call    ___assert_fail"], ["lea~rcx,<TAG>", "mov~edx,0", "lea~rsi,<TAG>", "lea~rdi,<TAG>", "call~FOO"]], [0, 0, 1, 0, 0, 3, 0, 1, 0, 1, 0.023809523809523808, ["lea     rax, try_nocreate", "mov     [rbp+tryfunc], rax", "jmp     short loc_13736"], ["lea~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 1, 0, 0, 3, 0, 1, 0, 1, 0.023809523809523808, ["lea     rax, try_file", "mov     [rbp+tryfunc], rax", "jmp     short loc_13736"], ["lea~rax,<TAG>", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 1, 10, 0, 1, 0, 0, 0.0, ["mov     rdi, [rbp+x_suffix_len]", "mov     rcx, [rbp+tryfunc]; tryfunc", "lea     rdx, [rbp+flags]; args", "mov     esi, [rbp+suffixlen]; suffixlen", "mov     rax, [rbp+tmpl]", "mov     r8, rdi; x_suffix_len", "mov     rdi, rax; tmpl", "call    try_tempname_len", "leave", "retn"], ["mov~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "lea~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [2, 1, 8, 0, 8, 9, 1, 39, 0.03274, 6, 1], "succs": [[1, 2], [7], [3, 5], [4, 6], [], [7], [7], []], "fname": "gen_tempname_len", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+tmpl], rdi", "mov     [rbp+suffixlen], esi", "mov     [rbp+flags], edx", "mov     [rbp+kind], ecx", "mov     ecx, [rbp+kind]; kind", "mov     edx, [rbp+flags]; flags", "mov     esi, [rbp+suffixlen]; suffixlen", "mov     rax, [rbp+tmpl]", "mov     r8d, 6; x_suffix_len", "mov     rdi, rax; tmpl", "call    gen_tempname_len", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~[rbp+0],ecx", "mov~ecx,[rbp+0]", "mov~edx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 16, 0.0, 0, 1], "succs": [[]], "fname": "gen_tempname", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+tmpl], rdi", "mov     [rbp+suffixlen], esi", "mov     [rbp+args], rdx", "mov     [rbp+tryfunc], rcx", "mov     rcx, [rbp+tryfunc]; tryfunc", "mov     rdx, [rbp+args]; args", "mov     esi, [rbp+suffixlen]; suffixlen", "mov     rax, [rbp+tmpl]", "mov     r8d, 6; x_suffix_len", "mov     rdi, rax; tmpl", "call    try_tempname_len", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~esi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,0", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 16, 0.0, 0, 1], "succs": [[]], "fname": "try_tempname", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0.16666666666666666, ["cmp     [rbp+fd], 2", "jg      short loc_13809"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 1, 3, 1, 0, 6, 0, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "cmp     [rbp+fd], 0", "js      short loc_13809"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 1, 0, 4, 16, 0, 4, 2, 1, 0.0, ["mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    dup_safer", "mov     [rbp+f], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     eax, [rbp+f]", "mov     [rbp+fd], eax"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["mov     eax, [rbp+fd]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [4, 0, 6, 0, 4, 5, 2, 27, 0.04167, 0, 1], "succs": [[2, 3], [0, 3], [3], []], "fname": "fd_safer", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 13, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+table_size], rsi", "mov     rax, [rbp+x]", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     rax, [rax]", "mov     edx, 0", "div     [rbp+table_size]", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "dev_info_hash", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+y], rsi", "mov     rax, [rbp+x]", "mov     [rbp+a], rax", "mov     rax, [rbp+y]", "mov     [rbp+b], rax", "mov     rax, [rbp+a]", "mov     rdx, [rax]", "mov     rax, [rbp+b]", "mov     rax, [rax]", "cmp     rdx, rax", "setz    al", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "cmp~rdx,rax", "setz~al", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 16, 0.0, 0, 0], "succs": [[]], "fname": "dev_info_compare", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 1, 17, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+dst_name], rdi", "mov     [rbp+dst_stat], rsi", "mov     [rbp+src_stat], rdx", "mov     [rbp+options], ecx", "mov     esi, [rbp+options]", "mov     rcx, [rbp+src_stat]; src_stat", "mov     rdx, [rbp+dst_stat]; dst_stat", "mov     rax, [rbp+dst_name]", "mov     r8d, esi; options", "mov     rsi, rax; dst_name", "mov     edi, 0FFFFFF9Ch; dfd", "call    utimecmpat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],ecx", "mov~esi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8d,esi", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 17, 0.0, 0, 1], "succs": [[]], "fname": "utimecmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 59, 0, 0, 3, 1, 1, 0, 0, 0.0476861167002012, ["mov     rax, cs:new_dst_res_4583", "test    rax, rax", "jnz     short loc_13A38"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [0, 0, 61, 0, 0, 3, 1, 1, 5, 9, 0.08148893360160965, ["mov     rax, cs:ht_4582", "test    rax, rax", "jz      loc_13A97"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 44, 0, 0, 4, 0, 1, 12, 6, 0.05352112676056338, ["mov     rax, [rbp+dst_res]", "mov     eax, [rax+8]", "cmp     [rbp+res], eax", "jge     loc_13DCD"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "cmp~[rbp+0],eax", "jge~FOO"]], [0, 0, 44, 3, 0, 15, 0, 1, 11, 7, 0.03702213279678068, ["mov     eax, [rbp+SR10]", "mov     [rbp+res], eax", "mov     eax, [rbp+a]", "cdq", "idiv    [rbp+SR10]", "mov     [rbp+a], eax", "mov     eax, [rbp+c]", "cdq", "idiv    [rbp+SR10]", "mov     [rbp+c], eax", "mov     eax, [rbp+m]", "cdq", "idiv    [rbp+SR10]", "mov     [rbp+m], eax", "jmp     loc_13D30"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~[rbp+0],eax", "jmp~FOO"]], [10, 0, 44, 9, 0, 36, 0, 0, 15, 7, 0.004426559356136821, ["mov     edx, [rbp+res]", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "mov     [rbp+res], eax", "mov     ecx, [rbp+a]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "mov     [rbp+a], eax", "mov     ecx, [rbp+c]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "mov     [rbp+c], eax", "mov     ecx, [rbp+m]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "mov     [rbp+m], eax"], ["mov~edx,[rbp+0]", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "mov~[rbp+0],eax", "mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "mov~[rbp+0],eax", "mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "mov~[rbp+0],eax", "mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "mov~[rbp+0],eax"]], [1, 0, 67, 1, 0, 4, 0, 1, 2, 3, 0.0375251509054326, ["mov     rax, [rbp+src_s]", "sub     rax, 2", "cmp     [rbp+dst_s], rax", "jg      short loc_1398E"], ["mov~rax,[rbp+0]", "sub~rax,0", "cmp~[rbp+0],rax", "jg~FOO"]], [1, 0, 70, 0, 0, 4, 0, 1, 1, 4, 0.012072434607645875, ["mov     [rbp+dst_res], 0", "mov     rax, [rbp+dst_s]", "cmp     rax, [rbp+src_s]", "jnz     short loc_13970"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 69, 0, 0, 3, 0, 1, 2, 3, 0.000704225352112676, ["mov     eax, [rbp+dst_ns]", "cmp     eax, [rbp+src_ns]", "jnz     short loc_13970"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jnz~FOO"]], [0, 0, 49, 0, 0, 3, 0, 1, 8, 6, 0.07263581488933601, ["mov     rax, cs:new_dst_res_4583", "cmp     [rbp+dst_res], rax", "jnz     loc_13B0C"], ["mov~rax,<TAG>", "cmp~[rbp+0],rax", "jnz~FOO"]], [1, 0, 55, 0, 1, 12, 0, 2, 7, 7, 0.06841046277665996, ["mov     rax, cs:new_dst_res_4583", "mov     rdx, [rbp+dst_stat]", "mov     rdx, [rdx]", "mov     [rax], rdx", "mov     rdx, cs:new_dst_res_4583", "mov     rax, cs:ht_4582", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_insert", "mov     [rbp+dst_res], rax", "cmp     [rbp+dst_res], 0", "jz      short loc_13A9D"], ["mov~rax,<TAG>", "mov~rdx,[rbp+0]", "mov~rdx,<TAG>", "mov~<TAG>,rdx", "mov~rdx,<TAG>", "mov~rax,<TAG>", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 19, 3, 0, 9, 0, 1, 23, 7, 0.019517102615694164, ["mov     edx, [rbp+res]", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "mov     [rbp+res], eax", "mov     eax, [rbp+res]", "cmp     eax, [rbp+old_res]", "jz      short loc_140AE"], ["mov~edx,[rbp+0]", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jz~FOO"]], [1, 0, 19, 0, 0, 2, 0, 1, 22, 7, 0.037826961770623745, ["cmp     [rbp+res], 3B9ACA00h", "jnz     short loc_14035"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 16, 3, 0.002414486921529175, ["mov     eax, 0FFFFFFFFh", "jmp     loc_140A9"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 30, 0, 0, 3, 0, 1, 15, 4, 0.1323943661971831, ["mov     rax, [rbp+dst_s]", "cmp     rax, [rbp+s]", "jl      short loc_13E81"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jl~FOO"]], [0, 0, 28, 2, 0, 7, 0, 1, 17, 4, 0.0006036217303822937, ["mov     eax, [rbp+src_ns]", "cdq", "idiv    [rbp+res]", "mov     eax, [rbp+src_ns]", "sub     eax, edx", "cmp     [rbp+dst_ns], eax", "jge     short loc_13E8B"], ["mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~eax,[rbp+0]", "sub~eax,edx", "cmp~[rbp+0],eax", "jge~FOO"]], [2, 0, 48, 0, 0, 6, 0, 0, 9, 6, 0.0, ["lea     rax, [rbp+tmp_dst_res]", "mov     [rbp+dst_res], rax", "mov     rax, [rbp+dst_res]", "mov     dword ptr [rax+8], 77359400h", "mov     rax, [rbp+dst_res]", "mov     byte ptr [rax+0Ch], 0"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [1, 0, 49, 0, 0, 2, 0, 1, 8, 6, 0.09295774647887324, ["cmp     [rbp+dst_res], 0", "jnz     short loc_13B0C"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.0009054325955734407, ["mov     eax, 0FFFFFFFFh", "jmp     loc_1414F"], ["mov~eax,0", "jmp~FOO"]], [3, 0, 46, 6, 2, 54, 7, 3, 10, 7, 0.15492957746478872, ["mov     rax, [rbp+dst_stat]", "mov     rax, [rax+48h]", "mov     [rbp+dst_a_s], rax", "mov     rax, [rbp+dst_stat]", "mov     rax, [rax+68h]", "mov     [rbp+dst_c_s], rax", "mov     rax, [rbp+dst_s]", "mov     [rbp+dst_m_s], rax", "mov     rax, [rbp+dst_stat]", "mov     rdi, rax; st", "call    get_stat_atime_ns", "mov     [rbp+dst_a_ns], eax", "mov     rax, [rbp+dst_stat]", "mov     rdi, rax; st", "call    get_stat_ctime_ns", "mov     [rbp+dst_c_ns], eax", "mov     eax, [rbp+dst_ns]", "mov     [rbp+dst_m_ns], eax", "mov     rax, [rbp+dst_a_s]", "or      rax, [rbp+dst_c_s]", "or      rax, [rbp+dst_m_s]", "and     eax, 1", "test    rax, rax", "setnz   al", "mov     [rbp+odd_second], al", "mov     eax, [rbp+dst_a_ns]", "mov     [rbp+a], eax", "mov     eax, [rbp+dst_c_ns]", "mov     [rbp+c], eax", "mov     eax, [rbp+dst_m_ns]", "mov     [rbp+m], eax", "mov     [rbp+SR10], 1", "mov     edx, [rbp+SR10]", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "mov     [rbp+SR10], eax", "mov     eax, [rbp+a]", "cdq", "idiv    [rbp+SR10]", "mov     ecx, edx", "mov     eax, [rbp+c]", "cdq", "idiv    [rbp+SR10]", "mov     eax, edx", "or      ecx, eax", "mov     eax, [rbp+m]", "cdq", "idiv    [rbp+SR10]", "mov     eax, edx", "or      eax, ecx", "test    eax, eax", "jz      short loc_13C45"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "or~rax,[rbp+0]", "or~rax,[rbp+0]", "and~eax,0", "test~rax,rax", "setnz~al", "mov~[rbp+0],al", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~[rbp+0],0", "mov~edx,[rbp+0]", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~ecx,edx", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~eax,edx", "or~ecx,eax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~eax,edx", "or~eax,ecx", "test~eax,eax", "jz~FOO"]], [4, 1, 26, 3, 1, 30, 2, 2, 17, 4, 0.1158953722334004, ["mov     rax, [rbp+dst_a_s]", "mov     [rbp+timespec.tv_sec], rax", "mov     eax, [rbp+dst_a_ns]", "cdqe", "mov     [rbp+timespec.tv_nsec], rax", "cmp     [rbp+res], 77359400h", "setz    al", "movzx   eax, al", "or      rax, [rbp+dst_m_s]", "mov     [rbp+timespec.tv_sec+10h], rax", "mov     ecx, [rbp+res]", "mov     edx, 38E38E39h", "mov     eax, ecx", "imul    edx", "sar     edx, 1", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, [rbp+dst_m_ns]", "add     eax, edx", "cdqe", "mov     [rbp+timespec.tv_nsec+10h], rax", "lea     rdx, [rbp+timespec]; times", "mov     rsi, [rbp+dst_name]; path", "mov     eax, [rbp+dfd]", "mov     ecx, 100h; flags", "mov     edi, eax; fd", "call    _utimensat", "test    eax, eax", "jz      short loc_13F1D"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "or~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,[rbp+0]", "add~eax,edx", "cdqe~", "mov~[rbp+0],rax", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,<STR>", "mov~edi,eax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 29, 0, 0, 3, 0, 1, 16, 5, 0.12193158953722334, ["mov     rax, [rbp+dst_s]", "cmp     rax, [rbp+s]", "jnz     short loc_13E8B"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 4, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.027766599597585512, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_14163"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 48, 0, 0, 2, 0, 1, 9, 6, 0.0, ["mov     cs:new_dst_res_4583, 0", "jmp     short loc_13B0C"], ["mov~<TAG>,0", "jmp~FOO"]], [0, 0, 52, 0, 0, 2, 0, 1, 6, 8, 0.04285714285714286, ["nop", "jmp     short low_memory"], ["nop", "jmp~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 14, 8, 0.021730382293762576, ["cmp     [rbp+res], 3B9ACA00h", "jnz     short loc_13CB8"], ["cmp~[rbp+0],0", "jnz~FOO"]], [12, 0, 44, 18, 0, 49, 3, 1, 13, 7, 0.031388329979879274, ["mov     esi, [rbp+a]", "mov     edx, 66666667h", "mov     eax, esi", "imul    edx", "sar     edx, 2", "mov     eax, esi", "sar     eax, 1Fh", "mov     ecx, edx", "sub     ecx, eax", "mov     eax, ecx", "shl     eax, 2", "add     eax, ecx", "add     eax, eax", "sub     esi, eax", "mov     ecx, esi", "mov     esi, [rbp+c]", "mov     edx, 66666667h", "mov     eax, esi", "imul    edx", "sar     edx, 2", "mov     eax, esi", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "sub     esi, eax", "mov     edx, esi", "mov     esi, ecx", "or      esi, edx", "mov     ecx, [rbp+m]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "sub     ecx, eax", "mov     edx, ecx", "mov     eax, esi", "or      eax, edx", "test    eax, eax", "jz      loc_13C8F"], ["mov~esi,[rbp+0]", "mov~edx,0", "mov~eax,esi", "imul~,edx", "sar~edx,0", "mov~eax,esi", "sar~eax,0", "mov~ecx,edx", "sub~ecx,eax", "mov~eax,ecx", "shl~eax,0", "add~eax,ecx", "add~eax,eax", "sub~esi,eax", "mov~ecx,esi", "mov~esi,[rbp+0]", "mov~edx,0", "mov~eax,esi", "imul~,edx", "sar~edx,0", "mov~eax,esi", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "sub~esi,eax", "mov~edx,esi", "mov~esi,ecx", "or~esi,edx", "mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "sub~ecx,eax", "mov~edx,ecx", "mov~eax,esi", "or~eax,edx", "test~eax,eax", "jz~FOO"]], [1, 0, 34, 0, 0, 10, 1, 1, 13, 4, 0.15774647887323942, ["cmp     [rbp+res], 77359400h", "setz    al", "movzx   eax, al", "not     eax", "cdqe", "and     rax, [rbp+src_s]", "mov     [rbp+s], rax", "mov     rax, [rbp+src_s]", "cmp     rax, [rbp+dst_s]", "jl      short loc_13E3A"], ["cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "not~eax", "cdqe~", "and~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jl~FOO"]], [1, 0, 35, 0, 0, 5, 0, 1, 12, 5, 0.18370221327967806, ["mov     rax, [rbp+dst_res]", "mov     edx, [rbp+res]", "mov     [rax+8], edx", "cmp     [rbp+res], 1", "jle     loc_140AF"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~[rax+0],edx", "cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 52, 0, 0, 2, 0, 1, 8, 8, 0.006036217303822937, ["nop", "jmp     short low_memory"], ["nop", "jmp~FOO"]], [1, 0, 58, 0, 1, 6, 1, 2, 7, 9, 0.004024144869215292, ["mov     edi, 10h; size", "call    _malloc", "mov     cs:new_dst_res_4583, rax", "mov     rax, cs:new_dst_res_4583", "test    rax, rax", "jz      short loc_13A9A"], ["mov~edi,0", "call~FOO", "mov~<TAG>,rax", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 52, 0, 0, 1, 0, 0, 8, 8, 0.002012072434607646, ["nop"], ["nop"]], [3, 0, 19, 3, 1, 16, 1, 2, 20, 8, 0.0800804828973843, ["mov     eax, [rbp+res]", "mov     [rbp+old_res], eax", "mov     rax, [rbp+dst_status.st_mtim.tv_sec]", "and     eax, 1", "imul    ebx, eax, 3B9ACA00h", "lea     rax, [rbp+dst_status]", "mov     rdi, rax; st", "call    get_stat_mtime_ns", "add     eax, ebx", "mov     [rbp+a_0], eax", "mov     [rbp+res], 1", "mov     eax, [rbp+a_0]", "cdq", "idiv    [rbp+res]", "mov     [rbp+a_0], eax", "jmp     short loc_14079"], ["mov~eax,[rbp+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "and~eax,0", "imul~ebx,eax,0", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~eax,ebx", "mov~[rbp+0],eax", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 22, 0, 0, 2, 0, 1, 19, 4, 0.09577464788732394, ["cmp     [rbp+stat_result], 0", "jz      short loc_13FD2"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 65, 1, 0, 4, 0, 1, 3, 3, 0.048490945674044265, ["mov     rax, [rbp+dst_s]", "sub     rax, 2", "cmp     [rbp+src_s], rax", "jg      short loc_139AC"], ["mov~rax,[rbp+0]", "sub~rax,0", "cmp~[rbp+0],rax", "jg~FOO"]], [4, 0, 19, 6, 0, 16, 1, 1, 21, 7, 0.07907444668008048, ["mov     ecx, [rbp+a_0]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "shl     eax, 2", "add     eax, edx", "add     eax, eax", "sub     ecx, eax", "mov     edx, ecx", "test    edx, edx", "jz      loc_14021"], ["mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "shl~eax,0", "add~eax,edx", "add~eax,eax", "sub~ecx,eax", "mov~edx,ecx", "test~edx,edx", "jz~FOO"]], [3, 0, 19, 2, 0, 10, 0, 0, 24, 8, 0.0012072434607645875, ["mov     ecx, [rbp+a_0]", "mov     edx, 66666667h", "mov     eax, ecx", "imul    edx", "sar     edx, 2", "mov     eax, ecx", "sar     eax, 1Fh", "sub     edx, eax", "mov     eax, edx", "mov     [rbp+a_0], eax"], ["mov~ecx,[rbp+0]", "mov~edx,0", "mov~eax,ecx", "imul~,edx", "sar~edx,0", "mov~eax,ecx", "sar~eax,0", "sub~edx,eax", "mov~eax,edx", "mov~[rbp+0],eax"]], [1, 0, 11, 0, 0, 5, 0, 0, 13, 5, 0.05311871227364185, ["mov     rax, [rbp+dst_res]", "mov     edx, [rbp+res]", "mov     [rax+8], edx", "mov     rax, [rbp+dst_res]", "mov     byte ptr [rax+0Ch], 1"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~[rax+0],edx", "mov~rax,[rbp+0]", "mov~[yte ptr [rax+0],0"]], [1, 0, 12, 1, 0, 2, 0, 1, 23, 6, 0.002414486921529175, ["shl     [rbp+res], 1", "jmp     short loc_140AF"], ["shl~[rbp+0],0", "jmp~FOO"]], [0, 0, 12, 0, 0, 1, 0, 1, 22, 6, 0.02535211267605634, ["jmp     short loc_140AF"], ["jmp~FOO"]], [0, 0, 12, 0, 0, 1, 0, 0, 24, 6, 0.002414486921529175, ["nop"], ["nop"]], [0, 0, 5, 0, 0, 3, 0, 1, 3, 3, 0.02253521126760563, ["mov     eax, [rbp+dst_ns]", "cmp     eax, [rbp+src_ns]", "jl      short loc_1413C"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jl~FOO"]], [0, 0, 7, 0, 0, 3, 0, 1, 2, 3, 0.04426559356136821, ["mov     rax, [rbp+dst_s]", "cmp     rax, [rbp+src_s]", "jg      short loc_14143"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jg~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.0006036217303822937, ["mov     eax, 1", "jmp     loc_1414F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 51, 0, 0, 3, 1, 1, 7, 7, 0.07927565392354124, ["mov     rax, cs:ht_4582", "test    rax, rax", "jz      short loc_13ADB"], ["mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 1, 15, 2, 0.015694164989939637, ["jmp     loc_1414F"], ["jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 14, 3, 0.01609657947686117, ["mov     eax, 1", "jmp     loc_140A9"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 18, 3, 0.0012072434607645875, ["mov     eax, 0FFFFFFFEh", "jmp     loc_140A9"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 20, 3, 0.002414486921529175, ["mov     eax, 0FFFFFFFEh", "jmp     loc_140A9"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 47, 0, 0, 8, 2, 1, 9, 5, 0.19416498993963782, ["mov     rax, [rbp+dst_res]", "mov     eax, [rax+8]", "mov     [rbp+res], eax", "mov     rax, [rbp+dst_res]", "movzx   eax, byte ptr [rax+0Ch]", "xor     eax, 1", "test    al, al", "jz      loc_140CA"], ["mov~rax,[rbp+0]", "mov~eax,[rax+0]", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "movzx~eax,[yte ptr [rax+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 37, 1, 0, 2, 0, 1, 16, 7, 0.0, ["shl     [rbp+res], 1", "jmp     loc_13DCC"], ["shl~[rbp+0],0", "jmp~FOO"]], [1, 0, 38, 0, 0, 4, 2, 1, 15, 7, 0.014889336016096578, ["movzx   eax, [rbp+odd_second]", "xor     eax, 1", "test    al, al", "jz      loc_13DCC"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 56, 0, 0, 4, 0, 0, 8, 8, 0.005633802816901408, ["mov     rax, cs:new_dst_res_4583", "mov     dword ptr [rax+8], 77359400h", "mov     rax, cs:new_dst_res_4583", "mov     byte ptr [rax+0Ch], 0"], ["mov~rax,<TAG>", "mov~[word ptr [rax+0],0", "mov~rax,<TAG>", "mov~[yte ptr [rax+0],0"]], [1, 0, 10, 2, 0, 11, 1, 0, 10, 4, 0.08893360160965795, ["cmp     [rbp+res], 77359400h", "setz    al", "movzx   eax, al", "not     eax", "cdqe", "and     [rbp+src_s], rax", "mov     eax, [rbp+src_ns]", "cdq", "idiv    [rbp+res]", "mov     eax, edx", "sub     [rbp+src_ns], eax"], ["cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "not~eax", "cdqe~", "and~[rbp+0],rax", "mov~eax,[rbp+0]", "cdq~,", "idiv~,[rbp+0]", "mov~eax,edx", "sub~[rbp+0],eax"]], [0, 0, 63, 0, 0, 3, 1, 1, 4, 10, 0.058953722334004026, ["mov     rax, cs:ht_4582", "test    rax, rax", "jnz     short loc_139E6"], ["mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [1, 1, 71, 1, 2, 30, 3, 3, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 168h", "mov     [rbp+dfd], edi", "mov     [rbp+dst_name], rsi", "mov     [rbp+dst_stat], rdx", "mov     [rbp+src_stat], rcx", "mov     [rbp+options], r8d", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "mov     rax, [rbp+dst_stat]", "mov     rax, [rax+58h]", "mov     [rbp+dst_s], rax", "mov     rax, [rbp+src_stat]", "mov     rax, [rax+58h]", "mov     [rbp+src_s], rax", "mov     rax, [rbp+dst_stat]", "mov     rdi, rax; st", "call    get_stat_mtime_ns", "mov     [rbp+dst_ns], eax", "mov     rax, [rbp+src_stat]", "mov     rdi, rax; st", "call    get_stat_mtime_ns", "mov     [rbp+src_ns], eax", "mov     eax, [rbp+options]", "and     eax, 1", "test    eax, eax", "jz      loc_140FA"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8d", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 32, 0, 0, 3, 0, 1, 15, 4, 0.0006036217303822937, ["mov     eax, [rbp+src_ns]", "cmp     eax, [rbp+dst_ns]", "jg      short loc_13E44"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "jg~FOO"]], [0, 0, 33, 0, 0, 3, 0, 1, 14, 5, 0.13561368209255534, ["mov     rax, [rbp+src_s]", "cmp     rax, [rbp+dst_s]", "jnz     short loc_13E44"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [0, 1, 23, 0, 1, 11, 0, 1, 19, 5, 0.0, ["mov     rax, [rbp+dst_m_s]", "mov     [rbp+timespec.tv_sec+10h], rax", "mov     eax, [rbp+dst_m_ns]", "cdqe", "mov     [rbp+timespec.tv_nsec+10h], rax", "lea     rdx, [rbp+timespec]; times", "mov     rsi, [rbp+dst_name]; path", "mov     eax, [rbp+dfd]", "mov     ecx, 100h; flags", "mov     edi, eax; fd", "call    _utimensat"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cdqe~", "mov~[rbp+0],rax", "lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,<STR>", "mov~edi,eax", "call~FOO"]], [0, 1, 24, 0, 2, 23, 5, 3, 18, 5, 0.103420523138833, ["lea     rdx, [rbp+dst_status]; stat_buf", "mov     rsi, [rbp+dst_name]; filename", "mov     eax, [rbp+dfd]", "mov     ecx, 100h; flag", "mov     edi, eax; fildes", "call    fstatat", "mov     [rbp+stat_result], eax", "mov     eax, [rbp+stat_result]", "movsxd  rdx, eax", "mov     rax, [rbp+dst_status.st_mtim.tv_sec]", "xor     rax, [rbp+dst_m_s]", "mov     rbx, rdx", "or      rbx, rax", "lea     rax, [rbp+dst_status]", "mov     rdi, rax; st", "call    get_stat_mtime_ns", "mov     rdx, rax", "mov     eax, [rbp+dst_m_ns]", "cdqe", "xor     rax, rdx", "or      rax, rbx", "test    rax, rax", "jz      short loc_13FBF"], ["lea~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,<STR>", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "movsxd~rdx,eax", "mov~rax,[rbp+0]", "xor~rax,[rbp+0]", "mov~rbx,rdx", "or~rbx,rax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "cdqe~", "xor~rax,rdx", "or~rax,rbx", "test~rax,rax", "jz~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.01750503018108652, ["mov     eax, 0FFFFFFFFh"], ["mov~eax,0"]], [0, 0, 9, 0, 0, 3, 0, 1, 1, 3, 0.08209255533199195, ["mov     rax, [rbp+dst_s]", "cmp     rax, [rbp+src_s]", "jl      short loc_1414A"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jl~FOO"]], [1, 0, 36, 0, 0, 2, 0, 1, 11, 6, 0.11790744466800805, ["mov     [rbp+res], 1", "jmp     loc_13DCD"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.0003018108651911469, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_1414F"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.0006036217303822937, ["mov     eax, 1", "jmp     short loc_1414F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 36, 0, 0, 1, 0, 1, 14, 6, 0.007243460764587525, ["jmp     short loc_13DCD"], ["jmp~FOO"]], [0, 0, 36, 0, 0, 1, 0, 0, 16, 6, 0.018108651911468814, ["nop"], ["nop"]], [0, 0, 50, 0, 1, 9, 0, 1, 8, 7, 0.0, ["mov     rax, [rbp+dst_stat]", "mov     rax, [rax]", "mov     [rbp+tmp_dst_res.dev], rax", "mov     rax, cs:ht_4582", "lea     rdx, [rbp+tmp_dst_res]", "mov     rsi, rdx; entry", "mov     rdi, rax; table", "call    hash_lookup", "mov     [rbp+dst_res], rax"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,<TAG>", "lea~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 2, 0.0009054325955734407, ["mov     eax, 0", "jmp     loc_1414F"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 0, 5, 0, 1, 4, 2, 0.0003018108651911469, ["mov     eax, [rbp+dst_ns]", "cmp     eax, [rbp+src_ns]", "setnle  al", "movzx   eax, al", "jmp     short loc_1414F"], ["mov~eax,[rbp+0]", "cmp~eax,[rbp+0]", "setnle~al", "movzx~eax,al", "jmp~FOO"]], [2, 0, 62, 0, 1, 8, 0, 1, 5, 10, 0.0, ["mov     rax, cs:data_freer", "mov     r8, rax; data_freer", "lea     rcx, dev_info_compare; comparator", "lea     rdx, dev_info_hash; hasher", "mov     esi, 0; tuning", "mov     edi, 10h; candidate", "call    hash_initialize", "mov     cs:ht_4582, rax"], ["mov~rax,<TAG>", "mov~r8,rax", "lea~rcx,<TAG>", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,0", "call~FOO", "mov~<TAG>,rax"]], [0, 1, 0, 1, 0, 4, 0, 0, 4, 0, 0.0, ["add     rsp, 168h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [14, 34, 71, 1, 72, 106, 1, 507, 0.04152, 6, 63], "succs": [[9, 30], [0, 24], [26, 28], [2], [2], [17, 34], [5, 7], [68, 5], [49, 23], [8, 31], [40, 36], [10, 38], [45], [20, 12], [19, 12], [49], [49, 15], [22], [3, 62], [59, 47], [19, 14], [], [21, 71], [49], [44], [51, 4], [25, 65], [57, 46], [27, 37], [44], [52, 29], [44], [35], [32, 48], [43, 54], [11, 39], [35], [53], [37], [37], [37], [69, 63], [64, 41], [22], [16, 67], [22], [45], [45], [45], [18, 53], [66], [50, 66], [9], [61], [1, 70], [61, 6], [13, 46], [56, 13], [33], [33, 58], [22], [42, 60], [28], [22], [22], [28], [28], [16], [22], [22], [1], []], "fname": "utimecmpat", "n_num": 72}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 2, 0, 1, 1, 14, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+dir], edi", "mov     [rbp+file], rsi", "mov     [rbp+times], rdx", "mov     rdx, [rbp+times]; times", "mov     rsi, [rbp+file]; path", "mov     eax, [rbp+dir]", "mov     ecx, 100h; flags", "mov     edi, eax; fd", "call    _utimensat", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,<STR>", "mov~edi,eax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 14, 0.0, 0, 1], "succs": [[]], "fname": "lutimensat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 9, 0, 0, 4, 0, 1, 0, 0, 0.20915032679738563, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jz      short loc_14272"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [2, 0, 14, 1, 0, 5, 0, 1, 1, 4, 0.1568627450980392, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jz      short loc_14252"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [2, 0, 13, 1, 0, 5, 0, 1, 2, 3, 0.0392156862745098, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jz      short loc_14252"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [2, 0, 11, 1, 0, 5, 0, 1, 4, 2, 0.029411764705882353, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3B9AC9FFh", "jle     short loc_14252"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jle~FOO"]], [3, 1, 18, 1, 0, 10, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+timespec], rdi", "mov     [rbp+result], 0", "mov     [rbp+utime_omit_count], 0", "mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jz      short loc_141F0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 17, 0, 0, 4, 0, 1, 1, 3, 0.013071895424836602, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jz      short loc_141F0"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 15, 0, 0, 4, 0, 1, 3, 2, 0.042483660130718956, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3B9AC9FFh", "jg      short loc_1423D"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jg~FOO"]], [1, 0, 1, 1, 0, 5, 0, 0, 6, 1, 0.026143790849673203, ["cmp     [rbp+utime_omit_count], 1", "setz    al", "movzx   edx, al", "mov     eax, [rbp+result]", "add     eax, edx"], ["cmp~[rbp+0],0", "setz~al", "movzx~edx,al", "mov~eax,[rbp+0]", "add~eax,edx"]], [2, 0, 4, 1, 0, 5, 0, 1, 5, 2, 0.029411764705882353, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_142EE"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [5, 0, 3, 2, 0, 9, 0, 1, 5, 2, 0.07516339869281045, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     qword ptr [rax], 0", "mov     [rbp+result], 1", "mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_142EE"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 2, 1, 0, 1, 0, 0, 6, 2, 0.0, ["add     [rbp+utime_omit_count], 1"], ["add~[rbp+0],0"]], [1, 0, 12, 1, 0, 5, 1, 1, 3, 2, 0.032679738562091505, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "test    rax, rax", "js      short loc_1423D"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [2, 0, 5, 1, 0, 5, 0, 1, 4, 3, 0.16993464052287582, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jz      short loc_142C0"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jz~FOO"]], [1, 0, 8, 0, 0, 4, 0, 1, 3, 4, 0.07516339869281045, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14298"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [3, 0, 7, 0, 0, 7, 0, 1, 3, 4, 0.10784313725490197, ["mov     rax, [rbp+timespec]", "mov     qword ptr [rax], 0", "mov     [rbp+result], 1", "mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14298"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 6, 1, 0, 1, 0, 0, 4, 4, 0.0, ["add     [rbp+utime_omit_count], 1"], ["add~[rbp+0],0"]], [2, 0, 1, 0, 1, 4, 0, 2, 3, 1, 0.026143790849673203, ["call    ___errno_location", "mov     dword ptr [rax], 16h", "mov     eax, 0FFFFFFFFh", "jmp     locret_142FD"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [0, 0, 16, 0, 0, 4, 1, 1, 2, 2, 0.0196078431372549, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "test    rax, rax", "js      short loc_1423D"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "js~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [1, 2, 16, 0, 19, 32, 2, 89, 0.05538, 0, 12], "succs": [[13, 14], [0, 2], [0, 11], [0, 16], [1, 5], [1, 17], [16, 1], [18], [9, 7], [10, 7], [7], [16, 3], [8, 9], [12, 14], [12, 15], [12], [18], [16, 6], []], "fname": "validate_timespec", "n_num": 19}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 6, 0, 1, 3, 0, 1, 0, 0, 0.0, ["mov     rax, [rbp+timespec]", "mov     rdi, rax; ts", "call    gettime"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [1, 0, 7, 0, 0, 4, 0, 1, 3, 4, 0.08571428571428572, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jnz     short loc_143C7"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.009523809523809525, ["mov     eax, 1", "jmp     loc_14421"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 14, 1, 0, 5, 0, 1, 1, 2, 0.009523809523809525, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14349"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 0, 1, 0, 4, 0, 0, 3, 0, 0.0, ["add     rsp, 28h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [2, 0, 1, 0, 0, 4, 0, 1, 3, 1, 0.009523809523809525, ["mov     rax, [rbp+ts]", "mov     qword ptr [rax], 0", "mov     eax, 0", "jmp     loc_14421"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 6, 1, 0.0380952380952381, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 15, 1, 0, 13, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 28h", "mov     [rbp+statbuf], rdi", "mov     [rbp+ts], rsi", "mov     rax, [rbp+ts]", "mov     rax, [rax]", "mov     [rbp+timespec], rax", "mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14349"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [2, 0, 3, 1, 0, 5, 0, 1, 5, 2, 0.0761904761904762, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jnz     short loc_1441C"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [2, 0, 5, 1, 0, 5, 0, 1, 4, 3, 0.17142857142857143, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_143F8"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [2, 0, 11, 1, 0, 5, 0, 1, 2, 2, 0.01904761904761905, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jnz     short loc_14382"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 12, 0, 0, 4, 0, 1, 1, 3, 0.10476190476190478, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFFh", "jnz     short loc_14382"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [1, 0, 9, 0, 0, 4, 0, 1, 2, 5, 0.1523809523809524, ["mov     rax, [rbp+timespec]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_143AB"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [0, 0, 6, 0, 1, 7, 0, 2, 3, 4, 0.06190476190476191, ["mov     rax, [rbp+statbuf]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     rcx, [rbp+timespec]", "mov     [rcx], rax", "mov     [rcx+8], rdx", "jmp     short loc_143C7"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,[rbp+0]", "mov~<TAG>,rax", "mov~[rcx+0],rdx", "jmp~FOO"]], [0, 0, 2, 0, 1, 8, 0, 2, 5, 2, 0.03333333333333334, ["mov     rax, [rbp+timespec]", "lea     rbx, [rax+10h]", "mov     rax, [rbp+statbuf]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbx], rax", "mov     [rbx+8], rdx", "jmp     short loc_1441C"], ["mov~rax,[rbp+0]", "lea~rbx,[rax+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~[rbx+0],rdx", "jmp~FOO"]], [1, 0, 2, 1, 1, 4, 0, 1, 6, 2, 0.0, ["mov     rax, [rbp+timespec]", "add     rax, 10h", "mov     rdi, rax; ts", "call    gettime"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,rax", "call~FOO"]]], "func_feature": [4, 0, 16, 0, 16, 23, 2, 78, 0.04821, 0, 7], "succs": [[9], [0, 9], [4], [2, 11], [], [4], [4], [11, 3], [6, 15], [8, 14], [12, 5], [10, 12], [1, 13], [9], [6], [6]], "fname": "update_timespec", "n_num": 16}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0.02855924978687127, ["mov     rbx, [rbp+var_18]", "xor     rbx, fs:28h", "jz      short loc_14A66"], ["mov~rbx,[rbp+0]", "xor~rbx,<TAG>", "jz~FOO"]], [1, 0, 16, 0, 0, 2, 0, 1, 11, 3, 0.11658141517476556, ["cmp     [rbp+t], 0", "jz      loc_14A21"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 20, 0, 1, 7, 1, 2, 10, 4, 0.14855072463768115, ["mov     rdx, [rbp+t]; tvp", "mov     eax, [rbp+fd]", "mov     esi, 0; file", "mov     edi, eax; fd", "call    _futimesat", "test    eax, eax", "jnz     loc_14A28"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 12, 0, 0, 2, 0, 1, 15, 5, 0.0196078431372549, ["cmp     [rbp+adiff], 1", "jnz     short loc_149B6"], ["cmp~[rbp+0],0", "jnz~FOO"]], [3, 0, 13, 3, 0, 26, 0, 1, 14, 5, 0.08631713554987212, ["mov     rdx, [rbp+st.st_atim.tv_sec]", "mov     rax, [rbp+t]", "mov     rax, [rax]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+adiff], rax", "mov     rdx, [rbp+st.st_mtim.tv_sec]", "mov     rax, [rbp+t]", "add     rax, 10h", "mov     rax, [rax]", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+mdiff], rax", "mov     [rbp+tt], 0", "mov     rax, [rbp+t]", "mov     rdx, [rax+8]", "mov     rax, [rax]", "mov     [rbp+truncated_timeval.tv_sec], rax", "mov     [rbp+truncated_timeval.tv_usec], rdx", "mov     rax, [rbp+t]", "mov     rdx, [rax+18h]", "mov     rax, [rax+10h]", "mov     [rbp+truncated_timeval.tv_sec+10h], rax", "mov     [rbp+truncated_timeval.tv_usec+10h], rdx", "cmp     [rbp+abig], 0", "jz      short loc_149B6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 16, 3, 0.018115942028985508, ["cmp     [rbp+tt], 0", "jz      short loc_14A21"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 15, 4, 0.055626598465473145, ["cmp     [rbp+mbig], 0", "jz      short loc_149FE"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 16, 4, 0.021312872975277068, ["cmp     [rbp+mdiff], 1", "jnz     short loc_149FE"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 1, 5, 1, 2, 17, 4, 0.010869565217391304, ["lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_mtime_ns", "test    rax, rax", "jnz     short loc_149FE"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jnz~FOO"]], [2, 0, 6, 1, 0, 5, 0, 0, 18, 4, 0.0, ["lea     rax, [rbp+truncated_timeval]", "mov     [rbp+tt], rax", "mov     rax, [rbp+tt]", "add     rax, 10h", "mov     qword ptr [rax+8], 0"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~[word ptr [rax+0],0"]], [1, 0, 66, 0, 0, 5, 1, 1, 2, 4, 0.04219948849104859, ["mov     [rbp+ts], rax", "mov     [rbp+adjustment_needed], 0", "mov     rax, [rbp+ts]", "test    rax, rax", "jz      short loc_144DA"], ["mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 67, 0, 0, 2, 0, 1, 1, 5, 0.007139812446717818, ["lea     rax, [rbp+adjusted_timespec]", "jmp     short loc_1446F"], ["lea~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 67, 0, 0, 1, 0, 0, 1, 5, 0.007139812446717818, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 40, 0, 1, 8, 0, 2, 9, 4, 0.02195225916453538, ["mov     rdx, [rbp+ts]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; times", "mov     edi, eax; fd", "call    _futimens", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "jle     short loc_1469B"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 41, 0, 0, 2, 0, 1, 8, 5, 0.13107416879795397, ["cmp     [rbp+fd], 0", "js      short loc_146C5"], ["cmp~[rbp+0],0", "js~FOO"]], [1, 0, 34, 0, 0, 2, 0, 1, 7, 5, 0.051470588235294115, ["cmp     [rbp+adjustment_needed], 3", "jz      short loc_14742"], ["cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 35, 0, 0, 4, 0, 1, 6, 6, 0.19810315430520034, ["mov     cs:utimensat_works_really, 0FFFFFFFFh", "mov     cs:lutimensat_works_really, 0FFFFFFFFh", "cmp     [rbp+adjustment_needed], 0", "jz      loc_14775"], ["mov~<TAG>,0", "mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 3, 0, 1, 4, 0, 2, 6, 2, 0.001278772378516624, ["call    ___errno_location", "mov     dword ptr [rax], 9", "mov     eax, 0FFFFFFFFh", "jmp     loc_14A52"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0", "jmp~FOO"]], [1, 0, 61, 0, 0, 2, 0, 1, 5, 3, 0.002131287297527707, ["cmp     [rbp+file], 0", "jnz     short loc_14515"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 52, 0, 0, 4, 0, 1, 10, 8, 0.05029838022165388, ["mov     rax, [rbp+ts]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_145B5"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [0, 0, 54, 0, 0, 2, 1, 1, 9, 3, 0.0479539641943734, ["test    al, al", "jz      short loc_14583"], ["test~al,al", "jz~FOO"]], [1, 0, 39, 0, 1, 2, 0, 1, 10, 4, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 26h ; '&'"], ["call~FOO", "mov~<TAG>,0"]], [0, 0, 31, 0, 1, 8, 1, 2, 9, 4, 0.009910485933503837, ["lea     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "setnz   al", "jmp     short loc_14734"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [1, 0, 33, 0, 0, 2, 0, 0, 8, 5, 0.026427962489343565, ["cmp     [rbp+fd], 0", "jns     short loc_14718"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 11, 0, 1, 5, 1, 2, 16, 5, 0.010017050298380221, ["lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_atime_ns", "test    rax, rax", "jnz     short loc_149B6"], ["lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~rax,rax", "jnz~FOO"]], [0, 1, 0, 1, 0, 4, 0, 0, 6, 0, 0.0, ["add     rsp, 168h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~rbx", "pop~rbp", "retn"]], [1, 0, 4, 0, 1, 5, 0, 1, 17, 3, 0.0, ["mov     rdx, [rbp+tt]; tvp", "mov     eax, [rbp+fd]", "mov     esi, 0; file", "mov     edi, eax; fd", "call    _futimesat"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO"]], [0, 0, 59, 0, 0, 3, 1, 1, 5, 7, 0.09548167092924126, ["mov     eax, cs:utimensat_works_really", "test    eax, eax", "js      loc_146C5"], ["mov~eax,<TAG>", "test~eax,eax", "js~FOO"]], [1, 0, 62, 0, 0, 2, 0, 0, 4, 4, 0.07544757033248081, ["cmp     [rbp+fd], 0", "jns     short loc_14515"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 11, 3, 0.018329070758738276, ["cmp     [rbp+file], 0", "jnz     short loc_14A39"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 38, 0, 0, 2, 0, 1, 10, 3, 0.027493606138107418, ["cmp     [rbp+result], 0", "jz      short loc_146B0"], ["cmp~[rbp+0],0", "jz~FOO"]], [8, 0, 23, 6, 0, 33, 0, 1, 8, 4, 0.08162830349531117, ["mov     rax, [rbp+ts]", "mov     rax, [rax]", "mov     [rbp+timeval.tv_sec], rax", "mov     rax, [rbp+ts]", "mov     rcx, [rax+8]", "mov     rdx, 20C49BA5E353F7CFh", "mov     rax, rcx", "imul    rdx", "sar     rdx, 7", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+timeval.tv_usec], rax", "mov     rax, [rbp+ts]", "add     rax, 10h", "mov     rax, [rax]", "mov     [rbp+timeval.tv_sec+10h], rax", "mov     rax, [rbp+ts]", "add     rax, 10h", "mov     rcx, [rax+8]", "mov     rdx, 20C49BA5E353F7CFh", "mov     rax, rcx", "imul    rdx", "sar     rdx, 7", "mov     rax, rcx", "sar     rax, 3Fh", "sub     rdx, rax", "mov     rax, rdx", "mov     [rbp+timeval.tv_usec+10h], rax", "lea     rax, [rbp+timeval]", "mov     [rbp+t], rax", "jmp     short loc_14830"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rcx,[rax+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,[rax+0]", "mov~rdx,0", "mov~rax,rcx", "imul~,rdx", "sar~rdx,0", "mov~rax,rcx", "sar~rax,0", "sub~rdx,rax", "mov~rax,rdx", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 25, 0, 0, 3, 1, 1, 7, 5, 0.17412617220801363, ["mov     rax, [rbp+ts]", "test    rax, rax", "jz      loc_14825"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [1, 0, 23, 0, 0, 1, 0, 0, 8, 4, 0.08162830349531117, ["mov     [rbp+t], 0"], ["mov~[rbp+0],0"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 2, 0.008525149190110827, ["mov     eax, 0", "jmp     short loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [3, 0, 15, 1, 0, 15, 2, 1, 12, 3, 0.10080988917306052, ["mov     rax, [rbp+t]", "mov     rax, [rax+8]", "cmp     rax, 7A11Fh", "setnle  al", "mov     [rbp+abig], al", "mov     rax, [rbp+t]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 7A11Fh", "setnle  al", "mov     [rbp+mbig], al", "movzx   eax, [rbp+abig]", "or      al, [rbp+mbig]", "test    al, al", "jz      loc_14A21"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "setnle~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "setnle~al", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "or~al,[rbp+0]", "test~al,al", "jz~FOO"]], [0, 0, 14, 0, 1, 7, 1, 2, 13, 3, 0.0937766410912191, ["lea     rdx, [rbp+st]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "jnz     loc_14A21"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 31, 0, 1, 7, 1, 1, 9, 4, 0.009910485933503837, ["lea     rdx, [rbp+st]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "setnz   al"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "setnz~al"]], [1, 0, 58, 0, 0, 2, 0, 1, 6, 6, 0.04251918158567775, ["cmp     [rbp+adjustment_needed], 2", "jnz     loc_145F4"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 37, 0, 1, 4, 0, 2, 11, 3, 0.021099744245524295, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jz      short loc_146C5"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 10, 0, 0, 4, 0, 0, 17, 5, 0.0, ["lea     rax, [rbp+truncated_timeval]", "mov     [rbp+tt], rax", "mov     rax, [rbp+tt]", "mov     qword ptr [rax+8], 0"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0"]], [1, 0, 45, 0, 1, 2, 0, 1, 9, 4, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 26h ; '&'"], ["call~FOO", "mov~<TAG>,0"]], [3, 0, 46, 0, 1, 9, 0, 2, 8, 4, 0.02120630861040068, ["mov     rdx, [rbp+ts]; times", "mov     rax, [rbp+file]", "mov     ecx, 0; flags", "mov     rsi, rax; path", "mov     edi, 0FFFFFF9Ch; fd", "call    _utimensat", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "jle     short loc_14637"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,0", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [0, 0, 49, 0, 1, 7, 0, 2, 11, 7, 0.02589514066496164, ["mov     rbx, [rbp+ts]", "lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     [rbx], rax", "mov     [rbx+8], rdx", "jmp     short loc_145ED"], ["mov~rbx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~[rbx+0],rdx", "jmp~FOO"]], [0, 0, 30, 0, 0, 2, 1, 1, 10, 3, 0.025788576300085252, ["test    al, al", "jz      short loc_14742"], ["test~al,al", "jz~FOO"]], [1, 0, 57, 0, 0, 2, 0, 0, 7, 5, 0.019820971867007674, ["cmp     [rbp+fd], 0", "jns     short loc_14559"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 22, 0, 0, 2, 0, 0, 9, 3, 0.16453537936913895, ["cmp     [rbp+fd], 0", "jns     short loc_14859"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.0038363171355498722, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 10, 2, 0.00319693094629156, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 3, 0, 1, 10, 2, 0.006713554987212276, ["mov     cs:utimensat_works_really, 1", "mov     eax, [rbp+result]", "jmp     loc_14A52"], ["mov~<TAG>,0", "mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 3, 0, 1, 11, 2, 0.00319693094629156, ["mov     cs:utimensat_works_really, 1", "mov     eax, [rbp+result]", "jmp     loc_14A52"], ["mov~<TAG>,0", "mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 11, 2, 0.002557544757033248, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 10, 2, 0.002237851662404092, ["mov     eax, 0", "jmp     loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 1, 6, 0, 2, 10, 2, 0.00319693094629156, ["mov     rdx, [rbp+t]; tvp", "mov     rax, [rbp+file]", "mov     rsi, rax; file", "mov     edi, 0FFFFFF9Ch; fd", "call    _futimesat", "jmp     loc_14A52"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 12, 2, 0.0005328218243819267, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_14A52"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 3, 0, 1, 5, 0, 1, 12, 2, 0.0005328218243819267, ["mov     rdx, [rbp+t]", "mov     rax, [rbp+file]", "mov     rsi, rdx; tvp", "mov     rdi, rax; file", "call    _utimes"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO"]], [1, 0, 43, 0, 1, 4, 0, 2, 10, 3, 0.024936061381074168, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jz      short loc_14661"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 44, 0, 0, 2, 0, 1, 9, 3, 0.031436487638533676, ["cmp     [rbp+result], 0", "jz      short loc_1464C"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 50, 1, 0, 5, 0, 1, 11, 7, 0.029092071611253198, ["mov     rax, [rbp+ts]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_145ED"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [0, 0, 28, 0, 0, 3, 1, 1, 8, 4, 0.04038789428815004, ["mov     rax, [rbp+ts]", "test    rax, rax", "jz      short loc_14775"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 65, 0, 1, 14, 0, 1, 3, 4, 0.0, ["mov     rax, [rbp+timespec]", "mov     rdx, [rax+8]", "mov     rax, [rax]", "mov     [rbp+adjusted_timespec.tv_sec], rax", "mov     [rbp+adjusted_timespec.tv_nsec], rdx", "mov     rax, [rbp+timespec]", "mov     rdx, [rax+18h]", "mov     rax, [rax+10h]", "mov     [rbp+adjusted_timespec.tv_sec+10h], rax", "mov     [rbp+adjusted_timespec.tv_nsec+10h], rdx", "mov     rax, [rbp+ts]", "mov     rdi, rax; timespec", "call    validate_timespec", "mov     [rbp+adjustment_needed], eax"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax"]], [0, 0, 55, 0, 1, 8, 1, 2, 8, 4, 0.013640238704177323, ["lea     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    stat_0", "test    eax, eax", "setnz   al", "jmp     short loc_14575"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "jmp~FOO"]], [1, 0, 47, 0, 0, 2, 0, 0, 7, 5, 0.11839300937766412, ["cmp     [rbp+fd], 0", "jns     short loc_14661"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 1, 69, 1, 0, 12, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 168h", "mov     [rbp+fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+timespec], rdx", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "cmp     [rbp+timespec], 0", "jz      short loc_1446A"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 64, 0, 0, 2, 0, 0, 3, 3, 0.06820119352088662, ["cmp     [rbp+adjustment_needed], 0", "jns     short loc_144ED"], ["cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 27, 0, 1, 7, 1, 2, 9, 3, 0.009271099744245524, ["lea     rdx, [rbp+ts]", "lea     rax, [rbp+st]", "mov     rsi, rdx; ts", "mov     rdi, rax; statbuf", "call    update_timespec", "test    al, al", "jz      short loc_14775"], ["lea~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [0, 0, 49, 0, 1, 7, 0, 1, 12, 7, 0.0, ["mov     rax, [rbp+ts]", "lea     rbx, [rax+10h]", "lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbx], rax", "mov     [rbx+8], rdx"], ["mov~rax,[rbp+0]", "lea~rbx,[rax+0]", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~[rbx+0],rdx"]], [1, 0, 48, 1, 0, 1, 0, 0, 12, 6, 0.0792838874680307, ["add     [rbp+adjustment_needed], 1"], ["add~[rbp+0],0"]], [0, 0, 55, 0, 1, 7, 1, 1, 8, 4, 0.013640238704177323, ["lea     rdx, [rbp+st]", "mov     eax, [rbp+fd]", "mov     rsi, rdx; stat_buf", "mov     edi, eax; fildes", "call    fstat", "test    eax, eax", "setnz   al"], ["lea~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "test~eax,eax", "setnz~al"]]], "func_feature": [23, 19, 72, 1, 70, 108, 3, 331, 0.03793, 3, 15], "succs": [[], [0, 26], [35, 36], [2, 30], [25, 7], [4, 7], [35, 27], [8, 6], [9, 6], [10, 6], [6], [65, 61], [11], [11], [22, 31], [17, 14], [24, 60], [16, 33], [1], [18, 28], [59, 44], [49, 20], [31], [45], [38, 23], [41, 7], [], [35], [17, 39], [19, 28], [56, 55], [40, 51], [47], [32, 34], [47], [1], [35, 37], [35, 5], [45], [46, 63], [17, 51], [7], [58], [42, 58], [68], [52, 60], [69, 62], [3, 54], [1], [1], [1], [1], [1], [1], [1], [1], [1], [50, 15], [57, 50], [67, 68], [33, 66], [65], [21], [43, 15], [12, 13], [48, 29], [33, 53], [68], [63], [21]], "fname": "fdutimens", "n_num": 70}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+file], rdi", "mov     [rbp+timespec], rsi", "mov     rdx, [rbp+timespec]; timespec", "mov     rax, [rbp+file]", "mov     rsi, rax; file", "mov     edi, 0FFFFFFFFh; fd", "call    fdutimens", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 12, 0.0, 0, 1], "succs": [[]], "fname": "utimens", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 21, 1, 0, 1, 0, 0, 0, 0, 0.08095238095238096, ["add     [rbp+adjustment_needed], 1"], ["add~[rbp+0],0"]], [0, 0, 22, 0, 1, 7, 0, 2, 8, 6, 0.019444444444444445, ["mov     rbx, [rbp+ts]", "lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_atime", "mov     [rbx], rax", "mov     [rbx+8], rdx", "jmp     short loc_14C02"], ["mov~rbx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~[rbx+0],rdx", "jmp~FOO"]], [2, 0, 23, 1, 0, 5, 0, 1, 8, 6, 0.02738095238095238, ["mov     rax, [rbp+ts]", "add     rax, 10h", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14C02"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [0, 0, 22, 0, 1, 7, 0, 1, 9, 6, 0.0, ["mov     rax, [rbp+ts]", "lea     rbx, [rax+10h]", "lea     rax, [rbp+st]", "mov     rdi, rax; st", "call    get_stat_mtime", "mov     [rbx], rax", "mov     [rbx+8], rdx"], ["mov~rax,[rbp+0]", "lea~rbx,[rax+0]", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~<TAG>,rax", "mov~[rbx+0],rdx"]], [2, 0, 15, 0, 0, 3, 0, 1, 5, 5, 0.17142857142857143, ["mov     cs:lutimensat_works_really, 0FFFFFFFFh", "cmp     [rbp+adjustment_needed], 0", "jz      short loc_14CEA"], ["mov~<TAG>,0", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 29, 0, 0, 3, 1, 1, 4, 5, 0.12380952380952381, ["mov     eax, cs:lutimensat_works_really", "test    eax, eax", "js      loc_14C77"], ["mov~eax,<TAG>", "test~eax,eax", "js~FOO"]], [1, 0, 17, 0, 1, 4, 0, 2, 8, 3, 0.10317460317460317, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 26h ; '&'", "jz      short loc_14C77"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [0, 0, 27, 0, 1, 7, 1, 2, 6, 3, 0.04285714285714286, ["lea     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_14B98"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 28, 0, 0, 2, 0, 1, 5, 4, 0.06904761904761905, ["cmp     [rbp+adjustment_needed], 2", "jnz     loc_14C09"], ["cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 7, 0, 1, 7, 1, 2, 7, 3, 0.020436507936507937, ["lea     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_14D17"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 6, 4, 0.09305555555555556, ["cmp     [rbp+adjustment_needed], 0", "jnz     short loc_14D17"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 14, 0, 0, 2, 0, 1, 6, 4, 0.07599206349206349, ["cmp     [rbp+adjustment_needed], 3", "jz      short loc_14CBA"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 7, 2, 0.007142857142857143, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14D56"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 7, 3, 0.1349206349206349, ["cmp     [rbp+result], 0", "jz      short loc_14C58"], ["cmp~[rbp+0],0", "jz~FOO"]], [2, 1, 20, 0, 1, 9, 0, 2, 6, 4, 0.12857142857142856, ["mov     rdx, [rbp+ts]; times", "mov     rax, [rbp+file]", "mov     ecx, 100h; flags", "mov     rsi, rax; path", "mov     edi, 0FFFFFF9Ch; fd", "call    _utimensat", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "jle     short loc_14C43"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~ecx,<STR>", "mov~rsi,rax", "mov~edi,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jle~FOO"]], [1, 0, 19, 0, 1, 2, 0, 1, 7, 4, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 26h ; '&'"], ["call~FOO", "mov~<TAG>,0"]], [1, 0, 3, 0, 0, 2, 0, 1, 8, 2, 0.00376984126984127, ["mov     eax, 0FFFFFFFFh", "jmp     short loc_14D56"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 1, 6, 0, 2, 8, 2, 0.0025793650793650793, ["mov     rdx, [rbp+ts]; timespec", "mov     rax, [rbp+file]", "mov     rsi, rax; file", "mov     edi, 0FFFFFFFFh; fd", "call    fdutimens", "jmp     short loc_14D56"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "jmp~FOO"]], [2, 0, 5, 0, 0, 4, 1, 1, 7, 3, 0.04246031746031746, ["mov     eax, [rbp+st.st_mode]", "and     eax, 0F000h", "cmp     eax, 0A000h", "jz      short loc_14D46"], ["mov~eax,[rbp+0]", "and~eax,0", "cmp~eax,0", "jz~FOO"]], [1, 0, 25, 0, 0, 4, 0, 1, 7, 7, 0.04285714285714286, ["mov     rax, [rbp+ts]", "mov     rax, [rax+8]", "cmp     rax, 3FFFFFFEh", "jnz     short loc_14BCA"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rax,0", "jnz~FOO"]], [0, 0, 13, 0, 1, 7, 1, 2, 7, 3, 0.018849206349206348, ["lea     rdx, [rbp+st]", "mov     rax, [rbp+file]", "mov     rsi, rdx; stat_buf", "mov     rdi, rax; filename", "call    lstat", "test    eax, eax", "jz      short loc_14CBA"], ["lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [1, 0, 0, 1, 0, 4, 0, 0, 6, 0, 0.0, ["add     rsp, 0E8h", "pop     rbx", "pop     rbp", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [0, 0, 2, 0, 0, 3, 1, 1, 5, 1, 0.05396825396825397, ["mov     rcx, [rbp+var_18]", "xor     rcx, fs:28h", "jz      short loc_14D6A"], ["mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 8, 2, 0.005357142857142857, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14D56"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 11, 0, 0, 3, 1, 1, 7, 4, 0.04285714285714286, ["mov     rax, [rbp+ts]", "test    rax, rax", "jz      short loc_14CEA"], ["mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [2, 0, 36, 1, 0, 11, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 0E8h", "mov     [rbp+file], rdi", "mov     [rbp+timespec], rsi", "mov     rax, fs:28h", "mov     [rbp+var_18], rax", "xor     eax, eax", "cmp     [rbp+timespec], 0", "jz      short loc_14AD3"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 31, 0, 0, 2, 0, 0, 3, 3, 0.12301587301587301, ["cmp     [rbp+adjustment_needed], 0", "jns     short loc_14B56"], ["cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 33, 0, 0, 5, 1, 1, 2, 4, 0.07857142857142857, ["mov     [rbp+ts], rax", "mov     [rbp+adjustment_needed], 0", "mov     rax, [rbp+ts]", "test    rax, rax", "jz      short loc_14B43"], ["mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "test~rax,rax", "jz~FOO"]], [0, 0, 32, 0, 1, 14, 0, 1, 3, 4, 0.0, ["mov     rax, [rbp+timespec]", "mov     rdx, [rax+8]", "mov     rax, [rax]", "mov     [rbp+adjusted_timespec.tv_sec], rax", "mov     [rbp+adjusted_timespec.tv_nsec], rdx", "mov     rax, [rbp+timespec]", "mov     rdx, [rax+18h]", "mov     rax, [rax+10h]", "mov     [rbp+adjusted_timespec.tv_sec+10h], rax", "mov     [rbp+adjusted_timespec.tv_nsec+10h], rdx", "mov     rax, [rbp+ts]", "mov     rdi, rax; timespec", "call    validate_timespec", "mov     [rbp+adjustment_needed], eax"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax"]], [1, 0, 3, 0, 0, 2, 0, 1, 4, 2, 0.014285714285714285, ["mov     eax, 0FFFFFFFFh", "jmp     loc_14D56"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 34, 0, 0, 1, 0, 0, 1, 5, 0.013492063492063493, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 10, 0, 1, 7, 1, 2, 8, 3, 0.01984126984126984, ["lea     rdx, [rbp+ts]", "lea     rax, [rbp+st]", "mov     rsi, rdx; ts", "mov     rdi, rax; statbuf", "call    update_timespec", "test    al, al", "jz      short loc_14CEA"], ["lea~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "test~al,al", "jz~FOO"]], [2, 0, 3, 0, 0, 4, 0, 1, 8, 2, 0.02142857142857143, ["mov     cs:utimensat_works_really, 1", "mov     cs:lutimensat_works_really, 1", "mov     eax, [rbp+result]", "jmp     loc_14D56"], ["mov~<TAG>,0", "mov~<TAG>,0", "mov~eax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 9, 2, 0.004761904761904762, ["mov     eax, 0", "jmp     short loc_14D56"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 0, 1, 3, 0, 1, 8, 2, 0.0025793650793650793, ["call    ___errno_location", "mov     dword ptr [rax], 26h ; '&'", "mov     eax, 0FFFFFFFFh"], ["call~FOO", "mov~<TAG>,0", "mov~eax,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 34, 0, 0, 2, 0, 1, 1, 5, 0.013492063492063493, ["lea     rax, [rbp+adjusted_timespec]", "jmp     short loc_14AD8"], ["lea~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [13, 10, 41, 1, 37, 55, 1, 154, 0.04331, 3, 4], "succs": [[14], [0], [0, 3], [0], [10, 11], [8, 4], [32, 4], [19, 12], [14, 7], [16, 18], [9, 18], [24, 20], [22], [32, 6], [13, 15], [13], [22], [22], [17, 34], [1, 2], [24, 23], [], [35, 21], [22], [10, 31], [36, 30], [29, 5], [26, 28], [26], [22], [27], [33, 10], [22], [22], [22], [], [27]], "fname": "lutimens", "n_num": 37}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 16, 1, 0, 16, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r15", "push    r14", "push    r13", "push    r12", "push    rbx", "sub     rsp, 58h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     [rbp+n_authors], r9", "cmp     [rbp+command_name], 0", "jz      short loc_14DCD"], ["push~rbp", "mov~rbp,rsp", "push~r15", "push~r14", "push~r13", "push~r12", "push~rbx", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "cmp~[rbp+0],0", "jz~FOO"]], [5, 2, 1, 6, 2, 29, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 5", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSA; \"Written by %s, %s, %s,\\n%s, and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    r13", "mov     r9, r15", "mov     r8, r14", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 10h", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r13", "mov~r9,r15", "mov~r8,r14", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [0, 0, 11, 1, 0, 8, 0, 1, 0, 2, 0.16666666666666666, ["mov     rax, [rbp+n_authors]", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B844", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B844", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]], [3, 0, 13, 0, 4, 18, 0, 5, 0, 2, 0.1625, ["lea     rdi, aC; \"(C)\"", "call    _gettext", "mov     rdx, rax", "mov     rax, [rbp+stream]", "mov     ecx, 7E3h", "lea     rsi, version_etc_copyright; \"Copyright %s %d Free Software Foundatio\"...", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "lea     rdi, aLicenseGplv3Gn; \"\\nLicense GPLv3+: GNU GPL version 3 or \"...", "call    _gettext", "mov     rdx, rax", "mov     rax, [rbp+stream]", "mov     rsi, rax; stream", "mov     rdi, rdx; s", "call    _fputs_unlocked", "cmp     [rbp+n_authors], 9; switch 10 cases", "ja      loc_1524C; jumptable 0000000000014E65 default case"], ["lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~ecx,0", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "cmp~[rbp+0],0", "ja~FOO"]], [6, 3, 1, 8, 2, 39, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 7", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rcx, [rax]", "mov     [rbp+var_70], rcx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_0; \"Written by %s, %s, %s,\\n%s, %s, %s, and\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_68]", "mov     r8, [rbp+var_70]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 20h", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [1, 0, 14, 0, 1, 7, 0, 1, 0, 3, 0.029166666666666667, ["mov     rcx, [rbp+version]", "mov     rdx, [rbp+package]", "mov     rax, [rbp+stream]", "lea     rsi, aSS_3; \"%s %s\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO"]], [3, 0, 1, 2, 2, 19, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 3", "add     rax, 10h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSAnd; \"Written by %s, %s, and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [9, 2, 1, 10, 2, 49, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 9", "add     rax, 40h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 38h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rdx, [rax]", "mov     [rbp+var_80], rdx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_2; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    [rbp+var_68]", "push    [rbp+var_70]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_78]", "mov     r8, [rbp+var_80]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 30h", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rdx,<TAG>", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [1, 0, 14, 0, 1, 10, 0, 2, 0, 3, 0.029166666666666667, ["mov     rsi, [rbp+version]", "mov     rcx, [rbp+package]", "mov     rdx, [rbp+command_name]", "mov     rax, [rbp+stream]", "mov     r8, rsi", "lea     rsi, aSSS; \"%s (%s) %s\\n\"", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     short loc_14DED"], ["mov~rsi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rsi", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0.0, ["nop", "lea     rsp, [rbp-28h]", "pop     rbx", "pop     r12", "pop     r13", "pop     r14", "pop     r15", "pop     rbp", "retn"], ["nop", "lea~rsp,[rbp-28h]+0]", "pop~rbx", "pop~r12", "pop~r13", "pop~r14", "pop~r15", "pop~rbp", "retn"]], [1, 0, 1, 0, 2, 12, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 1", "mov     rbx, [rax]", "lea     rdi, aWrittenByS; \"Written by %s.\\n\"", "call    _gettext", "mov     rcx, rax", "mov     rax, [rbp+stream]", "mov     rdx, rbx", "mov     rsi, rcx; format", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rbx", "mov~rsi,rcx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [2, 0, 1, 1, 2, 15, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 2", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySAndS; \"Written by %s and %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [3, 1, 1, 3, 2, 23, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 4", "add     rax, 18h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSAn; \"Written by %s, %s, %s,\\nand %s.\\n\"", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "mov     r9, r14", "mov     r8, r13", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "mov~r9,r14", "mov~r8,r13", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "jmp~FOO"]], [5, 2, 1, 6, 2, 33, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 6", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS; \"Written by %s, %s, %s,\\n%s, %s, and %s.\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "push    r14", "push    r13", "mov     r9, [rbp+var_68]", "mov     r8, r15", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 10h", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,r15", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [6, 3, 1, 8, 2, 43, 0, 3, 0, 1, 0.0004166666666666667, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 case 8", "add     rax, 38h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_1; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "push    [rbp+var_68]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_70]", "mov     r8, [rbp+var_78]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 20h", "jmp     loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,<STR>", "jmp~FOO"]], [9, 2, 1, 10, 2, 49, 0, 3, 0, 1, 0.016666666666666666, ["mov     rax, [rbp+authors]; jumptable 0000000000014E65 default case", "add     rax, 40h", "mov     rax, [rax]", "mov     [rbp+var_68], rax", "mov     rax, [rbp+authors]", "add     rax, 38h", "mov     rbx, [rax]", "mov     [rbp+var_70], rbx", "mov     rax, [rbp+authors]", "add     rax, 30h", "mov     r15, [rax]", "mov     rax, [rbp+authors]", "add     rax, 28h", "mov     r14, [rax]", "mov     rax, [rbp+authors]", "add     rax, 20h", "mov     r13, [rax]", "mov     rax, [rbp+authors]", "add     rax, 18h", "mov     rcx, [rax]", "mov     [rbp+var_78], rcx", "mov     rax, [rbp+authors]", "add     rax, 10h", "mov     rdi, [rax]", "mov     [rbp+var_80], rdi", "mov     rax, [rbp+authors]", "add     rax, 8", "mov     r12, [rax]", "mov     rax, [rbp+authors]", "mov     rbx, [rax]", "lea     rdi, aWrittenBySSSSS_3; \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\"...", "call    _gettext", "mov     rsi, rax; format", "mov     rax, [rbp+stream]", "sub     rsp, 8", "push    [rbp+var_68]", "push    [rbp+var_70]", "push    r15", "push    r14", "push    r13", "mov     r9, [rbp+var_78]", "mov     r8, [rbp+var_80]", "mov     rcx, r12", "mov     rdx, rbx", "mov     rdi, rax; stream", "mov     eax, 0", "call    _fprintf", "add     rsp, 30h", "jmp     short loc_15300"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rbx,<TAG>", "mov~[rbp+0],rbx", "mov~rax,[rbp+0]", "add~rax,0", "mov~r15,<TAG>", "mov~rax,[rbp+0]", "add~rax,0", "mov~r14,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~r13,<TAG>", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rcx,<TAG>", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "add~rax,0", "mov~rdi,<TAG>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "add~rax,0", "mov~r12,<TAG>", "mov~rax,[rbp+0]", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rax", "mov~rax,[rbp+0]", "sub~rsp,0", "push~[rbp+0]", "push~[rbp+0]", "push~r15", "push~r14", "push~r13", "mov~r9,[rbp+0]", "mov~r8,[rbp+0]", "mov~rcx,r12", "mov~rdx,rbx", "mov~rdi,rax", "mov~eax,0", "call~FOO", "add~rsp,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.0004166666666666667, ["nop; jumptable 0000000000014E65 case 0"], ["nop"]]], "func_feature": [26, 0, 40, 4, 17, 27, 2, 380, 0.02402, 16, 56], "succs": [[8, 5], [9], [1, 4, 6, 7, 10, 11, 12, 13, 14, 16], [2, 15], [9], [3], [9], [9], [3], [], [9], [9], [9], [9], [9], [9], [9]], "fname": "version_etc_arn", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 3, 1, 0, 7, 1, 1, 0, 0, 0.5, ["mov     rax, [rbp+n_authors]", "lea     rdx, ds:0[rax*8]", "mov     rax, [rbp+authors]", "add     rax, rdx", "mov     rax, [rax]", "test    rax, rax", "jnz     short loc_15336"], ["mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rax,<TAG>", "test~rax,rax", "jnz~FOO"]], [2, 0, 3, 1, 0, 10, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     [rbp+n_authors], 0", "jmp     short loc_1533B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 1, 0, 1, 0, 0, 2, 2, 0.0, ["add     [rbp+n_authors], 1"], ["add~[rbp+0],0"]], [0, 0, 0, 0, 1, 13, 0, 1, 2, 0, 0.0, ["mov     r8, [rbp+n_authors]", "mov     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r9, r8; n_authors", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_arn", "nop", "leave", "retn"], ["mov~r8,[rbp+0]", "mov~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [1, 1, 3, 0, 4, 4, 0, 31, 0.125, 0, 3], "succs": [[2, 3], [0], [0], []], "fname": "version_etc_ar", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 9, 1, 0, 1, 0, 0, 0, 0, 0.15277777777777776, ["add     [rbp+n_authors], 1"], ["add~[rbp+0],0"]], [0, 0, 9, 0, 0, 7, 1, 1, 4, 2, 0.29166666666666663, ["mov     rdx, [rax]", "mov     rax, [rbp+n_authors]", "mov     [rbp+rax*8+authtab], rdx", "mov     rax, [rbp+n_authors]", "mov     rax, [rbp+rax*8+authtab]", "test    rax, rax", "jnz     short loc_153C0"], ["mov~rdx,<TAG>", "mov~rax,[rbp+0]", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,[rbp+0]", "test~rax,rax", "jnz~FOO"]], [0, 0, 9, 0, 0, 5, 0, 0, 3, 3, 0.07638888888888888, ["mov     rax, [rbp+authors]", "mov     rax, [rax+8]", "lea     rcx, [rax+8]", "mov     rdx, [rbp+authors]", "mov     [rdx+8], rcx"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~[rdx+0],rcx"]], [1, 0, 9, 0, 0, 4, 0, 1, 2, 4, 0.20833333333333331, ["mov     rax, [rbp+authors]", "mov     eax, [rax]", "cmp     eax, 2Fh ; '/'", "ja      short loc_1540A"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "cmp~eax,0", "ja~FOO"]], [0, 0, 9, 1, 0, 12, 0, 1, 3, 3, 0.07638888888888888, ["mov     rax, [rbp+authors]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+authors]", "mov     eax, [rax]", "mov     eax, eax", "add     rax, rdx", "mov     rdx, [rbp+authors]", "mov     edx, [rdx]", "lea     ecx, [rdx+8]", "mov     rdx, [rbp+authors]", "mov     [rdx], ecx", "jmp     short loc_15424"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "mov~eax,eax", "add~rax,rdx", "mov~rdx,[rbp+0]", "mov~edx,<TAG>", "lea~ecx,[rdx+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,ecx", "jmp~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 1, 2, 0.3055555555555555, ["cmp     [rbp+n_authors], 9", "ja      short loc_1543E"], ["cmp~[rbp+0],0", "ja~FOO"]], [2, 0, 9, 1, 0, 13, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0A0h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+authors], r8", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+n_authors], 0", "jmp     short loc_153C5"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 1, 14, 1, 2, 2, 1, 0.19444444444444442, ["mov     r8, [rbp+n_authors]", "lea     rdi, [rbp+authtab]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r9, r8; n_authors", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_arn", "nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_1547F"], ["mov~r8,[rbp+0]", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r9,r8", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 3, 8, 1, 10, 12, 1, 61, 0.13056, 1, 3], "succs": [[5], [0, 8], [1], [2, 4], [1], [8, 3], [5], [], [9, 7], []], "fname": "version_etc_va", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 4, 1, 0, 11, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0F0h", "mov     [rbp+stream], rdi", "mov     [rbp+command_name], rsi", "mov     [rbp+package], rdx", "mov     [rbp+version], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_154DA"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [1, 1, 2, 0, 1, 21, 2, 2, 0, 1, 0.3333333333333333, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+authors.gp_offset], 20h ; ' '", "mov     [rbp+authors.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+authors.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+authors.reg_save_area], rax", "lea     rdi, [rbp+authors]", "mov     rcx, [rbp+version]; version", "mov     rdx, [rbp+package]; package", "mov     rsi, [rbp+command_name]; command_name", "mov     rax, [rbp+stream]", "mov     r8, rdi; authors", "mov     rdi, rax; stream", "call    version_etc_va", "nop", "mov     rax, [rbp+var_B8]", "xor     rax, fs:28h", "jz      short locret_1555F"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],<STR>", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rdi,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~r8,rdi", "mov~rdi,rax", "call~FOO", "nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 8, 0, 0, 0, 2, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [2, 3, 4, 12, 5, 5, 1, 43, 0.06667, 1, 1], "succs": [[1, 2], [3, 4], [1], [], []], "fname": "version_etc", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 0, 0, 2, 6, 28, 0, 6, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 8", "lea     rdi, aReportBugsToS; \"\\nReport bugs to: %s\\n\"", "call    _gettext", "lea     rsi, aBugCoreutilsGn; \"bug-coreutils@gnu.org\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "lea     rdi, aSHomePageS; \"%s home page: <%s>\\n\"", "call    _gettext", "lea     rdx, aHttpsWwwGnuOrg_0; \"https://www.gnu.org/software/coreutils/\"", "lea     rsi, aGnuCoreutils_0; \"GNU coreutils\"", "mov     rdi, rax; format", "mov     eax, 0", "call    _printf", "mov     rbx, cs:stdout@@GLIBC_2_2_5", "lea     rdi, aGeneralHelpUsi; \"General help using GNU software: <https\"...", "call    _gettext", "mov     rsi, rbx; stream", "mov     rdi, rax; s", "call    _fputs_unlocked", "nop", "add     rsp, 8", "pop     rbx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "lea~rdi,<TAG>", "call~FOO", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "lea~rdi,<TAG>", "call~FOO", "lea~rdx,<TAG>", "lea~rsi,<TAG>", "mov~rdi,rax", "mov~eax,0", "call~FOO", "mov~rbx,<TAG>", "lea~rdi,<TAG>", "call~FOO", "mov~rsi,rbx", "mov~rdi,rax", "call~FOO", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]]], "func_feature": [6, 0, 6, 0, 1, 0, 0, 28, 0.0, 7, 2], "succs": [[]], "fname": "emit_bug_reporting_address", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 1, 0, 1, 8, 1, 1, 0, 0, 0.0, ["mov     [rbp+can], 0", "call    _geteuid", "test    eax, eax", "setz    al", "mov     [rbp+can], al", "movzx   eax, [rbp+can]", "mov     cs:can_write_2820, al", "mov     cs:initialized_2819, 1"], ["mov~[rbp+0],0", "call~FOO", "test~eax,eax", "setz~al", "mov~[rbp+0],al", "movzx~eax,[rbp+0]", "mov~<TAG>,al", "mov~<TAG>,0"]], [2, 0, 2, 1, 0, 7, 2, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "movzx   eax, cs:initialized_2819", "xor     eax, 1", "test    al, al", "jz      short loc_1560F"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "movzx~eax,<TAG>", "xor~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["movzx   eax, cs:can_write_2820", "leave", "retn"], ["movzx~eax,<TAG>", "leave", "retn"]]], "func_feature": [1, 3, 2, 0, 3, 3, 1, 18, 0.0, 2, 1], "succs": [[2], [0, 2], []], "fname": "can_write_any_file", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 4, 0, 0, 2, 1, 0, 1, 2, 0.26666666666666666, ["test    rax, rax", "jns     short loc_15646"], ["test~rax,rax", "jns~FOO"]], [0, 0, 0, 1, 1, 6, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "leave", "retn"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "leave", "retn"]], [1, 0, 2, 0, 0, 4, 2, 1, 2, 1, 0.26666666666666666, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_15655"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [2, 0, 6, 2, 0, 9, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], rdi", "mov     [rbp+s], rsi", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_1563C"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 1, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [2, 3, 3, 0, 7, 8, 0, 24, 0.07619, 0, 3], "succs": [[3], [0, 3], [], [2, 4], [], [1, 6], [1]], "fname": "xnmalloc", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 2, 0, 0, 4, 2, 1, 0, 0, 0.26666666666666666, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_156A9"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 4, 0, 0, 2, 1, 0, 1, 2, 0.26666666666666666, ["test    rax, rax", "jns     short loc_1569A"], ["test~rax,rax", "jns~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 1, 1, 9, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdx, rax", "mov     rax, [rbp+p]", "mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "leave", "retn"], ["mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]], [1, 1, 6, 2, 0, 10, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+p], rdi", "mov     [rbp+n], rsi", "mov     [rbp+s], rdx", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_15690"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 5, 0, 0, 1, 0, 0, 1, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]]], "func_feature": [2, 3, 3, 0, 7, 8, 1, 28, 0.07619, 0, 3], "succs": [[3, 4], [0, 2], [0], [], [], [1, 6], [1]], "fname": "xnrealloc", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 6, 1, 0, 4, 0, 0, 0, 0, 0.12878787878787878, ["mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_15728"], ["mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 8, 0, 0, 2, 0, 1, 1, 4, 0.05303030303030303, ["cmp     [rbp+n], 0", "jnz     short loc_15714"], ["cmp~[rbp+0],0", "jnz~FOO"]], [2, 1, 7, 2, 0, 8, 0, 0, 2, 4, 0.0, ["mov     eax, 80h", "mov     edx, 0", "div     [rbp+s]", "mov     [rbp+n], rax", "cmp     [rbp+n], 0", "setz    al", "movzx   eax, al", "add     [rbp+n], rax"], ["mov~eax,<STR>", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "setz~al", "movzx~eax,al", "add~[rbp+0],rax"]], [1, 0, 5, 0, 0, 1, 0, 0, 3, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 12, 1, 0, 11, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+p], rdi", "mov     [rbp+pn], rsi", "mov     [rbp+s], rdx", "mov     rax, [rbp+pn]", "mov     rax, [rax]", "mov     [rbp+n], rax", "cmp     [rbp+p], 0", "jnz     short loc_15741"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 4, 0, 0, 2, 1, 0, 3, 2, 0.14393939393939395, ["test    rax, rax", "jns     short loc_15732"], ["test~rax,rax", "jns~FOO"]], [1, 0, 3, 0, 0, 1, 0, 0, 4, 2, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [2, 0, 1, 2, 0, 7, 0, 0, 2, 1, 0.015151515151515152, ["mov     rax, [rbp+n]", "shr     rax, 1", "mov     rdx, rax", "mov     rax, [rbp+n]", "add     rax, rdx", "add     rax, 1", "mov     [rbp+n], rax"], ["mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "add~rax,0", "mov~[rbp+0],rax"]], [2, 0, 3, 1, 0, 5, 0, 0, 1, 2, 0.022727272727272728, ["mov     rax, 5555555555555554h", "mov     edx, 0", "div     [rbp+s]", "cmp     [rbp+n], rax", "jb      short loc_1575F"], ["mov~rax,0", "mov~edx,0", "div~,[rbp+0]", "cmp~[rbp+0],rax", "jb~FOO"]], [1, 0, 2, 0, 0, 4, 2, 1, 4, 1, 0.09848484848484848, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jz      short loc_15778"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 1, 1, 12, 0, 1, 3, 0, 0.0, ["mov     rax, [rbp+pn]", "mov     rdx, [rbp+n]", "mov     [rax], rdx", "mov     rax, [rbp+n]", "imul    rax, [rbp+s]", "mov     rdx, rax", "mov     rax, [rbp+p]", "mov     rsi, rdx; n", "mov     rdi, rax; p", "call    xrealloc", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "imul~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [3, 3, 6, 0, 13, 16, 3, 59, 0.03555, 0, 8], "succs": [[3, 5], [0, 2], [0], [5], [8, 1], [9, 6], [9], [12], [11, 7], [10, 12], [], [], []], "fname": "x2nrealloc", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 1, 9, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+n], rdi", "mov     rax, [rbp+n]", "mov     rdi, rax; n", "call    xmalloc", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 9, 0.0, 0, 1], "succs": [[]], "fname": "xcharalloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0.16666666666666666, ["cmp     [rbp+n], 0", "jz      short loc_157E9"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 1, 3, 1, 1, 10, 0, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], rdi", "mov     rax, [rbp+n]", "mov     rdi, rax; size", "call    _malloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_157E9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 2, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 0, 4, 0, 4, 4, 12, 16, 0.04167, 0, 1], "succs": [[2, 3], [0, 3], [], []], "fname": "xmalloc", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 2, 0, 1, 0, 0, 0.07142857142857142, ["cmp     [rbp+n], 0", "jz      short loc_1584A"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 4, 0, 1, 8, 0, 2, 1, 2, 0.15476190476190477, ["mov     rdx, [rbp+n]", "mov     rax, [rbp+p]", "mov     rsi, rdx; size", "mov     rdi, rax; ptr", "call    _realloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_1584A"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [2, 0, 7, 1, 0, 7, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+n], rsi", "cmp     [rbp+n], 0", "jnz     short loc_15820"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.05952380952380952, ["mov     rax, [rbp+p]"], ["mov~rax,[rbp+0]"]], [1, 0, 6, 0, 0, 2, 0, 1, 1, 2, 0.03571428571428571, ["cmp     [rbp+p], 0", "jz      short loc_15820"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 1, 5, 0, 2, 2, 1, 0.03571428571428571, ["mov     rax, [rbp+p]", "mov     rdi, rax; ptr", "call    free", "mov     eax, 0", "jmp     short locret_1584E"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~eax,0", "jmp~FOO"]]], "func_feature": [3, 0, 8, 0, 8, 10, 4, 28, 0.04464, 0, 1], "succs": [[3, 4], [0, 4], [1, 5], [], [6], [1, 7], [], [6]], "fname": "xrealloc", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 13, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+pn], rsi", "mov     rcx, [rbp+pn]", "mov     rax, [rbp+p]", "mov     edx, 1; s", "mov     rsi, rcx; pn", "mov     rdi, rax; p", "call    x2nrealloc", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~edx,0", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 0, 13, 0.0, 0, 1], "succs": [[]], "fname": "x2realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 2, 15, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "mov     rcx, rax", "mov     rax, [rbp+s]", "mov     rdx, rax; n", "mov     esi, 0; c", "mov     rdi, rcx; s", "call    _memset", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~rdi,rcx", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 0, 15, 0.0, 0, 1], "succs": [[]], "fname": "xzalloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 4, 2, 1, 0, 0, 0.2857142857142857, ["mov     rax, rcx", "and     eax, 1", "test    al, al", "jnz     short loc_15901"], ["mov~rax,rcx", "and~eax,0", "test~al,al", "jnz~FOO"]], [0, 0, 5, 0, 0, 2, 1, 0, 1, 3, 0.23809523809523808, ["test    rax, rax", "jns     short loc_158D9"], ["test~rax,rax", "jns~FOO"]], [1, 0, 4, 0, 0, 1, 0, 0, 2, 3, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    xalloc_die"], ["call~FOO"]], [1, 0, 2, 0, 1, 8, 0, 2, 3, 1, 0.11904761904761904, ["mov     rdx, [rbp+s]", "mov     rax, [rbp+n]", "mov     rsi, rdx; size", "mov     rdi, rax; nmemb", "call    _calloc", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jnz     short loc_15906"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 1, 7, 2, 0, 9, 0, 0, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+n], rdi", "mov     [rbp+s], rsi", "mov     ecx, 0", "mov     rax, [rbp+n]", "mul     [rbp+s]", "jno     short loc_158CF"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~ecx,0", "mov~rax,[rbp+0]", "mul~,[rbp+0]", "jno~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 1, 4, 0.0, ["mov     ecx, 1"], ["mov~ecx,0"]], [0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0.0, ["mov     rax, [rbp+p]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [2, 3, 4, 0, 8, 10, 0, 29, 0.08036, 0, 2], "succs": [[3, 4], [0, 2], [0], [], [3, 7], [1, 6], [1], []], "fname": "xcalloc", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 2, 16, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+p], rdi", "mov     [rbp+s], rsi", "mov     rax, [rbp+s]", "mov     rdi, rax; n", "call    xmalloc", "mov     rcx, rax", "mov     rdx, [rbp+s]; n", "mov     rax, [rbp+p]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 2, 16, 0.0, 0, 1], "succs": [[]], "fname": "xmemdup", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 2, 14, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+string], rdi", "mov     rax, [rbp+string]", "mov     rdi, rax; s", "call    _strlen", "lea     rdx, [rax+1]", "mov     rax, [rbp+string]", "mov     rsi, rdx; s", "mov     rdi, rax; p", "call    xmemdup", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 5, 14, 0.0, 0, 1], "succs": [[]], "fname": "xstrdup", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 0, 3, 13, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "lea     rdi, aMemoryExhauste; \"memory exhausted\"", "call    _gettext", "mov     rdx, rax", "mov     eax, cs:exit_failure", "mov     rcx, rdx", "lea     rdx, aS_0; \"%s\"", "mov     esi, 0; errnum", "mov     edi, eax; status", "mov     eax, 0", "call    _error", "call    _abort"], ["push~rbp", "mov~rbp,rsp", "lea~rdi,<TAG>", "call~FOO", "mov~rdx,rax", "mov~eax,<TAG>", "mov~rcx,rdx", "lea~rdx,<TAG>", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "call~FOO"]]], "func_feature": [3, 0, 3, 0, 1, 0, 15, 13, 0.0, 3, 0], "succs": [[]], "fname": "xalloc_die", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 1, 7, 1, 2, 0, 0, 0.23809523809523808, ["mov     rax, [rbp+response]", "mov     rdi, rax; ptr", "call    free", "movzx   eax, [rbp+yes]", "mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_15A58"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "movzx~eax,[rbp+0]", "mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.07142857142857142, ["mov     [rbp+yes], 0", "jmp     short loc_15A34"], ["mov~[rbp+0],0", "jmp~FOO"]], [0, 0, 3, 0, 1, 6, 1, 1, 2, 2, 0.14285714285714285, ["mov     rax, [rbp+response]", "mov     rdi, rax; response", "call    _rpmatch", "test    eax, eax", "setnle  al", "mov     [rbp+yes], al"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnle~al", "mov~[rbp+0],al"]], [2, 0, 5, 2, 0, 7, 0, 1, 1, 3, 0.047619047619047616, ["mov     rax, [rbp+response]", "mov     rdx, [rbp+response_len]", "sub     rdx, 1", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "cmp     al, 0Ah", "jnz     short loc_15A20"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,0", "add~rax,rdx", "movzx~eax,<TAG>", "cmp~al,0", "jnz~FOO"]], [4, 0, 7, 1, 1, 17, 1, 2, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     [rbp+response], 0", "mov     [rbp+response_size], 0", "mov     rdx, cs:stdin@@GLIBC_2_2_5; stream", "lea     rcx, [rbp+response_size]", "lea     rax, [rbp+response]", "mov     rsi, rcx; n", "mov     rdi, rax; lineptr", "call    _getline", "mov     [rbp+response_len], rax", "cmp     [rbp+response_len], 0", "jg      short loc_159F8"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rdx,<TAG>", "lea~rcx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jg~FOO"]], [2, 0, 4, 2, 0, 5, 0, 0, 2, 3, 0.0, ["mov     rax, [rbp+response]", "mov     rdx, [rbp+response_len]", "sub     rdx, 1", "add     rax, rdx", "mov     byte ptr [rax], 0"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,0", "add~rax,rdx", "mov~<TAG>,0"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [4, 3, 8, 1, 8, 9, 1, 47, 0.0625, 2, 5], "succs": [[6, 7], [0], [0], [2, 5], [1, 3], [2], [], []], "fname": "yesno", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 2, 1, 0, 9, 2, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fp], rdi", "mov     rax, [rbp+fp]", "mov     eax, [rax]", "and     eax, 100h", "test    eax, eax", "jz      short loc_15A8B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]], [2, 0, 1, 0, 1, 5, 0, 1, 0, 1, 0.0, ["mov     rax, [rbp+fp]", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     rdi, rax; fp", "call    rpl_fseeko"], ["mov~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO"]]], "func_feature": [1, 2, 2, 0, 3, 3, 1, 17, 0.0, 0, 1], "succs": [[1, 2], [], [1]], "fname": "clear_ungetc_buffer_preserving_position", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 4, 0, 2, 1, 0, 0.125, ["mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _fflush", "jmp     short locret_15AD7"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 0, 1, 0, 2, 6, 0, 2, 2, 0, 0.041666666666666664, ["mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    clear_ungetc_buffer_preserving_position", "mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _fflush"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO"]], [0, 0, 3, 0, 1, 5, 1, 2, 1, 0, 0.08333333333333333, ["mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    ___freading", "test    eax, eax", "jnz     short loc_15ABF"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [2, 0, 4, 1, 0, 6, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+stream], rdi", "cmp     [rbp+stream], 0", "jz      short loc_15AB1"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [4, 1, 7, 0, 5, 6, 2, 23, 0.05, 0, 1], "succs": [[], [0], [0], [1, 2], [1, 3]], "fname": "rpl_fflush", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 4, 1, 0, 11, 2, 1, 0, 0, 0.1, ["mov     rax, [rbp+fp]", "mov     rax, [rax+10h]", "mov     rdx, rax", "mov     rax, [rbp+fp]", "mov     rax, [rax+8]", "sub     rdx, rax", "mov     rax, [rbp+fp]", "mov     eax, [rax]", "and     eax, 100h", "test    eax, eax", "jz      short loc_15B3D"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rdx,rax", "mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~eax,<STR>", "test~eax,eax", "jz~FOO"]], [0, 0, 6, 0, 0, 9, 0, 0, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+fp], rdi", "mov     rax, [rbp+fp]", "mov     rdx, [rax+28h]", "mov     rax, [rbp+fp]", "mov     rax, [rax+20h]", "cmp     rdx, rax", "jbe     short loc_15AFD"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jbe~FOO"]], [0, 0, 1, 1, 0, 1, 0, 0, 3, 1, 0.1, ["add     rax, rdx"], ["add~rax,rdx"]], [0, 0, 2, 1, 0, 8, 0, 1, 2, 2, 0.05, ["mov     rax, [rbp+fp]", "mov     rax, [rax+58h]", "mov     rcx, rax", "mov     rax, [rbp+fp]", "mov     rax, [rax+48h]", "sub     rcx, rax", "mov     rax, rcx", "jmp     short loc_15B42"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rcx,rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "sub~rcx,rax", "mov~rax,rcx", "jmp~FOO"]], [1, 0, 2, 0, 0, 1, 0, 0, 2, 2, 0.05, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 1, 0.03333333333333333, ["mov     eax, 0", "jmp     short loc_15B45"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 2, 3, 0, 7, 8, 1, 34, 0.04762, 0, 3], "succs": [[3, 4], [0, 5], [6], [2], [2], [6], []], "fname": "freadahead", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.011904761904761904, ["mov     eax, 0FFFFFFFFh", "jmp     short locret_15BFF"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 3, 0, 2, 12, 0, 3, 3, 2, 0.14285714285714285, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     ecx, eax", "mov     edx, [rbp+whence]; whence", "mov     rax, [rbp+offset]", "mov     rsi, rax; offset", "mov     edi, ecx; fd", "call    _lseek", "mov     [rbp+pos], rax", "cmp     [rbp+pos], 0FFFFFFFFFFFFFFFFh", "jnz     short loc_15BC2"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~ecx,eax", "mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,ecx", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 1, 0, 0, 11, 1, 1, 4, 1, 0.011904761904761904, ["mov     rax, [rbp+fp]", "mov     eax, [rax]", "and     eax, 0FFFFFFEFh", "mov     edx, eax", "mov     rax, [rbp+fp]", "mov     [rax], edx", "mov     rax, [rbp+fp]", "mov     rdx, [rbp+pos]", "mov     [rax+90h], rdx", "mov     eax, 0", "jmp     short locret_15BFF"], ["mov~rax,[rbp+0]", "mov~eax,<TAG>", "and~eax,0", "mov~edx,eax", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 1, 6, 0, 1, 1, 1, 0.07142857142857142, ["mov     edx, [rbp+whence]; whence", "mov     rcx, [rbp+offset]", "mov     rax, [rbp+fp]", "mov     rsi, rcx; off", "mov     rdi, rax; stream", "call    _fseeko"], ["mov~edx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO"]], [0, 0, 6, 0, 0, 6, 0, 1, 1, 2, 0.09523809523809523, ["mov     rax, [rbp+fp]", "mov     rdx, [rax+28h]", "mov     rax, [rbp+fp]", "mov     rax, [rax+20h]", "cmp     rdx, rax", "jnz     short loc_15BE9"], ["mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [1, 0, 7, 1, 0, 12, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+fp], rdi", "mov     [rbp+offset], rsi", "mov     [rbp+whence], edx", "mov     rax, [rbp+fp]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+fp]", "mov     rax, [rax+8]", "cmp     rdx, rax", "jnz     short loc_15BE9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "cmp~rdx,rax", "jnz~FOO"]], [0, 0, 5, 0, 0, 4, 1, 1, 2, 2, 0.14285714285714285, ["mov     rax, [rbp+fp]", "mov     rax, [rax+48h]", "test    rax, rax", "jnz     short loc_15BE9"], ["mov~rax,[rbp+0]", "mov~rax,[rax+0]", "test~rax,rax", "jnz~FOO"]]], "func_feature": [3, 2, 9, 0, 8, 11, 2, 55, 0.05952, 0, 1], "succs": [[2], [0, 3], [], [2], [2], [4, 7], [4, 5], [1, 4]], "fname": "rpl_fseeko", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 3, 1, 0.19444444444444442, ["mov     rdi, [rbp+var_8]", "xor     rdi, fs:28h", "jz      short locret_15CA5"], ["mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 3, 0, 0, 8, 0, 1, 4, 2, 0.020833333333333332, ["mov     rax, [rbp+s]", "movzx   eax, byte ptr [rax]", "mov     [rbp+uc], al", "movzx   edx, [rbp+uc]", "mov     rax, [rbp+pwc]", "mov     [rax], edx", "mov     eax, 1", "jmp     short loc_15C91"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~<TAG>,edx", "mov~eax,0", "jmp~FOO"]], [2, 0, 5, 0, 1, 5, 2, 2, 3, 3, 0.05555555555555555, ["mov     edi, 0; category", "call    hard_locale", "xor     eax, 1", "test    al, al", "jz      short loc_15C8D"], ["mov~edi,0", "call~FOO", "xor~eax,0", "test~al,al", "jz~FOO"]], [2, 0, 9, 1, 0, 12, 1, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+pwc], rdi", "mov     [rbp+s], rsi", "mov     [rbp+n], rdx", "mov     [rbp+ps], rcx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "cmp     [rbp+pwc], 0", "jnz     short loc_15C37"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 2, 2, 0.1875, ["mov     rax, [rbp+ret]"], ["mov~rax,[rbp+0]"]], [1, 0, 7, 0, 1, 9, 0, 1, 1, 3, 0.19444444444444442, ["mov     rcx, [rbp+ps]; p", "mov     rdx, [rbp+n]; n", "mov     rsi, [rbp+s]; s", "mov     rax, [rbp+pwc]", "mov     rdi, rax; pwc", "call    _mbrtowc", "mov     [rbp+ret], rax", "cmp     [rbp+ret], 0FFFFFFFFFFFFFFFDh", "jbe     short loc_15C8D"], ["mov~rcx,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jbe~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 3, 0.08333333333333333, ["cmp     [rbp+n], 0", "jz      short loc_15C8D"], ["cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 8, 0, 0, 2, 0, 0, 1, 4, 0.0, ["lea     rax, [rbp+wc]", "mov     [rbp+pwc], rax"], ["lea~rax,[rbp+0]", "mov~[rbp+0],rax"]]], "func_feature": [3, 4, 8, 1, 10, 13, 1, 45, 0.07361, 1, 1], "succs": [[], [0, 2], [], [1], [3, 6], [9, 7], [1], [8, 6], [4, 6], [7]], "fname": "rpl_mbrtowc", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+ctx], rdi", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 2, 6, 0.0, 0, 0], "succs": [[]], "fname": "free_permission_context", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[3, 1, 0, 1, 1, 18, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+desc], esi", "mov     [rbp+mode], edx", "mov     [rbp+ctx], rcx", "mov     rax, [rbp+ctx]", "mov     edx, 4; n", "mov     esi, 0; c", "mov     rdi, rax; s", "call    _memset", "mov     rax, [rbp+ctx]", "mov     edx, [rbp+mode]", "mov     [rax], edx", "mov     eax, 0", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~rax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~<TAG>,edx", "mov~eax,0", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 18, 0.0, 0, 1], "succs": [[]], "fname": "get_permissions", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 6, 0, 2, 1, 0, 0.08333333333333333, ["mov     edx, [rbp+mode]", "mov     eax, [rbp+desc]", "mov     esi, edx; mode", "mov     edi, eax; fd", "call    _fchmod", "jmp     short locret_15D28"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "jmp~FOO"]], [0, 0, 1, 0, 1, 5, 0, 1, 1, 0, 0.08333333333333333, ["mov     edx, [rbp+mode]", "mov     rax, [rbp+name]", "mov     esi, edx; mode", "mov     rdi, rax; file", "call    _chmod"], ["mov~edx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,edx", "mov~rdi,rax", "call~FOO"]], [2, 0, 3, 1, 0, 8, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+name], rdi", "mov     [rbp+desc], esi", "mov     [rbp+mode], edx", "cmp     [rbp+desc], 0FFFFFFFFh", "jz      short loc_15D17"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~[rbp+0],edx", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [2, 0, 4, 0, 4, 4, 2, 21, 0.04167, 0, 1], "succs": [[], [0], [0], [1, 2]], "fname": "chmod_or_fchmod", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 8, 0, 0, 2, 0, 1, 0, 0, 0.1318181818181818, ["cmp     [rbp+must_chmod], 0", "jz      short loc_15DD9"], ["cmp~[rbp+0],0", "jz~FOO"]], [6, 0, 11, 1, 0, 12, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+ctx], rdi", "mov     [rbp+name], rsi", "mov     [rbp+desc], edx", "mov     [rbp+acls_set], 0", "mov     [rbp+must_chmod], 0", "mov     [rbp+ret], 0", "mov     [rbp+early_chmod], 1", "cmp     [rbp+early_chmod], 0", "jz      short loc_15D7D"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 10, 0, 1, 10, 0, 2, 1, 2, 0.013636363636363636, ["mov     rax, [rbp+ctx]", "mov     edx, [rax]; mode", "mov     ecx, [rbp+desc]", "mov     rax, [rbp+name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    chmod_or_fchmod", "mov     [rbp+ret], eax", "cmp     [rbp+ret], 0", "jz      short loc_15D7D"], ["mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 2, 4, 3, 0.05454545454545454, ["call    ___errno_location", "mov     eax, [rax]", "jmp     short loc_15DA2"], ["call~FOO", "mov~eax,<TAG>", "jmp~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 3, 4, 0.14545454545454545, ["cmp     [rbp+ret], 0", "jz      short loc_15D9D"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 7, 0, 0, 4, 2, 1, 2, 2, 0.13636363636363635, ["movzx   eax, [rbp+early_chmod]", "xor     eax, 1", "test    al, al", "jz      short loc_15DD9"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 0, 2, 0, 1, 5, 0, 1, 6, 2, 0.0, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     [rbp+ret], 0FFFFFFFFh"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~[rbp+0],0"]], [1, 0, 3, 0, 1, 11, 0, 2, 5, 2, 0.11818181818181818, ["mov     [rbp+saved_errno], eax", "mov     rax, [rbp+ctx]", "mov     edx, [rax]; mode", "mov     ecx, [rbp+desc]", "mov     rax, [rbp+name]", "mov     esi, ecx; desc", "mov     rdi, rax; name", "call    chmod_or_fchmod", "mov     [rbp+ret], eax", "cmp     [rbp+saved_errno], 0", "jz      short loc_15DD9"], ["mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~edx,<TAG>", "mov~ecx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,ecx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.013636363636363636, ["mov     eax, 0FFFFFFFFh", "jmp     short locret_15DDC"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.06818181818181818, ["mov     eax, [rbp+ret]"], ["mov~eax,[rbp+0]"]], [1, 0, 4, 0, 0, 1, 0, 0, 4, 3, 0.05454545454545454, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [4, 2, 12, 0, 12, 17, 2, 55, 0.06136, 0, 1], "succs": [[10, 5], [0, 2], [0, 9], [7], [11, 3], [10, 4], [10], [10, 6], [], [8], [8], [7]], "fname": "set_permissions", "n_num": 12}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     rdx, [rbp+x]", "mov     ecx, eax", "rol     rdx, cl", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~ecx,eax", "rol~rdx,cl", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 11, 0.0, 0, 0], "succs": [[]], "fname": "rotl64", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     rdx, [rbp+x]", "mov     ecx, eax", "ror     rdx, cl", "mov     rax, rdx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~ecx,eax", "ror~rdx,cl", "mov~rax,rdx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 11, 0.0, 0, 0], "succs": [[]], "fname": "rotr64", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], edi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     edx, [rbp+x]", "mov     ecx, eax", "rol     edx, cl", "mov     eax, edx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~edx,[rbp+0]", "mov~ecx,eax", "rol~edx,cl", "mov~eax,edx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 11, 0.0, 0, 0], "succs": [[]], "fname": "rotl32", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], edi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     edx, [rbp+x]", "mov     ecx, eax", "ror     edx, cl", "mov     eax, edx", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~edx,[rbp+0]", "mov~ecx,eax", "ror~edx,cl", "mov~eax,edx", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 11, 0.0, 0, 0], "succs": [[]], "fname": "rotr32", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     rdx, [rbp+x]", "mov     rsi, rdx", "mov     ecx, eax", "shl     rsi, cl", "mov     eax, [rbp+n]", "mov     edx, 40h ; '@'", "sub     edx, eax", "mov     eax, edx", "mov     rdx, [rbp+x]", "mov     ecx, eax", "shr     rdx, cl", "mov     rax, rdx", "or      rax, rsi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~ecx,eax", "shl~rsi,cl", "mov~eax,[rbp+0]", "mov~edx,0", "sub~edx,eax", "mov~eax,edx", "mov~rdx,[rbp+0]", "mov~ecx,eax", "shr~rdx,cl", "mov~rax,rdx", "or~rax,rsi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 0, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotl_sz", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+n], esi", "mov     eax, [rbp+n]", "mov     rdx, [rbp+x]", "mov     rsi, rdx", "mov     ecx, eax", "shr     rsi, cl", "mov     eax, [rbp+n]", "mov     edx, 40h ; '@'", "sub     edx, eax", "mov     eax, edx", "mov     rdx, [rbp+x]", "mov     ecx, eax", "shl     rdx, cl", "mov     rax, rdx", "or      rax, rsi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],esi", "mov~eax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~ecx,eax", "shr~rsi,cl", "mov~eax,[rbp+0]", "mov~edx,0", "sub~edx,eax", "mov~eax,edx", "mov~rdx,[rbp+0]", "mov~ecx,eax", "shl~rdx,cl", "mov~rax,rdx", "or~rax,rsi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 1, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotr_sz", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+n], esi", "mov     [rbp+x], ax", "movzx   edx, [rbp+x]", "mov     eax, [rbp+n]", "mov     ecx, eax", "shl     edx, cl", "mov     eax, edx", "mov     esi, eax", "movzx   edx, [rbp+x]", "mov     eax, 10h", "sub     eax, [rbp+n]", "mov     ecx, eax", "sar     edx, cl", "mov     eax, edx", "or      eax, esi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],esi", "mov~[rbp+0],ax", "movzx~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,eax", "shl~edx,cl", "mov~eax,edx", "mov~esi,eax", "movzx~edx,[rbp+0]", "mov~eax,0", "sub~eax,[rbp+0]", "mov~ecx,eax", "sar~edx,cl", "mov~eax,edx", "or~eax,esi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 0, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotl16", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+n], esi", "mov     [rbp+x], ax", "movzx   edx, [rbp+x]", "mov     eax, [rbp+n]", "mov     ecx, eax", "sar     edx, cl", "mov     eax, edx", "mov     esi, eax", "movzx   edx, [rbp+x]", "mov     eax, 10h", "sub     eax, [rbp+n]", "mov     ecx, eax", "shl     edx, cl", "mov     eax, edx", "or      eax, esi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],esi", "mov~[rbp+0],ax", "movzx~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,eax", "sar~edx,cl", "mov~eax,edx", "mov~esi,eax", "movzx~edx,[rbp+0]", "mov~eax,0", "sub~eax,[rbp+0]", "mov~ecx,eax", "shl~edx,cl", "mov~eax,edx", "or~eax,esi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 0, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotr16", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+n], esi", "mov     [rbp+x], al", "movzx   edx, [rbp+x]", "mov     eax, [rbp+n]", "mov     ecx, eax", "shl     edx, cl", "mov     eax, edx", "mov     esi, eax", "movzx   edx, [rbp+x]", "mov     eax, 8", "sub     eax, [rbp+n]", "mov     ecx, eax", "sar     edx, cl", "mov     eax, edx", "or      eax, esi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],esi", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,eax", "shl~edx,cl", "mov~eax,edx", "mov~esi,eax", "movzx~edx,[rbp+0]", "mov~eax,0", "sub~eax,[rbp+0]", "mov~ecx,eax", "sar~edx,cl", "mov~eax,edx", "or~eax,esi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 0, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotl8", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 2, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     eax, edi", "mov     [rbp+n], esi", "mov     [rbp+x], al", "movzx   edx, [rbp+x]", "mov     eax, [rbp+n]", "mov     ecx, eax", "sar     edx, cl", "mov     eax, edx", "mov     esi, eax", "movzx   edx, [rbp+x]", "mov     eax, 8", "sub     eax, [rbp+n]", "mov     ecx, eax", "shl     edx, cl", "mov     eax, edx", "or      eax, esi", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~eax,edi", "mov~[rbp+0],esi", "mov~[rbp+0],al", "movzx~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~ecx,eax", "sar~edx,cl", "mov~eax,edx", "mov~esi,eax", "movzx~edx,[rbp+0]", "mov~eax,0", "sub~eax,[rbp+0]", "mov~ecx,eax", "shl~edx,cl", "mov~eax,edx", "or~eax,esi", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 0, 20, 0.0, 0, 2], "succs": [[]], "fname": "rotr8", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 0, 5, 0, 0, 0, 0, 0.0, ["add     rsp, 20h", "pop     p2", "pop     p1", "pop     rbp", "retn"], ["add~rsp,<STR>", "pop~p2", "pop~p1", "pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.023809523809523808, ["mov     eax, 0", "jmp     short loc_15FE9"], ["mov~eax,0", "jmp~FOO"]], [0, 0, 1, 1, 0, 4, 0, 0, 3, 0, 0.09523809523809523, ["movzx   edx, [rbp+c1]", "movzx   eax, [rbp+c2]", "sub     edx, eax", "mov     eax, edx"], ["movzx~edx,[rbp+0]", "movzx~eax,[rbp+0]", "sub~edx,eax", "mov~eax,edx"]], [1, 0, 6, 0, 2, 12, 0, 3, 1, 0, 0.11904761904761904, ["movzx   eax, byte ptr [p1]", "movzx   eax, al", "mov     edi, eax; c", "call    c_tolower", "mov     [rbp+c1], al", "movzx   eax, byte ptr [p2]", "movzx   eax, al", "mov     edi, eax; c", "call    c_tolower", "mov     [rbp+c2], al", "cmp     [rbp+c1], 0", "jz      short loc_15FDC"], ["movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~[rbp+0],al", "movzx~eax,<TAG>", "movzx~eax,al", "mov~edi,eax", "call~FOO", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jz~FOO"]], [0, 1, 7, 1, 0, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    p1", "push    p2", "sub     rsp, 20h", "mov     [rbp+s1], rdi", "mov     [rbp+s2], rsi", "mov     p1, [rbp+s1]", "mov     p2, [rbp+s2]", "cmp     p1, p2", "jnz     short loc_15FA1"], ["push~rbp", "mov~rbp,rsp", "push~p1", "push~p2", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~p1,[rbp+0]", "mov~p2,[rbp+0]", "cmp~p1,p2", "jnz~FOO"]], [2, 0, 6, 2, 0, 5, 0, 1, 2, 0, 0.047619047619047616, ["add     p1, 1", "add     p2, 1", "movzx   eax, [rbp+c1]", "cmp     al, [rbp+c2]", "jz      short loc_15FA1"], ["add~p1,0", "add~p2,0", "movzx~eax,[rbp+0]", "cmp~al,[rbp+0]", "jz~FOO"]], [0, 0, 2, 0, 0, 1, 0, 1, 3, 0, 0.047619047619047616, ["jmp     short loc_15FDD"], ["jmp~FOO"]], [0, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0.07142857142857142, ["nop"], ["nop"]]], "func_feature": [2, 0, 7, 0, 8, 10, 2, 41, 0.0506, 0, 5], "succs": [[], [0], [0], [5, 7], [1, 3], [3, 6], [2], [2]], "fname": "c_strcasecmp", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 0, 4, 2, 1, 0, 0, 0.1607142857142857, ["movzx   eax, [rbp+fclose_fail]", "xor     eax, 1", "test    al, al", "jz      short loc_1606F"], ["movzx~eax,[rbp+0]", "xor~eax,0", "test~al,al", "jz~FOO"]], [1, 1, 8, 1, 3, 24, 3, 4, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+stream], rdi", "mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    ___fpending", "test    rax, rax", "setnz   al", "mov     [rbp+some_pending], al", "mov     rax, [rbp+stream]", "mov     rdi, rax; stream", "call    _ferror_unlocked", "test    eax, eax", "setnz   al", "mov     [rbp+prev_fail], al", "mov     rax, [rbp+stream]", "mov     rdi, rax; fp", "call    rpl_fclose", "test    eax, eax", "setnz   al", "mov     [rbp+fclose_fail], al", "cmp     [rbp+prev_fail], 0", "jnz     short loc_16059"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~rax,rax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "setnz~al", "mov~[rbp+0],al", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 3, 0.08928571428571427, ["cmp     [rbp+some_pending], 0", "jnz     short loc_16059"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 5, 0, 1, 4, 0, 2, 3, 2, 0.026785714285714284, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 9", "jz      short loc_16076"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 1, 2, 0.0625, ["cmp     [rbp+fclose_fail], 0", "jz      short loc_16076"], ["cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 2, 0, 1, 2, 0, 1, 2, 2, 0.0, ["call    ___errno_location", "mov     dword ptr [rax], 0"], ["call~FOO", "mov~<TAG>,0"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.05357142857142857, ["mov     eax, 0FFFFFFFFh", "jmp     short locret_1607B"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.05357142857142857, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [5, 5, 11, 0, 9, 13, 3, 43, 0.0496, 0, 1], "succs": [[5, 6], [0, 4], [0, 3], [0, 7], [2, 7], [6], [8], [8], []], "fname": "close_stream", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 6, 0, 0, 2, 0, 1, 0, 0, 0.17857142857142855, ["cmp     [rbp+fd], 2", "jg      loc_16147"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 0, 7, 0, 1, 6, 0, 2, 1, 1, 0.10714285714285714, ["mov     rax, [rbp+dp]", "mov     rdi, rax; dirp", "call    _dirfd", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "js      loc_16147"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [0, 0, 1, 0, 2, 9, 0, 2, 5, 1, 0.07142857142857142, ["mov     rax, [rbp+dp]", "mov     rdi, rax; dirp", "call    _closedir", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     rax, [rbp+newdp]", "mov     [rbp+dp], rax"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [1, 0, 2, 0, 1, 5, 0, 2, 4, 2, 0.04464285714285714, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     [rbp+newdp], 0", "jmp     short loc_16126"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 0, 2, 9, 0, 3, 4, 2, 0.11607142857142856, ["mov     eax, [rbp+f]", "mov     edi, eax; fd", "call    _fdopendir", "mov     [rbp+newdp], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "cmp     [rbp+newdp], 0", "jnz     short loc_16126"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 2, 0, 1, 3, 0, 1, 5, 2, 0.0, ["mov     eax, [rbp+f]", "mov     edi, eax; fd", "call    _close"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]], [4, 0, 5, 0, 1, 9, 0, 1, 3, 3, 0.21428571428571427, ["mov     eax, [rbp+fd]", "mov     edx, 3", "mov     esi, 406h; action", "mov     edi, eax; fd", "mov     eax, 0", "call    rpl_fcntl", "mov     [rbp+f], eax", "cmp     [rbp+f], 0", "jns     short loc_160FD"], ["mov~eax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["mov     rax, [rbp+dp]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [2, 0, 8, 1, 1, 10, 0, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+name], rdi", "mov     rax, [rbp+name]", "mov     rdi, rax; name", "call    _opendir", "mov     [rbp+dp], rax", "cmp     [rbp+dp], 0", "jz      loc_16147"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]]], "func_feature": [9, 0, 14, 0, 9, 13, 1, 56, 0.08135, 0, 1], "succs": [[6, 7], [0, 7], [7], [2], [2, 5], [2], [3, 4], [], [1, 7]], "fname": "opendir_safer", "n_num": 9}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 1, 1, 11, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+ts], rdi", "mov     rax, [rbp+ts]", "mov     rsi, rax; tp", "mov     edi, 0; clock_id", "call    _clock_gettime", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~edi,0", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 3, 11, 0.0, 0, 1], "succs": [[]], "fname": "gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 1, 2, 1, 1, 14, 2, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "lea     rax, [rbp+ts]", "mov     rdi, rax; ts", "call    gettime", "mov     rax, [rbp+ts.tv_sec]", "mov     rdx, [rbp+ts.tv_nsec]", "mov     rcx, [rbp+var_8]", "xor     rcx, fs:28h", "jz      short locret_161AC"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "lea~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [2, 2, 3, 1, 3, 2, 0, 17, 0.0, 1, 1], "succs": [[], [0, 2], []], "fname": "current_timespec", "n_num": 3}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 1, 6, 1, 2, 0, 0, 0.041666666666666664, ["mov     rax, [rbp+p]", "lea     rsi, aPosix; \"POSIX\"", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jnz     short loc_16209"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [0, 0, 3, 0, 1, 6, 1, 2, 1, 2, 0.16666666666666666, ["mov     rax, [rbp+p]", "lea     rsi, aC_0; \"C\"", "mov     rdi, rax; s1", "call    _strcmp", "test    eax, eax", "jz      short loc_16205"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 1, 4, 1, 1, 12, 0, 2, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+category], edi", "mov     [rbp+hard], 1", "mov     eax, [rbp+category]", "mov     esi, 0; locale", "mov     edi, eax; category", "call    _setlocale", "mov     [rbp+p], rax", "cmp     [rbp+p], 0", "jz      short loc_16209"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0.0, ["movzx   eax, [rbp+hard]", "leave", "retn"], ["movzx~eax,[rbp+0]", "leave", "retn"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.041666666666666664, ["mov     [rbp+hard], 0"], ["mov~[rbp+0],0"]]], "func_feature": [3, 2, 6, 0, 5, 7, 1, 28, 0.05, 2, 1], "succs": [[3, 4], [0, 4], [1, 3], [], [3]], "fname": "hard_locale", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+h]", "mov     edx, 0", "div     [rbp+tablesize]", "mov     rax, rdx", "pop     rbp", "retn"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rax,rdx", "pop~rbp", "retn"]], [0, 0, 3, 0, 0, 4, 1, 1, 1, 0, 0.5, ["mov     rax, [rbp+s]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_1622D"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [1, 0, 3, 0, 0, 8, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     [rbp+tablesize], rsi", "mov     [rbp+h], 0", "mov     rax, [rbp+x]", "mov     [rbp+s], rax", "jmp     short loc_1624C"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 3, 2, 0, 8, 0, 0, 2, 0, 0.0, ["mov     rax, [rbp+s]", "movzx   eax, byte ptr [rax]", "movsx   rax, al", "mov     rdx, [rbp+h]", "rol     rdx, 9", "add     rax, rdx", "mov     [rbp+h], rax", "add     [rbp+s], 1"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "movsx~rax,al", "mov~rdx,[rbp+0]", "rol~rdx,0", "add~rax,rdx", "mov~[rbp+0],rax", "add~[rbp+0],0"]]], "func_feature": [0, 1, 2, 0, 4, 4, 1, 26, 0.125, 0, 3], "succs": [[], [0, 3], [1], [1]], "fname": "hash_pjw", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0.0, ["mov     rax, [rbp+codeset]", "leave", "retn"], ["mov~rax,[rbp+0]", "leave", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 1, 0, 0.3333333333333333, ["mov     rax, [rbp+codeset]", "movzx   eax, byte ptr [rax]", "test    al, al", "jnz     short loc_162A7"], ["mov~rax,[rbp+0]", "movzx~eax,<TAG>", "test~al,al", "jnz~FOO"]], [0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0.0, ["lea     rax, aAscii; \"ASCII\"", "mov     [rbp+codeset], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]], [3, 0, 4, 1, 1, 8, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     edi, 0Eh; item", "call    _nl_langinfo", "mov     [rbp+codeset], rax", "cmp     [rbp+codeset], 0", "jnz     short loc_16291"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~edi,0", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 3, 0, 0, 2, 0, 0, 1, 0, 0.0, ["lea     rax, unk_1B98B", "mov     [rbp+codeset], rax"], ["lea~rax,<TAG>", "mov~[rbp+0],rax"]]], "func_feature": [1, 1, 3, 0, 5, 6, 1, 19, 0.06667, 2, 1], "succs": [[], [0, 2], [0], [1, 4], [1]], "fname": "locale_charset", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [0, 1, 9, 1, 0, 11, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0F0h", "mov     [rbp+fd], edi", "mov     [rbp+file], rsi", "mov     [rbp+flags], edx", "mov     [rbp+var_98], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_16304"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],rsi", "mov~[rbp+0],edx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 3, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [1, 0, 2, 0, 2, 12, 1, 3, 2, 1, 0.19444444444444442, ["mov     ecx, [rbp+mode]", "mov     edx, [rbp+flags]; oflag", "mov     rsi, [rbp+file]; file", "mov     eax, [rbp+fd]", "mov     edi, eax; fd", "mov     eax, 0", "call    _openat", "mov     edi, eax; fd", "call    fd_safer", "mov     rdi, [rbp+var_B8]", "xor     rdi, fs:28h", "jz      short locret_163E5"], ["mov~ecx,[rbp+0]", "mov~edx,[rbp+0]", "mov~rsi,[rbp+0]", "mov~eax,[rbp+0]", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~edi,eax", "call~FOO", "mov~rdi,[rbp+0]", "xor~rdi,<TAG>", "jz~FOO"]], [2, 1, 6, 0, 0, 9, 0, 1, 2, 4, 0.125, ["mov     [rbp+ap.gp_offset], 18h", "mov     [rbp+ap.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+ap.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+ap.reg_save_area], rax", "mov     eax, [rbp+ap.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_16388"], ["mov~[rbp+0],<STR>", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [2, 0, 7, 0, 0, 8, 3, 1, 1, 2, 0.19444444444444442, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+mode], 0", "mov     eax, [rbp+flags]", "and     eax, 40h", "test    eax, eax", "jz      short loc_163A2"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~eax,[rbp+0]", "and~eax,0", "test~eax,eax", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 4, 2, 0, 8, 0, 1, 3, 3, 0.048611111111111105, ["mov     rax, [rbp+ap.reg_save_area]", "mov     edx, [rbp+ap.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+ap.gp_offset]", "add     edx, 8", "mov     [rbp+ap.gp_offset], edx", "jmp     short loc_1639A"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.048611111111111105, ["mov     rax, [rbp+ap.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+ap.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [0, 0, 3, 0, 0, 2, 0, 0, 4, 2, 0.125, ["mov     eax, [rax]", "mov     [rbp+mode], eax"], ["mov~eax,<TAG>", "mov~[rbp+0],eax"]]], "func_feature": [3, 5, 8, 13, 10, 12, 1, 64, 0.07361, 1, 3], "succs": [[5], [0, 5], [], [2, 6], [8, 7], [3, 4], [], [9], [9], [3]], "fname": "openat_safer", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 2, 0, 1, 1, 19, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+source], rdi", "mov     edi, 18h; n", "call    xmalloc", "mov     [rbp+s], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+source]", "mov     [rax], rdx", "mov     rax, [rbp+s]", "mov     qword ptr [rax+10h], 0", "mov     rax, [rbp+s]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+s]", "mov     [rax+8], rdx", "mov     rax, [rbp+s]", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~edi,<STR>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 1, 19, 0.0, 0, 1], "succs": [[]], "fname": "randint_new", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 4, 0, 2, 0, 0, 0.08333333333333333, ["mov     rax, [rbp+source]", "mov     rdi, rax; source", "call    randint_new", "jmp     short locret_1646F"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [1, 1, 3, 1, 1, 13, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+bytes_bound], rsi", "mov     rdx, [rbp+bytes_bound]", "mov     rax, [rbp+name]", "mov     rsi, rdx; bytes_bound", "mov     rdi, rax; name", "call    randread_new", "mov     [rbp+source], rax", "cmp     [rbp+source], 0", "jz      short loc_1646A"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]]], "func_feature": [2, 0, 4, 0, 4, 4, 1, 20, 0.04167, 0, 1], "succs": [[2], [0, 3], [], [2]], "fname": "randint_all_new", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     rax, [rax]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 7, 0.0, 0, 0], "succs": [[]], "fname": "randint_get_source", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+x], rdi", "mov     rax, [rbp+x]", "shl     rax, 8", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "shl~rax,0", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 3, 7, 0.0, 0, 1], "succs": [[]], "fname": "shift_left", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 13, 4, 0, 17, 0, 1, 0, 0, 0.1923076923076923, ["mov     rax, [rbp+randmax]", "sub     rax, [rbp+genmax]", "mov     [rbp+excess_choices], rax", "mov     rax, [rbp+excess_choices]", "mov     edx, 0", "div     [rbp+choices]", "mov     [rbp+unusable_choices], rdx", "mov     rax, [rbp+randmax]", "sub     rax, [rbp+unusable_choices]", "mov     [rbp+last_usable_choice], rax", "mov     rax, [rbp+randnum]", "mov     edx, 0", "div     [rbp+choices]", "mov     [rbp+reduced_randnum], rdx", "mov     rax, [rbp+randnum]", "cmp     rax, [rbp+last_usable_choice]", "ja      short loc_16639"], ["mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [0, 0, 13, 0, 0, 3, 0, 1, 2, 3, 0.3782051282051282, ["mov     rax, [rbp+randmax]", "cmp     rax, [rbp+genmax]", "jnz     short loc_165BF"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnz~FOO"]], [2, 0, 13, 2, 1, 9, 0, 1, 3, 6, 0.14102564102564102, ["mov     rax, [rbp+rmax]", "mov     rdi, rax; x", "call    shift_left", "add     rax, 0FFh", "mov     [rbp+rmax], rax", "add     [rbp+i], 1", "mov     rax, [rbp+rmax]", "cmp     rax, [rbp+genmax]", "jb      short loc_16500"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [1, 0, 13, 0, 0, 3, 0, 0, 2, 7, 0.11538461538461538, ["mov     [rbp+i], 0", "mov     rax, [rbp+randmax]", "mov     [rbp+rmax], rax"], ["mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 1, 1, 0, 1, 5, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]], [0, 0, 2, 0, 0, 3, 1, 1, 4, 1, 0.14102564102564102, ["mov     rsi, [rbp+var_8]", "xor     rsi, fs:28h", "jz      short locret_16666"], ["mov~rsi,[rbp+0]", "xor~rsi,<TAG>", "jz~FOO"]], [0, 0, 13, 0, 0, 3, 0, 0, 1, 4, 0.25, ["mov     rax, [rbp+randmax]", "cmp     rax, [rbp+genmax]", "jnb     loc_16590"], ["mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jnb~FOO"]], [1, 0, 13, 1, 0, 6, 0, 1, 4, 5, 0.14102564102564102, ["mov     rax, [rbp+reduced_randnum]", "mov     [rbp+randnum], rax", "mov     rax, [rbp+unusable_choices]", "sub     rax, 1", "mov     [rbp+randmax], rax", "jmp     loc_164E2"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~rax,0", "mov~[rbp+0],rax", "jmp~FOO"]], [2, 0, 13, 2, 0, 20, 1, 0, 0, 5, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 70h", "mov     [rbp+s], rdi", "mov     [rbp+genmax], rsi", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+s]", "mov     rax, [rax]", "mov     [rbp+source], rax", "mov     rax, [rbp+s]", "mov     rax, [rax+8]", "mov     [rbp+randnum], rax", "mov     rax, [rbp+s]", "mov     rax, [rax+10h]", "mov     [rbp+randmax], rax", "mov     rax, [rbp+genmax]", "add     rax, 1", "mov     [rbp+choices], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~[rbp+0],rax"]], [0, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [2, 0, 13, 4, 2, 20, 0, 2, 5, 4, 0.1923076923076923, ["mov     rax, [rbp+randnum]", "mov     rdi, rax; x", "call    shift_left", "mov     rcx, rax", "lea     rdx, [rbp+buf]", "mov     rax, [rbp+i]", "add     rax, rdx", "movzx   eax, byte ptr [rax]", "movzx   eax, al", "add     rax, rcx", "mov     [rbp+randnum], rax", "mov     rax, [rbp+randmax]", "mov     rdi, rax; x", "call    shift_left", "add     rax, 0FFh", "mov     [rbp+randmax], rax", "add     [rbp+i], 1", "mov     rax, [rbp+randmax]", "cmp     rax, [rbp+genmax]", "jb      short loc_16544"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~rcx,rax", "lea~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "movzx~eax,<TAG>", "movzx~eax,al", "add~rax,rcx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "add~rax,0", "mov~[rbp+0],rax", "add~[rbp+0],0", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "jb~FOO"]], [1, 0, 13, 0, 1, 7, 0, 1, 4, 5, 0.16666666666666666, ["mov     rdx, [rbp+i]; size", "lea     rcx, [rbp+buf]", "mov     rax, [rbp+source]", "mov     rsi, rcx; buf", "mov     rdi, rax; s", "call    randread", "mov     [rbp+i], 0"], ["mov~rdx,[rbp+0]", "lea~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0"]], [2, 0, 3, 2, 0, 14, 0, 1, 4, 2, 0.019230769230769232, ["mov     rax, [rbp+randnum]", "mov     edx, 0", "div     [rbp+choices]", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     [rax+8], rdx", "mov     rax, [rbp+excess_choices]", "mov     edx, 0", "div     [rbp+choices]", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     [rax+10h], rdx", "mov     rax, [rbp+reduced_randnum]", "jmp     short loc_16652"], ["mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~edx,0", "div~,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "jmp~FOO"]], [1, 0, 3, 0, 0, 8, 0, 1, 3, 2, 0.15384615384615385, ["mov     rax, [rbp+s]", "mov     qword ptr [rax+10h], 0", "mov     rax, [rbp+s]", "mov     rdx, [rax+10h]", "mov     rax, [rbp+s]", "mov     [rax+8], rdx", "mov     rax, [rbp+randnum]", "jmp     loc_16652"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "jmp~FOO"]]], "func_feature": [5, 2, 11, 1, 14, 18, 1, 116, 0.13507, 1, 15], "succs": [[12, 7], [0, 13], [2, 11], [2], [], [9, 4], [1, 3], [6], [6], [], [1, 10], [10], [5], [5]], "fname": "randint_genmax", "n_num": 14}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 0, 1, 2, 14, 0, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     esi, 18h", "mov     rdi, rax", "call    _explicit_bzero", "mov     rax, [rbp+s]", "mov     rdi, rax; ptr", "call    free", "nop", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "nop", "leave", "retn"]]], "func_feature": [2, 0, 2, 0, 1, 0, 1, 14, 0.0, 0, 1], "succs": [[]], "fname": "randint_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 0, 1, 4, 22, 0, 4, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     rax, [rax]", "mov     rdi, rax; s", "call    randread_free", "mov     [rbp+r], eax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+s]", "mov     rdi, rax; s", "call    randint_free", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     eax, [rbp+r]", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [4, 0, 4, 0, 1, 0, 2, 22, 0.0, 0, 1], "succs": [[]], "fname": "randint_all_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 2, 8, 0, 2, 0, 0, 0.15000000000000002, ["call    ___errno_location", "mov     esi, [rax]; errnum", "mov     eax, cs:exit_failure", "mov     rcx, r12", "mov     rdx, rbx; format", "mov     edi, eax; status", "mov     eax, 0", "call    _error"], ["call~FOO", "mov~esi,<TAG>", "mov~eax,<TAG>", "mov~rcx,r12", "mov~rdx,rbx", "mov~edi,eax", "mov~eax,0", "call~FOO"]], [0, 0, 2, 0, 1, 4, 0, 2, 2, 2, 0.07500000000000001, ["lea     rdi, aSEndOfFile; \"%s: end of file\"", "call    _gettext", "mov     rbx, rax", "jmp     short loc_1672A"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax", "jmp~FOO"]], [0, 0, 2, 0, 1, 3, 0, 1, 2, 2, 0.07500000000000001, ["lea     rdi, aSReadError; \"%s: read error\"", "call    _gettext", "mov     rbx, rax"], ["lea~rdi,<TAG>", "call~FOO", "mov~rbx,rax"]], [0, 0, 4, 0, 2, 8, 1, 3, 1, 3, 0.15000000000000002, ["mov     rax, [rbp+file_name]", "mov     rdi, rax; arg", "call    quote", "mov     r12, rax", "call    ___errno_location", "mov     eax, [rax]", "test    eax, eax", "jnz     short loc_1671B"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~r12,rax", "call~FOO", "mov~eax,<TAG>", "test~eax,eax", "jnz~FOO"]], [2, 0, 5, 1, 0, 8, 0, 1, 0, 1, 0.0, ["push    rbp", "mov     rbp, rsp", "push    r12", "push    rbx", "sub     rsp, 10h", "mov     [rbp+file_name], rdi", "cmp     [rbp+file_name], 0", "jz      short loc_16749"], ["push~rbp", "mov~rbp,rsp", "push~r12", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0.0, ["call    _abort"], ["call~FOO"]]], "func_feature": [7, 1, 10, 0, 6, 7, 0, 32, 0.075, 3, 1], "succs": [[5], [0], [0], [1, 2], [3, 5], []], "fname": "randread_error", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 2, 0, 1, 1, 20, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+source], rdi", "mov     [rbp+handler_arg], rsi", "mov     edi, 1038h; n", "call    xmalloc", "mov     [rbp+s], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+source]", "mov     [rax], rdx", "mov     rax, [rbp+s]", "lea     rdx, randread_error", "mov     [rax+8], rdx", "mov     rax, [rbp+s]", "mov     rdx, [rbp+handler_arg]", "mov     [rax+10h], rdx", "mov     rax, [rbp+s]", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~edi,<STR>", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "lea~rdx,<TAG>", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 20, 0.0, 1, 1], "succs": [[]], "fname": "simple_new", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 2, 0, 0, 4, 1, 1, 6, 0, 0.11666666666666667, ["nop", "mov     rax, [rbp+var_8]", "xor     rax, fs:28h", "jz      short locret_16A21"], ["nop", "mov~rax,[rbp+0]", "xor~rax,<TAG>", "jz~FOO"]], [0, 0, 13, 0, 1, 3, 0, 1, 2, 0, 0.10833333333333334, ["mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    _close"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO"]], [1, 0, 15, 0, 1, 12, 0, 1, 1, 0, 0.008333333333333333, ["mov     rax, [rbp+bufsize]", "cmp     [rbp+bytes_bound], rax", "cmovbe  rax, [rbp+bytes_bound]", "mov     rdx, rax; nbytes", "mov     rcx, [rbp+buf]", "mov     eax, [rbp+fd]", "mov     rsi, rcx; buf", "mov     edi, eax; fd", "call    _read", "mov     [rbp+seeded], rax", "cmp     [rbp+seeded], 0", "jns     short loc_1681E"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "cmovbe~rax,[rbp+0]", "mov~rdx,rax", "mov~rcx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rcx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 14, 0, 0, 1, 0, 0, 2, 0, 0.0, ["mov     [rbp+seeded], 0"], ["mov~[rbp+0],0"]], [0, 0, 6, 0, 0, 3, 0, 0, 4, 0, 0.25, ["mov     rax, [rbp+seeded]", "cmp     [rbp+bufsize], rax", "jbe     short loc_169AD"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 8, 0, 0, 3, 0, 0, 3, 0, 0.26666666666666666, ["mov     rax, [rbp+seeded]", "cmp     [rbp+bufsize], rax", "jbe     short loc_1694E"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [2, 0, 7, 2, 2, 22, 0, 2, 4, 0, 0.0, ["mov     rax, [rbp+seeded]", "mov     rdx, [rbp+bufsize]", "sub     rdx, rax", "mov     rax, rdx", "mov     edx, 4", "cmp     rax, 4", "cmova   rax, rdx", "mov     [rbp+nbytes_1], rax", "call    _getppid", "mov     dword ptr [rbp+v.tv_sec], eax", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nbytes_1]; n", "lea     rax, [rbp+v]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+nbytes_1]", "add     rax, rdx", "mov     [rbp+seeded], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~edx,0", "cmp~rax,0", "cmova~rax,rdx", "mov~[rbp+0],rax", "call~FOO", "mov~[word ptr [rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [5, 0, 16, 1, 1, 19, 1, 2, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "add     rsp, 0FFFFFFFFFFFFFF80h", "mov     [rbp+buffer], rdi", "mov     [rbp+bufsize], rsi", "mov     [rbp+bytes_bound], rdx", "mov     rax, fs:28h", "mov     [rbp+var_8], rax", "xor     eax, eax", "mov     rax, [rbp+buffer]", "mov     [rbp+buf], rax", "mov     [rbp+seeded], 0", "mov     esi, 0; oflag", "lea     rdi, aDevUrandom; \"/dev/urandom\"", "mov     eax, 0", "call    _open", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "js      short loc_16828"], ["push~rbp", "mov~rbp,rsp", "add~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~[rbp+0],0", "mov~esi,0", "lea~rdi,<TAG>", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [2, 0, 5, 2, 2, 22, 0, 2, 5, 0, 0.0, ["mov     rax, [rbp+seeded]", "mov     rdx, [rbp+bufsize]", "sub     rdx, rax", "mov     rax, rdx", "mov     edx, 4", "cmp     rax, 4", "cmova   rax, rdx", "mov     [rbp+nbytes_2], rax", "call    _getuid", "mov     dword ptr [rbp+v.tv_sec], eax", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nbytes_2]; n", "lea     rax, [rbp+v]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+nbytes_2]", "add     rax, rdx", "mov     [rbp+seeded], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~edx,0", "cmp~rax,0", "cmova~rax,rdx", "mov~[rbp+0],rax", "call~FOO", "mov~[word ptr [rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [2, 0, 9, 2, 2, 22, 0, 2, 3, 0, 0.0, ["mov     rax, [rbp+seeded]", "mov     rdx, [rbp+bufsize]", "sub     rdx, rax", "mov     rax, rdx", "mov     edx, 4", "cmp     rax, 4", "cmova   rax, rdx", "mov     [rbp+nbytes_0], rax", "call    _getpid", "mov     dword ptr [rbp+v.tv_sec], eax", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nbytes_0]; n", "lea     rax, [rbp+v]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+nbytes_0]", "add     rax, rdx", "mov     [rbp+seeded], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~edx,0", "cmp~rax,0", "cmova~rax,rdx", "mov~[rbp+0],rax", "call~FOO", "mov~[word ptr [rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [0, 0, 10, 0, 0, 3, 0, 0, 2, 0, 0.25, ["mov     rax, [rbp+seeded]", "cmp     [rbp+bufsize], rax", "jbe     short loc_168EF"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [3, 0, 11, 2, 2, 24, 0, 2, 2, 0, 0.0, ["mov     rax, [rbp+seeded]", "mov     rdx, [rbp+bufsize]", "sub     rdx, rax", "mov     rax, rdx", "mov     edx, 10h", "cmp     rax, 10h", "cmova   rax, rdx", "mov     [rbp+nbytes], rax", "lea     rax, [rbp+v]", "mov     esi, 0; tz", "mov     rdi, rax; tv", "call    _gettimeofday", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nbytes]; n", "lea     rax, [rbp+v]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+nbytes]", "add     rax, rdx", "mov     [rbp+seeded], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~edx,0", "cmp~rax,0", "cmova~rax,rdx", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [0, 0, 12, 0, 0, 3, 0, 0, 1, 0, 0.2, ["mov     rax, [rbp+seeded]", "cmp     [rbp+bufsize], rax", "jbe     short loc_16890"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [2, 0, 3, 2, 2, 22, 0, 2, 6, 0, 0.0, ["mov     rax, [rbp+seeded]", "mov     rdx, [rbp+bufsize]", "sub     rdx, rax", "mov     rax, rdx", "mov     edx, 4", "cmp     rax, 4", "cmova   rax, rdx", "mov     [rbp+nbytes_3], rax", "call    _getgid", "mov     dword ptr [rbp+v.tv_sec], eax", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+buf]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+nbytes_3]; n", "lea     rax, [rbp+v]", "mov     rsi, rax; src", "mov     rdi, rcx; dest", "call    _memcpy", "mov     rdx, [rbp+seeded]", "mov     rax, [rbp+nbytes_3]", "add     rax, rdx", "mov     [rbp+seeded], rax"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "mov~edx,0", "cmp~rax,0", "cmova~rax,rdx", "mov~[rbp+0],rax", "call~FOO", "mov~[word ptr [rbp+0],eax", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "lea~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax"]], [0, 0, 4, 0, 0, 3, 0, 0, 5, 0, 0.2, ["mov     rax, [rbp+seeded]", "cmp     [rbp+bufsize], rax", "jbe     short loc_16A0C"], ["mov~rax,[rbp+0]", "cmp~[rbp+0],rax", "jbe~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 7, 0, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [14, 2, 16, 1, 17, 23, 1, 169, 0.08235, 2, 11], "succs": [[], [0, 16], [13], [2, 4], [2], [9, 15], [5, 7], [5], [3, 13], [15], [6], [10, 6], [11], [11, 12], [1], [1, 14], []], "fname": "get_nonce", "n_num": 17}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.027777777777777776, ["mov     eax, 0", "jmp     locret_16B12"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 6, 0, 1, 7, 0, 2, 2, 2, 0.041666666666666664, ["mov     rax, [rbp+name]", "lea     rsi, mode; mode", "mov     rdi, rax; file", "call    fopen_safer", "mov     [rbp+source], rax", "cmp     [rbp+source], 0", "jnz     short loc_16A85"], ["mov~rax,[rbp+0]", "lea~rsi,<TAG>", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 4, 0, 1, 8, 0, 2, 2, 3, 0.125, ["mov     rdx, [rbp+name]", "mov     rax, [rbp+source]", "mov     rsi, rdx; handler_arg", "mov     rdi, rax; source", "call    simple_new", "mov     [rbp+s], rax", "cmp     [rbp+source], 0", "jz      short loc_16AD6"], ["mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 7, 0, 0, 3, 0, 1, 1, 3, 0.08333333333333333, ["mov     [rbp+source], 0", "cmp     [rbp+name], 0", "jz      short loc_16A85"], ["mov~[rbp+0],0", "cmp~[rbp+0],0", "jz~FOO"]], [2, 0, 1, 0, 1, 4, 0, 2, 1, 1, 0.013888888888888888, ["mov     esi, 0; handler_arg", "mov     edi, 0; source", "call    simple_new", "jmp     locret_16B12"], ["mov~esi,0", "mov~edi,0", "call~FOO", "jmp~FOO"]], [1, 1, 9, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+name], rdi", "mov     [rbp+bytes_bound], rsi", "cmp     [rbp+bytes_bound], 0", "jnz     short loc_16A4E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.041666666666666664, ["mov     rax, [rbp+s]"], ["mov~rax,[rbp+0]"]], [1, 2, 2, 0, 1, 12, 0, 2, 3, 2, 0.034722222222222224, ["mov     eax, 1000h", "cmp     [rbp+bytes_bound], 1000h", "cmovbe  rax, [rbp+bytes_bound]", "mov     rdx, rax", "mov     rax, [rbp+s]", "lea     rsi, [rax+18h]; buf", "mov     rax, [rbp+source]", "mov     rcx, rdx; n", "mov     edx, 0; modes", "mov     rdi, rax; stream", "call    _setvbuf", "jmp     short loc_16B0E"], ["mov~eax,<STR>", "cmp~[rbp+0],<STR>", "cmovbe~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "lea~rsi,[rax+0]", "mov~rax,[rbp+0]", "mov~rcx,rdx", "mov~edx,0", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [2, 1, 2, 1, 2, 13, 0, 2, 3, 2, 0.034722222222222224, ["mov     rax, [rbp+s]", "mov     qword ptr [rax+18h], 0", "mov     rax, [rbp+s]", "lea     rcx, [rax+20h]", "mov     rax, [rbp+bytes_bound]", "mov     rdx, rax; bytes_bound", "mov     esi, 800h; bufsize", "mov     rdi, rcx; buffer", "call    get_nonce", "mov     rax, [rbp+s]", "add     rax, 20h", "mov     rdi, rax; s", "call    isaac_seed"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "lea~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~rdx,rax", "mov~esi,0", "mov~rdi,rcx", "call~FOO", "mov~rax,[rbp+0]", "add~rax,<STR>", "mov~rdi,rax", "call~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]]], "func_feature": [6, 0, 13, 0, 10, 13, 1, 59, 0.04028, 1, 2], "succs": [[9], [0, 2], [8, 7], [1, 2], [9], [3, 4], [9], [6], [6], []], "fname": "randread_new", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+s], rdi", "mov     [rbp+handler], rsi", "mov     rax, [rbp+s]", "mov     rdx, [rbp+handler]", "mov     [rax+8], rdx", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 10, 0.0, 0, 0], "succs": [[]], "fname": "randread_set_handler", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+s], rdi", "mov     [rbp+handler_arg], rsi", "mov     rax, [rbp+s]", "mov     rdx, [rbp+handler_arg]", "mov     [rax+10h], rdx", "nop", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "pop~rbp", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 10, 0.0, 0, 0], "succs": [[]], "fname": "randread_set_handler_arg", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0.0, ["nop", "nop", "add     rsp, 38h", "pop     rbx", "pop     rbp", "retn"], ["nop", "nop", "add~rsp,0", "pop~rbx", "pop~rbp", "retn"]], [2, 0, 6, 2, 2, 17, 0, 3, 1, 0, 0.5333333333333333, ["mov     rax, [rbp+s]", "mov     rcx, [rax]; stream", "mov     rdx, [rbp+size]; n", "mov     rax, [rbp+p]", "mov     esi, 1; size", "mov     rdi, rax; ptr", "call    _fread_unlocked", "mov     [rbp+inbytes], rax", "call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+fread_errno], eax", "mov     rax, [rbp+inbytes]", "add     [rbp+p], rax", "mov     rax, [rbp+inbytes]", "sub     [rbp+size], rax", "cmp     [rbp+size], 0", "jz      short loc_16BDB"], ["mov~rax,[rbp+0]", "mov~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~esi,0", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [0, 0, 6, 0, 1, 6, 1, 2, 2, 0, 0.3333333333333333, ["mov     rax, [rbp+s]", "mov     rax, [rax]", "mov     rdi, rax; stream", "call    _ferror_unlocked", "test    eax, eax", "jz      short loc_16BB8"], ["mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 6, 0, 0, 2, 0, 1, 3, 0, 0.08333333333333333, ["mov     ebx, [rbp+fread_errno]", "jmp     short loc_16BBD"], ["mov~ebx,[rbp+0]", "jmp~FOO"]], [1, 0, 6, 0, 0, 1, 0, 0, 3, 0, 0.08333333333333333, ["mov     ebx, 0"], ["mov~ebx,0"]], [0, 0, 6, 0, 2, 9, 0, 3, 4, 0, 0.3333333333333333, ["call    ___errno_location", "mov     [rax], ebx", "mov     rax, [rbp+s]", "mov     rax, [rax+8]", "mov     rdx, [rbp+s]", "mov     rdx, [rdx+10h]", "mov     rdi, rdx", "call    rax", "jmp     short loc_16B5F"], ["call~FOO", "mov~<TAG>,ebx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~rdx,[rbp+0]", "mov~rdx,[rdx+0]", "mov~rdi,rdx", "call~rax", "jmp~FOO"]], [1, 0, 6, 1, 0, 7, 0, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "push    rbx", "sub     rsp, 38h", "mov     [rbp+s], rdi", "mov     [rbp+p], rsi", "mov     [rbp+size], rdx"], ["push~rbp", "mov~rbp,rsp", "push~rbx", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx"]]], "func_feature": [5, 1, 9, 0, 7, 8, 1, 48, 0.19524, 0, 4], "succs": [[], [0, 2], [3, 4], [5], [5], [1], [1]], "fname": "readsource", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 10, 1, 1, 9, 0, 2, 0, 0, 0.24444444444444446, ["mov     rax, [rbp+isaac]", "lea     rdx, [rax+820h]", "mov     rax, [rbp+isaac]", "add     rax, 8", "mov     rsi, rdx; result", "mov     rdi, rax; s", "call    isaac_refill", "mov     [rbp+inbytes], 800h", "jmp     loc_16C03"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "add~rax,0", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],0", "jmp~FOO"]], [2, 0, 10, 3, 1, 20, 2, 2, 2, 4, 0.2555555555555556, ["mov     rax, [rbp+isaac]", "lea     rdx, [rax+820h]", "mov     eax, 800h", "sub     rax, [rbp+inbytes]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+inbytes]; n", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rdx, [rbp+char_p]", "mov     rax, [rbp+inbytes]", "add     rax, rdx", "mov     [rbp+p], rax", "mov     rax, [rbp+inbytes]", "sub     [rbp+size], rax", "mov     rax, [rbp+p]", "and     eax, 7", "test    rax, rax", "jnz     short loc_16CFC"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "and~eax,0", "test~rax,rax", "jnz~FOO"]], [0, 0, 10, 0, 0, 2, 0, 0, 5, 4, 0.15555555555555556, ["mov     rax, [rbp+wp]", "mov     [rbp+p], rax"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax"]], [0, 0, 10, 0, 0, 5, 0, 1, 1, 2, 0.37777777777777777, ["mov     rax, [rbp+p]", "mov     [rbp+char_p], rax", "mov     rax, [rbp+size]", "cmp     rax, [rbp+inbytes]", "ja      short loc_16C57"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "cmp~rax,[rbp+0]", "ja~FOO"]], [1, 0, 1, 0, 0, 3, 0, 1, 6, 1, 0.03333333333333333, ["mov     rax, [rbp+isaac]", "mov     qword ptr [rax], 0", "jmp     short locret_16D27"], ["mov~rax,[rbp+0]", "mov~<TAG>,0", "jmp~FOO"]], [3, 0, 10, 2, 1, 10, 0, 2, 5, 2, 0.1, ["mov     rax, [rbp+isaac]", "lea     rdx, [rax+8]", "mov     rax, [rbp+wp]", "mov     rsi, rax; result", "mov     rdi, rdx; s", "call    isaac_refill", "add     [rbp+wp], 800h", "sub     [rbp+size], 800h", "cmp     [rbp+size], 0", "jnz     short loc_16CEA"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rdx", "call~FOO", "add~[rbp+0],0", "sub~[rbp+0],0", "cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 4, 3, 0.3111111111111111, ["cmp     [rbp+size], 7FFh", "ja      short loc_16CAF"], ["cmp~[rbp+0],0", "ja~FOO"]], [0, 0, 10, 0, 0, 3, 0, 1, 3, 4, 0.2111111111111111, ["mov     rax, [rbp+p]", "mov     [rbp+wp], rax", "jmp     short loc_16CEA"], ["mov~rax,[rbp+0]", "mov~[rbp+0],rax", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 2, 1, 16, 0, 2, 2, 1, 0.05555555555555556, ["mov     rax, [rbp+isaac]", "lea     rdx, [rax+820h]", "mov     eax, 800h", "sub     rax, [rbp+inbytes]", "lea     rcx, [rdx+rax]", "mov     rdx, [rbp+size]; n", "mov     rax, [rbp+p]", "mov     rsi, rcx; src", "mov     rdi, rax; dest", "call    _memcpy", "mov     rax, [rbp+inbytes]", "sub     rax, [rbp+size]", "mov     rdx, rax", "mov     rax, [rbp+isaac]", "mov     [rax], rdx", "jmp     locret_16D27"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~eax,0", "sub~rax,[rbp+0]", "lea~rcx,<TAG>", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "sub~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~<TAG>,rdx", "jmp~FOO"]], [1, 0, 10, 1, 0, 9, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 40h", "mov     [rbp+isaac], rdi", "mov     [rbp+p], rsi", "mov     [rbp+size], rdx", "mov     rax, [rbp+isaac]", "mov     rax, [rax]", "mov     [rbp+inbytes], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax"]]], "func_feature": [4, 2, 12, 0, 11, 14, 1, 81, 0.15859, 0, 9], "succs": [[3], [0, 7], [0], [1, 9], [8], [4, 6], [2, 5], [6], [], [8], [3]], "fname": "readisaac", "n_num": 11}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 1, 7, 0, 2, 0, 0, 0.08333333333333333, ["mov     rdx, [rbp+size]; size", "mov     rcx, [rbp+buf]", "mov     rax, [rbp+s]", "mov     rsi, rcx; p", "mov     rdi, rax; s", "call    readsource", "jmp     short loc_16D7D"], ["mov~rdx,[rbp+0]", "mov~rcx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rcx", "mov~rdi,rax", "call~FOO", "jmp~FOO"]], [0, 1, 3, 1, 0, 10, 1, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+s], rdi", "mov     [rbp+buf], rsi", "mov     [rbp+size], rdx", "mov     rax, [rbp+s]", "mov     rax, [rax]", "test    rax, rax", "jz      short loc_16D62"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~[rbp+0],rdx", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "test~rax,rax", "jz~FOO"]], [0, 0, 1, 0, 1, 7, 0, 1, 1, 1, 0.08333333333333333, ["mov     rax, [rbp+s]", "lea     rcx, [rax+18h]", "mov     rdx, [rbp+size]; size", "mov     rax, [rbp+buf]", "mov     rsi, rax; p", "mov     rdi, rcx; isaac", "call    readisaac"], ["mov~rax,[rbp+0]", "lea~rcx,[rax+0]", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rax", "mov~rdi,rcx", "call~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0.0, ["nop", "leave", "retn"], ["nop", "leave", "retn"]]], "func_feature": [2, 1, 4, 0, 4, 4, 1, 27, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "randread", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 2, 3, 1, 2, 16, 0, 3, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+s], rdi", "mov     rax, [rbp+s]", "mov     rax, [rax]", "mov     [rbp+source], rax", "mov     rax, [rbp+s]", "mov     esi, 1038h", "mov     rdi, rax", "call    _explicit_bzero", "mov     rax, [rbp+s]", "mov     rdi, rax; ptr", "call    free", "cmp     [rbp+source], 0", "jz      short loc_16DC9"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~esi,<STR>", "mov~rdi,rax", "call~FOO", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 4, 0, 2, 0, 1, 0.08333333333333333, ["mov     rax, [rbp+source]", "mov     rdi, rax; fp", "call    rpl_fclose", "jmp     short locret_16DCE"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]]], "func_feature": [3, 0, 5, 0, 4, 4, 1, 23, 0.04167, 0, 1], "succs": [[1, 3], [2], [], [2]], "fname": "randread_free", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+a], rdi", "mov     [rbp+desired_bits], 0FFFFFFFFFFFFFFFFh", "mov     rax, [rbp+a]", "and     rax, [rbp+desired_bits]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "and~rax,[rbp+0]", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 20, 8, 0.0, 0, 0], "succs": [[]], "fname": "just", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 0, 1, 0, 20, 1, 0, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+m], rdi", "mov     [rbp+x], rsi", "mov     rax, [rbp+m]", "mov     [rbp+void_m], rax", "mov     rax, [rbp+void_m]", "mov     [rbp+base_p], rax", "mov     rax, [rbp+x]", "and     eax, 7F8h", "mov     rdx, rax", "mov     rax, [rbp+base_p]", "add     rax, rdx", "mov     [rbp+word_p], rax", "mov     rax, [rbp+word_p]", "mov     [rbp+p], rax", "mov     rax, [rbp+p]", "mov     rax, [rax]", "pop     rbp", "retn"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "and~eax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "pop~rbp", "retn"]]], "func_feature": [0, 1, 0, 0, 1, 0, 16, 20, 0.0, 0, 1], "succs": [[]], "fname": "ind", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[14, 2, 2, 26, 14, 185, 4, 14, 0, 0, 0.3333333333333333, ["mov     rax, [rbp+m]", "sub     rax, 400h", "mov     rdx, [rax]", "mov     rax, [rbp+a]", "shl     rax, 15h", "xor     rax, [rbp+a]", "sub     rdx, rax", "mov     rax, rdx", "sub     rax, 1", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax]", "mov     [rbp+x_3], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_3]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_3], rax", "mov     rax, [rbp+m]", "mov     rdx, [rbp+y_3]", "mov     [rax], rdx", "mov     rax, [rbp+y_3]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_3]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "mov     rdx, [rbp+b]", "mov     [rax], rdx", "mov     rax, [rbp+a]", "mov     rdi, rax; a", "call    just", "shr     rax, 5", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "sub     rax, 3F8h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+8]", "mov     [rbp+x_4], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_4]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_4], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+8]", "mov     rax, [rbp+y_4]", "mov     [rdx], rax", "mov     rax, [rbp+y_4]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_4]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+8]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "mov     rax, [rbp+a]", "shl     rax, 0Ch", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "sub     rax, 3F0h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+10h]", "mov     [rbp+x_5], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_5]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_5], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+10h]", "mov     rax, [rbp+y_5]", "mov     [rdx], rax", "mov     rax, [rbp+y_5]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_5]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+10h]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "mov     rax, [rbp+a]", "mov     rdi, rax; a", "call    just", "shr     rax, 21h", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "sub     rax, 3E8h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+18h]", "mov     [rbp+x_6], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_6]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_6], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+18h]", "mov     rax, [rbp+y_6]", "mov     [rdx], rax", "mov     rax, [rbp+y_6]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_6]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+18h]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "add     [rbp+r], 20h", "add     [rbp+m], 20h", "mov     rax, [rbp+s]", "add     rax, 800h", "cmp     [rbp+m], rax", "jb      loc_17223"], ["mov~rax,[rbp+0]", "sub~rax,0", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "shl~rax,0", "xor~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "sub~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "sub~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "add~[rbp+0],<STR>", "add~[rbp+0],<STR>", "mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jb~FOO"]], [14, 2, 3, 26, 14, 185, 4, 14, 1, 2, 0.3333333333333333, ["mov     rax, [rbp+m]", "add     rax, 400h", "mov     rdx, [rax]", "mov     rax, [rbp+a]", "shl     rax, 15h", "xor     rax, [rbp+a]", "sub     rdx, rax", "mov     rax, rdx", "sub     rax, 1", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax]", "mov     [rbp+x], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y], rax", "mov     rax, [rbp+m]", "mov     rdx, [rbp+y]", "mov     [rax], rdx", "mov     rax, [rbp+y]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "mov     rdx, [rbp+b]", "mov     [rax], rdx", "mov     rax, [rbp+a]", "mov     rdi, rax; a", "call    just", "shr     rax, 5", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "add     rax, 408h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+8]", "mov     [rbp+x_0], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_0]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_0], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+8]", "mov     rax, [rbp+y_0]", "mov     [rdx], rax", "mov     rax, [rbp+y_0]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_0]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+8]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "mov     rax, [rbp+a]", "shl     rax, 0Ch", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "add     rax, 410h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+10h]", "mov     [rbp+x_1], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_1]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_1], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+10h]", "mov     rax, [rbp+y_1]", "mov     [rdx], rax", "mov     rax, [rbp+y_1]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_1]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+10h]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "mov     rax, [rbp+a]", "mov     rdi, rax; a", "call    just", "shr     rax, 21h", "xor     rax, [rbp+a]", "mov     rdx, rax", "mov     rax, [rbp+m]", "add     rax, 418h", "mov     rax, [rax]", "add     rax, rdx", "mov     [rbp+a], rax", "mov     rax, [rbp+m]", "mov     rax, [rax+18h]", "mov     [rbp+x_2], rax", "mov     rax, [rbp+s]", "mov     rdx, [rbp+x_2]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+a]", "add     rdx, rax", "mov     rax, [rbp+b]", "add     rax, rdx", "mov     [rbp+y_2], rax", "mov     rax, [rbp+m]", "lea     rdx, [rax+18h]", "mov     rax, [rbp+y_2]", "mov     [rdx], rax", "mov     rax, [rbp+y_2]", "shr     rax, 8", "mov     rdx, rax", "mov     rax, [rbp+s]", "mov     rsi, rdx; x", "mov     rdi, rax; m", "call    ind", "mov     rdx, rax", "mov     rax, [rbp+x_2]", "add     rax, rdx", "mov     rdi, rax; a", "call    just", "mov     [rbp+b], rax", "mov     rax, [rbp+r]", "lea     rdx, [rax+18h]", "mov     rax, [rbp+b]", "mov     [rdx], rax", "add     [rbp+r], 20h", "add     [rbp+m], 20h", "mov     rax, [rbp+s]", "add     rax, 400h", "cmp     [rbp+m], rax", "jb      loc_16EBE"], ["mov~rax,[rbp+0]", "add~rax,0", "mov~rdx,<TAG>", "mov~rax,[rbp+0]", "shl~rax,0", "xor~rax,[rbp+0]", "sub~rdx,rax", "mov~rax,rdx", "sub~rax,0", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~<TAG>,rdx", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~rax,[rbp+0]", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,0", "mov~rax,<TAG>", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "mov~rax,[rbp+0]", "shr~rax,0", "mov~rdx,rax", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~rdx,rax", "mov~rax,[rbp+0]", "add~rax,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~<TAG>,rax", "add~[rbp+0],<STR>", "add~[rbp+0],<STR>", "mov~rax,[rbp+0]", "add~rax,0", "cmp~[rbp+0],rax", "jb~FOO"]], [0, 0, 0, 0, 0, 9, 0, 0, 3, 0, 0.0, ["mov     rax, [rbp+s]", "mov     rdx, [rbp+a]", "mov     [rax+800h], rdx", "mov     rax, [rbp+s]", "mov     rdx, [rbp+b]", "mov     [rax+808h], rdx", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]], [1, 0, 3, 2, 0, 23, 0, 0, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 0B0h", "mov     [rbp+s], rdi", "mov     [rbp+result], rsi", "mov     rax, [rbp+s]", "mov     rax, [rax+800h]", "mov     [rbp+a], rax", "mov     rax, [rbp+s]", "mov     rdx, [rax+808h]", "mov     rax, [rbp+s]", "mov     rax, [rax+810h]", "lea     rcx, [rax+1]", "mov     rax, [rbp+s]", "mov     [rax+810h], rcx", "mov     rax, [rbp+s]", "mov     rax, [rax+810h]", "add     rax, rdx", "mov     [rbp+b], rax", "mov     rax, [rbp+s]", "mov     [rbp+m], rax", "mov     rax, [rbp+result]", "mov     [rbp+r], rax"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "lea~rcx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rcx", "mov~rax,[rbp+0]", "mov~rax,[rax+0]", "add~rax,rdx", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~[rbp+0],rax"]]], "func_feature": [28, 8, 28, 0, 4, 5, 2, 402, 0.16667, 0, 54], "succs": [[0, 2], [0, 1], [], [1]], "fname": "isaac_refill", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[9, 0, 6, 29, 4, 159, 8, 4, 0, 0, 0.0, ["mov     rax, [rbp+s]", "mov     edx, [rbp+i]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+a], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+1]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+b], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+2]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+c], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+3]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+d], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+4]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+e], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+5]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+f], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+6]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+g], rax", "mov     eax, [rbp+i]", "lea     edx, [rax+7]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+h], rax", "mov     rax, [rbp+e]", "sub     [rbp+a], rax", "mov     rax, [rbp+h]", "mov     rdi, rax; a", "call    just", "shr     rax, 9", "xor     [rbp+f], rax", "mov     rax, [rbp+a]", "add     [rbp+h], rax", "mov     rax, [rbp+f]", "sub     [rbp+b], rax", "mov     rax, [rbp+a]", "shl     rax, 9", "xor     [rbp+g], rax", "mov     rax, [rbp+b]", "add     [rbp+a], rax", "mov     rax, [rbp+g]", "sub     [rbp+c], rax", "mov     rax, [rbp+b]", "mov     rdi, rax; a", "call    just", "shr     rax, 17h", "xor     [rbp+h], rax", "mov     rax, [rbp+c]", "add     [rbp+b], rax", "mov     rax, [rbp+h]", "sub     [rbp+d], rax", "mov     rax, [rbp+c]", "shl     rax, 0Fh", "xor     [rbp+a], rax", "mov     rax, [rbp+d]", "add     [rbp+c], rax", "mov     rax, [rbp+a]", "sub     [rbp+e], rax", "mov     rax, [rbp+d]", "mov     rdi, rax; a", "call    just", "shr     rax, 0Eh", "xor     [rbp+b], rax", "mov     rax, [rbp+e]", "add     [rbp+d], rax", "mov     rax, [rbp+b]", "sub     [rbp+f], rax", "mov     rax, [rbp+e]", "shl     rax, 14h", "xor     [rbp+c], rax", "mov     rax, [rbp+f]", "add     [rbp+e], rax", "mov     rax, [rbp+c]", "sub     [rbp+g], rax", "mov     rax, [rbp+f]", "mov     rdi, rax; a", "call    just", "shr     rax, 11h", "xor     [rbp+d], rax", "mov     rax, [rbp+g]", "add     [rbp+f], rax", "mov     rax, [rbp+d]", "sub     [rbp+h], rax", "mov     rax, [rbp+g]", "shl     rax, 0Eh", "xor     [rbp+e], rax", "mov     rax, [rbp+h]", "add     [rbp+g], rax", "mov     rax, [rbp+s]", "mov     edx, [rbp+i]", "movsxd  rdx, edx", "mov     rcx, [rbp+a]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+1]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+b]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+2]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+c]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+3]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+d]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+4]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+e]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+5]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+f]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+6]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+g]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i]", "lea     edx, [rax+7]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+h]", "mov     [rax+rdx*8], rcx", "add     [rbp+i], 8"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "add~[rbp+0],0"]], [1, 0, 6, 0, 0, 2, 0, 1, 1, 3, 0.3, ["cmp     [rbp+i], 0FFh", "jle     loc_1763D"], ["cmp~[rbp+0],0", "jle~FOO"]], [9, 0, 3, 29, 4, 159, 8, 4, 4, 2, 0.0, ["mov     rax, [rbp+s]", "mov     edx, [rbp+i_0]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+a], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+1]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+b], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+2]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+c], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+3]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+d], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+4]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+e], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+5]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+f], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+6]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+g], rax", "mov     eax, [rbp+i_0]", "lea     edx, [rax+7]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rax, [rax+rdx*8]", "add     [rbp+h], rax", "mov     rax, [rbp+e]", "sub     [rbp+a], rax", "mov     rax, [rbp+h]", "mov     rdi, rax; a", "call    just", "shr     rax, 9", "xor     [rbp+f], rax", "mov     rax, [rbp+a]", "add     [rbp+h], rax", "mov     rax, [rbp+f]", "sub     [rbp+b], rax", "mov     rax, [rbp+a]", "shl     rax, 9", "xor     [rbp+g], rax", "mov     rax, [rbp+b]", "add     [rbp+a], rax", "mov     rax, [rbp+g]", "sub     [rbp+c], rax", "mov     rax, [rbp+b]", "mov     rdi, rax; a", "call    just", "shr     rax, 17h", "xor     [rbp+h], rax", "mov     rax, [rbp+c]", "add     [rbp+b], rax", "mov     rax, [rbp+h]", "sub     [rbp+d], rax", "mov     rax, [rbp+c]", "shl     rax, 0Fh", "xor     [rbp+a], rax", "mov     rax, [rbp+d]", "add     [rbp+c], rax", "mov     rax, [rbp+a]", "sub     [rbp+e], rax", "mov     rax, [rbp+d]", "mov     rdi, rax; a", "call    just", "shr     rax, 0Eh", "xor     [rbp+b], rax", "mov     rax, [rbp+e]", "add     [rbp+d], rax", "mov     rax, [rbp+b]", "sub     [rbp+f], rax", "mov     rax, [rbp+e]", "shl     rax, 14h", "xor     [rbp+c], rax", "mov     rax, [rbp+f]", "add     [rbp+e], rax", "mov     rax, [rbp+c]", "sub     [rbp+g], rax", "mov     rax, [rbp+f]", "mov     rdi, rax; a", "call    just", "shr     rax, 11h", "xor     [rbp+d], rax", "mov     rax, [rbp+g]", "add     [rbp+f], rax", "mov     rax, [rbp+d]", "sub     [rbp+h], rax", "mov     rax, [rbp+g]", "shl     rax, 0Eh", "xor     [rbp+e], rax", "mov     rax, [rbp+h]", "add     [rbp+g], rax", "mov     rax, [rbp+s]", "mov     edx, [rbp+i_0]", "movsxd  rdx, edx", "mov     rcx, [rbp+a]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+1]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+b]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+2]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+c]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+3]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+d]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+4]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+e]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+5]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+f]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+6]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+g]", "mov     [rax+rdx*8], rcx", "mov     eax, [rbp+i_0]", "lea     edx, [rax+7]", "mov     rax, [rbp+s]", "movsxd  rdx, edx", "mov     rcx, [rbp+h]", "mov     [rax+rdx*8], rcx", "add     [rbp+i_0], 8"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rax,<TAG>", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "shr~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "sub~[rbp+0],rax", "mov~rax,[rbp+0]", "shl~rax,0", "xor~[rbp+0],rax", "mov~rax,[rbp+0]", "add~[rbp+0],rax", "mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "mov~eax,[rbp+0]", "lea~edx,[rax+0]", "mov~rax,[rbp+0]", "movsxd~rdx,edx", "mov~rcx,[rbp+0]", "mov~<TAG>,rcx", "add~[rbp+0],0"]], [1, 0, 3, 0, 0, 2, 0, 1, 3, 1, 0.3, ["cmp     [rbp+i_0], 0FFh", "jle     loc_178A4"], ["cmp~[rbp+0],0", "jle~FOO"]], [9, 1, 6, 1, 0, 22, 0, 1, 0, 4, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 58h", "mov     [rbp+s], rdi", "mov     rax, 647C4677A2884B7Ch", "mov     [rbp+a], rax", "mov     rax, 0B9F8B322C73AC862h", "mov     [rbp+b], rax", "mov     rax, 8C0EA5053D4712A0h", "mov     [rbp+c], rax", "mov     rax, 0B29B2E824A595524h", "mov     [rbp+d], rax", "mov     rax, 82F053DB8355E0CEh", "mov     [rbp+e], rax", "mov     rax, 48FE4A0FA5A09315h", "mov     [rbp+f], rax", "mov     rax, 0AE985BF2CBFC89EDh", "mov     [rbp+g], rax", "mov     rax, 98F5704F6C44C0ABh", "mov     [rbp+h], rax", "mov     [rbp+i], 0", "jmp     loc_1788B"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~rax,0", "mov~[rbp+0],rax", "mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 2, 2, 0.3, ["mov     [rbp+i_0], 0", "jmp     loc_17AF2"], ["mov~[rbp+0],0", "jmp~FOO"]], [1, 0, 0, 0, 0, 13, 0, 0, 4, 0, 0.0, ["mov     rax, [rbp+s]", "mov     qword ptr [rax+810h], 0", "mov     rax, [rbp+s]", "mov     rdx, [rax+810h]", "mov     rax, [rbp+s]", "mov     [rax+808h], rdx", "mov     rax, [rbp+s]", "mov     rdx, [rax+808h]", "mov     rax, [rbp+s]", "mov     [rax+800h], rdx", "nop", "leave", "retn"], ["mov~rax,[rbp+0]", "mov~[word ptr [rax+0],0", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "mov~rax,[rbp+0]", "mov~rdx,[rax+0]", "mov~rax,[rbp+0]", "mov~[rax+0],rdx", "nop", "leave", "retn"]]], "func_feature": [8, 16, 12, 0, 7, 8, 1, 359, 0.12857, 0, 59], "succs": [[1], [0, 5], [3], [2, 6], [1], [3], []], "fname": "isaac_seed", "n_num": 7}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[4, 0, 0, 1, 1, 12, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 10h", "mov     [rbp+fd], edi", "mov     eax, [rbp+fd]", "mov     edx, 3", "mov     esi, 0; action", "mov     edi, eax; fd", "mov     eax, 0", "call    rpl_fcntl", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 2, 12, 0.0, 0, 1], "succs": [[]], "fname": "dup_safer", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 3, 0, 1, 6, 0, 2, 0, 0, 0.19444444444444442, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fclose", "mov     [rbp+result], eax", "cmp     [rbp+saved_errno], 0", "jz      short loc_17C16"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jz~FOO"]], [3, 0, 6, 0, 2, 9, 0, 3, 2, 3, 0.048611111111111105, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     edx, 1; whence", "mov     esi, 0; offset", "mov     edi, eax; fd", "call    _lseek", "cmp     rax, 0FFFFFFFFFFFFFFFFh", "jz      short loc_17BED"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~edx,0", "mov~esi,0", "mov~edi,eax", "call~FOO", "cmp~rax,0", "jz~FOO"]], [0, 0, 5, 0, 1, 5, 1, 2, 2, 3, 0.09027777777777778, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    rpl_fflush", "test    eax, eax", "jz      short loc_17BED"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [0, 0, 4, 0, 1, 3, 0, 1, 3, 3, 0.0, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax"]], [0, 0, 7, 0, 1, 5, 1, 2, 1, 4, 0.08333333333333333, ["mov     rax, [rbp+fp]", "mov     rdi, rax; fp", "call    ___freading", "test    eax, eax", "jz      short loc_17BD3"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jz~FOO"]], [3, 1, 9, 1, 1, 12, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fp], rdi", "mov     [rbp+saved_errno], 0", "mov     [rbp+result], 0", "mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "jns     short loc_17BA0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],rdi", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 2, 0, 1, 5, 0, 1, 4, 2, 0.0, ["call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     [rbp+result], 0FFFFFFFFh"], ["call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~[rbp+0],0"]], [0, 0, 1, 0, 0, 1, 0, 0, 4, 1, 0.08333333333333333, ["mov     eax, [rbp+result]"], ["mov~eax,[rbp+0]"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [0, 0, 1, 0, 1, 4, 0, 2, 1, 1, 0.013888888888888888, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fclose", "jmp     short locret_17C19"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "jmp~FOO"]]], "func_feature": [9, 2, 14, 0, 10, 14, 4, 52, 0.05139, 0, 1], "succs": [[6, 7], [0, 2], [0, 3], [0], [1, 2], [9, 4], [7], [8], [], [8]], "fname": "rpl_fclose", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 8, 0, 0, 1, 0, 1, 0, 0, 0.003401360544217687, ["jmp     loc_17EDB"], ["jmp~FOO"]], [1, 0, 13, 0, 0, 2, 0, 1, 11, 6, 0.008503401360544217, ["cmp     eax, 0Ah", "jz      short loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 5, 2, 0, 8, 0, 1, 11, 4, 0.010629251700680272, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_17F1B"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [1, 0, 7, 0, 0, 3, 0, 1, 10, 5, 0.04379251700680272, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_17F09"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 0.003401360544217687, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 6, 0, 0, 3, 0, 1, 2, 4, 0.007653061224489796, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_17CFF"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 17, 0, 0, 2, 0, 1, 7, 5, 0.02147108843537415, ["cmp     eax, 406h", "jge     short loc_17E6B"], ["cmp~eax,0", "jge~FOO"]], [1, 0, 21, 0, 0, 2, 0, 1, 6, 6, 0.047619047619047616, ["cmp     eax, 407h", "jg      short loc_17E2D"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 5, 0, 0, 3, 0, 0, 11, 4, 0.010629251700680272, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 5, 2, 0, 8, 0, 1, 9, 4, 0.011621315192743764, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_17EAB"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [1, 0, 7, 0, 0, 3, 0, 1, 8, 5, 0.040674603174603176, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_17E99"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 16, 0, 0, 2, 0, 1, 8, 4, 0.01636904761904762, ["cmp     eax, 401h", "jz      short loc_17E46"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 3, 0, 1, 9, 0, 2, 5, 2, 0.00510204081632653, ["mov     eax, [rax]", "mov     [rbp+target_0], eax", "mov     edx, [rbp+target_0]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD_CLOEXEC", "mov     [rbp+result], eax", "jmp     loc_17F4E"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 2, 0, 8, 0, 1, 4, 3, 0.00233843537414966, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_17D79"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [0, 0, 4, 0, 0, 3, 0, 0, 4, 3, 0.00233843537414966, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 14, 0, 0, 2, 0, 1, 9, 6, 0.013605442176870748, ["cmp     eax, 402h", "jz      short loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 5, 0, 0, 3, 0, 0, 9, 4, 0.011621315192743764, ["mov     rax, [rbp+arg.overflow_arg_area]", "lea     rdx, [rax+8]", "mov     [rbp+arg.overflow_arg_area], rdx"], ["mov~rax,[rbp+0]", "lea~rdx,[rax+0]", "mov~[rbp+0],rdx"]], [1, 0, 13, 0, 0, 2, 0, 1, 10, 6, 0.00977891156462585, ["cmp     eax, 400h", "jz      short loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_17EDB"], ["jmp~FOO"]], [1, 0, 36, 0, 0, 3, 0, 1, 4, 4, 0.07142857142857142, ["mov     eax, [rbp+action]", "cmp     eax, 0Bh", "jz      loc_17E46"], ["mov~eax,[rbp+0]", "cmp~eax,0", "jz~FOO"]], [0, 0, 37, 0, 0, 1, 0, 1, 3, 5, 0.057823129251700675, ["jmp     loc_17DA1"], ["jmp~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 7, 5, 0.028273809523809524, ["cmp     eax, 409h", "jz      short loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 35, 0, 0, 2, 0, 1, 5, 5, 0.07653061224489796, ["cmp     eax, 0Bh", "jg      short loc_17E05"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 3, 0, 1, 9, 0, 2, 4, 2, 0.007653061224489796, ["mov     eax, [rax]", "mov     [rbp+target], eax", "mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax", "jmp     loc_17F4E"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 2, 0, 8, 0, 1, 3, 3, 0.003401360544217687, ["mov     rax, [rbp+arg.reg_save_area]", "mov     edx, [rbp+arg.gp_offset]", "mov     edx, edx", "add     rax, rdx", "mov     edx, [rbp+arg.gp_offset]", "add     edx, 8", "mov     [rbp+arg.gp_offset], edx", "jmp     short loc_17D11"], ["mov~rax,[rbp+0]", "mov~edx,[rbp+0]", "mov~edx,edx", "add~rax,rdx", "mov~edx,[rbp+0]", "add~edx,0", "mov~[rbp+0],edx", "jmp~FOO"]], [1, 0, 25, 0, 0, 2, 0, 1, 6, 4, 0.03784013605442177, ["cmp     eax, 3", "jz      loc_17E46"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 10, 0, 0, 2, 0, 1, 8, 4, 0.022321428571428572, ["cmp     eax, 409h", "jl      short loc_17E46"], ["cmp~eax,0", "jl~FOO"]], [1, 0, 9, 0, 0, 2, 0, 1, 9, 4, 0.017006802721088433, ["cmp     eax, 40Ah", "jnz     loc_17EDB"], ["cmp~eax,0", "jnz~FOO"]], [1, 0, 24, 0, 0, 2, 0, 1, 7, 5, 0.04081632653061224, ["cmp     eax, 3", "jg      short loc_17DDE"], ["cmp~eax,0", "jg~FOO"]], [1, 0, 6, 0, 0, 3, 0, 1, 3, 4, 0.006377551020408163, ["mov     eax, [rbp+arg.gp_offset]", "cmp     eax, 2Fh ; '/'", "ja      short loc_17D67"], ["mov~eax,[rbp+0]", "cmp~eax,0", "ja~FOO"]], [1, 0, 42, 0, 0, 2, 0, 1, 2, 5, 0.04974489795918367, ["cmp     eax, 406h", "jz      short loc_17D39"], ["cmp~eax,0", "jz~FOO"]], [3, 0, 47, 0, 0, 13, 2, 1, 1, 5, 0.03996598639455782, ["mov     rax, fs:28h", "mov     [rbp+var_B8], rax", "xor     eax, eax", "mov     [rbp+result], 0FFFFFFFFh", "mov     [rbp+arg.gp_offset], 10h", "mov     [rbp+arg.fp_offset], 30h ; '0'", "lea     rax, [rbp+arg_0]", "mov     [rbp+arg.overflow_arg_area], rax", "lea     rax, [rbp+var_B0]", "mov     [rbp+arg.reg_save_area], rax", "mov     eax, [rbp+action]", "test    eax, eax", "jz      short loc_17CD1"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "xor~eax,eax", "mov~[rbp+0],0", "mov~[rbp+0],0", "mov~[rbp+0],0", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "lea~rax,[rbp+0]", "mov~[rbp+0],rax", "mov~eax,[rbp+0]", "test~eax,eax", "jz~FOO"]], [0, 1, 49, 1, 0, 11, 1, 1, 0, 6, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 100h", "mov     [rbp+fd], edi", "mov     [rbp+action], esi", "mov     [rbp+var_A0], rdx", "mov     [rbp+var_98], rcx", "mov     [rbp+var_90], r8", "mov     [rbp+var_88], r9", "test    al, al", "jz      short loc_17C72"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~[rbp+0],rdx", "mov~[rbp+0],rcx", "mov~[rbp+0],r8", "mov~[rbp+0],r9", "test~al,al", "jz~FOO"]], [0, 0, 48, 0, 0, 8, 0, 0, 1, 6, 0.0, ["movaps  [rbp+var_80], xmm0", "movaps  [rbp+var_70], xmm1", "movaps  [rbp+var_60], xmm2", "movaps  [rbp+var_50], xmm3", "movaps  [rbp+var_40], xmm4", "movaps  [rbp+var_30], xmm5", "movaps  [rbp+var_20], xmm6", "movaps  [rbp+var_10], xmm7"], ["movaps~[rbp+0],xmm0", "movaps~[rbp+0],xmm1", "movaps~[rbp+0],xmm2", "movaps~[rbp+0],xmm3", "movaps~[rbp+0],xmm4", "movaps~[rbp+0],xmm5", "movaps~[rbp+0],xmm6", "movaps~[rbp+0],xmm7"]], [0, 0, 2, 0, 0, 4, 1, 1, 5, 1, 0.03996598639455782, ["mov     eax, [rbp+result]", "mov     rcx, [rbp+var_B8]", "xor     rcx, fs:28h", "jz      short locret_17F6B"], ["mov~eax,[rbp+0]", "mov~rcx,[rbp+0]", "xor~rcx,<TAG>", "jz~FOO"]], [0, 0, 3, 0, 0, 1, 0, 0, 6, 2, 0.04336734693877551, ["nop"], ["nop"]], [1, 0, 16, 0, 0, 2, 0, 1, 8, 4, 0.015306122448979591, ["cmp     eax, 1", "jz      short loc_17E46"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 4, 0, 1, 11, 0, 1, 12, 3, 0.011904761904761904, ["mov     rax, [rax]", "mov     [rbp+p], rax", "mov     rdx, [rbp+p]", "mov     ecx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, ecx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "nop"], ["mov~rax,<TAG>", "mov~[rbp+0],rax", "mov~rdx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,ecx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "nop"]], [1, 0, 14, 0, 0, 2, 0, 1, 9, 6, 0.013605442176870748, ["cmp     eax, 1", "jg      loc_17E6B"], ["cmp~eax,0", "jg~FOO"]], [1, 0, 4, 0, 1, 8, 0, 2, 5, 3, 0.026077097505668934, ["mov     edx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, edx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "jmp     loc_17F4D"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [1, 0, 4, 0, 1, 11, 0, 2, 10, 3, 0.016439909297052153, ["mov     eax, [rax]", "mov     [rbp+x], eax", "mov     edx, [rbp+x]", "mov     ecx, [rbp+action]", "mov     eax, [rbp+fd]", "mov     esi, ecx; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "jmp     short loc_17F4D"], ["mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~edx,[rbp+0]", "mov~ecx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,ecx", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "jmp~FOO"]], [0, 0, 13, 0, 0, 2, 1, 1, 10, 6, 0.00977891156462585, ["test    eax, eax", "jz      loc_17E6B"], ["test~eax,eax", "jz~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_17EDB"], ["jmp~FOO"]], [1, 0, 19, 0, 0, 2, 0, 1, 8, 6, 0.02806122448979592, ["cmp     eax, 8", "jz      loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 8, 0, 0, 1, 0, 1, 11, 6, 0.006802721088435374, ["jmp     loc_17EDB"], ["jmp~FOO"]], [1, 0, 15, 0, 0, 2, 0, 1, 10, 4, 0.012471655328798185, ["cmp     eax, 9", "jz      short loc_17E46"], ["cmp~eax,0", "jz~FOO"]], [1, 0, 18, 0, 0, 2, 0, 1, 9, 5, 0.02565192743764172, ["cmp     eax, 8", "jg      short loc_17DF6"], ["cmp~eax,0", "jg~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 13, 0, 0, 2, 0, 1, 10, 6, 0.011479591836734693, ["cmp     eax, 4", "jz      short loc_17E6B"], ["cmp~eax,0", "jz~FOO"]], [0, 0, 0, 0, 1, 1, 0, 1, 6, -1, 0.0, ["call    ___stack_chk_fail"], ["call~FOO"]]], "func_feature": [6, 5, 47, 14, 50, 76, 2, 192, 0.02009, 1, 9], "succs": [[3], [0, 10], [37], [8, 2], [23], [24, 4], [10, 11], [21, 6], [37], [40], [16, 9], [39, 15], [34], [12], [12], [17, 10], [40], [18, 10], [3], [22, 39], [19], [26, 10], [25, 7], [34], [23], [28, 39], [27, 39], [3, 39], [43, 36], [13, 14], [20, 29], [5, 30], [33, 31], [31], [49, 47], [34], [38, 39], [35], [41, 10], [35], [35], [42, 10], [3], [10, 46], [3], [1, 39], [48, 45], [], [10, 44], []], "fname": "rpl_fcntl", "n_num": 50}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 1, 0, 1, 1, 15, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+target], esi", "mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, 0; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "mov     eax, [rbp+result]", "leave", "retn"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [1, 0, 1, 0, 1, 0, 3, 15, 0.0, 0, 1], "succs": [[]], "fname": "rpl_fcntl_DUPFD", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 7, 0, 1, 8, 0, 2, 0, 0, 0.045454545454545456, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "js      short loc_18020"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 9, 0, 1, 4, 0, 2, 2, 3, 0.030303030303030304, ["call    ___errno_location", "mov     eax, [rax]", "cmp     eax, 16h", "jz      short loc_17FEA"], ["call~FOO", "mov~eax,<TAG>", "cmp~eax,0", "jz~FOO"]], [3, 0, 10, 0, 1, 9, 0, 1, 1, 3, 0.030303030303030304, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, 406h; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+result], eax", "cmp     [rbp+result], 0", "jns     short loc_17FDE"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [0, 1, 12, 1, 0, 8, 1, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 20h", "mov     [rbp+fd], edi", "mov     [rbp+target], esi", "mov     eax, cs:have_dupfd_cloexec_3019", "test    eax, eax", "js      short loc_1800E"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,<STR>", "mov~[rbp+0],edi", "mov~[rbp+0],esi", "mov~eax,<TAG>", "test~eax,eax", "js~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 2, 1, 0.26515151515151514, ["cmp     [rbp+result], 0", "js      short loc_18097"], ["cmp~[rbp+0],0", "js~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 2, 2, 0.06818181818181818, ["mov     cs:have_dupfd_cloexec_3019, 1", "jmp     short loc_18020"], ["mov~<TAG>,0", "jmp~FOO"]], [1, 0, 6, 0, 0, 2, 0, 1, 4, 2, 0.0, ["mov     cs:have_dupfd_cloexec_3019, 0FFFFFFFFh", "jmp     short loc_18020"], ["mov~<TAG>,0", "jmp~FOO"]], [0, 0, 6, 0, 1, 6, 0, 1, 1, 2, 0.045454545454545456, ["mov     edx, [rbp+target]", "mov     eax, [rbp+fd]", "mov     esi, edx; target", "mov     edi, eax; fd", "call    rpl_fcntl_DUPFD", "mov     [rbp+result], eax"], ["mov~edx,[rbp+0]", "mov~eax,[rbp+0]", "mov~esi,edx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax"]], [3, 0, 3, 0, 1, 8, 0, 2, 4, 2, 0.13636363636363635, ["mov     eax, [rbp+result]", "mov     esi, 1; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "mov     [rbp+flags], eax", "cmp     [rbp+flags], 0", "js      short loc_1806F"], ["mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 4, 0, 0, 3, 0, 1, 3, 1, 0.18181818181818182, ["mov     eax, cs:have_dupfd_cloexec_3019", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_18097"], ["mov~eax,<TAG>", "cmp~eax,0", "jnz~FOO"]], [1, 0, 1, 0, 3, 11, 0, 3, 5, 1, 0.003787878787878788, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+saved_errno], eax", "mov     eax, [rbp+result]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+saved_errno]", "mov     [rdx], eax", "mov     [rbp+result], 0FFFFFFFFh"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~[rbp+0],0"]], [4, 0, 2, 0, 1, 10, 1, 2, 5, 1, 0.003787878787878788, ["mov     eax, [rbp+flags]", "or      eax, 1", "mov     edx, eax", "mov     eax, [rbp+result]", "mov     esi, 2; cmd", "mov     edi, eax; fd", "mov     eax, 0", "call    _fcntl", "cmp     eax, 0FFFFFFFFh", "jnz     short loc_18097"], ["mov~eax,[rbp+0]", "or~eax,0", "mov~edx,eax", "mov~eax,[rbp+0]", "mov~esi,0", "mov~edi,eax", "mov~eax,0", "call~FOO", "cmp~eax,0", "jnz~FOO"]], [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0.0, ["mov     eax, [rbp+result]", "leave", "retn"], ["mov~eax,[rbp+0]", "leave", "retn"]]], "func_feature": [9, 2, 18, 0, 13, 20, 1, 76, 0.06235, 1, 1], "succs": [[4, 6], [0, 5], [1, 5], [2, 7], [9, 12], [4], [4], [4], [10, 11], [8, 12], [12], [10, 12], []], "fname": "rpl_fcntl_DUPFD_CLOEXEC", "n_num": 13}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 3, 1, 0, 3, 0, 1, 0, 0, 0.05158730158730158, ["sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_180C9"], ["sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [1, 0, 7, 0, 0, 6, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 5Ah ; 'Z'", "jg      short loc_180BA"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jg~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.07539682539682539, ["mov     eax, 1", "jmp     short loc_180CE"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 5, 0, 0, 2, 0, 1, 1, 2, 0.06746031746031744, ["cmp     eax, 41h ; 'A'", "jge     short loc_180C2"], ["cmp~eax,0", "jge~FOO"]], [0, 0, 2, 0, 0, 1, 0, 1, 3, 2, 0.023809523809523808, ["jmp     short loc_180C2"], ["jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.04365079365079365, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 4, 1, 0, 3, 0, 1, 2, 2, 0.07142857142857142, ["sub     eax, 30h ; '0'", "cmp     eax, 9", "ja      short loc_180C9"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 6, 0, 8, 11, 0, 20, 0.04167, 0, 2], "succs": [[2, 6], [0, 3], [5], [2, 7], [2], [], [5], [4, 6]], "fname": "c_isalnum", "n_num": 8}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 4, 0, 0, 2, 0, 1, 0, 0, 0.1, ["cmp     eax, 5Ah ; 'Z'", "jle     short loc_180EC"], ["cmp~eax,0", "jle~FOO"]], [1, 0, 5, 0, 0, 6, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 41h ; 'A'", "jl      short loc_180F3"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jl~FOO"]], [1, 1, 3, 1, 0, 3, 0, 1, 2, 2, 0.05, ["sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_180F3"], ["sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_180F8"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 4, 0, 6, 8, 0, 16, 0.05, 0, 1], "succs": [[2, 3], [0, 4], [3, 4], [5], [5], []], "fname": "c_isalpha", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_18118"], ["mov~eax,0", "jmp~FOO"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "add     eax, 0", "cmp     eax, 7Fh", "ja      short loc_18113"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "add~eax,0", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "c_isascii", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.125, ["mov     eax, 1", "jmp     short loc_18139"], ["mov~eax,0", "jmp~FOO"]], [0, 1, 4, 0, 0, 5, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "cmp     [rbp+c], 20h ; ' '", "jz      short loc_1812D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "cmp~[rbp+0],<STR>", "jz~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 1, 2, 0.08333333333333333, ["cmp     [rbp+c], 9", "jnz     short loc_18134"], ["cmp~[rbp+0],0", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 0, 0, 0, 3, 1, 0, 2, 0, 0.0, ["and     eax, 1", "pop     rbp", "retn"], ["and~eax,0", "pop~rbp", "retn"]]], "func_feature": [0, 1, 3, 0, 5, 6, 0, 13, 0.05, 0, 0], "succs": [[4], [0, 2], [0, 3], [4], []], "fname": "c_isblank", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_18162"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 5, 0, 0, 6, 1, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "test    eax, eax", "js      short loc_1815D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "test~eax,eax", "js~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 1, 0, 0.1, ["cmp     eax, 1Fh", "jle     short loc_18156"], ["cmp~eax,0", "jle~FOO"]], [1, 0, 3, 0, 0, 2, 0, 1, 2, 0, 0.05, ["cmp     eax, 7Fh", "jnz     short loc_1815D"], ["cmp~eax,0", "jnz~FOO"]]], "func_feature": [0, 1, 4, 0, 6, 8, 0, 15, 0.05, 0, 0], "succs": [[], [0], [0], [2, 4], [1, 5], [1, 2]], "fname": "c_iscntrl", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_18182"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 30h ; '0'", "cmp     eax, 9", "ja      short loc_1817D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[], [0], [0], [1, 2]], "fname": "c_isdigit", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_181A2"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [2, 0, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 21h ; '!'", "cmp     eax, 5Dh ; ']'", "ja      short loc_1819D"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,0", "ja~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[], [0], [0], [1, 2]], "fname": "c_isgraph", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_181C2"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_181BD"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "c_islower", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_181E2"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 20h ; ' '", "cmp     eax, 5Eh ; '^'", "ja      short loc_181DD"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,<STR>", "cmp~eax,0", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "c_isprint", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0.013888888888888888, ["jmp     short loc_18214"], ["jmp~FOO"]], [2, 0, 4, 1, 0, 3, 0, 1, 2, 2, 0.041666666666666664, ["sub     eax, 21h ; '!'", "cmp     eax, 0Eh", "ja      short loc_1821B"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 0.05555555555555555, ["mov     eax, 1", "jmp     short loc_18220"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0.041666666666666664, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 5, 0, 0, 2, 0, 1, 1, 2, 0.048611111111111105, ["cmp     eax, 5Bh ; '['", "jl      short loc_1821B"], ["cmp~eax,0", "jl~FOO"]], [1, 0, 9, 0, 0, 6, 0, 1, 0, 3, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 40h ; '@'", "jg      short loc_18202"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jg~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 2, 2, 0.041666666666666664, ["cmp     eax, 60h ; '`'", "jle     short loc_18214"], ["cmp~eax,0", "jle~FOO"]], [2, 0, 3, 1, 0, 3, 0, 1, 3, 2, 0.013888888888888888, ["sub     eax, 7Bh ; '{'", "cmp     eax, 3", "ja      short loc_1821B"], ["sub~eax,0", "cmp~eax,0", "ja~FOO"]], [0, 1, 5, 0, 0, 2, 0, 1, 1, 2, 0.048611111111111105, ["cmp     eax, 3Ah ; ':'", "jge     short loc_18214"], ["cmp~eax,<STR>", "jge~FOO"]]], "func_feature": [0, 0, 8, 0, 10, 15, 0, 24, 0.03056, 0, 2], "succs": [[3], [0, 4], [], [2], [2], [4, 7], [9, 5], [8, 3], [3, 4], [1, 3]], "fname": "c_ispunct", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.07500000000000001, ["mov     eax, 1", "jmp     short loc_18247"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 4, 0, 0, 2, 0, 1, 1, 2, 0.1, ["cmp     eax, 0Dh", "jle     short loc_1823B"], ["cmp~eax,0", "jle~FOO"]], [0, 1, 3, 0, 0, 2, 0, 1, 2, 2, 0.05, ["cmp     eax, 20h ; ' '", "jnz     short loc_18242"], ["cmp~eax,<STR>", "jnz~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.07500000000000001, ["mov     eax, 0"], ["mov~eax,0"]], [1, 0, 5, 0, 0, 6, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "cmp     eax, 9", "jl      short loc_18242"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "cmp~eax,0", "jl~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 4, 0, 6, 8, 0, 15, 0.05, 0, 0], "succs": [[5], [0, 2], [0, 3], [5], [1, 3], []], "fname": "c_isspace", "n_num": 6}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, 1", "jmp     short loc_18267"], ["mov~eax,0", "jmp~FOO"]], [1, 1, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 41h ; 'A'", "cmp     eax, 19h", "ja      short loc_18262"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, 0"], ["mov~eax,0"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 12, 0.04167, 0, 1], "succs": [[3], [0, 2], [3], []], "fname": "c_isupper", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 1, 4, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 30h ; '0'; switch 55 cases", "cmp     eax, 36h ; '6'", "ja      short loc_182A5; jumptable 000000000001829C default case"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [1, 0, 1, 0, 0, 2, 0, 1, 0, 1, 0.041666666666666664, ["mov     eax, 1; jumptable 000000000001829C cases 48-57,65-70,97-102", "jmp     short loc_182AA"], ["mov~eax,0", "jmp~FOO"]], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0.125, ["mov     eax, 0; jumptable 000000000001829C default case"], ["mov~eax,0"]], [0, 0, 3, 1, 0, 8, 0, 1, 0, 2, 0.08333333333333333, ["mov     eax, eax", "lea     rdx, ds:0[rax*4]", "lea     rax, off_1B9C4", "mov     eax, [rdx+rax]", "movsxd  rdx, eax", "lea     rax, off_1B9C4", "add     rax, rdx", "jmp     rax; switch jump"], ["mov~eax,eax", "lea~rdx,<TAG>", "lea~rax,<TAG>", "mov~eax,<TAG>", "movsxd~rdx,eax", "lea~rax,<TAG>", "add~rax,rdx", "jmp~rax"]]], "func_feature": [0, 0, 3, 0, 5, 6, 0, 20, 0.05, 1, 2], "succs": [[3, 4], [], [1], [1], [2, 3]], "fname": "c_isxdigit", "n_num": 5}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 0.08333333333333333, ["mov     eax, [rbp+c]", "add     eax, 20h ; ' '", "jmp     short loc_182C9"], ["mov~eax,[rbp+0]", "add~eax,<STR>", "jmp~FOO"]], [1, 1, 3, 1, 0, 7, 0, 1, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 41h ; 'A'", "cmp     eax, 19h", "ja      short loc_182C6"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0.08333333333333333, ["mov     eax, [rbp+c]"], ["mov~eax,[rbp+0]"]]], "func_feature": [0, 0, 2, 0, 4, 4, 2, 13, 0.04167, 0, 2], "succs": [[2], [0, 3], [], [2]], "fname": "c_tolower", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0.0, ["pop     rbp", "retn"], ["pop~rbp", "retn"]], [0, 1, 1, 1, 0, 3, 0, 1, 1, 0, 0.08333333333333333, ["mov     eax, [rbp+c]", "sub     eax, 20h ; ' '", "jmp     short loc_182E8"], ["mov~eax,[rbp+0]", "sub~eax,<STR>", "jmp~FOO"]], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0.08333333333333333, ["mov     eax, [rbp+c]"], ["mov~eax,[rbp+0]"]], [1, 1, 3, 1, 0, 7, 0, 1, 0, 0, 0.0, ["push    rbp", "mov     rbp, rsp", "mov     [rbp+c], edi", "mov     eax, [rbp+c]", "sub     eax, 61h ; 'a'", "cmp     eax, 19h", "ja      short loc_182E5"], ["push~rbp", "mov~rbp,rsp", "mov~[rbp+0],edi", "mov~eax,[rbp+0]", "sub~eax,0", "cmp~eax,<STR>", "ja~FOO"]]], "func_feature": [0, 0, 2, 0, 4, 4, 0, 13, 0.04167, 0, 2], "succs": [[], [0], [0], [1, 2]], "fname": "c_toupper", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0.048611111111111105, ["mov     rax, [rbp+fp]"], ["mov~rax,[rbp+0]"]], [2, 0, 9, 1, 1, 13, 0, 2, 0, 2, 0.0, ["push    rbp", "mov     rbp, rsp", "sub     rsp, 30h", "mov     [rbp+file], rdi", "mov     [rbp+mode], rsi", "mov     rdx, [rbp+mode]", "mov     rax, [rbp+file]", "mov     rsi, rdx; modes", "mov     rdi, rax; filename", "call    _fopen", "mov     [rbp+fp], rax", "cmp     [rbp+fp], 0", "jz      loc_183D0"], ["push~rbp", "mov~rbp,rsp", "sub~rsp,0", "mov~[rbp+0],rdi", "mov~[rbp+0],rsi", "mov~rdx,[rbp+0]", "mov~rax,[rbp+0]", "mov~rsi,rdx", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jz~FOO"]], [1, 0, 8, 0, 1, 6, 0, 2, 1, 2, 0.08333333333333333, ["mov     rax, [rbp+fp]", "mov     rdi, rax; stream", "call    _fileno", "mov     [rbp+fd], eax", "cmp     [rbp+fd], 0", "js      loc_183D0"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "js~FOO"]], [1, 0, 7, 0, 0, 2, 0, 1, 2, 2, 0.1388888888888889, ["cmp     [rbp+fd], 2", "jg      loc_183D0"], ["cmp~[rbp+0],0", "jg~FOO"]], [1, 0, 3, 0, 1, 8, 0, 2, 5, 2, 0.027777777777777776, ["mov     rdx, [rbp+mode]", "mov     eax, [rbp+f]", "mov     rsi, rdx; modes", "mov     edi, eax; fd", "call    _fdopen", "mov     [rbp+fp], rax", "cmp     [rbp+fp], 0", "jnz     short loc_183D0"], ["mov~rdx,[rbp+0]", "mov~eax,[rbp+0]", "mov~rsi,rdx", "mov~edi,eax", "call~FOO", "mov~[rbp+0],rax", "cmp~[rbp+0],0", "jnz~FOO"]], [0, 0, 4, 0, 1, 5, 1, 2, 4, 2, 0.125, ["mov     rax, [rbp+fp]", "mov     rdi, rax; fp", "call    rpl_fclose", "test    eax, eax", "jnz     short loc_183A8"], ["mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "test~eax,eax", "jnz~FOO"]], [1, 0, 6, 0, 1, 6, 0, 1, 3, 2, 0.16666666666666666, ["mov     eax, [rbp+fd]", "mov     edi, eax; fd", "call    dup_safer", "mov     [rbp+f], eax", "cmp     [rbp+f], 0", "jns     short loc_1837C"], ["mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "mov~[rbp+0],eax", "cmp~[rbp+0],0", "jns~FOO"]], [1, 0, 1, 0, 3, 12, 0, 4, 5, 1, 0.020833333333333332, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e_0], eax", "mov     eax, [rbp+f]", "mov     edi, eax; fd", "call    _close", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e_0]", "mov     [rdx], eax", "mov     eax, 0", "jmp     short locret_183D4"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~eax,[rbp+0]", "mov~edi,eax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0.0, ["leave", "retn"], ["leave", "retn"]], [1, 0, 1, 0, 3, 12, 0, 4, 4, 1, 0.013888888888888888, ["call    ___errno_location", "mov     eax, [rax]", "mov     [rbp+e], eax", "mov     rax, [rbp+fp]", "mov     rdi, rax; fp", "call    rpl_fclose", "call    ___errno_location", "mov     rdx, rax", "mov     eax, [rbp+e]", "mov     [rdx], eax", "mov     eax, 0", "jmp     short locret_183D4"], ["call~FOO", "mov~eax,<TAG>", "mov~[rbp+0],eax", "mov~rax,[rbp+0]", "mov~rdi,rax", "call~FOO", "call~FOO", "mov~rdx,rax", "mov~eax,[rbp+0]", "mov~<TAG>,eax", "mov~eax,0", "jmp~FOO"]]], "func_feature": [11, 1, 18, 0, 10, 15, 1, 67, 0.0625, 0, 1], "succs": [[8], [0, 2], [0, 3], [0, 6], [0, 7], [4, 7], [9, 5], [8], [], [8]], "fname": "fopen_safer", "n_num": 10}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0.16666666666666666, ["xor     ebx, ebx", "nop     dword ptr [rax+rax+00000000h]"], ["xor~ebx,ebx", "nop~[word ptr [rax+0]"]], [2, 0, 3, 2, 1, 17, 1, 2, 0, 1, 0.0, ["push    r15", "push    r14", "mov     r15, rdx", "push    r13", "push    r12", "lea     r12, __frame_dummy_init_array_entry", "push    rbp", "lea     rbp, __do_global_dtors_aux_fini_array_entry", "push    rbx", "mov     r13d, edi", "mov     r14, rsi", "sub     rbp, r12", "sub     rsp, 8", "sar     rbp, 3", "call    _init_proc", "test    rbp, rbp", "jz      short loc_18436"], ["push~r15", "push~r14", "mov~r15,rdx", "push~r13", "push~r12", "lea~r12,<TAG>", "push~rbp", "lea~rbp,<TAG>", "push~rbx", "mov~r13d,edi", "mov~r14,rsi", "sub~rbp,r12", "sub~rsp,0", "sar~rbp,0", "call~FOO", "test~rbp,rbp", "jz~FOO"]], [1, 0, 2, 1, 1, 7, 0, 2, 2, 1, 0.16666666666666666, ["mov     rdx, r15", "mov     rsi, r14", "mov     edi, r13d", "call    qword ptr [r12+rbx*8]", "add     rbx, 1", "cmp     rbp, rbx", "jnz     short loc_18420"], ["mov~rdx,r15", "mov~rsi,r14", "mov~edi,r13d", "call~<TAG>", "add~rbx,0", "cmp~rbp,rbx", "jnz~FOO"]], [1, 0, 0, 1, 0, 8, 0, 0, 1, 0, 0.0, ["add     rsp, 8", "pop     rbx", "pop     rbp", "pop     r12", "pop     r13", "pop     r14", "pop     r15", "retn"], ["add~rsp,0", "pop~rbx", "pop~rbp", "pop~r12", "pop~r13", "pop~r14", "pop~r15", "retn"]]], "func_feature": [2, 2, 4, 0, 4, 5, 0, 34, 0.08333, 2, 4], "succs": [[2], [0, 3], [2, 3], []], "fname": "__libc_csu_init", "n_num": 4}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["rep retn"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__libc_csu_fini", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 1, 0, 0, 3, 1, 1, 0, 0, 0.0, ["mov     rdx, cs:__dso_handle", "xor     esi, esi", "jmp     ___cxa_atexit"], ["mov~rdx,<TAG>", "xor~esi,esi", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 1, 1, 0, 2, 1, 1, 3, 0.0, 1, 0], "succs": [[1], []], "fname": "atexit", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["mov     rdx, rsi; Alternative name is '__stat'", "mov     rsi, rdi; filename", "mov     edi, 1; ver", "jmp     ___xstat"], ["mov~rdx,rsi", "mov~rsi,rdi", "mov~edi,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 0, 1, 0, 2, 1, 13, 4, 0.0, 0, 0], "succs": [[1], []], "fname": "stat_0", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["mov     rdx, rsi; Alternative name is '__fstat'", "mov     esi, edi; fildes", "mov     edi, 1; ver", "jmp     ___fxstat"], ["mov~rdx,rsi", "mov~esi,edi", "mov~edi,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 0, 1, 0, 2, 1, 5, 4, 0.0, 0, 0], "succs": [[1], []], "fname": "fstat", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 4, 0, 1, 0, 0, 0.0, ["mov     rdx, rsi; Alternative name is '__lstat'", "mov     rsi, rdi; filename", "mov     edi, 1; ver", "jmp     ___lxstat"], ["mov~rdx,rsi", "mov~rsi,rdi", "mov~edi,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 0, 1, 0, 2, 1, 13, 4, 0.0, 0, 0], "succs": [[1], []], "fname": "lstat", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[1, 0, 1, 0, 0, 6, 0, 1, 0, 0, 0.0, ["mov     r8d, ecx; flag", "mov     rcx, rdx; stat_buf", "mov     rdx, rsi; filename", "mov     esi, edi; fildes", "mov     edi, 1; ver", "jmp     ___fxstatat"], ["mov~r8d,ecx", "mov~rcx,rdx", "mov~rdx,rsi", "mov~esi,edi", "mov~edi,0", "jmp~FOO"]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, [], []]], "func_feature": [0, 0, 1, 0, 2, 1, 6, 6, 0.0, 0, 0], "succs": [[1], []], "fname": "fstatat", "n_num": 2}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 2, 0, 2, 1, 9, 1, 1, 0, 0, 0.0, ["sub     rsp, 18h; Alternative name is '__mknod'", "lea     rcx, [rsp+18h+dev]; dev", "mov     [rsp+18h+dev], rdx", "mov     edx, esi; mode", "mov     rsi, rdi; path", "xor     edi, edi; ver", "call    ___xmknod", "add     rsp, 18h", "retn"], ["sub~rsp,<STR>", "lea~rcx,[rsp+0]", "mov~[rsp+0],rdx", "mov~edx,esi", "mov~rsi,rdi", "xor~edi,edi", "call~FOO", "add~rsp,<STR>", "retn"]]], "func_feature": [1, 1, 1, 0, 1, 0, 2, 9, 0.0, 0, 2], "succs": [[]], "fname": "mknod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[2, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0.0, ["sub     rsp, 8; _fini", "add     rsp, 8", "retn"], ["sub~rsp,0", "add~rsp,0", "retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 3, 0.0, 0, 2], "succs": [[]], "fname": "term_proc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getenv:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getenv", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __imp_free:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__imp_free", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn utimensat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "utimensat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn abort:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "abort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __errno_location:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__errno_location", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn unlink:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "unlink", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strncmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strncmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn _exit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "_exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strcpy:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __fpending:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__fpending", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mkdir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mkdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn unlinkat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "unlinkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn qsort:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "qsort", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn readlink:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "readlink", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fcntl:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fcntl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn clock_gettime:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "clock_gettime", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn write:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "write", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getpid:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getpid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fread_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fread_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn textdomain:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "textdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn pathconf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "pathconf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fclose:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fclose", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn opendir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "opendir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn bindtextdomain:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "bindtextdomain", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn stpcpy:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "stpcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn rmdir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "rmdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __ctype_get_mb_cur_max:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__ctype_get_mb_cur_max", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strlen:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strlen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __lxstat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__lxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn openat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "openat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __stack_chk_fail:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__stack_chk_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getuid:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getuid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getopt_long:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getopt_long", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mbrtowc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mbrtowc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn gettext:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "gettext", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strchr:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn printf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "printf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __fxstatat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__fxstatat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strrchr:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strrchr", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ftruncate:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ftruncate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn lseek:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "lseek", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn gettimeofday:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "gettimeofday", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __assert_fail:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__assert_fail", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memset:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memset", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn geteuid:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "geteuid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ioctl:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ioctl", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn canonicalize_file_name:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "canonicalize_file_name", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn close:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "close", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn rewinddir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "rewinddir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strspn:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strspn", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn closedir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "closedir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn posix_fadvise:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "posix_fadvise", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn read:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "read", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __libc_start_main:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 1, 0.0, 0, 0], "succs": [[]], "fname": "__libc_start_main", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memcmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fallocate:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fallocate", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fputs_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fputs_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn utimes:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "utimes", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn ferror_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "ferror_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn calloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "calloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn strcmp:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "strcmp", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn dirfd:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "dirfd", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fpathconf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fpathconf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fprintf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fprintf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn rpmatch:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "rpmatch", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn syscall:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "syscall", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mkfifo:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mkfifo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn umask:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "umask", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn memcpy:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "memcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn putchar_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "putchar_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __xmknod:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__xmknod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fileno:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fileno", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getgid:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getgid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __xstat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__xstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn readdir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "readdir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn putc_unlocked:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "putc_unlocked", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn malloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "malloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fflush:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fflush", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn nl_langinfo:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "nl_langinfo", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __fxstat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__fxstat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn lchown:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "lchown", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __freading:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__freading", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn realloc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "realloc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fdopen:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fdopen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn linkat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "linkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn setlocale:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "setlocale", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fchmod:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fchmod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn setvbuf:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "setvbuf", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn chmod:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "chmod", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mempcpy:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mempcpy", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn error:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "error", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn open:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "open", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fseeko:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fseeko", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fchown:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fchown", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fopen:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fopen", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn rename:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "rename", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fdopendir:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fdopendir", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn futimens:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "futimens", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn euidaccess:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "euidaccess", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __cxa_atexit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__cxa_atexit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getline:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getline", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn renameat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "renameat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getpagesize:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getpagesize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn explicit_bzero:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "explicit_bzero", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn getppid:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "getppid", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn exit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "exit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn fwrite:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "fwrite", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn mbsinit:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "mbsinit", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn symlinkat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "symlinkat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn iswprint:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "iswprint", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __imp___cxa_finalize:near ; weak"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__imp___cxa_finalize", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn futimesat:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "futimesat", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __ctype_b_loc:near"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 0, 1, 0.0, 0, 0], "succs": [[]], "fname": "__ctype_b_loc", "n_num": 1}
{"src": "/Users/eacials/projIoT/output/coreutils_8.31_x86_O0_cp.ida", "features": [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.0, ["extrn __gmon_start__:near ; weak"], ["retn"]]], "func_feature": [0, 0, 0, 0, 1, 0, 1, 1, 0.0, 0, 0], "succs": [[]], "fname": "__gmon_start__", "n_num": 1}
